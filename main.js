/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// node_modules/xml2js/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/xml2js/lib/defaults.js"(exports) {
    (function() {
      exports.defaults = {
        "0.1": {
          explicitCharkey: false,
          trim: true,
          normalize: true,
          normalizeTags: false,
          attrkey: "@",
          charkey: "#",
          explicitArray: false,
          ignoreAttrs: false,
          mergeAttrs: false,
          explicitRoot: false,
          validator: null,
          xmlns: false,
          explicitChildren: false,
          childkey: "@@",
          charsAsChildren: false,
          includeWhiteChars: false,
          async: false,
          strict: true,
          attrNameProcessors: null,
          attrValueProcessors: null,
          tagNameProcessors: null,
          valueProcessors: null,
          emptyTag: ""
        },
        "0.2": {
          explicitCharkey: false,
          trim: false,
          normalize: false,
          normalizeTags: false,
          attrkey: "$",
          charkey: "_",
          explicitArray: true,
          ignoreAttrs: false,
          mergeAttrs: false,
          explicitRoot: true,
          validator: null,
          xmlns: false,
          explicitChildren: false,
          preserveChildrenOrder: false,
          childkey: "$$",
          charsAsChildren: false,
          includeWhiteChars: false,
          async: false,
          strict: true,
          attrNameProcessors: null,
          attrValueProcessors: null,
          tagNameProcessors: null,
          valueProcessors: null,
          rootName: "root",
          xmldec: {
            "version": "1.0",
            "encoding": "UTF-8",
            "standalone": true
          },
          doctype: null,
          renderOpts: {
            "pretty": true,
            "indent": "  ",
            "newline": "\n"
          },
          headless: false,
          chunkSize: 1e4,
          emptyTag: "",
          cdata: false
        }
      };
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/Utility.js
var require_Utility = __commonJS({
  "node_modules/xmlbuilder/lib/Utility.js"(exports, module2) {
    (function() {
      var assign, getValue, isArray, isEmpty, isFunction, isObject, isPlainObject, slice = [].slice, hasProp = {}.hasOwnProperty;
      assign = function() {
        var i, key, len, source, sources, target;
        target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (isFunction(Object.assign)) {
          Object.assign.apply(null, arguments);
        } else {
          for (i = 0, len = sources.length; i < len; i++) {
            source = sources[i];
            if (source != null) {
              for (key in source) {
                if (!hasProp.call(source, key))
                  continue;
                target[key] = source[key];
              }
            }
          }
        }
        return target;
      };
      isFunction = function(val) {
        return !!val && Object.prototype.toString.call(val) === "[object Function]";
      };
      isObject = function(val) {
        var ref;
        return !!val && ((ref = typeof val) === "function" || ref === "object");
      };
      isArray = function(val) {
        if (isFunction(Array.isArray)) {
          return Array.isArray(val);
        } else {
          return Object.prototype.toString.call(val) === "[object Array]";
        }
      };
      isEmpty = function(val) {
        var key;
        if (isArray(val)) {
          return !val.length;
        } else {
          for (key in val) {
            if (!hasProp.call(val, key))
              continue;
            return false;
          }
          return true;
        }
      };
      isPlainObject = function(val) {
        var ctor, proto;
        return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === "function" && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);
      };
      getValue = function(obj) {
        if (isFunction(obj.valueOf)) {
          return obj.valueOf();
        } else {
          return obj;
        }
      };
      module2.exports.assign = assign;
      module2.exports.isFunction = isFunction;
      module2.exports.isObject = isObject;
      module2.exports.isArray = isArray;
      module2.exports.isEmpty = isEmpty;
      module2.exports.isPlainObject = isPlainObject;
      module2.exports.getValue = getValue;
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDOMImplementation.js
var require_XMLDOMImplementation = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDOMImplementation.js"(exports, module2) {
    (function() {
      var XMLDOMImplementation;
      module2.exports = XMLDOMImplementation = function() {
        function XMLDOMImplementation2() {
        }
        XMLDOMImplementation2.prototype.hasFeature = function(feature, version) {
          return true;
        };
        XMLDOMImplementation2.prototype.createDocumentType = function(qualifiedName, publicId, systemId) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLDOMImplementation2.prototype.createDocument = function(namespaceURI, qualifiedName, doctype) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLDOMImplementation2.prototype.createHTMLDocument = function(title) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLDOMImplementation2.prototype.getFeature = function(feature, version) {
          throw new Error("This DOM method is not implemented.");
        };
        return XMLDOMImplementation2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js
var require_XMLDOMErrorHandler = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js"(exports, module2) {
    (function() {
      var XMLDOMErrorHandler;
      module2.exports = XMLDOMErrorHandler = function() {
        function XMLDOMErrorHandler2() {
        }
        XMLDOMErrorHandler2.prototype.handleError = function(error) {
          throw new Error(error);
        };
        return XMLDOMErrorHandler2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDOMStringList.js
var require_XMLDOMStringList = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDOMStringList.js"(exports, module2) {
    (function() {
      var XMLDOMStringList;
      module2.exports = XMLDOMStringList = function() {
        function XMLDOMStringList2(arr) {
          this.arr = arr || [];
        }
        Object.defineProperty(XMLDOMStringList2.prototype, "length", {
          get: function() {
            return this.arr.length;
          }
        });
        XMLDOMStringList2.prototype.item = function(index) {
          return this.arr[index] || null;
        };
        XMLDOMStringList2.prototype.contains = function(str) {
          return this.arr.indexOf(str) !== -1;
        };
        return XMLDOMStringList2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDOMConfiguration.js
var require_XMLDOMConfiguration = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDOMConfiguration.js"(exports, module2) {
    (function() {
      var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;
      XMLDOMErrorHandler = require_XMLDOMErrorHandler();
      XMLDOMStringList = require_XMLDOMStringList();
      module2.exports = XMLDOMConfiguration = function() {
        function XMLDOMConfiguration2() {
          var clonedSelf;
          this.defaultParams = {
            "canonical-form": false,
            "cdata-sections": false,
            "comments": false,
            "datatype-normalization": false,
            "element-content-whitespace": true,
            "entities": true,
            "error-handler": new XMLDOMErrorHandler(),
            "infoset": true,
            "validate-if-schema": false,
            "namespaces": true,
            "namespace-declarations": true,
            "normalize-characters": false,
            "schema-location": "",
            "schema-type": "",
            "split-cdata-sections": true,
            "validate": false,
            "well-formed": true
          };
          this.params = clonedSelf = Object.create(this.defaultParams);
        }
        Object.defineProperty(XMLDOMConfiguration2.prototype, "parameterNames", {
          get: function() {
            return new XMLDOMStringList(Object.keys(this.defaultParams));
          }
        });
        XMLDOMConfiguration2.prototype.getParameter = function(name) {
          if (this.params.hasOwnProperty(name)) {
            return this.params[name];
          } else {
            return null;
          }
        };
        XMLDOMConfiguration2.prototype.canSetParameter = function(name, value) {
          return true;
        };
        XMLDOMConfiguration2.prototype.setParameter = function(name, value) {
          if (value != null) {
            return this.params[name] = value;
          } else {
            return delete this.params[name];
          }
        };
        return XMLDOMConfiguration2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/NodeType.js
var require_NodeType = __commonJS({
  "node_modules/xmlbuilder/lib/NodeType.js"(exports, module2) {
    (function() {
      module2.exports = {
        Element: 1,
        Attribute: 2,
        Text: 3,
        CData: 4,
        EntityReference: 5,
        EntityDeclaration: 6,
        ProcessingInstruction: 7,
        Comment: 8,
        Document: 9,
        DocType: 10,
        DocumentFragment: 11,
        NotationDeclaration: 12,
        Declaration: 201,
        Raw: 202,
        AttributeDeclaration: 203,
        ElementDeclaration: 204,
        Dummy: 205
      };
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLAttribute.js
var require_XMLAttribute = __commonJS({
  "node_modules/xmlbuilder/lib/XMLAttribute.js"(exports, module2) {
    (function() {
      var NodeType, XMLAttribute, XMLNode;
      NodeType = require_NodeType();
      XMLNode = require_XMLNode();
      module2.exports = XMLAttribute = function() {
        function XMLAttribute2(parent, name, value) {
          this.parent = parent;
          if (this.parent) {
            this.options = this.parent.options;
            this.stringify = this.parent.stringify;
          }
          if (name == null) {
            throw new Error("Missing attribute name. " + this.debugInfo(name));
          }
          this.name = this.stringify.name(name);
          this.value = this.stringify.attValue(value);
          this.type = NodeType.Attribute;
          this.isId = false;
          this.schemaTypeInfo = null;
        }
        Object.defineProperty(XMLAttribute2.prototype, "nodeType", {
          get: function() {
            return this.type;
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "ownerElement", {
          get: function() {
            return this.parent;
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "textContent", {
          get: function() {
            return this.value;
          },
          set: function(value) {
            return this.value = value || "";
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "namespaceURI", {
          get: function() {
            return "";
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "prefix", {
          get: function() {
            return "";
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "localName", {
          get: function() {
            return this.name;
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "specified", {
          get: function() {
            return true;
          }
        });
        XMLAttribute2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLAttribute2.prototype.toString = function(options) {
          return this.options.writer.attribute(this, this.options.writer.filterOptions(options));
        };
        XMLAttribute2.prototype.debugInfo = function(name) {
          name = name || this.name;
          if (name == null) {
            return "parent: <" + this.parent.name + ">";
          } else {
            return "attribute: {" + name + "}, parent: <" + this.parent.name + ">";
          }
        };
        XMLAttribute2.prototype.isEqualNode = function(node) {
          if (node.namespaceURI !== this.namespaceURI) {
            return false;
          }
          if (node.prefix !== this.prefix) {
            return false;
          }
          if (node.localName !== this.localName) {
            return false;
          }
          if (node.value !== this.value) {
            return false;
          }
          return true;
        };
        return XMLAttribute2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLNamedNodeMap.js
var require_XMLNamedNodeMap = __commonJS({
  "node_modules/xmlbuilder/lib/XMLNamedNodeMap.js"(exports, module2) {
    (function() {
      var XMLNamedNodeMap;
      module2.exports = XMLNamedNodeMap = function() {
        function XMLNamedNodeMap2(nodes) {
          this.nodes = nodes;
        }
        Object.defineProperty(XMLNamedNodeMap2.prototype, "length", {
          get: function() {
            return Object.keys(this.nodes).length || 0;
          }
        });
        XMLNamedNodeMap2.prototype.clone = function() {
          return this.nodes = null;
        };
        XMLNamedNodeMap2.prototype.getNamedItem = function(name) {
          return this.nodes[name];
        };
        XMLNamedNodeMap2.prototype.setNamedItem = function(node) {
          var oldNode;
          oldNode = this.nodes[node.nodeName];
          this.nodes[node.nodeName] = node;
          return oldNode || null;
        };
        XMLNamedNodeMap2.prototype.removeNamedItem = function(name) {
          var oldNode;
          oldNode = this.nodes[name];
          delete this.nodes[name];
          return oldNode || null;
        };
        XMLNamedNodeMap2.prototype.item = function(index) {
          return this.nodes[Object.keys(this.nodes)[index]] || null;
        };
        XMLNamedNodeMap2.prototype.getNamedItemNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLNamedNodeMap2.prototype.setNamedItemNS = function(node) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLNamedNodeMap2.prototype.removeNamedItemNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented.");
        };
        return XMLNamedNodeMap2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLElement.js
var require_XMLElement = __commonJS({
  "node_modules/xmlbuilder/lib/XMLElement.js"(exports, module2) {
    (function() {
      var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject, ref, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      ref = require_Utility(), isObject = ref.isObject, isFunction = ref.isFunction, getValue = ref.getValue;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      XMLAttribute = require_XMLAttribute();
      XMLNamedNodeMap = require_XMLNamedNodeMap();
      module2.exports = XMLElement = function(superClass) {
        extend(XMLElement2, superClass);
        function XMLElement2(parent, name, attributes) {
          var child, j, len, ref1;
          XMLElement2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing element name. " + this.debugInfo());
          }
          this.name = this.stringify.name(name);
          this.type = NodeType.Element;
          this.attribs = {};
          this.schemaTypeInfo = null;
          if (attributes != null) {
            this.attribute(attributes);
          }
          if (parent.type === NodeType.Document) {
            this.isRoot = true;
            this.documentObject = parent;
            parent.rootObject = this;
            if (parent.children) {
              ref1 = parent.children;
              for (j = 0, len = ref1.length; j < len; j++) {
                child = ref1[j];
                if (child.type === NodeType.DocType) {
                  child.name = this.name;
                  break;
                }
              }
            }
          }
        }
        Object.defineProperty(XMLElement2.prototype, "tagName", {
          get: function() {
            return this.name;
          }
        });
        Object.defineProperty(XMLElement2.prototype, "namespaceURI", {
          get: function() {
            return "";
          }
        });
        Object.defineProperty(XMLElement2.prototype, "prefix", {
          get: function() {
            return "";
          }
        });
        Object.defineProperty(XMLElement2.prototype, "localName", {
          get: function() {
            return this.name;
          }
        });
        Object.defineProperty(XMLElement2.prototype, "id", {
          get: function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLElement2.prototype, "className", {
          get: function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLElement2.prototype, "classList", {
          get: function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLElement2.prototype, "attributes", {
          get: function() {
            if (!this.attributeMap || !this.attributeMap.nodes) {
              this.attributeMap = new XMLNamedNodeMap(this.attribs);
            }
            return this.attributeMap;
          }
        });
        XMLElement2.prototype.clone = function() {
          var att, attName, clonedSelf, ref1;
          clonedSelf = Object.create(this);
          if (clonedSelf.isRoot) {
            clonedSelf.documentObject = null;
          }
          clonedSelf.attribs = {};
          ref1 = this.attribs;
          for (attName in ref1) {
            if (!hasProp.call(ref1, attName))
              continue;
            att = ref1[attName];
            clonedSelf.attribs[attName] = att.clone();
          }
          clonedSelf.children = [];
          this.children.forEach(function(child) {
            var clonedChild;
            clonedChild = child.clone();
            clonedChild.parent = clonedSelf;
            return clonedSelf.children.push(clonedChild);
          });
          return clonedSelf;
        };
        XMLElement2.prototype.attribute = function(name, value) {
          var attName, attValue;
          if (name != null) {
            name = getValue(name);
          }
          if (isObject(name)) {
            for (attName in name) {
              if (!hasProp.call(name, attName))
                continue;
              attValue = name[attName];
              this.attribute(attName, attValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            if (this.options.keepNullAttributes && value == null) {
              this.attribs[name] = new XMLAttribute(this, name, "");
            } else if (value != null) {
              this.attribs[name] = new XMLAttribute(this, name, value);
            }
          }
          return this;
        };
        XMLElement2.prototype.removeAttribute = function(name) {
          var attName, j, len;
          if (name == null) {
            throw new Error("Missing attribute name. " + this.debugInfo());
          }
          name = getValue(name);
          if (Array.isArray(name)) {
            for (j = 0, len = name.length; j < len; j++) {
              attName = name[j];
              delete this.attribs[attName];
            }
          } else {
            delete this.attribs[name];
          }
          return this;
        };
        XMLElement2.prototype.toString = function(options) {
          return this.options.writer.element(this, this.options.writer.filterOptions(options));
        };
        XMLElement2.prototype.att = function(name, value) {
          return this.attribute(name, value);
        };
        XMLElement2.prototype.a = function(name, value) {
          return this.attribute(name, value);
        };
        XMLElement2.prototype.getAttribute = function(name) {
          if (this.attribs.hasOwnProperty(name)) {
            return this.attribs[name].value;
          } else {
            return null;
          }
        };
        XMLElement2.prototype.setAttribute = function(name, value) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getAttributeNode = function(name) {
          if (this.attribs.hasOwnProperty(name)) {
            return this.attribs[name];
          } else {
            return null;
          }
        };
        XMLElement2.prototype.setAttributeNode = function(newAttr) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.removeAttributeNode = function(oldAttr) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getElementsByTagName = function(name) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getAttributeNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.setAttributeNS = function(namespaceURI, qualifiedName, value) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.removeAttributeNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getAttributeNodeNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.setAttributeNodeNS = function(newAttr) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.hasAttribute = function(name) {
          return this.attribs.hasOwnProperty(name);
        };
        XMLElement2.prototype.hasAttributeNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.setIdAttribute = function(name, isId) {
          if (this.attribs.hasOwnProperty(name)) {
            return this.attribs[name].isId;
          } else {
            return isId;
          }
        };
        XMLElement2.prototype.setIdAttributeNS = function(namespaceURI, localName, isId) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.setIdAttributeNode = function(idAttr, isId) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getElementsByTagName = function(tagname) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getElementsByClassName = function(classNames) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.isEqualNode = function(node) {
          var i, j, ref1;
          if (!XMLElement2.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.namespaceURI !== this.namespaceURI) {
            return false;
          }
          if (node.prefix !== this.prefix) {
            return false;
          }
          if (node.localName !== this.localName) {
            return false;
          }
          if (node.attribs.length !== this.attribs.length) {
            return false;
          }
          for (i = j = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
            if (!this.attribs[i].isEqualNode(node.attribs[i])) {
              return false;
            }
          }
          return true;
        };
        return XMLElement2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLCharacterData.js
var require_XMLCharacterData = __commonJS({
  "node_modules/xmlbuilder/lib/XMLCharacterData.js"(exports, module2) {
    (function() {
      var XMLCharacterData, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module2.exports = XMLCharacterData = function(superClass) {
        extend(XMLCharacterData2, superClass);
        function XMLCharacterData2(parent) {
          XMLCharacterData2.__super__.constructor.call(this, parent);
          this.value = "";
        }
        Object.defineProperty(XMLCharacterData2.prototype, "data", {
          get: function() {
            return this.value;
          },
          set: function(value) {
            return this.value = value || "";
          }
        });
        Object.defineProperty(XMLCharacterData2.prototype, "length", {
          get: function() {
            return this.value.length;
          }
        });
        Object.defineProperty(XMLCharacterData2.prototype, "textContent", {
          get: function() {
            return this.value;
          },
          set: function(value) {
            return this.value = value || "";
          }
        });
        XMLCharacterData2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLCharacterData2.prototype.substringData = function(offset, count) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData2.prototype.appendData = function(arg) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData2.prototype.insertData = function(offset, arg) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData2.prototype.deleteData = function(offset, count) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData2.prototype.replaceData = function(offset, count, arg) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData2.prototype.isEqualNode = function(node) {
          if (!XMLCharacterData2.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.data !== this.data) {
            return false;
          }
          return true;
        };
        return XMLCharacterData2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLCData.js
var require_XMLCData = __commonJS({
  "node_modules/xmlbuilder/lib/XMLCData.js"(exports, module2) {
    (function() {
      var NodeType, XMLCData, XMLCharacterData, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLCharacterData = require_XMLCharacterData();
      module2.exports = XMLCData = function(superClass) {
        extend(XMLCData2, superClass);
        function XMLCData2(parent, text) {
          XMLCData2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing CDATA text. " + this.debugInfo());
          }
          this.name = "#cdata-section";
          this.type = NodeType.CData;
          this.value = this.stringify.cdata(text);
        }
        XMLCData2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLCData2.prototype.toString = function(options) {
          return this.options.writer.cdata(this, this.options.writer.filterOptions(options));
        };
        return XMLCData2;
      }(XMLCharacterData);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLComment.js
var require_XMLComment = __commonJS({
  "node_modules/xmlbuilder/lib/XMLComment.js"(exports, module2) {
    (function() {
      var NodeType, XMLCharacterData, XMLComment, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLCharacterData = require_XMLCharacterData();
      module2.exports = XMLComment = function(superClass) {
        extend(XMLComment2, superClass);
        function XMLComment2(parent, text) {
          XMLComment2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing comment text. " + this.debugInfo());
          }
          this.name = "#comment";
          this.type = NodeType.Comment;
          this.value = this.stringify.comment(text);
        }
        XMLComment2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLComment2.prototype.toString = function(options) {
          return this.options.writer.comment(this, this.options.writer.filterOptions(options));
        };
        return XMLComment2;
      }(XMLCharacterData);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDeclaration.js
var require_XMLDeclaration = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDeclaration.js"(exports, module2) {
    (function() {
      var NodeType, XMLDeclaration, XMLNode, isObject, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isObject = require_Utility().isObject;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module2.exports = XMLDeclaration = function(superClass) {
        extend(XMLDeclaration2, superClass);
        function XMLDeclaration2(parent, version, encoding, standalone) {
          var ref;
          XMLDeclaration2.__super__.constructor.call(this, parent);
          if (isObject(version)) {
            ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
          }
          if (!version) {
            version = "1.0";
          }
          this.type = NodeType.Declaration;
          this.version = this.stringify.xmlVersion(version);
          if (encoding != null) {
            this.encoding = this.stringify.xmlEncoding(encoding);
          }
          if (standalone != null) {
            this.standalone = this.stringify.xmlStandalone(standalone);
          }
        }
        XMLDeclaration2.prototype.toString = function(options) {
          return this.options.writer.declaration(this, this.options.writer.filterOptions(options));
        };
        return XMLDeclaration2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDTDAttList.js
var require_XMLDTDAttList = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDTDAttList.js"(exports, module2) {
    (function() {
      var NodeType, XMLDTDAttList, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module2.exports = XMLDTDAttList = function(superClass) {
        extend(XMLDTDAttList2, superClass);
        function XMLDTDAttList2(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          XMLDTDAttList2.__super__.constructor.call(this, parent);
          if (elementName == null) {
            throw new Error("Missing DTD element name. " + this.debugInfo());
          }
          if (attributeName == null) {
            throw new Error("Missing DTD attribute name. " + this.debugInfo(elementName));
          }
          if (!attributeType) {
            throw new Error("Missing DTD attribute type. " + this.debugInfo(elementName));
          }
          if (!defaultValueType) {
            throw new Error("Missing DTD attribute default. " + this.debugInfo(elementName));
          }
          if (defaultValueType.indexOf("#") !== 0) {
            defaultValueType = "#" + defaultValueType;
          }
          if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
            throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. " + this.debugInfo(elementName));
          }
          if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
            throw new Error("Default value only applies to #FIXED or #DEFAULT. " + this.debugInfo(elementName));
          }
          this.elementName = this.stringify.name(elementName);
          this.type = NodeType.AttributeDeclaration;
          this.attributeName = this.stringify.name(attributeName);
          this.attributeType = this.stringify.dtdAttType(attributeType);
          if (defaultValue) {
            this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
          }
          this.defaultValueType = defaultValueType;
        }
        XMLDTDAttList2.prototype.toString = function(options) {
          return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDAttList2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDTDEntity.js
var require_XMLDTDEntity = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDTDEntity.js"(exports, module2) {
    (function() {
      var NodeType, XMLDTDEntity, XMLNode, isObject, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isObject = require_Utility().isObject;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module2.exports = XMLDTDEntity = function(superClass) {
        extend(XMLDTDEntity2, superClass);
        function XMLDTDEntity2(parent, pe, name, value) {
          XMLDTDEntity2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing DTD entity name. " + this.debugInfo(name));
          }
          if (value == null) {
            throw new Error("Missing DTD entity value. " + this.debugInfo(name));
          }
          this.pe = !!pe;
          this.name = this.stringify.name(name);
          this.type = NodeType.EntityDeclaration;
          if (!isObject(value)) {
            this.value = this.stringify.dtdEntityValue(value);
            this.internal = true;
          } else {
            if (!value.pubID && !value.sysID) {
              throw new Error("Public and/or system identifiers are required for an external entity. " + this.debugInfo(name));
            }
            if (value.pubID && !value.sysID) {
              throw new Error("System identifier is required for a public external entity. " + this.debugInfo(name));
            }
            this.internal = false;
            if (value.pubID != null) {
              this.pubID = this.stringify.dtdPubID(value.pubID);
            }
            if (value.sysID != null) {
              this.sysID = this.stringify.dtdSysID(value.sysID);
            }
            if (value.nData != null) {
              this.nData = this.stringify.dtdNData(value.nData);
            }
            if (this.pe && this.nData) {
              throw new Error("Notation declaration is not allowed in a parameter entity. " + this.debugInfo(name));
            }
          }
        }
        Object.defineProperty(XMLDTDEntity2.prototype, "publicId", {
          get: function() {
            return this.pubID;
          }
        });
        Object.defineProperty(XMLDTDEntity2.prototype, "systemId", {
          get: function() {
            return this.sysID;
          }
        });
        Object.defineProperty(XMLDTDEntity2.prototype, "notationName", {
          get: function() {
            return this.nData || null;
          }
        });
        Object.defineProperty(XMLDTDEntity2.prototype, "inputEncoding", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDTDEntity2.prototype, "xmlEncoding", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDTDEntity2.prototype, "xmlVersion", {
          get: function() {
            return null;
          }
        });
        XMLDTDEntity2.prototype.toString = function(options) {
          return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDEntity2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDTDElement.js
var require_XMLDTDElement = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDTDElement.js"(exports, module2) {
    (function() {
      var NodeType, XMLDTDElement, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module2.exports = XMLDTDElement = function(superClass) {
        extend(XMLDTDElement2, superClass);
        function XMLDTDElement2(parent, name, value) {
          XMLDTDElement2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing DTD element name. " + this.debugInfo());
          }
          if (!value) {
            value = "(#PCDATA)";
          }
          if (Array.isArray(value)) {
            value = "(" + value.join(",") + ")";
          }
          this.name = this.stringify.name(name);
          this.type = NodeType.ElementDeclaration;
          this.value = this.stringify.dtdElementValue(value);
        }
        XMLDTDElement2.prototype.toString = function(options) {
          return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDElement2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDTDNotation.js
var require_XMLDTDNotation = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDTDNotation.js"(exports, module2) {
    (function() {
      var NodeType, XMLDTDNotation, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module2.exports = XMLDTDNotation = function(superClass) {
        extend(XMLDTDNotation2, superClass);
        function XMLDTDNotation2(parent, name, value) {
          XMLDTDNotation2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing DTD notation name. " + this.debugInfo(name));
          }
          if (!value.pubID && !value.sysID) {
            throw new Error("Public or system identifiers are required for an external entity. " + this.debugInfo(name));
          }
          this.name = this.stringify.name(name);
          this.type = NodeType.NotationDeclaration;
          if (value.pubID != null) {
            this.pubID = this.stringify.dtdPubID(value.pubID);
          }
          if (value.sysID != null) {
            this.sysID = this.stringify.dtdSysID(value.sysID);
          }
        }
        Object.defineProperty(XMLDTDNotation2.prototype, "publicId", {
          get: function() {
            return this.pubID;
          }
        });
        Object.defineProperty(XMLDTDNotation2.prototype, "systemId", {
          get: function() {
            return this.sysID;
          }
        });
        XMLDTDNotation2.prototype.toString = function(options) {
          return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDNotation2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDocType.js
var require_XMLDocType = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDocType.js"(exports, module2) {
    (function() {
      var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isObject = require_Utility().isObject;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDNotation = require_XMLDTDNotation();
      XMLNamedNodeMap = require_XMLNamedNodeMap();
      module2.exports = XMLDocType = function(superClass) {
        extend(XMLDocType2, superClass);
        function XMLDocType2(parent, pubID, sysID) {
          var child, i, len, ref, ref1, ref2;
          XMLDocType2.__super__.constructor.call(this, parent);
          this.type = NodeType.DocType;
          if (parent.children) {
            ref = parent.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              if (child.type === NodeType.Element) {
                this.name = child.name;
                break;
              }
            }
          }
          this.documentObject = parent;
          if (isObject(pubID)) {
            ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;
          }
          if (sysID == null) {
            ref2 = [pubID, sysID], sysID = ref2[0], pubID = ref2[1];
          }
          if (pubID != null) {
            this.pubID = this.stringify.dtdPubID(pubID);
          }
          if (sysID != null) {
            this.sysID = this.stringify.dtdSysID(sysID);
          }
        }
        Object.defineProperty(XMLDocType2.prototype, "entities", {
          get: function() {
            var child, i, len, nodes, ref;
            nodes = {};
            ref = this.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              if (child.type === NodeType.EntityDeclaration && !child.pe) {
                nodes[child.name] = child;
              }
            }
            return new XMLNamedNodeMap(nodes);
          }
        });
        Object.defineProperty(XMLDocType2.prototype, "notations", {
          get: function() {
            var child, i, len, nodes, ref;
            nodes = {};
            ref = this.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              if (child.type === NodeType.NotationDeclaration) {
                nodes[child.name] = child;
              }
            }
            return new XMLNamedNodeMap(nodes);
          }
        });
        Object.defineProperty(XMLDocType2.prototype, "publicId", {
          get: function() {
            return this.pubID;
          }
        });
        Object.defineProperty(XMLDocType2.prototype, "systemId", {
          get: function() {
            return this.sysID;
          }
        });
        Object.defineProperty(XMLDocType2.prototype, "internalSubset", {
          get: function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        XMLDocType2.prototype.element = function(name, value) {
          var child;
          child = new XMLDTDElement(this, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          var child;
          child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.entity = function(name, value) {
          var child;
          child = new XMLDTDEntity(this, false, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.pEntity = function(name, value) {
          var child;
          child = new XMLDTDEntity(this, true, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.notation = function(name, value) {
          var child;
          child = new XMLDTDNotation(this, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.toString = function(options) {
          return this.options.writer.docType(this, this.options.writer.filterOptions(options));
        };
        XMLDocType2.prototype.ele = function(name, value) {
          return this.element(name, value);
        };
        XMLDocType2.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
        };
        XMLDocType2.prototype.ent = function(name, value) {
          return this.entity(name, value);
        };
        XMLDocType2.prototype.pent = function(name, value) {
          return this.pEntity(name, value);
        };
        XMLDocType2.prototype.not = function(name, value) {
          return this.notation(name, value);
        };
        XMLDocType2.prototype.up = function() {
          return this.root() || this.documentObject;
        };
        XMLDocType2.prototype.isEqualNode = function(node) {
          if (!XMLDocType2.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.name !== this.name) {
            return false;
          }
          if (node.publicId !== this.publicId) {
            return false;
          }
          if (node.systemId !== this.systemId) {
            return false;
          }
          return true;
        };
        return XMLDocType2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLRaw.js
var require_XMLRaw = __commonJS({
  "node_modules/xmlbuilder/lib/XMLRaw.js"(exports, module2) {
    (function() {
      var NodeType, XMLNode, XMLRaw, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLNode = require_XMLNode();
      module2.exports = XMLRaw = function(superClass) {
        extend(XMLRaw2, superClass);
        function XMLRaw2(parent, text) {
          XMLRaw2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing raw text. " + this.debugInfo());
          }
          this.type = NodeType.Raw;
          this.value = this.stringify.raw(text);
        }
        XMLRaw2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLRaw2.prototype.toString = function(options) {
          return this.options.writer.raw(this, this.options.writer.filterOptions(options));
        };
        return XMLRaw2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLText.js
var require_XMLText = __commonJS({
  "node_modules/xmlbuilder/lib/XMLText.js"(exports, module2) {
    (function() {
      var NodeType, XMLCharacterData, XMLText, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLCharacterData = require_XMLCharacterData();
      module2.exports = XMLText = function(superClass) {
        extend(XMLText2, superClass);
        function XMLText2(parent, text) {
          XMLText2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing element text. " + this.debugInfo());
          }
          this.name = "#text";
          this.type = NodeType.Text;
          this.value = this.stringify.text(text);
        }
        Object.defineProperty(XMLText2.prototype, "isElementContentWhitespace", {
          get: function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLText2.prototype, "wholeText", {
          get: function() {
            var next, prev, str;
            str = "";
            prev = this.previousSibling;
            while (prev) {
              str = prev.data + str;
              prev = prev.previousSibling;
            }
            str += this.data;
            next = this.nextSibling;
            while (next) {
              str = str + next.data;
              next = next.nextSibling;
            }
            return str;
          }
        });
        XMLText2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLText2.prototype.toString = function(options) {
          return this.options.writer.text(this, this.options.writer.filterOptions(options));
        };
        XMLText2.prototype.splitText = function(offset) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLText2.prototype.replaceWholeText = function(content) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        return XMLText2;
      }(XMLCharacterData);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLProcessingInstruction.js
var require_XMLProcessingInstruction = __commonJS({
  "node_modules/xmlbuilder/lib/XMLProcessingInstruction.js"(exports, module2) {
    (function() {
      var NodeType, XMLCharacterData, XMLProcessingInstruction, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLCharacterData = require_XMLCharacterData();
      module2.exports = XMLProcessingInstruction = function(superClass) {
        extend(XMLProcessingInstruction2, superClass);
        function XMLProcessingInstruction2(parent, target, value) {
          XMLProcessingInstruction2.__super__.constructor.call(this, parent);
          if (target == null) {
            throw new Error("Missing instruction target. " + this.debugInfo());
          }
          this.type = NodeType.ProcessingInstruction;
          this.target = this.stringify.insTarget(target);
          this.name = this.target;
          if (value) {
            this.value = this.stringify.insValue(value);
          }
        }
        XMLProcessingInstruction2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLProcessingInstruction2.prototype.toString = function(options) {
          return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));
        };
        XMLProcessingInstruction2.prototype.isEqualNode = function(node) {
          if (!XMLProcessingInstruction2.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.target !== this.target) {
            return false;
          }
          return true;
        };
        return XMLProcessingInstruction2;
      }(XMLCharacterData);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDummy.js
var require_XMLDummy = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDummy.js"(exports, module2) {
    (function() {
      var NodeType, XMLDummy, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module2.exports = XMLDummy = function(superClass) {
        extend(XMLDummy2, superClass);
        function XMLDummy2(parent) {
          XMLDummy2.__super__.constructor.call(this, parent);
          this.type = NodeType.Dummy;
        }
        XMLDummy2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLDummy2.prototype.toString = function(options) {
          return "";
        };
        return XMLDummy2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLNodeList.js
var require_XMLNodeList = __commonJS({
  "node_modules/xmlbuilder/lib/XMLNodeList.js"(exports, module2) {
    (function() {
      var XMLNodeList;
      module2.exports = XMLNodeList = function() {
        function XMLNodeList2(nodes) {
          this.nodes = nodes;
        }
        Object.defineProperty(XMLNodeList2.prototype, "length", {
          get: function() {
            return this.nodes.length || 0;
          }
        });
        XMLNodeList2.prototype.clone = function() {
          return this.nodes = null;
        };
        XMLNodeList2.prototype.item = function(index) {
          return this.nodes[index] || null;
        };
        return XMLNodeList2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/DocumentPosition.js
var require_DocumentPosition = __commonJS({
  "node_modules/xmlbuilder/lib/DocumentPosition.js"(exports, module2) {
    (function() {
      module2.exports = {
        Disconnected: 1,
        Preceding: 2,
        Following: 4,
        Contains: 8,
        ContainedBy: 16,
        ImplementationSpecific: 32
      };
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLNode.js
var require_XMLNode = __commonJS({
  "node_modules/xmlbuilder/lib/XMLNode.js"(exports, module2) {
    (function() {
      var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNamedNodeMap, XMLNode, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction, isObject, ref1, hasProp = {}.hasOwnProperty;
      ref1 = require_Utility(), isObject = ref1.isObject, isFunction = ref1.isFunction, isEmpty = ref1.isEmpty, getValue = ref1.getValue;
      XMLElement = null;
      XMLCData = null;
      XMLComment = null;
      XMLDeclaration = null;
      XMLDocType = null;
      XMLRaw = null;
      XMLText = null;
      XMLProcessingInstruction = null;
      XMLDummy = null;
      NodeType = null;
      XMLNodeList = null;
      XMLNamedNodeMap = null;
      DocumentPosition = null;
      module2.exports = XMLNode = function() {
        function XMLNode2(parent1) {
          this.parent = parent1;
          if (this.parent) {
            this.options = this.parent.options;
            this.stringify = this.parent.stringify;
          }
          this.value = null;
          this.children = [];
          this.baseURI = null;
          if (!XMLElement) {
            XMLElement = require_XMLElement();
            XMLCData = require_XMLCData();
            XMLComment = require_XMLComment();
            XMLDeclaration = require_XMLDeclaration();
            XMLDocType = require_XMLDocType();
            XMLRaw = require_XMLRaw();
            XMLText = require_XMLText();
            XMLProcessingInstruction = require_XMLProcessingInstruction();
            XMLDummy = require_XMLDummy();
            NodeType = require_NodeType();
            XMLNodeList = require_XMLNodeList();
            XMLNamedNodeMap = require_XMLNamedNodeMap();
            DocumentPosition = require_DocumentPosition();
          }
        }
        Object.defineProperty(XMLNode2.prototype, "nodeName", {
          get: function() {
            return this.name;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "nodeType", {
          get: function() {
            return this.type;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "nodeValue", {
          get: function() {
            return this.value;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "parentNode", {
          get: function() {
            return this.parent;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "childNodes", {
          get: function() {
            if (!this.childNodeList || !this.childNodeList.nodes) {
              this.childNodeList = new XMLNodeList(this.children);
            }
            return this.childNodeList;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "firstChild", {
          get: function() {
            return this.children[0] || null;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "lastChild", {
          get: function() {
            return this.children[this.children.length - 1] || null;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "previousSibling", {
          get: function() {
            var i;
            i = this.parent.children.indexOf(this);
            return this.parent.children[i - 1] || null;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "nextSibling", {
          get: function() {
            var i;
            i = this.parent.children.indexOf(this);
            return this.parent.children[i + 1] || null;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "ownerDocument", {
          get: function() {
            return this.document() || null;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "textContent", {
          get: function() {
            var child, j, len, ref2, str;
            if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {
              str = "";
              ref2 = this.children;
              for (j = 0, len = ref2.length; j < len; j++) {
                child = ref2[j];
                if (child.textContent) {
                  str += child.textContent;
                }
              }
              return str;
            } else {
              return null;
            }
          },
          set: function(value) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        XMLNode2.prototype.setParent = function(parent) {
          var child, j, len, ref2, results;
          this.parent = parent;
          if (parent) {
            this.options = parent.options;
            this.stringify = parent.stringify;
          }
          ref2 = this.children;
          results = [];
          for (j = 0, len = ref2.length; j < len; j++) {
            child = ref2[j];
            results.push(child.setParent(this));
          }
          return results;
        };
        XMLNode2.prototype.element = function(name, attributes, text) {
          var childNode, item, j, k, key, lastChild, len, len1, ref2, ref3, val;
          lastChild = null;
          if (attributes === null && text == null) {
            ref2 = [{}, null], attributes = ref2[0], text = ref2[1];
          }
          if (attributes == null) {
            attributes = {};
          }
          attributes = getValue(attributes);
          if (!isObject(attributes)) {
            ref3 = [attributes, text], text = ref3[0], attributes = ref3[1];
          }
          if (name != null) {
            name = getValue(name);
          }
          if (Array.isArray(name)) {
            for (j = 0, len = name.length; j < len; j++) {
              item = name[j];
              lastChild = this.element(item);
            }
          } else if (isFunction(name)) {
            lastChild = this.element(name.apply());
          } else if (isObject(name)) {
            for (key in name) {
              if (!hasProp.call(name, key))
                continue;
              val = name[key];
              if (isFunction(val)) {
                val = val.apply();
              }
              if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
                lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
              } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {
                lastChild = this.dummy();
              } else if (isObject(val) && isEmpty(val)) {
                lastChild = this.element(key);
              } else if (!this.options.keepNullNodes && val == null) {
                lastChild = this.dummy();
              } else if (!this.options.separateArrayItems && Array.isArray(val)) {
                for (k = 0, len1 = val.length; k < len1; k++) {
                  item = val[k];
                  childNode = {};
                  childNode[key] = item;
                  lastChild = this.element(childNode);
                }
              } else if (isObject(val)) {
                if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {
                  lastChild = this.element(val);
                } else {
                  lastChild = this.element(key);
                  lastChild.element(val);
                }
              } else {
                lastChild = this.element(key, val);
              }
            }
          } else if (!this.options.keepNullNodes && text === null) {
            lastChild = this.dummy();
          } else {
            if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
              lastChild = this.text(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
              lastChild = this.cdata(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
              lastChild = this.comment(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
              lastChild = this.raw(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {
              lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);
            } else {
              lastChild = this.node(name, attributes, text);
            }
          }
          if (lastChild == null) {
            throw new Error("Could not create any elements with: " + name + ". " + this.debugInfo());
          }
          return lastChild;
        };
        XMLNode2.prototype.insertBefore = function(name, attributes, text) {
          var child, i, newChild, refChild, removed;
          if (name != null ? name.type : void 0) {
            newChild = name;
            refChild = attributes;
            newChild.setParent(this);
            if (refChild) {
              i = children.indexOf(refChild);
              removed = children.splice(i);
              children.push(newChild);
              Array.prototype.push.apply(children, removed);
            } else {
              children.push(newChild);
            }
            return newChild;
          } else {
            if (this.isRoot) {
              throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
            }
            i = this.parent.children.indexOf(this);
            removed = this.parent.children.splice(i);
            child = this.parent.element(name, attributes, text);
            Array.prototype.push.apply(this.parent.children, removed);
            return child;
          }
        };
        XMLNode2.prototype.insertAfter = function(name, attributes, text) {
          var child, i, removed;
          if (this.isRoot) {
            throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
          }
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i + 1);
          child = this.parent.element(name, attributes, text);
          Array.prototype.push.apply(this.parent.children, removed);
          return child;
        };
        XMLNode2.prototype.remove = function() {
          var i, ref2;
          if (this.isRoot) {
            throw new Error("Cannot remove the root element. " + this.debugInfo());
          }
          i = this.parent.children.indexOf(this);
          [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref2 = [])), ref2;
          return this.parent;
        };
        XMLNode2.prototype.node = function(name, attributes, text) {
          var child, ref2;
          if (name != null) {
            name = getValue(name);
          }
          attributes || (attributes = {});
          attributes = getValue(attributes);
          if (!isObject(attributes)) {
            ref2 = [attributes, text], text = ref2[0], attributes = ref2[1];
          }
          child = new XMLElement(this, name, attributes);
          if (text != null) {
            child.text(text);
          }
          this.children.push(child);
          return child;
        };
        XMLNode2.prototype.text = function(value) {
          var child;
          if (isObject(value)) {
            this.element(value);
          }
          child = new XMLText(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.cdata = function(value) {
          var child;
          child = new XMLCData(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.comment = function(value) {
          var child;
          child = new XMLComment(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.commentBefore = function(value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i);
          child = this.parent.comment(value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.commentAfter = function(value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i + 1);
          child = this.parent.comment(value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.raw = function(value) {
          var child;
          child = new XMLRaw(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.dummy = function() {
          var child;
          child = new XMLDummy(this);
          return child;
        };
        XMLNode2.prototype.instruction = function(target, value) {
          var insTarget, insValue, instruction, j, len;
          if (target != null) {
            target = getValue(target);
          }
          if (value != null) {
            value = getValue(value);
          }
          if (Array.isArray(target)) {
            for (j = 0, len = target.length; j < len; j++) {
              insTarget = target[j];
              this.instruction(insTarget);
            }
          } else if (isObject(target)) {
            for (insTarget in target) {
              if (!hasProp.call(target, insTarget))
                continue;
              insValue = target[insTarget];
              this.instruction(insTarget, insValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            instruction = new XMLProcessingInstruction(this, target, value);
            this.children.push(instruction);
          }
          return this;
        };
        XMLNode2.prototype.instructionBefore = function(target, value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i);
          child = this.parent.instruction(target, value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.instructionAfter = function(target, value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i + 1);
          child = this.parent.instruction(target, value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.declaration = function(version, encoding, standalone) {
          var doc, xmldec;
          doc = this.document();
          xmldec = new XMLDeclaration(doc, version, encoding, standalone);
          if (doc.children.length === 0) {
            doc.children.unshift(xmldec);
          } else if (doc.children[0].type === NodeType.Declaration) {
            doc.children[0] = xmldec;
          } else {
            doc.children.unshift(xmldec);
          }
          return doc.root() || doc;
        };
        XMLNode2.prototype.dtd = function(pubID, sysID) {
          var child, doc, doctype, i, j, k, len, len1, ref2, ref3;
          doc = this.document();
          doctype = new XMLDocType(doc, pubID, sysID);
          ref2 = doc.children;
          for (i = j = 0, len = ref2.length; j < len; i = ++j) {
            child = ref2[i];
            if (child.type === NodeType.DocType) {
              doc.children[i] = doctype;
              return doctype;
            }
          }
          ref3 = doc.children;
          for (i = k = 0, len1 = ref3.length; k < len1; i = ++k) {
            child = ref3[i];
            if (child.isRoot) {
              doc.children.splice(i, 0, doctype);
              return doctype;
            }
          }
          doc.children.push(doctype);
          return doctype;
        };
        XMLNode2.prototype.up = function() {
          if (this.isRoot) {
            throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
          }
          return this.parent;
        };
        XMLNode2.prototype.root = function() {
          var node;
          node = this;
          while (node) {
            if (node.type === NodeType.Document) {
              return node.rootObject;
            } else if (node.isRoot) {
              return node;
            } else {
              node = node.parent;
            }
          }
        };
        XMLNode2.prototype.document = function() {
          var node;
          node = this;
          while (node) {
            if (node.type === NodeType.Document) {
              return node;
            } else {
              node = node.parent;
            }
          }
        };
        XMLNode2.prototype.end = function(options) {
          return this.document().end(options);
        };
        XMLNode2.prototype.prev = function() {
          var i;
          i = this.parent.children.indexOf(this);
          if (i < 1) {
            throw new Error("Already at the first node. " + this.debugInfo());
          }
          return this.parent.children[i - 1];
        };
        XMLNode2.prototype.next = function() {
          var i;
          i = this.parent.children.indexOf(this);
          if (i === -1 || i === this.parent.children.length - 1) {
            throw new Error("Already at the last node. " + this.debugInfo());
          }
          return this.parent.children[i + 1];
        };
        XMLNode2.prototype.importDocument = function(doc) {
          var clonedRoot;
          clonedRoot = doc.root().clone();
          clonedRoot.parent = this;
          clonedRoot.isRoot = false;
          this.children.push(clonedRoot);
          return this;
        };
        XMLNode2.prototype.debugInfo = function(name) {
          var ref2, ref3;
          name = name || this.name;
          if (name == null && !((ref2 = this.parent) != null ? ref2.name : void 0)) {
            return "";
          } else if (name == null) {
            return "parent: <" + this.parent.name + ">";
          } else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) {
            return "node: <" + name + ">";
          } else {
            return "node: <" + name + ">, parent: <" + this.parent.name + ">";
          }
        };
        XMLNode2.prototype.ele = function(name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLNode2.prototype.nod = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLNode2.prototype.txt = function(value) {
          return this.text(value);
        };
        XMLNode2.prototype.dat = function(value) {
          return this.cdata(value);
        };
        XMLNode2.prototype.com = function(value) {
          return this.comment(value);
        };
        XMLNode2.prototype.ins = function(target, value) {
          return this.instruction(target, value);
        };
        XMLNode2.prototype.doc = function() {
          return this.document();
        };
        XMLNode2.prototype.dec = function(version, encoding, standalone) {
          return this.declaration(version, encoding, standalone);
        };
        XMLNode2.prototype.e = function(name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLNode2.prototype.n = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLNode2.prototype.t = function(value) {
          return this.text(value);
        };
        XMLNode2.prototype.d = function(value) {
          return this.cdata(value);
        };
        XMLNode2.prototype.c = function(value) {
          return this.comment(value);
        };
        XMLNode2.prototype.r = function(value) {
          return this.raw(value);
        };
        XMLNode2.prototype.i = function(target, value) {
          return this.instruction(target, value);
        };
        XMLNode2.prototype.u = function() {
          return this.up();
        };
        XMLNode2.prototype.importXMLBuilder = function(doc) {
          return this.importDocument(doc);
        };
        XMLNode2.prototype.replaceChild = function(newChild, oldChild) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.removeChild = function(oldChild) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.appendChild = function(newChild) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.hasChildNodes = function() {
          return this.children.length !== 0;
        };
        XMLNode2.prototype.cloneNode = function(deep) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.normalize = function() {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.isSupported = function(feature, version) {
          return true;
        };
        XMLNode2.prototype.hasAttributes = function() {
          return this.attribs.length !== 0;
        };
        XMLNode2.prototype.compareDocumentPosition = function(other) {
          var ref, res;
          ref = this;
          if (ref === other) {
            return 0;
          } else if (this.document() !== other.document()) {
            res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;
            if (Math.random() < 0.5) {
              res |= DocumentPosition.Preceding;
            } else {
              res |= DocumentPosition.Following;
            }
            return res;
          } else if (ref.isAncestor(other)) {
            return DocumentPosition.Contains | DocumentPosition.Preceding;
          } else if (ref.isDescendant(other)) {
            return DocumentPosition.Contains | DocumentPosition.Following;
          } else if (ref.isPreceding(other)) {
            return DocumentPosition.Preceding;
          } else {
            return DocumentPosition.Following;
          }
        };
        XMLNode2.prototype.isSameNode = function(other) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.lookupPrefix = function(namespaceURI) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.isDefaultNamespace = function(namespaceURI) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.lookupNamespaceURI = function(prefix) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.isEqualNode = function(node) {
          var i, j, ref2;
          if (node.nodeType !== this.nodeType) {
            return false;
          }
          if (node.children.length !== this.children.length) {
            return false;
          }
          for (i = j = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j) {
            if (!this.children[i].isEqualNode(node.children[i])) {
              return false;
            }
          }
          return true;
        };
        XMLNode2.prototype.getFeature = function(feature, version) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.setUserData = function(key, data, handler) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.getUserData = function(key) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.contains = function(other) {
          if (!other) {
            return false;
          }
          return other === this || this.isDescendant(other);
        };
        XMLNode2.prototype.isDescendant = function(node) {
          var child, isDescendantChild, j, len, ref2;
          ref2 = this.children;
          for (j = 0, len = ref2.length; j < len; j++) {
            child = ref2[j];
            if (node === child) {
              return true;
            }
            isDescendantChild = child.isDescendant(node);
            if (isDescendantChild) {
              return true;
            }
          }
          return false;
        };
        XMLNode2.prototype.isAncestor = function(node) {
          return node.isDescendant(this);
        };
        XMLNode2.prototype.isPreceding = function(node) {
          var nodePos, thisPos;
          nodePos = this.treePosition(node);
          thisPos = this.treePosition(this);
          if (nodePos === -1 || thisPos === -1) {
            return false;
          } else {
            return nodePos < thisPos;
          }
        };
        XMLNode2.prototype.isFollowing = function(node) {
          var nodePos, thisPos;
          nodePos = this.treePosition(node);
          thisPos = this.treePosition(this);
          if (nodePos === -1 || thisPos === -1) {
            return false;
          } else {
            return nodePos > thisPos;
          }
        };
        XMLNode2.prototype.treePosition = function(node) {
          var found, pos;
          pos = 0;
          found = false;
          this.foreachTreeNode(this.document(), function(childNode) {
            pos++;
            if (!found && childNode === node) {
              return found = true;
            }
          });
          if (found) {
            return pos;
          } else {
            return -1;
          }
        };
        XMLNode2.prototype.foreachTreeNode = function(node, func) {
          var child, j, len, ref2, res;
          node || (node = this.document());
          ref2 = node.children;
          for (j = 0, len = ref2.length; j < len; j++) {
            child = ref2[j];
            if (res = func(child)) {
              return res;
            } else {
              res = this.foreachTreeNode(child, func);
              if (res) {
                return res;
              }
            }
          }
        };
        return XMLNode2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLStringifier.js
var require_XMLStringifier = __commonJS({
  "node_modules/xmlbuilder/lib/XMLStringifier.js"(exports, module2) {
    (function() {
      var XMLStringifier, bind = function(fn, me) {
        return function() {
          return fn.apply(me, arguments);
        };
      }, hasProp = {}.hasOwnProperty;
      module2.exports = XMLStringifier = function() {
        function XMLStringifier2(options) {
          this.assertLegalName = bind(this.assertLegalName, this);
          this.assertLegalChar = bind(this.assertLegalChar, this);
          var key, ref, value;
          options || (options = {});
          this.options = options;
          if (!this.options.version) {
            this.options.version = "1.0";
          }
          ref = options.stringify || {};
          for (key in ref) {
            if (!hasProp.call(ref, key))
              continue;
            value = ref[key];
            this[key] = value;
          }
        }
        XMLStringifier2.prototype.name = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalName("" + val || "");
        };
        XMLStringifier2.prototype.text = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar(this.textEscape("" + val || ""));
        };
        XMLStringifier2.prototype.cdata = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          val = "" + val || "";
          val = val.replace("]]>", "]]]]><![CDATA[>");
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.comment = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          val = "" + val || "";
          if (val.match(/--/)) {
            throw new Error("Comment text cannot contain double-hypen: " + val);
          }
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.raw = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return "" + val || "";
        };
        XMLStringifier2.prototype.attValue = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar(this.attEscape(val = "" + val || ""));
        };
        XMLStringifier2.prototype.insTarget = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.insValue = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          val = "" + val || "";
          if (val.match(/\?>/)) {
            throw new Error("Invalid processing instruction value: " + val);
          }
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.xmlVersion = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          val = "" + val || "";
          if (!val.match(/1\.[0-9]+/)) {
            throw new Error("Invalid version number: " + val);
          }
          return val;
        };
        XMLStringifier2.prototype.xmlEncoding = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          val = "" + val || "";
          if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {
            throw new Error("Invalid encoding: " + val);
          }
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.xmlStandalone = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          if (val) {
            return "yes";
          } else {
            return "no";
          }
        };
        XMLStringifier2.prototype.dtdPubID = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdSysID = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdElementValue = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdAttType = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdAttDefault = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdEntityValue = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdNData = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.convertAttKey = "@";
        XMLStringifier2.prototype.convertPIKey = "?";
        XMLStringifier2.prototype.convertTextKey = "#text";
        XMLStringifier2.prototype.convertCDataKey = "#cdata";
        XMLStringifier2.prototype.convertCommentKey = "#comment";
        XMLStringifier2.prototype.convertRawKey = "#raw";
        XMLStringifier2.prototype.assertLegalChar = function(str) {
          var regex, res;
          if (this.options.noValidation) {
            return str;
          }
          regex = "";
          if (this.options.version === "1.0") {
            regex = /[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
            if (res = str.match(regex)) {
              throw new Error("Invalid character in string: " + str + " at index " + res.index);
            }
          } else if (this.options.version === "1.1") {
            regex = /[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
            if (res = str.match(regex)) {
              throw new Error("Invalid character in string: " + str + " at index " + res.index);
            }
          }
          return str;
        };
        XMLStringifier2.prototype.assertLegalName = function(str) {
          var regex;
          if (this.options.noValidation) {
            return str;
          }
          this.assertLegalChar(str);
          regex = /^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/;
          if (!str.match(regex)) {
            throw new Error("Invalid character in name");
          }
          return str;
        };
        XMLStringifier2.prototype.textEscape = function(str) {
          var ampregex;
          if (this.options.noValidation) {
            return str;
          }
          ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
          return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#xD;");
        };
        XMLStringifier2.prototype.attEscape = function(str) {
          var ampregex;
          if (this.options.noValidation) {
            return str;
          }
          ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
          return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/"/g, "&quot;").replace(/\t/g, "&#x9;").replace(/\n/g, "&#xA;").replace(/\r/g, "&#xD;");
        };
        return XMLStringifier2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/WriterState.js
var require_WriterState = __commonJS({
  "node_modules/xmlbuilder/lib/WriterState.js"(exports, module2) {
    (function() {
      module2.exports = {
        None: 0,
        OpenTag: 1,
        InsideTag: 2,
        CloseTag: 3
      };
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLWriterBase.js
var require_XMLWriterBase = __commonJS({
  "node_modules/xmlbuilder/lib/XMLWriterBase.js"(exports, module2) {
    (function() {
      var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign, hasProp = {}.hasOwnProperty;
      assign = require_Utility().assign;
      NodeType = require_NodeType();
      XMLDeclaration = require_XMLDeclaration();
      XMLDocType = require_XMLDocType();
      XMLCData = require_XMLCData();
      XMLComment = require_XMLComment();
      XMLElement = require_XMLElement();
      XMLRaw = require_XMLRaw();
      XMLText = require_XMLText();
      XMLProcessingInstruction = require_XMLProcessingInstruction();
      XMLDummy = require_XMLDummy();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDNotation = require_XMLDTDNotation();
      WriterState = require_WriterState();
      module2.exports = XMLWriterBase = function() {
        function XMLWriterBase2(options) {
          var key, ref, value;
          options || (options = {});
          this.options = options;
          ref = options.writer || {};
          for (key in ref) {
            if (!hasProp.call(ref, key))
              continue;
            value = ref[key];
            this["_" + key] = this[key];
            this[key] = value;
          }
        }
        XMLWriterBase2.prototype.filterOptions = function(options) {
          var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6;
          options || (options = {});
          options = assign({}, this.options, options);
          filteredOptions = {
            writer: this
          };
          filteredOptions.pretty = options.pretty || false;
          filteredOptions.allowEmpty = options.allowEmpty || false;
          filteredOptions.indent = (ref = options.indent) != null ? ref : "  ";
          filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : "\n";
          filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;
          filteredOptions.dontPrettyTextNodes = (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;
          filteredOptions.spaceBeforeSlash = (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : "";
          if (filteredOptions.spaceBeforeSlash === true) {
            filteredOptions.spaceBeforeSlash = " ";
          }
          filteredOptions.suppressPrettyCount = 0;
          filteredOptions.user = {};
          filteredOptions.state = WriterState.None;
          return filteredOptions;
        };
        XMLWriterBase2.prototype.indent = function(node, options, level) {
          var indentLevel;
          if (!options.pretty || options.suppressPrettyCount) {
            return "";
          } else if (options.pretty) {
            indentLevel = (level || 0) + options.offset + 1;
            if (indentLevel > 0) {
              return new Array(indentLevel).join(options.indent);
            }
          }
          return "";
        };
        XMLWriterBase2.prototype.endline = function(node, options, level) {
          if (!options.pretty || options.suppressPrettyCount) {
            return "";
          } else {
            return options.newline;
          }
        };
        XMLWriterBase2.prototype.attribute = function(att, options, level) {
          var r;
          this.openAttribute(att, options, level);
          r = " " + att.name + '="' + att.value + '"';
          this.closeAttribute(att, options, level);
          return r;
        };
        XMLWriterBase2.prototype.cdata = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<![CDATA[";
          options.state = WriterState.InsideTag;
          r += node.value;
          options.state = WriterState.CloseTag;
          r += "]]>" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.comment = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<!-- ";
          options.state = WriterState.InsideTag;
          r += node.value;
          options.state = WriterState.CloseTag;
          r += " -->" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.declaration = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<?xml";
          options.state = WriterState.InsideTag;
          r += ' version="' + node.version + '"';
          if (node.encoding != null) {
            r += ' encoding="' + node.encoding + '"';
          }
          if (node.standalone != null) {
            r += ' standalone="' + node.standalone + '"';
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + "?>";
          r += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.docType = function(node, options, level) {
          var child, i, len, r, ref;
          level || (level = 0);
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level);
          r += "<!DOCTYPE " + node.root().name;
          if (node.pubID && node.sysID) {
            r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
          } else if (node.sysID) {
            r += ' SYSTEM "' + node.sysID + '"';
          }
          if (node.children.length > 0) {
            r += " [";
            r += this.endline(node, options, level);
            options.state = WriterState.InsideTag;
            ref = node.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              r += this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            r += "]";
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + ">";
          r += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.element = function(node, options, level) {
          var att, child, childNodeCount, firstChildNode, i, j, len, len1, name, prettySuppressed, r, ref, ref1, ref2;
          level || (level = 0);
          prettySuppressed = false;
          r = "";
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r += this.indent(node, options, level) + "<" + node.name;
          ref = node.attribs;
          for (name in ref) {
            if (!hasProp.call(ref, name))
              continue;
            att = ref[name];
            r += this.attribute(att, options, level);
          }
          childNodeCount = node.children.length;
          firstChildNode = childNodeCount === 0 ? null : node.children[0];
          if (childNodeCount === 0 || node.children.every(function(e) {
            return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === "";
          })) {
            if (options.allowEmpty) {
              r += ">";
              options.state = WriterState.CloseTag;
              r += "</" + node.name + ">" + this.endline(node, options, level);
            } else {
              options.state = WriterState.CloseTag;
              r += options.spaceBeforeSlash + "/>" + this.endline(node, options, level);
            }
          } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {
            r += ">";
            options.state = WriterState.InsideTag;
            options.suppressPrettyCount++;
            prettySuppressed = true;
            r += this.writeChildNode(firstChildNode, options, level + 1);
            options.suppressPrettyCount--;
            prettySuppressed = false;
            options.state = WriterState.CloseTag;
            r += "</" + node.name + ">" + this.endline(node, options, level);
          } else {
            if (options.dontPrettyTextNodes) {
              ref1 = node.children;
              for (i = 0, len = ref1.length; i < len; i++) {
                child = ref1[i];
                if ((child.type === NodeType.Text || child.type === NodeType.Raw) && child.value != null) {
                  options.suppressPrettyCount++;
                  prettySuppressed = true;
                  break;
                }
              }
            }
            r += ">" + this.endline(node, options, level);
            options.state = WriterState.InsideTag;
            ref2 = node.children;
            for (j = 0, len1 = ref2.length; j < len1; j++) {
              child = ref2[j];
              r += this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            r += this.indent(node, options, level) + "</" + node.name + ">";
            if (prettySuppressed) {
              options.suppressPrettyCount--;
            }
            r += this.endline(node, options, level);
            options.state = WriterState.None;
          }
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.writeChildNode = function(node, options, level) {
          switch (node.type) {
            case NodeType.CData:
              return this.cdata(node, options, level);
            case NodeType.Comment:
              return this.comment(node, options, level);
            case NodeType.Element:
              return this.element(node, options, level);
            case NodeType.Raw:
              return this.raw(node, options, level);
            case NodeType.Text:
              return this.text(node, options, level);
            case NodeType.ProcessingInstruction:
              return this.processingInstruction(node, options, level);
            case NodeType.Dummy:
              return "";
            case NodeType.Declaration:
              return this.declaration(node, options, level);
            case NodeType.DocType:
              return this.docType(node, options, level);
            case NodeType.AttributeDeclaration:
              return this.dtdAttList(node, options, level);
            case NodeType.ElementDeclaration:
              return this.dtdElement(node, options, level);
            case NodeType.EntityDeclaration:
              return this.dtdEntity(node, options, level);
            case NodeType.NotationDeclaration:
              return this.dtdNotation(node, options, level);
            default:
              throw new Error("Unknown XML node type: " + node.constructor.name);
          }
        };
        XMLWriterBase2.prototype.processingInstruction = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<?";
          options.state = WriterState.InsideTag;
          r += node.target;
          if (node.value) {
            r += " " + node.value;
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + "?>";
          r += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.raw = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level);
          options.state = WriterState.InsideTag;
          r += node.value;
          options.state = WriterState.CloseTag;
          r += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.text = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level);
          options.state = WriterState.InsideTag;
          r += node.value;
          options.state = WriterState.CloseTag;
          r += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.dtdAttList = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<!ATTLIST";
          options.state = WriterState.InsideTag;
          r += " " + node.elementName + " " + node.attributeName + " " + node.attributeType;
          if (node.defaultValueType !== "#DEFAULT") {
            r += " " + node.defaultValueType;
          }
          if (node.defaultValue) {
            r += ' "' + node.defaultValue + '"';
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.dtdElement = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<!ELEMENT";
          options.state = WriterState.InsideTag;
          r += " " + node.name + " " + node.value;
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.dtdEntity = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<!ENTITY";
          options.state = WriterState.InsideTag;
          if (node.pe) {
            r += " %";
          }
          r += " " + node.name;
          if (node.value) {
            r += ' "' + node.value + '"';
          } else {
            if (node.pubID && node.sysID) {
              r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
            } else if (node.sysID) {
              r += ' SYSTEM "' + node.sysID + '"';
            }
            if (node.nData) {
              r += " NDATA " + node.nData;
            }
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.dtdNotation = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<!NOTATION";
          options.state = WriterState.InsideTag;
          r += " " + node.name;
          if (node.pubID && node.sysID) {
            r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
          } else if (node.pubID) {
            r += ' PUBLIC "' + node.pubID + '"';
          } else if (node.sysID) {
            r += ' SYSTEM "' + node.sysID + '"';
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.openNode = function(node, options, level) {
        };
        XMLWriterBase2.prototype.closeNode = function(node, options, level) {
        };
        XMLWriterBase2.prototype.openAttribute = function(att, options, level) {
        };
        XMLWriterBase2.prototype.closeAttribute = function(att, options, level) {
        };
        return XMLWriterBase2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLStringWriter.js
var require_XMLStringWriter = __commonJS({
  "node_modules/xmlbuilder/lib/XMLStringWriter.js"(exports, module2) {
    (function() {
      var XMLStringWriter, XMLWriterBase, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLWriterBase = require_XMLWriterBase();
      module2.exports = XMLStringWriter = function(superClass) {
        extend(XMLStringWriter2, superClass);
        function XMLStringWriter2(options) {
          XMLStringWriter2.__super__.constructor.call(this, options);
        }
        XMLStringWriter2.prototype.document = function(doc, options) {
          var child, i, len, r, ref;
          options = this.filterOptions(options);
          r = "";
          ref = doc.children;
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            r += this.writeChildNode(child, options, 0);
          }
          if (options.pretty && r.slice(-options.newline.length) === options.newline) {
            r = r.slice(0, -options.newline.length);
          }
          return r;
        };
        return XMLStringWriter2;
      }(XMLWriterBase);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDocument.js
var require_XMLDocument = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDocument.js"(exports, module2) {
    (function() {
      var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isPlainObject = require_Utility().isPlainObject;
      XMLDOMImplementation = require_XMLDOMImplementation();
      XMLDOMConfiguration = require_XMLDOMConfiguration();
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      XMLStringifier = require_XMLStringifier();
      XMLStringWriter = require_XMLStringWriter();
      module2.exports = XMLDocument = function(superClass) {
        extend(XMLDocument2, superClass);
        function XMLDocument2(options) {
          XMLDocument2.__super__.constructor.call(this, null);
          this.name = "#document";
          this.type = NodeType.Document;
          this.documentURI = null;
          this.domConfig = new XMLDOMConfiguration();
          options || (options = {});
          if (!options.writer) {
            options.writer = new XMLStringWriter();
          }
          this.options = options;
          this.stringify = new XMLStringifier(options);
        }
        Object.defineProperty(XMLDocument2.prototype, "implementation", {
          value: new XMLDOMImplementation()
        });
        Object.defineProperty(XMLDocument2.prototype, "doctype", {
          get: function() {
            var child, i, len, ref;
            ref = this.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              if (child.type === NodeType.DocType) {
                return child;
              }
            }
            return null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "documentElement", {
          get: function() {
            return this.rootObject || null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "inputEncoding", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "strictErrorChecking", {
          get: function() {
            return false;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "xmlEncoding", {
          get: function() {
            if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
              return this.children[0].encoding;
            } else {
              return null;
            }
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "xmlStandalone", {
          get: function() {
            if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
              return this.children[0].standalone === "yes";
            } else {
              return false;
            }
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "xmlVersion", {
          get: function() {
            if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
              return this.children[0].version;
            } else {
              return "1.0";
            }
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "URL", {
          get: function() {
            return this.documentURI;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "origin", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "compatMode", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "characterSet", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "contentType", {
          get: function() {
            return null;
          }
        });
        XMLDocument2.prototype.end = function(writer) {
          var writerOptions;
          writerOptions = {};
          if (!writer) {
            writer = this.options.writer;
          } else if (isPlainObject(writer)) {
            writerOptions = writer;
            writer = this.options.writer;
          }
          return writer.document(this, writer.filterOptions(writerOptions));
        };
        XMLDocument2.prototype.toString = function(options) {
          return this.options.writer.document(this, this.options.writer.filterOptions(options));
        };
        XMLDocument2.prototype.createElement = function(tagName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createDocumentFragment = function() {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createTextNode = function(data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createComment = function(data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createCDATASection = function(data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createProcessingInstruction = function(target, data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createAttribute = function(name) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createEntityReference = function(name) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.getElementsByTagName = function(tagname) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.importNode = function(importedNode, deep) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createElementNS = function(namespaceURI, qualifiedName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createAttributeNS = function(namespaceURI, qualifiedName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.getElementById = function(elementId) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.adoptNode = function(source) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.normalizeDocument = function() {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.renameNode = function(node, namespaceURI, qualifiedName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.getElementsByClassName = function(classNames) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createEvent = function(eventInterface) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createRange = function() {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createNodeIterator = function(root, whatToShow, filter) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createTreeWalker = function(root, whatToShow, filter) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        return XMLDocument2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDocumentCB.js
var require_XMLDocumentCB = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDocumentCB.js"(exports, module2) {
    (function() {
      var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction, isObject, isPlainObject, ref, hasProp = {}.hasOwnProperty;
      ref = require_Utility(), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;
      NodeType = require_NodeType();
      XMLDocument = require_XMLDocument();
      XMLElement = require_XMLElement();
      XMLCData = require_XMLCData();
      XMLComment = require_XMLComment();
      XMLRaw = require_XMLRaw();
      XMLText = require_XMLText();
      XMLProcessingInstruction = require_XMLProcessingInstruction();
      XMLDeclaration = require_XMLDeclaration();
      XMLDocType = require_XMLDocType();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDNotation = require_XMLDTDNotation();
      XMLAttribute = require_XMLAttribute();
      XMLStringifier = require_XMLStringifier();
      XMLStringWriter = require_XMLStringWriter();
      WriterState = require_WriterState();
      module2.exports = XMLDocumentCB = function() {
        function XMLDocumentCB2(options, onData, onEnd) {
          var writerOptions;
          this.name = "?xml";
          this.type = NodeType.Document;
          options || (options = {});
          writerOptions = {};
          if (!options.writer) {
            options.writer = new XMLStringWriter();
          } else if (isPlainObject(options.writer)) {
            writerOptions = options.writer;
            options.writer = new XMLStringWriter();
          }
          this.options = options;
          this.writer = options.writer;
          this.writerOptions = this.writer.filterOptions(writerOptions);
          this.stringify = new XMLStringifier(options);
          this.onDataCallback = onData || function() {
          };
          this.onEndCallback = onEnd || function() {
          };
          this.currentNode = null;
          this.currentLevel = -1;
          this.openTags = {};
          this.documentStarted = false;
          this.documentCompleted = false;
          this.root = null;
        }
        XMLDocumentCB2.prototype.createChildNode = function(node) {
          var att, attName, attributes, child, i, len, ref1, ref2;
          switch (node.type) {
            case NodeType.CData:
              this.cdata(node.value);
              break;
            case NodeType.Comment:
              this.comment(node.value);
              break;
            case NodeType.Element:
              attributes = {};
              ref1 = node.attribs;
              for (attName in ref1) {
                if (!hasProp.call(ref1, attName))
                  continue;
                att = ref1[attName];
                attributes[attName] = att.value;
              }
              this.node(node.name, attributes);
              break;
            case NodeType.Dummy:
              this.dummy();
              break;
            case NodeType.Raw:
              this.raw(node.value);
              break;
            case NodeType.Text:
              this.text(node.value);
              break;
            case NodeType.ProcessingInstruction:
              this.instruction(node.target, node.value);
              break;
            default:
              throw new Error("This XML node type is not supported in a JS object: " + node.constructor.name);
          }
          ref2 = node.children;
          for (i = 0, len = ref2.length; i < len; i++) {
            child = ref2[i];
            this.createChildNode(child);
            if (child.type === NodeType.Element) {
              this.up();
            }
          }
          return this;
        };
        XMLDocumentCB2.prototype.dummy = function() {
          return this;
        };
        XMLDocumentCB2.prototype.node = function(name, attributes, text) {
          var ref1;
          if (name == null) {
            throw new Error("Missing node name.");
          }
          if (this.root && this.currentLevel === -1) {
            throw new Error("Document can only have one root node. " + this.debugInfo(name));
          }
          this.openCurrent();
          name = getValue(name);
          if (attributes == null) {
            attributes = {};
          }
          attributes = getValue(attributes);
          if (!isObject(attributes)) {
            ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
          }
          this.currentNode = new XMLElement(this, name, attributes);
          this.currentNode.children = false;
          this.currentLevel++;
          this.openTags[this.currentLevel] = this.currentNode;
          if (text != null) {
            this.text(text);
          }
          return this;
        };
        XMLDocumentCB2.prototype.element = function(name, attributes, text) {
          var child, i, len, oldValidationFlag, ref1, root;
          if (this.currentNode && this.currentNode.type === NodeType.DocType) {
            this.dtdElement.apply(this, arguments);
          } else {
            if (Array.isArray(name) || isObject(name) || isFunction(name)) {
              oldValidationFlag = this.options.noValidation;
              this.options.noValidation = true;
              root = new XMLDocument(this.options).element("TEMP_ROOT");
              root.element(name);
              this.options.noValidation = oldValidationFlag;
              ref1 = root.children;
              for (i = 0, len = ref1.length; i < len; i++) {
                child = ref1[i];
                this.createChildNode(child);
                if (child.type === NodeType.Element) {
                  this.up();
                }
              }
            } else {
              this.node(name, attributes, text);
            }
          }
          return this;
        };
        XMLDocumentCB2.prototype.attribute = function(name, value) {
          var attName, attValue;
          if (!this.currentNode || this.currentNode.children) {
            throw new Error("att() can only be used immediately after an ele() call in callback mode. " + this.debugInfo(name));
          }
          if (name != null) {
            name = getValue(name);
          }
          if (isObject(name)) {
            for (attName in name) {
              if (!hasProp.call(name, attName))
                continue;
              attValue = name[attName];
              this.attribute(attName, attValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            if (this.options.keepNullAttributes && value == null) {
              this.currentNode.attribs[name] = new XMLAttribute(this, name, "");
            } else if (value != null) {
              this.currentNode.attribs[name] = new XMLAttribute(this, name, value);
            }
          }
          return this;
        };
        XMLDocumentCB2.prototype.text = function(value) {
          var node;
          this.openCurrent();
          node = new XMLText(this, value);
          this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.cdata = function(value) {
          var node;
          this.openCurrent();
          node = new XMLCData(this, value);
          this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.comment = function(value) {
          var node;
          this.openCurrent();
          node = new XMLComment(this, value);
          this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.raw = function(value) {
          var node;
          this.openCurrent();
          node = new XMLRaw(this, value);
          this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.instruction = function(target, value) {
          var i, insTarget, insValue, len, node;
          this.openCurrent();
          if (target != null) {
            target = getValue(target);
          }
          if (value != null) {
            value = getValue(value);
          }
          if (Array.isArray(target)) {
            for (i = 0, len = target.length; i < len; i++) {
              insTarget = target[i];
              this.instruction(insTarget);
            }
          } else if (isObject(target)) {
            for (insTarget in target) {
              if (!hasProp.call(target, insTarget))
                continue;
              insValue = target[insTarget];
              this.instruction(insTarget, insValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            node = new XMLProcessingInstruction(this, target, value);
            this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          }
          return this;
        };
        XMLDocumentCB2.prototype.declaration = function(version, encoding, standalone) {
          var node;
          this.openCurrent();
          if (this.documentStarted) {
            throw new Error("declaration() must be the first node.");
          }
          node = new XMLDeclaration(this, version, encoding, standalone);
          this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.doctype = function(root, pubID, sysID) {
          this.openCurrent();
          if (root == null) {
            throw new Error("Missing root node name.");
          }
          if (this.root) {
            throw new Error("dtd() must come before the root node.");
          }
          this.currentNode = new XMLDocType(this, pubID, sysID);
          this.currentNode.rootNodeName = root;
          this.currentNode.children = false;
          this.currentLevel++;
          this.openTags[this.currentLevel] = this.currentNode;
          return this;
        };
        XMLDocumentCB2.prototype.dtdElement = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDElement(this, name, value);
          this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          var node;
          this.openCurrent();
          node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
          this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.entity = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDEntity(this, false, name, value);
          this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.pEntity = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDEntity(this, true, name, value);
          this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.notation = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDNotation(this, name, value);
          this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.up = function() {
          if (this.currentLevel < 0) {
            throw new Error("The document node has no parent.");
          }
          if (this.currentNode) {
            if (this.currentNode.children) {
              this.closeNode(this.currentNode);
            } else {
              this.openNode(this.currentNode);
            }
            this.currentNode = null;
          } else {
            this.closeNode(this.openTags[this.currentLevel]);
          }
          delete this.openTags[this.currentLevel];
          this.currentLevel--;
          return this;
        };
        XMLDocumentCB2.prototype.end = function() {
          while (this.currentLevel >= 0) {
            this.up();
          }
          return this.onEnd();
        };
        XMLDocumentCB2.prototype.openCurrent = function() {
          if (this.currentNode) {
            this.currentNode.children = true;
            return this.openNode(this.currentNode);
          }
        };
        XMLDocumentCB2.prototype.openNode = function(node) {
          var att, chunk, name, ref1;
          if (!node.isOpen) {
            if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {
              this.root = node;
            }
            chunk = "";
            if (node.type === NodeType.Element) {
              this.writerOptions.state = WriterState.OpenTag;
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "<" + node.name;
              ref1 = node.attribs;
              for (name in ref1) {
                if (!hasProp.call(ref1, name))
                  continue;
                att = ref1[name];
                chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);
              }
              chunk += (node.children ? ">" : "/>") + this.writer.endline(node, this.writerOptions, this.currentLevel);
              this.writerOptions.state = WriterState.InsideTag;
            } else {
              this.writerOptions.state = WriterState.OpenTag;
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "<!DOCTYPE " + node.rootNodeName;
              if (node.pubID && node.sysID) {
                chunk += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
              } else if (node.sysID) {
                chunk += ' SYSTEM "' + node.sysID + '"';
              }
              if (node.children) {
                chunk += " [";
                this.writerOptions.state = WriterState.InsideTag;
              } else {
                this.writerOptions.state = WriterState.CloseTag;
                chunk += ">";
              }
              chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);
            }
            this.onData(chunk, this.currentLevel);
            return node.isOpen = true;
          }
        };
        XMLDocumentCB2.prototype.closeNode = function(node) {
          var chunk;
          if (!node.isClosed) {
            chunk = "";
            this.writerOptions.state = WriterState.CloseTag;
            if (node.type === NodeType.Element) {
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "</" + node.name + ">" + this.writer.endline(node, this.writerOptions, this.currentLevel);
            } else {
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "]>" + this.writer.endline(node, this.writerOptions, this.currentLevel);
            }
            this.writerOptions.state = WriterState.None;
            this.onData(chunk, this.currentLevel);
            return node.isClosed = true;
          }
        };
        XMLDocumentCB2.prototype.onData = function(chunk, level) {
          this.documentStarted = true;
          return this.onDataCallback(chunk, level + 1);
        };
        XMLDocumentCB2.prototype.onEnd = function() {
          this.documentCompleted = true;
          return this.onEndCallback();
        };
        XMLDocumentCB2.prototype.debugInfo = function(name) {
          if (name == null) {
            return "";
          } else {
            return "node: <" + name + ">";
          }
        };
        XMLDocumentCB2.prototype.ele = function() {
          return this.element.apply(this, arguments);
        };
        XMLDocumentCB2.prototype.nod = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLDocumentCB2.prototype.txt = function(value) {
          return this.text(value);
        };
        XMLDocumentCB2.prototype.dat = function(value) {
          return this.cdata(value);
        };
        XMLDocumentCB2.prototype.com = function(value) {
          return this.comment(value);
        };
        XMLDocumentCB2.prototype.ins = function(target, value) {
          return this.instruction(target, value);
        };
        XMLDocumentCB2.prototype.dec = function(version, encoding, standalone) {
          return this.declaration(version, encoding, standalone);
        };
        XMLDocumentCB2.prototype.dtd = function(root, pubID, sysID) {
          return this.doctype(root, pubID, sysID);
        };
        XMLDocumentCB2.prototype.e = function(name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLDocumentCB2.prototype.n = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLDocumentCB2.prototype.t = function(value) {
          return this.text(value);
        };
        XMLDocumentCB2.prototype.d = function(value) {
          return this.cdata(value);
        };
        XMLDocumentCB2.prototype.c = function(value) {
          return this.comment(value);
        };
        XMLDocumentCB2.prototype.r = function(value) {
          return this.raw(value);
        };
        XMLDocumentCB2.prototype.i = function(target, value) {
          return this.instruction(target, value);
        };
        XMLDocumentCB2.prototype.att = function() {
          if (this.currentNode && this.currentNode.type === NodeType.DocType) {
            return this.attList.apply(this, arguments);
          } else {
            return this.attribute.apply(this, arguments);
          }
        };
        XMLDocumentCB2.prototype.a = function() {
          if (this.currentNode && this.currentNode.type === NodeType.DocType) {
            return this.attList.apply(this, arguments);
          } else {
            return this.attribute.apply(this, arguments);
          }
        };
        XMLDocumentCB2.prototype.ent = function(name, value) {
          return this.entity(name, value);
        };
        XMLDocumentCB2.prototype.pent = function(name, value) {
          return this.pEntity(name, value);
        };
        XMLDocumentCB2.prototype.not = function(name, value) {
          return this.notation(name, value);
        };
        return XMLDocumentCB2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLStreamWriter.js
var require_XMLStreamWriter = __commonJS({
  "node_modules/xmlbuilder/lib/XMLStreamWriter.js"(exports, module2) {
    (function() {
      var NodeType, WriterState, XMLStreamWriter, XMLWriterBase, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLWriterBase = require_XMLWriterBase();
      WriterState = require_WriterState();
      module2.exports = XMLStreamWriter = function(superClass) {
        extend(XMLStreamWriter2, superClass);
        function XMLStreamWriter2(stream, options) {
          this.stream = stream;
          XMLStreamWriter2.__super__.constructor.call(this, options);
        }
        XMLStreamWriter2.prototype.endline = function(node, options, level) {
          if (node.isLastRootNode && options.state === WriterState.CloseTag) {
            return "";
          } else {
            return XMLStreamWriter2.__super__.endline.call(this, node, options, level);
          }
        };
        XMLStreamWriter2.prototype.document = function(doc, options) {
          var child, i, j, k, len, len1, ref, ref1, results;
          ref = doc.children;
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            child = ref[i];
            child.isLastRootNode = i === doc.children.length - 1;
          }
          options = this.filterOptions(options);
          ref1 = doc.children;
          results = [];
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            child = ref1[k];
            results.push(this.writeChildNode(child, options, 0));
          }
          return results;
        };
        XMLStreamWriter2.prototype.attribute = function(att, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.attribute.call(this, att, options, level));
        };
        XMLStreamWriter2.prototype.cdata = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.cdata.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.comment = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.comment.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.declaration = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.declaration.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.docType = function(node, options, level) {
          var child, j, len, ref;
          level || (level = 0);
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          this.stream.write(this.indent(node, options, level));
          this.stream.write("<!DOCTYPE " + node.root().name);
          if (node.pubID && node.sysID) {
            this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
          } else if (node.sysID) {
            this.stream.write(' SYSTEM "' + node.sysID + '"');
          }
          if (node.children.length > 0) {
            this.stream.write(" [");
            this.stream.write(this.endline(node, options, level));
            options.state = WriterState.InsideTag;
            ref = node.children;
            for (j = 0, len = ref.length; j < len; j++) {
              child = ref[j];
              this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            this.stream.write("]");
          }
          options.state = WriterState.CloseTag;
          this.stream.write(options.spaceBeforeSlash + ">");
          this.stream.write(this.endline(node, options, level));
          options.state = WriterState.None;
          return this.closeNode(node, options, level);
        };
        XMLStreamWriter2.prototype.element = function(node, options, level) {
          var att, child, childNodeCount, firstChildNode, j, len, name, prettySuppressed, ref, ref1;
          level || (level = 0);
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          this.stream.write(this.indent(node, options, level) + "<" + node.name);
          ref = node.attribs;
          for (name in ref) {
            if (!hasProp.call(ref, name))
              continue;
            att = ref[name];
            this.attribute(att, options, level);
          }
          childNodeCount = node.children.length;
          firstChildNode = childNodeCount === 0 ? null : node.children[0];
          if (childNodeCount === 0 || node.children.every(function(e) {
            return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === "";
          })) {
            if (options.allowEmpty) {
              this.stream.write(">");
              options.state = WriterState.CloseTag;
              this.stream.write("</" + node.name + ">");
            } else {
              options.state = WriterState.CloseTag;
              this.stream.write(options.spaceBeforeSlash + "/>");
            }
          } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {
            this.stream.write(">");
            options.state = WriterState.InsideTag;
            options.suppressPrettyCount++;
            prettySuppressed = true;
            this.writeChildNode(firstChildNode, options, level + 1);
            options.suppressPrettyCount--;
            prettySuppressed = false;
            options.state = WriterState.CloseTag;
            this.stream.write("</" + node.name + ">");
          } else {
            this.stream.write(">" + this.endline(node, options, level));
            options.state = WriterState.InsideTag;
            ref1 = node.children;
            for (j = 0, len = ref1.length; j < len; j++) {
              child = ref1[j];
              this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            this.stream.write(this.indent(node, options, level) + "</" + node.name + ">");
          }
          this.stream.write(this.endline(node, options, level));
          options.state = WriterState.None;
          return this.closeNode(node, options, level);
        };
        XMLStreamWriter2.prototype.processingInstruction = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.processingInstruction.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.raw = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.raw.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.text = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.text.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.dtdAttList = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.dtdAttList.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.dtdElement = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.dtdElement.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.dtdEntity = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.dtdEntity.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.dtdNotation = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.dtdNotation.call(this, node, options, level));
        };
        return XMLStreamWriter2;
      }(XMLWriterBase);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/index.js
var require_lib = __commonJS({
  "node_modules/xmlbuilder/lib/index.js"(exports, module2) {
    (function() {
      var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;
      ref = require_Utility(), assign = ref.assign, isFunction = ref.isFunction;
      XMLDOMImplementation = require_XMLDOMImplementation();
      XMLDocument = require_XMLDocument();
      XMLDocumentCB = require_XMLDocumentCB();
      XMLStringWriter = require_XMLStringWriter();
      XMLStreamWriter = require_XMLStreamWriter();
      NodeType = require_NodeType();
      WriterState = require_WriterState();
      module2.exports.create = function(name, xmldec, doctype, options) {
        var doc, root;
        if (name == null) {
          throw new Error("Root element needs a name.");
        }
        options = assign({}, xmldec, doctype, options);
        doc = new XMLDocument(options);
        root = doc.element(name);
        if (!options.headless) {
          doc.declaration(options);
          if (options.pubID != null || options.sysID != null) {
            doc.dtd(options);
          }
        }
        return root;
      };
      module2.exports.begin = function(options, onData, onEnd) {
        var ref1;
        if (isFunction(options)) {
          ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];
          options = {};
        }
        if (onData) {
          return new XMLDocumentCB(options, onData, onEnd);
        } else {
          return new XMLDocument(options);
        }
      };
      module2.exports.stringWriter = function(options) {
        return new XMLStringWriter(options);
      };
      module2.exports.streamWriter = function(stream, options) {
        return new XMLStreamWriter(stream, options);
      };
      module2.exports.implementation = new XMLDOMImplementation();
      module2.exports.nodeType = NodeType;
      module2.exports.writerState = WriterState;
    }).call(exports);
  }
});

// node_modules/xml2js/lib/builder.js
var require_builder = __commonJS({
  "node_modules/xml2js/lib/builder.js"(exports) {
    (function() {
      "use strict";
      var builder, defaults, escapeCDATA, requiresCDATA, wrapCDATA, hasProp = {}.hasOwnProperty;
      builder = require_lib();
      defaults = require_defaults().defaults;
      requiresCDATA = function(entry) {
        return typeof entry === "string" && (entry.indexOf("&") >= 0 || entry.indexOf(">") >= 0 || entry.indexOf("<") >= 0);
      };
      wrapCDATA = function(entry) {
        return "<![CDATA[" + escapeCDATA(entry) + "]]>";
      };
      escapeCDATA = function(entry) {
        return entry.replace("]]>", "]]]]><![CDATA[>");
      };
      exports.Builder = function() {
        function Builder(opts) {
          var key, ref, value;
          this.options = {};
          ref = defaults["0.2"];
          for (key in ref) {
            if (!hasProp.call(ref, key))
              continue;
            value = ref[key];
            this.options[key] = value;
          }
          for (key in opts) {
            if (!hasProp.call(opts, key))
              continue;
            value = opts[key];
            this.options[key] = value;
          }
        }
        Builder.prototype.buildObject = function(rootObj) {
          var attrkey, charkey, render, rootElement, rootName;
          attrkey = this.options.attrkey;
          charkey = this.options.charkey;
          if (Object.keys(rootObj).length === 1 && this.options.rootName === defaults["0.2"].rootName) {
            rootName = Object.keys(rootObj)[0];
            rootObj = rootObj[rootName];
          } else {
            rootName = this.options.rootName;
          }
          render = function(_this) {
            return function(element, obj) {
              var attr, child, entry, index, key, value;
              if (typeof obj !== "object") {
                if (_this.options.cdata && requiresCDATA(obj)) {
                  element.raw(wrapCDATA(obj));
                } else {
                  element.txt(obj);
                }
              } else if (Array.isArray(obj)) {
                for (index in obj) {
                  if (!hasProp.call(obj, index))
                    continue;
                  child = obj[index];
                  for (key in child) {
                    entry = child[key];
                    element = render(element.ele(key), entry).up();
                  }
                }
              } else {
                for (key in obj) {
                  if (!hasProp.call(obj, key))
                    continue;
                  child = obj[key];
                  if (key === attrkey) {
                    if (typeof child === "object") {
                      for (attr in child) {
                        value = child[attr];
                        element = element.att(attr, value);
                      }
                    }
                  } else if (key === charkey) {
                    if (_this.options.cdata && requiresCDATA(child)) {
                      element = element.raw(wrapCDATA(child));
                    } else {
                      element = element.txt(child);
                    }
                  } else if (Array.isArray(child)) {
                    for (index in child) {
                      if (!hasProp.call(child, index))
                        continue;
                      entry = child[index];
                      if (typeof entry === "string") {
                        if (_this.options.cdata && requiresCDATA(entry)) {
                          element = element.ele(key).raw(wrapCDATA(entry)).up();
                        } else {
                          element = element.ele(key, entry).up();
                        }
                      } else {
                        element = render(element.ele(key), entry).up();
                      }
                    }
                  } else if (typeof child === "object") {
                    element = render(element.ele(key), child).up();
                  } else {
                    if (typeof child === "string" && _this.options.cdata && requiresCDATA(child)) {
                      element = element.ele(key).raw(wrapCDATA(child)).up();
                    } else {
                      if (child == null) {
                        child = "";
                      }
                      element = element.ele(key, child.toString()).up();
                    }
                  }
                }
              }
              return element;
            };
          }(this);
          rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
            headless: this.options.headless,
            allowSurrogateChars: this.options.allowSurrogateChars
          });
          return render(rootElement, rootObj).end(this.options.renderOpts);
        };
        return Builder;
      }();
    }).call(exports);
  }
});

// node_modules/sax/lib/sax.js
var require_sax = __commonJS({
  "node_modules/sax/lib/sax.js"(exports) {
    (function(sax) {
      sax.parser = function(strict, opt) {
        return new SAXParser(strict, opt);
      };
      sax.SAXParser = SAXParser;
      sax.SAXStream = SAXStream;
      sax.createStream = createStream;
      sax.MAX_BUFFER_LENGTH = 64 * 1024;
      var buffers = [
        "comment",
        "sgmlDecl",
        "textNode",
        "tagName",
        "doctype",
        "procInstName",
        "procInstBody",
        "entity",
        "attribName",
        "attribValue",
        "cdata",
        "script"
      ];
      sax.EVENTS = [
        "text",
        "processinginstruction",
        "sgmldeclaration",
        "doctype",
        "comment",
        "opentagstart",
        "attribute",
        "opentag",
        "closetag",
        "opencdata",
        "cdata",
        "closecdata",
        "error",
        "end",
        "ready",
        "script",
        "opennamespace",
        "closenamespace"
      ];
      function SAXParser(strict, opt) {
        if (!(this instanceof SAXParser)) {
          return new SAXParser(strict, opt);
        }
        var parser = this;
        clearBuffers(parser);
        parser.q = parser.c = "";
        parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
        parser.opt = opt || {};
        parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
        parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase";
        parser.tags = [];
        parser.closed = parser.closedRoot = parser.sawRoot = false;
        parser.tag = parser.error = null;
        parser.strict = !!strict;
        parser.noscript = !!(strict || parser.opt.noscript);
        parser.state = S.BEGIN;
        parser.strictEntities = parser.opt.strictEntities;
        parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
        parser.attribList = [];
        if (parser.opt.xmlns) {
          parser.ns = Object.create(rootNS);
        }
        if (parser.opt.unquotedAttributeValues === void 0) {
          parser.opt.unquotedAttributeValues = !strict;
        }
        parser.trackPosition = parser.opt.position !== false;
        if (parser.trackPosition) {
          parser.position = parser.line = parser.column = 0;
        }
        emit(parser, "onready");
      }
      if (!Object.create) {
        Object.create = function(o) {
          function F() {
          }
          F.prototype = o;
          var newf = new F();
          return newf;
        };
      }
      if (!Object.keys) {
        Object.keys = function(o) {
          var a = [];
          for (var i in o)
            if (o.hasOwnProperty(i))
              a.push(i);
          return a;
        };
      }
      function checkBufferLength(parser) {
        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
        var maxActual = 0;
        for (var i = 0, l = buffers.length; i < l; i++) {
          var len = parser[buffers[i]].length;
          if (len > maxAllowed) {
            switch (buffers[i]) {
              case "textNode":
                closeText(parser);
                break;
              case "cdata":
                emitNode(parser, "oncdata", parser.cdata);
                parser.cdata = "";
                break;
              case "script":
                emitNode(parser, "onscript", parser.script);
                parser.script = "";
                break;
              default:
                error(parser, "Max buffer length exceeded: " + buffers[i]);
            }
          }
          maxActual = Math.max(maxActual, len);
        }
        var m = sax.MAX_BUFFER_LENGTH - maxActual;
        parser.bufferCheckPosition = m + parser.position;
      }
      function clearBuffers(parser) {
        for (var i = 0, l = buffers.length; i < l; i++) {
          parser[buffers[i]] = "";
        }
      }
      function flushBuffers(parser) {
        closeText(parser);
        if (parser.cdata !== "") {
          emitNode(parser, "oncdata", parser.cdata);
          parser.cdata = "";
        }
        if (parser.script !== "") {
          emitNode(parser, "onscript", parser.script);
          parser.script = "";
        }
      }
      SAXParser.prototype = {
        end: function() {
          end(this);
        },
        write,
        resume: function() {
          this.error = null;
          return this;
        },
        close: function() {
          return this.write(null);
        },
        flush: function() {
          flushBuffers(this);
        }
      };
      var Stream;
      try {
        Stream = require("stream").Stream;
      } catch (ex) {
        Stream = function() {
        };
      }
      if (!Stream)
        Stream = function() {
        };
      var streamWraps = sax.EVENTS.filter(function(ev) {
        return ev !== "error" && ev !== "end";
      });
      function createStream(strict, opt) {
        return new SAXStream(strict, opt);
      }
      function SAXStream(strict, opt) {
        if (!(this instanceof SAXStream)) {
          return new SAXStream(strict, opt);
        }
        Stream.apply(this);
        this._parser = new SAXParser(strict, opt);
        this.writable = true;
        this.readable = true;
        var me = this;
        this._parser.onend = function() {
          me.emit("end");
        };
        this._parser.onerror = function(er) {
          me.emit("error", er);
          me._parser.error = null;
        };
        this._decoder = null;
        streamWraps.forEach(function(ev) {
          Object.defineProperty(me, "on" + ev, {
            get: function() {
              return me._parser["on" + ev];
            },
            set: function(h) {
              if (!h) {
                me.removeAllListeners(ev);
                me._parser["on" + ev] = h;
                return h;
              }
              me.on(ev, h);
            },
            enumerable: true,
            configurable: false
          });
        });
      }
      SAXStream.prototype = Object.create(Stream.prototype, {
        constructor: {
          value: SAXStream
        }
      });
      SAXStream.prototype.write = function(data) {
        if (typeof Buffer === "function" && typeof Buffer.isBuffer === "function" && Buffer.isBuffer(data)) {
          if (!this._decoder) {
            var SD = require("string_decoder").StringDecoder;
            this._decoder = new SD("utf8");
          }
          data = this._decoder.write(data);
        }
        this._parser.write(data.toString());
        this.emit("data", data);
        return true;
      };
      SAXStream.prototype.end = function(chunk) {
        if (chunk && chunk.length) {
          this.write(chunk);
        }
        this._parser.end();
        return true;
      };
      SAXStream.prototype.on = function(ev, handler) {
        var me = this;
        if (!me._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) {
          me._parser["on" + ev] = function() {
            var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
            args.splice(0, 0, ev);
            me.emit.apply(me, args);
          };
        }
        return Stream.prototype.on.call(me, ev, handler);
      };
      var CDATA = "[CDATA[";
      var DOCTYPE = "DOCTYPE";
      var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
      var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
      var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };
      var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
      var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
      var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
      var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
      function isWhitespace(c) {
        return c === " " || c === "\n" || c === "\r" || c === "	";
      }
      function isQuote(c) {
        return c === '"' || c === "'";
      }
      function isAttribEnd(c) {
        return c === ">" || isWhitespace(c);
      }
      function isMatch(regex, c) {
        return regex.test(c);
      }
      function notMatch(regex, c) {
        return !isMatch(regex, c);
      }
      var S = 0;
      sax.STATE = {
        BEGIN: S++,
        BEGIN_WHITESPACE: S++,
        TEXT: S++,
        TEXT_ENTITY: S++,
        OPEN_WAKA: S++,
        SGML_DECL: S++,
        SGML_DECL_QUOTED: S++,
        DOCTYPE: S++,
        DOCTYPE_QUOTED: S++,
        DOCTYPE_DTD: S++,
        DOCTYPE_DTD_QUOTED: S++,
        COMMENT_STARTING: S++,
        COMMENT: S++,
        COMMENT_ENDING: S++,
        COMMENT_ENDED: S++,
        CDATA: S++,
        CDATA_ENDING: S++,
        CDATA_ENDING_2: S++,
        PROC_INST: S++,
        PROC_INST_BODY: S++,
        PROC_INST_ENDING: S++,
        OPEN_TAG: S++,
        OPEN_TAG_SLASH: S++,
        ATTRIB: S++,
        ATTRIB_NAME: S++,
        ATTRIB_NAME_SAW_WHITE: S++,
        ATTRIB_VALUE: S++,
        ATTRIB_VALUE_QUOTED: S++,
        ATTRIB_VALUE_CLOSED: S++,
        ATTRIB_VALUE_UNQUOTED: S++,
        ATTRIB_VALUE_ENTITY_Q: S++,
        ATTRIB_VALUE_ENTITY_U: S++,
        CLOSE_TAG: S++,
        CLOSE_TAG_SAW_WHITE: S++,
        SCRIPT: S++,
        SCRIPT_ENDING: S++
      };
      sax.XML_ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'"
      };
      sax.ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'",
        "AElig": 198,
        "Aacute": 193,
        "Acirc": 194,
        "Agrave": 192,
        "Aring": 197,
        "Atilde": 195,
        "Auml": 196,
        "Ccedil": 199,
        "ETH": 208,
        "Eacute": 201,
        "Ecirc": 202,
        "Egrave": 200,
        "Euml": 203,
        "Iacute": 205,
        "Icirc": 206,
        "Igrave": 204,
        "Iuml": 207,
        "Ntilde": 209,
        "Oacute": 211,
        "Ocirc": 212,
        "Ograve": 210,
        "Oslash": 216,
        "Otilde": 213,
        "Ouml": 214,
        "THORN": 222,
        "Uacute": 218,
        "Ucirc": 219,
        "Ugrave": 217,
        "Uuml": 220,
        "Yacute": 221,
        "aacute": 225,
        "acirc": 226,
        "aelig": 230,
        "agrave": 224,
        "aring": 229,
        "atilde": 227,
        "auml": 228,
        "ccedil": 231,
        "eacute": 233,
        "ecirc": 234,
        "egrave": 232,
        "eth": 240,
        "euml": 235,
        "iacute": 237,
        "icirc": 238,
        "igrave": 236,
        "iuml": 239,
        "ntilde": 241,
        "oacute": 243,
        "ocirc": 244,
        "ograve": 242,
        "oslash": 248,
        "otilde": 245,
        "ouml": 246,
        "szlig": 223,
        "thorn": 254,
        "uacute": 250,
        "ucirc": 251,
        "ugrave": 249,
        "uuml": 252,
        "yacute": 253,
        "yuml": 255,
        "copy": 169,
        "reg": 174,
        "nbsp": 160,
        "iexcl": 161,
        "cent": 162,
        "pound": 163,
        "curren": 164,
        "yen": 165,
        "brvbar": 166,
        "sect": 167,
        "uml": 168,
        "ordf": 170,
        "laquo": 171,
        "not": 172,
        "shy": 173,
        "macr": 175,
        "deg": 176,
        "plusmn": 177,
        "sup1": 185,
        "sup2": 178,
        "sup3": 179,
        "acute": 180,
        "micro": 181,
        "para": 182,
        "middot": 183,
        "cedil": 184,
        "ordm": 186,
        "raquo": 187,
        "frac14": 188,
        "frac12": 189,
        "frac34": 190,
        "iquest": 191,
        "times": 215,
        "divide": 247,
        "OElig": 338,
        "oelig": 339,
        "Scaron": 352,
        "scaron": 353,
        "Yuml": 376,
        "fnof": 402,
        "circ": 710,
        "tilde": 732,
        "Alpha": 913,
        "Beta": 914,
        "Gamma": 915,
        "Delta": 916,
        "Epsilon": 917,
        "Zeta": 918,
        "Eta": 919,
        "Theta": 920,
        "Iota": 921,
        "Kappa": 922,
        "Lambda": 923,
        "Mu": 924,
        "Nu": 925,
        "Xi": 926,
        "Omicron": 927,
        "Pi": 928,
        "Rho": 929,
        "Sigma": 931,
        "Tau": 932,
        "Upsilon": 933,
        "Phi": 934,
        "Chi": 935,
        "Psi": 936,
        "Omega": 937,
        "alpha": 945,
        "beta": 946,
        "gamma": 947,
        "delta": 948,
        "epsilon": 949,
        "zeta": 950,
        "eta": 951,
        "theta": 952,
        "iota": 953,
        "kappa": 954,
        "lambda": 955,
        "mu": 956,
        "nu": 957,
        "xi": 958,
        "omicron": 959,
        "pi": 960,
        "rho": 961,
        "sigmaf": 962,
        "sigma": 963,
        "tau": 964,
        "upsilon": 965,
        "phi": 966,
        "chi": 967,
        "psi": 968,
        "omega": 969,
        "thetasym": 977,
        "upsih": 978,
        "piv": 982,
        "ensp": 8194,
        "emsp": 8195,
        "thinsp": 8201,
        "zwnj": 8204,
        "zwj": 8205,
        "lrm": 8206,
        "rlm": 8207,
        "ndash": 8211,
        "mdash": 8212,
        "lsquo": 8216,
        "rsquo": 8217,
        "sbquo": 8218,
        "ldquo": 8220,
        "rdquo": 8221,
        "bdquo": 8222,
        "dagger": 8224,
        "Dagger": 8225,
        "bull": 8226,
        "hellip": 8230,
        "permil": 8240,
        "prime": 8242,
        "Prime": 8243,
        "lsaquo": 8249,
        "rsaquo": 8250,
        "oline": 8254,
        "frasl": 8260,
        "euro": 8364,
        "image": 8465,
        "weierp": 8472,
        "real": 8476,
        "trade": 8482,
        "alefsym": 8501,
        "larr": 8592,
        "uarr": 8593,
        "rarr": 8594,
        "darr": 8595,
        "harr": 8596,
        "crarr": 8629,
        "lArr": 8656,
        "uArr": 8657,
        "rArr": 8658,
        "dArr": 8659,
        "hArr": 8660,
        "forall": 8704,
        "part": 8706,
        "exist": 8707,
        "empty": 8709,
        "nabla": 8711,
        "isin": 8712,
        "notin": 8713,
        "ni": 8715,
        "prod": 8719,
        "sum": 8721,
        "minus": 8722,
        "lowast": 8727,
        "radic": 8730,
        "prop": 8733,
        "infin": 8734,
        "ang": 8736,
        "and": 8743,
        "or": 8744,
        "cap": 8745,
        "cup": 8746,
        "int": 8747,
        "there4": 8756,
        "sim": 8764,
        "cong": 8773,
        "asymp": 8776,
        "ne": 8800,
        "equiv": 8801,
        "le": 8804,
        "ge": 8805,
        "sub": 8834,
        "sup": 8835,
        "nsub": 8836,
        "sube": 8838,
        "supe": 8839,
        "oplus": 8853,
        "otimes": 8855,
        "perp": 8869,
        "sdot": 8901,
        "lceil": 8968,
        "rceil": 8969,
        "lfloor": 8970,
        "rfloor": 8971,
        "lang": 9001,
        "rang": 9002,
        "loz": 9674,
        "spades": 9824,
        "clubs": 9827,
        "hearts": 9829,
        "diams": 9830
      };
      Object.keys(sax.ENTITIES).forEach(function(key) {
        var e = sax.ENTITIES[key];
        var s2 = typeof e === "number" ? String.fromCharCode(e) : e;
        sax.ENTITIES[key] = s2;
      });
      for (var s in sax.STATE) {
        sax.STATE[sax.STATE[s]] = s;
      }
      S = sax.STATE;
      function emit(parser, event, data) {
        parser[event] && parser[event](data);
      }
      function emitNode(parser, nodeType, data) {
        if (parser.textNode)
          closeText(parser);
        emit(parser, nodeType, data);
      }
      function closeText(parser) {
        parser.textNode = textopts(parser.opt, parser.textNode);
        if (parser.textNode)
          emit(parser, "ontext", parser.textNode);
        parser.textNode = "";
      }
      function textopts(opt, text) {
        if (opt.trim)
          text = text.trim();
        if (opt.normalize)
          text = text.replace(/\s+/g, " ");
        return text;
      }
      function error(parser, er) {
        closeText(parser);
        if (parser.trackPosition) {
          er += "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c;
        }
        er = new Error(er);
        parser.error = er;
        emit(parser, "onerror", er);
        return parser;
      }
      function end(parser) {
        if (parser.sawRoot && !parser.closedRoot)
          strictFail(parser, "Unclosed root tag");
        if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {
          error(parser, "Unexpected end");
        }
        closeText(parser);
        parser.c = "";
        parser.closed = true;
        emit(parser, "onend");
        SAXParser.call(parser, parser.strict, parser.opt);
        return parser;
      }
      function strictFail(parser, message) {
        if (typeof parser !== "object" || !(parser instanceof SAXParser)) {
          throw new Error("bad call to strictFail");
        }
        if (parser.strict) {
          error(parser, message);
        }
      }
      function newTag(parser) {
        if (!parser.strict)
          parser.tagName = parser.tagName[parser.looseCase]();
        var parent = parser.tags[parser.tags.length - 1] || parser;
        var tag = parser.tag = { name: parser.tagName, attributes: {} };
        if (parser.opt.xmlns) {
          tag.ns = parent.ns;
        }
        parser.attribList.length = 0;
        emitNode(parser, "onopentagstart", tag);
      }
      function qname(name, attribute) {
        var i = name.indexOf(":");
        var qualName = i < 0 ? ["", name] : name.split(":");
        var prefix = qualName[0];
        var local = qualName[1];
        if (attribute && name === "xmlns") {
          prefix = "xmlns";
          local = "";
        }
        return { prefix, local };
      }
      function attrib(parser) {
        if (!parser.strict) {
          parser.attribName = parser.attribName[parser.looseCase]();
        }
        if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
          parser.attribName = parser.attribValue = "";
          return;
        }
        if (parser.opt.xmlns) {
          var qn = qname(parser.attribName, true);
          var prefix = qn.prefix;
          var local = qn.local;
          if (prefix === "xmlns") {
            if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
              strictFail(parser, "xml: prefix must be bound to " + XML_NAMESPACE + "\nActual: " + parser.attribValue);
            } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
              strictFail(parser, "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\nActual: " + parser.attribValue);
            } else {
              var tag = parser.tag;
              var parent = parser.tags[parser.tags.length - 1] || parser;
              if (tag.ns === parent.ns) {
                tag.ns = Object.create(parent.ns);
              }
              tag.ns[local] = parser.attribValue;
            }
          }
          parser.attribList.push([parser.attribName, parser.attribValue]);
        } else {
          parser.tag.attributes[parser.attribName] = parser.attribValue;
          emitNode(parser, "onattribute", {
            name: parser.attribName,
            value: parser.attribValue
          });
        }
        parser.attribName = parser.attribValue = "";
      }
      function openTag(parser, selfClosing) {
        if (parser.opt.xmlns) {
          var tag = parser.tag;
          var qn = qname(parser.tagName);
          tag.prefix = qn.prefix;
          tag.local = qn.local;
          tag.uri = tag.ns[qn.prefix] || "";
          if (tag.prefix && !tag.uri) {
            strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(parser.tagName));
            tag.uri = qn.prefix;
          }
          var parent = parser.tags[parser.tags.length - 1] || parser;
          if (tag.ns && parent.ns !== tag.ns) {
            Object.keys(tag.ns).forEach(function(p) {
              emitNode(parser, "onopennamespace", {
                prefix: p,
                uri: tag.ns[p]
              });
            });
          }
          for (var i = 0, l = parser.attribList.length; i < l; i++) {
            var nv = parser.attribList[i];
            var name = nv[0];
            var value = nv[1];
            var qualName = qname(name, true);
            var prefix = qualName.prefix;
            var local = qualName.local;
            var uri = prefix === "" ? "" : tag.ns[prefix] || "";
            var a = {
              name,
              value,
              prefix,
              local,
              uri
            };
            if (prefix && prefix !== "xmlns" && !uri) {
              strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(prefix));
              a.uri = prefix;
            }
            parser.tag.attributes[name] = a;
            emitNode(parser, "onattribute", a);
          }
          parser.attribList.length = 0;
        }
        parser.tag.isSelfClosing = !!selfClosing;
        parser.sawRoot = true;
        parser.tags.push(parser.tag);
        emitNode(parser, "onopentag", parser.tag);
        if (!selfClosing) {
          if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
            parser.state = S.SCRIPT;
          } else {
            parser.state = S.TEXT;
          }
          parser.tag = null;
          parser.tagName = "";
        }
        parser.attribName = parser.attribValue = "";
        parser.attribList.length = 0;
      }
      function closeTag(parser) {
        if (!parser.tagName) {
          strictFail(parser, "Weird empty close tag.");
          parser.textNode += "</>";
          parser.state = S.TEXT;
          return;
        }
        if (parser.script) {
          if (parser.tagName !== "script") {
            parser.script += "</" + parser.tagName + ">";
            parser.tagName = "";
            parser.state = S.SCRIPT;
            return;
          }
          emitNode(parser, "onscript", parser.script);
          parser.script = "";
        }
        var t = parser.tags.length;
        var tagName = parser.tagName;
        if (!parser.strict) {
          tagName = tagName[parser.looseCase]();
        }
        var closeTo = tagName;
        while (t--) {
          var close = parser.tags[t];
          if (close.name !== closeTo) {
            strictFail(parser, "Unexpected close tag");
          } else {
            break;
          }
        }
        if (t < 0) {
          strictFail(parser, "Unmatched closing tag: " + parser.tagName);
          parser.textNode += "</" + parser.tagName + ">";
          parser.state = S.TEXT;
          return;
        }
        parser.tagName = tagName;
        var s2 = parser.tags.length;
        while (s2-- > t) {
          var tag = parser.tag = parser.tags.pop();
          parser.tagName = parser.tag.name;
          emitNode(parser, "onclosetag", parser.tagName);
          var x = {};
          for (var i in tag.ns) {
            x[i] = tag.ns[i];
          }
          var parent = parser.tags[parser.tags.length - 1] || parser;
          if (parser.opt.xmlns && tag.ns !== parent.ns) {
            Object.keys(tag.ns).forEach(function(p) {
              var n = tag.ns[p];
              emitNode(parser, "onclosenamespace", { prefix: p, uri: n });
            });
          }
        }
        if (t === 0)
          parser.closedRoot = true;
        parser.tagName = parser.attribValue = parser.attribName = "";
        parser.attribList.length = 0;
        parser.state = S.TEXT;
      }
      function parseEntity(parser) {
        var entity = parser.entity;
        var entityLC = entity.toLowerCase();
        var num;
        var numStr = "";
        if (parser.ENTITIES[entity]) {
          return parser.ENTITIES[entity];
        }
        if (parser.ENTITIES[entityLC]) {
          return parser.ENTITIES[entityLC];
        }
        entity = entityLC;
        if (entity.charAt(0) === "#") {
          if (entity.charAt(1) === "x") {
            entity = entity.slice(2);
            num = parseInt(entity, 16);
            numStr = num.toString(16);
          } else {
            entity = entity.slice(1);
            num = parseInt(entity, 10);
            numStr = num.toString(10);
          }
        }
        entity = entity.replace(/^0+/, "");
        if (isNaN(num) || numStr.toLowerCase() !== entity) {
          strictFail(parser, "Invalid character entity");
          return "&" + parser.entity + ";";
        }
        return String.fromCodePoint(num);
      }
      function beginWhiteSpace(parser, c) {
        if (c === "<") {
          parser.state = S.OPEN_WAKA;
          parser.startTagPosition = parser.position;
        } else if (!isWhitespace(c)) {
          strictFail(parser, "Non-whitespace before first tag.");
          parser.textNode = c;
          parser.state = S.TEXT;
        }
      }
      function charAt(chunk, i) {
        var result = "";
        if (i < chunk.length) {
          result = chunk.charAt(i);
        }
        return result;
      }
      function write(chunk) {
        var parser = this;
        if (this.error) {
          throw this.error;
        }
        if (parser.closed) {
          return error(parser, "Cannot write after close. Assign an onready handler.");
        }
        if (chunk === null) {
          return end(parser);
        }
        if (typeof chunk === "object") {
          chunk = chunk.toString();
        }
        var i = 0;
        var c = "";
        while (true) {
          c = charAt(chunk, i++);
          parser.c = c;
          if (!c) {
            break;
          }
          if (parser.trackPosition) {
            parser.position++;
            if (c === "\n") {
              parser.line++;
              parser.column = 0;
            } else {
              parser.column++;
            }
          }
          switch (parser.state) {
            case S.BEGIN:
              parser.state = S.BEGIN_WHITESPACE;
              if (c === "\uFEFF") {
                continue;
              }
              beginWhiteSpace(parser, c);
              continue;
            case S.BEGIN_WHITESPACE:
              beginWhiteSpace(parser, c);
              continue;
            case S.TEXT:
              if (parser.sawRoot && !parser.closedRoot) {
                var starti = i - 1;
                while (c && c !== "<" && c !== "&") {
                  c = charAt(chunk, i++);
                  if (c && parser.trackPosition) {
                    parser.position++;
                    if (c === "\n") {
                      parser.line++;
                      parser.column = 0;
                    } else {
                      parser.column++;
                    }
                  }
                }
                parser.textNode += chunk.substring(starti, i - 1);
              }
              if (c === "<" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                parser.state = S.OPEN_WAKA;
                parser.startTagPosition = parser.position;
              } else {
                if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {
                  strictFail(parser, "Text data outside of root node.");
                }
                if (c === "&") {
                  parser.state = S.TEXT_ENTITY;
                } else {
                  parser.textNode += c;
                }
              }
              continue;
            case S.SCRIPT:
              if (c === "<") {
                parser.state = S.SCRIPT_ENDING;
              } else {
                parser.script += c;
              }
              continue;
            case S.SCRIPT_ENDING:
              if (c === "/") {
                parser.state = S.CLOSE_TAG;
              } else {
                parser.script += "<" + c;
                parser.state = S.SCRIPT;
              }
              continue;
            case S.OPEN_WAKA:
              if (c === "!") {
                parser.state = S.SGML_DECL;
                parser.sgmlDecl = "";
              } else if (isWhitespace(c)) {
              } else if (isMatch(nameStart, c)) {
                parser.state = S.OPEN_TAG;
                parser.tagName = c;
              } else if (c === "/") {
                parser.state = S.CLOSE_TAG;
                parser.tagName = "";
              } else if (c === "?") {
                parser.state = S.PROC_INST;
                parser.procInstName = parser.procInstBody = "";
              } else {
                strictFail(parser, "Unencoded <");
                if (parser.startTagPosition + 1 < parser.position) {
                  var pad = parser.position - parser.startTagPosition;
                  c = new Array(pad).join(" ") + c;
                }
                parser.textNode += "<" + c;
                parser.state = S.TEXT;
              }
              continue;
            case S.SGML_DECL:
              if (parser.sgmlDecl + c === "--") {
                parser.state = S.COMMENT;
                parser.comment = "";
                parser.sgmlDecl = "";
                continue;
              }
              if (parser.doctype && parser.doctype !== true && parser.sgmlDecl) {
                parser.state = S.DOCTYPE_DTD;
                parser.doctype += "<!" + parser.sgmlDecl + c;
                parser.sgmlDecl = "";
              } else if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                emitNode(parser, "onopencdata");
                parser.state = S.CDATA;
                parser.sgmlDecl = "";
                parser.cdata = "";
              } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                parser.state = S.DOCTYPE;
                if (parser.doctype || parser.sawRoot) {
                  strictFail(parser, "Inappropriately located doctype declaration");
                }
                parser.doctype = "";
                parser.sgmlDecl = "";
              } else if (c === ">") {
                emitNode(parser, "onsgmldeclaration", parser.sgmlDecl);
                parser.sgmlDecl = "";
                parser.state = S.TEXT;
              } else if (isQuote(c)) {
                parser.state = S.SGML_DECL_QUOTED;
                parser.sgmlDecl += c;
              } else {
                parser.sgmlDecl += c;
              }
              continue;
            case S.SGML_DECL_QUOTED:
              if (c === parser.q) {
                parser.state = S.SGML_DECL;
                parser.q = "";
              }
              parser.sgmlDecl += c;
              continue;
            case S.DOCTYPE:
              if (c === ">") {
                parser.state = S.TEXT;
                emitNode(parser, "ondoctype", parser.doctype);
                parser.doctype = true;
              } else {
                parser.doctype += c;
                if (c === "[") {
                  parser.state = S.DOCTYPE_DTD;
                } else if (isQuote(c)) {
                  parser.state = S.DOCTYPE_QUOTED;
                  parser.q = c;
                }
              }
              continue;
            case S.DOCTYPE_QUOTED:
              parser.doctype += c;
              if (c === parser.q) {
                parser.q = "";
                parser.state = S.DOCTYPE;
              }
              continue;
            case S.DOCTYPE_DTD:
              if (c === "]") {
                parser.doctype += c;
                parser.state = S.DOCTYPE;
              } else if (c === "<") {
                parser.state = S.OPEN_WAKA;
                parser.startTagPosition = parser.position;
              } else if (isQuote(c)) {
                parser.doctype += c;
                parser.state = S.DOCTYPE_DTD_QUOTED;
                parser.q = c;
              } else {
                parser.doctype += c;
              }
              continue;
            case S.DOCTYPE_DTD_QUOTED:
              parser.doctype += c;
              if (c === parser.q) {
                parser.state = S.DOCTYPE_DTD;
                parser.q = "";
              }
              continue;
            case S.COMMENT:
              if (c === "-") {
                parser.state = S.COMMENT_ENDING;
              } else {
                parser.comment += c;
              }
              continue;
            case S.COMMENT_ENDING:
              if (c === "-") {
                parser.state = S.COMMENT_ENDED;
                parser.comment = textopts(parser.opt, parser.comment);
                if (parser.comment) {
                  emitNode(parser, "oncomment", parser.comment);
                }
                parser.comment = "";
              } else {
                parser.comment += "-" + c;
                parser.state = S.COMMENT;
              }
              continue;
            case S.COMMENT_ENDED:
              if (c !== ">") {
                strictFail(parser, "Malformed comment");
                parser.comment += "--" + c;
                parser.state = S.COMMENT;
              } else if (parser.doctype && parser.doctype !== true) {
                parser.state = S.DOCTYPE_DTD;
              } else {
                parser.state = S.TEXT;
              }
              continue;
            case S.CDATA:
              if (c === "]") {
                parser.state = S.CDATA_ENDING;
              } else {
                parser.cdata += c;
              }
              continue;
            case S.CDATA_ENDING:
              if (c === "]") {
                parser.state = S.CDATA_ENDING_2;
              } else {
                parser.cdata += "]" + c;
                parser.state = S.CDATA;
              }
              continue;
            case S.CDATA_ENDING_2:
              if (c === ">") {
                if (parser.cdata) {
                  emitNode(parser, "oncdata", parser.cdata);
                }
                emitNode(parser, "onclosecdata");
                parser.cdata = "";
                parser.state = S.TEXT;
              } else if (c === "]") {
                parser.cdata += "]";
              } else {
                parser.cdata += "]]" + c;
                parser.state = S.CDATA;
              }
              continue;
            case S.PROC_INST:
              if (c === "?") {
                parser.state = S.PROC_INST_ENDING;
              } else if (isWhitespace(c)) {
                parser.state = S.PROC_INST_BODY;
              } else {
                parser.procInstName += c;
              }
              continue;
            case S.PROC_INST_BODY:
              if (!parser.procInstBody && isWhitespace(c)) {
                continue;
              } else if (c === "?") {
                parser.state = S.PROC_INST_ENDING;
              } else {
                parser.procInstBody += c;
              }
              continue;
            case S.PROC_INST_ENDING:
              if (c === ">") {
                emitNode(parser, "onprocessinginstruction", {
                  name: parser.procInstName,
                  body: parser.procInstBody
                });
                parser.procInstName = parser.procInstBody = "";
                parser.state = S.TEXT;
              } else {
                parser.procInstBody += "?" + c;
                parser.state = S.PROC_INST_BODY;
              }
              continue;
            case S.OPEN_TAG:
              if (isMatch(nameBody, c)) {
                parser.tagName += c;
              } else {
                newTag(parser);
                if (c === ">") {
                  openTag(parser);
                } else if (c === "/") {
                  parser.state = S.OPEN_TAG_SLASH;
                } else {
                  if (!isWhitespace(c)) {
                    strictFail(parser, "Invalid character in tag name");
                  }
                  parser.state = S.ATTRIB;
                }
              }
              continue;
            case S.OPEN_TAG_SLASH:
              if (c === ">") {
                openTag(parser, true);
                closeTag(parser);
              } else {
                strictFail(parser, "Forward-slash in opening tag not followed by >");
                parser.state = S.ATTRIB;
              }
              continue;
            case S.ATTRIB:
              if (isWhitespace(c)) {
                continue;
              } else if (c === ">") {
                openTag(parser);
              } else if (c === "/") {
                parser.state = S.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c)) {
                parser.attribName = c;
                parser.attribValue = "";
                parser.state = S.ATTRIB_NAME;
              } else {
                strictFail(parser, "Invalid attribute name");
              }
              continue;
            case S.ATTRIB_NAME:
              if (c === "=") {
                parser.state = S.ATTRIB_VALUE;
              } else if (c === ">") {
                strictFail(parser, "Attribute without value");
                parser.attribValue = parser.attribName;
                attrib(parser);
                openTag(parser);
              } else if (isWhitespace(c)) {
                parser.state = S.ATTRIB_NAME_SAW_WHITE;
              } else if (isMatch(nameBody, c)) {
                parser.attribName += c;
              } else {
                strictFail(parser, "Invalid attribute name");
              }
              continue;
            case S.ATTRIB_NAME_SAW_WHITE:
              if (c === "=") {
                parser.state = S.ATTRIB_VALUE;
              } else if (isWhitespace(c)) {
                continue;
              } else {
                strictFail(parser, "Attribute without value");
                parser.tag.attributes[parser.attribName] = "";
                parser.attribValue = "";
                emitNode(parser, "onattribute", {
                  name: parser.attribName,
                  value: ""
                });
                parser.attribName = "";
                if (c === ">") {
                  openTag(parser);
                } else if (isMatch(nameStart, c)) {
                  parser.attribName = c;
                  parser.state = S.ATTRIB_NAME;
                } else {
                  strictFail(parser, "Invalid attribute name");
                  parser.state = S.ATTRIB;
                }
              }
              continue;
            case S.ATTRIB_VALUE:
              if (isWhitespace(c)) {
                continue;
              } else if (isQuote(c)) {
                parser.q = c;
                parser.state = S.ATTRIB_VALUE_QUOTED;
              } else {
                if (!parser.opt.unquotedAttributeValues) {
                  error(parser, "Unquoted attribute value");
                }
                parser.state = S.ATTRIB_VALUE_UNQUOTED;
                parser.attribValue = c;
              }
              continue;
            case S.ATTRIB_VALUE_QUOTED:
              if (c !== parser.q) {
                if (c === "&") {
                  parser.state = S.ATTRIB_VALUE_ENTITY_Q;
                } else {
                  parser.attribValue += c;
                }
                continue;
              }
              attrib(parser);
              parser.q = "";
              parser.state = S.ATTRIB_VALUE_CLOSED;
              continue;
            case S.ATTRIB_VALUE_CLOSED:
              if (isWhitespace(c)) {
                parser.state = S.ATTRIB;
              } else if (c === ">") {
                openTag(parser);
              } else if (c === "/") {
                parser.state = S.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c)) {
                strictFail(parser, "No whitespace between attributes");
                parser.attribName = c;
                parser.attribValue = "";
                parser.state = S.ATTRIB_NAME;
              } else {
                strictFail(parser, "Invalid attribute name");
              }
              continue;
            case S.ATTRIB_VALUE_UNQUOTED:
              if (!isAttribEnd(c)) {
                if (c === "&") {
                  parser.state = S.ATTRIB_VALUE_ENTITY_U;
                } else {
                  parser.attribValue += c;
                }
                continue;
              }
              attrib(parser);
              if (c === ">") {
                openTag(parser);
              } else {
                parser.state = S.ATTRIB;
              }
              continue;
            case S.CLOSE_TAG:
              if (!parser.tagName) {
                if (isWhitespace(c)) {
                  continue;
                } else if (notMatch(nameStart, c)) {
                  if (parser.script) {
                    parser.script += "</" + c;
                    parser.state = S.SCRIPT;
                  } else {
                    strictFail(parser, "Invalid tagname in closing tag.");
                  }
                } else {
                  parser.tagName = c;
                }
              } else if (c === ">") {
                closeTag(parser);
              } else if (isMatch(nameBody, c)) {
                parser.tagName += c;
              } else if (parser.script) {
                parser.script += "</" + parser.tagName;
                parser.tagName = "";
                parser.state = S.SCRIPT;
              } else {
                if (!isWhitespace(c)) {
                  strictFail(parser, "Invalid tagname in closing tag");
                }
                parser.state = S.CLOSE_TAG_SAW_WHITE;
              }
              continue;
            case S.CLOSE_TAG_SAW_WHITE:
              if (isWhitespace(c)) {
                continue;
              }
              if (c === ">") {
                closeTag(parser);
              } else {
                strictFail(parser, "Invalid characters in closing tag");
              }
              continue;
            case S.TEXT_ENTITY:
            case S.ATTRIB_VALUE_ENTITY_Q:
            case S.ATTRIB_VALUE_ENTITY_U:
              var returnState;
              var buffer;
              switch (parser.state) {
                case S.TEXT_ENTITY:
                  returnState = S.TEXT;
                  buffer = "textNode";
                  break;
                case S.ATTRIB_VALUE_ENTITY_Q:
                  returnState = S.ATTRIB_VALUE_QUOTED;
                  buffer = "attribValue";
                  break;
                case S.ATTRIB_VALUE_ENTITY_U:
                  returnState = S.ATTRIB_VALUE_UNQUOTED;
                  buffer = "attribValue";
                  break;
              }
              if (c === ";") {
                var parsedEntity = parseEntity(parser);
                if (parser.opt.unparsedEntities && !Object.values(sax.XML_ENTITIES).includes(parsedEntity)) {
                  parser.entity = "";
                  parser.state = returnState;
                  parser.write(parsedEntity);
                } else {
                  parser[buffer] += parsedEntity;
                  parser.entity = "";
                  parser.state = returnState;
                }
              } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {
                parser.entity += c;
              } else {
                strictFail(parser, "Invalid character in entity name");
                parser[buffer] += "&" + parser.entity + c;
                parser.entity = "";
                parser.state = returnState;
              }
              continue;
            default: {
              throw new Error(parser, "Unknown state: " + parser.state);
            }
          }
        }
        if (parser.position >= parser.bufferCheckPosition) {
          checkBufferLength(parser);
        }
        return parser;
      }
      if (!String.fromCodePoint) {
        (function() {
          var stringFromCharCode = String.fromCharCode;
          var floor = Math.floor;
          var fromCodePoint = function() {
            var MAX_SIZE = 16384;
            var codeUnits = [];
            var highSurrogate;
            var lowSurrogate;
            var index = -1;
            var length = arguments.length;
            if (!length) {
              return "";
            }
            var result = "";
            while (++index < length) {
              var codePoint = Number(arguments[index]);
              if (!isFinite(codePoint) || codePoint < 0 || codePoint > 1114111 || floor(codePoint) !== codePoint) {
                throw RangeError("Invalid code point: " + codePoint);
              }
              if (codePoint <= 65535) {
                codeUnits.push(codePoint);
              } else {
                codePoint -= 65536;
                highSurrogate = (codePoint >> 10) + 55296;
                lowSurrogate = codePoint % 1024 + 56320;
                codeUnits.push(highSurrogate, lowSurrogate);
              }
              if (index + 1 === length || codeUnits.length > MAX_SIZE) {
                result += stringFromCharCode.apply(null, codeUnits);
                codeUnits.length = 0;
              }
            }
            return result;
          };
          if (Object.defineProperty) {
            Object.defineProperty(String, "fromCodePoint", {
              value: fromCodePoint,
              configurable: true,
              writable: true
            });
          } else {
            String.fromCodePoint = fromCodePoint;
          }
        })();
      }
    })(typeof exports === "undefined" ? exports.sax = {} : exports);
  }
});

// node_modules/xml2js/lib/bom.js
var require_bom = __commonJS({
  "node_modules/xml2js/lib/bom.js"(exports) {
    (function() {
      "use strict";
      exports.stripBOM = function(str) {
        if (str[0] === "\uFEFF") {
          return str.substring(1);
        } else {
          return str;
        }
      };
    }).call(exports);
  }
});

// node_modules/xml2js/lib/processors.js
var require_processors = __commonJS({
  "node_modules/xml2js/lib/processors.js"(exports) {
    (function() {
      "use strict";
      var prefixMatch;
      prefixMatch = new RegExp(/(?!xmlns)^.*:/);
      exports.normalize = function(str) {
        return str.toLowerCase();
      };
      exports.firstCharLowerCase = function(str) {
        return str.charAt(0).toLowerCase() + str.slice(1);
      };
      exports.stripPrefix = function(str) {
        return str.replace(prefixMatch, "");
      };
      exports.parseNumbers = function(str) {
        if (!isNaN(str)) {
          str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
        }
        return str;
      };
      exports.parseBooleans = function(str) {
        if (/^(?:true|false)$/i.test(str)) {
          str = str.toLowerCase() === "true";
        }
        return str;
      };
    }).call(exports);
  }
});

// node_modules/xml2js/lib/parser.js
var require_parser = __commonJS({
  "node_modules/xml2js/lib/parser.js"(exports) {
    (function() {
      "use strict";
      var bom, defaults, events, isEmpty, processItem, processors, sax, setImmediate, bind = function(fn, me) {
        return function() {
          return fn.apply(me, arguments);
        };
      }, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      sax = require_sax();
      events = require("events");
      bom = require_bom();
      processors = require_processors();
      setImmediate = require("timers").setImmediate;
      defaults = require_defaults().defaults;
      isEmpty = function(thing) {
        return typeof thing === "object" && thing != null && Object.keys(thing).length === 0;
      };
      processItem = function(processors2, item, key) {
        var i, len, process;
        for (i = 0, len = processors2.length; i < len; i++) {
          process = processors2[i];
          item = process(item, key);
        }
        return item;
      };
      exports.Parser = function(superClass) {
        extend(Parser, superClass);
        function Parser(opts) {
          this.parseStringPromise = bind(this.parseStringPromise, this);
          this.parseString = bind(this.parseString, this);
          this.reset = bind(this.reset, this);
          this.assignOrPush = bind(this.assignOrPush, this);
          this.processAsync = bind(this.processAsync, this);
          var key, ref, value;
          if (!(this instanceof exports.Parser)) {
            return new exports.Parser(opts);
          }
          this.options = {};
          ref = defaults["0.2"];
          for (key in ref) {
            if (!hasProp.call(ref, key))
              continue;
            value = ref[key];
            this.options[key] = value;
          }
          for (key in opts) {
            if (!hasProp.call(opts, key))
              continue;
            value = opts[key];
            this.options[key] = value;
          }
          if (this.options.xmlns) {
            this.options.xmlnskey = this.options.attrkey + "ns";
          }
          if (this.options.normalizeTags) {
            if (!this.options.tagNameProcessors) {
              this.options.tagNameProcessors = [];
            }
            this.options.tagNameProcessors.unshift(processors.normalize);
          }
          this.reset();
        }
        Parser.prototype.processAsync = function() {
          var chunk, err;
          try {
            if (this.remaining.length <= this.options.chunkSize) {
              chunk = this.remaining;
              this.remaining = "";
              this.saxParser = this.saxParser.write(chunk);
              return this.saxParser.close();
            } else {
              chunk = this.remaining.substr(0, this.options.chunkSize);
              this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
              this.saxParser = this.saxParser.write(chunk);
              return setImmediate(this.processAsync);
            }
          } catch (error1) {
            err = error1;
            if (!this.saxParser.errThrown) {
              this.saxParser.errThrown = true;
              return this.emit(err);
            }
          }
        };
        Parser.prototype.assignOrPush = function(obj, key, newValue) {
          if (!(key in obj)) {
            if (!this.options.explicitArray) {
              return obj[key] = newValue;
            } else {
              return obj[key] = [newValue];
            }
          } else {
            if (!(obj[key] instanceof Array)) {
              obj[key] = [obj[key]];
            }
            return obj[key].push(newValue);
          }
        };
        Parser.prototype.reset = function() {
          var attrkey, charkey, ontext, stack;
          this.removeAllListeners();
          this.saxParser = sax.parser(this.options.strict, {
            trim: false,
            normalize: false,
            xmlns: this.options.xmlns
          });
          this.saxParser.errThrown = false;
          this.saxParser.onerror = function(_this) {
            return function(error) {
              _this.saxParser.resume();
              if (!_this.saxParser.errThrown) {
                _this.saxParser.errThrown = true;
                return _this.emit("error", error);
              }
            };
          }(this);
          this.saxParser.onend = function(_this) {
            return function() {
              if (!_this.saxParser.ended) {
                _this.saxParser.ended = true;
                return _this.emit("end", _this.resultObject);
              }
            };
          }(this);
          this.saxParser.ended = false;
          this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
          this.resultObject = null;
          stack = [];
          attrkey = this.options.attrkey;
          charkey = this.options.charkey;
          this.saxParser.onopentag = function(_this) {
            return function(node) {
              var key, newValue, obj, processedKey, ref;
              obj = Object.create(null);
              obj[charkey] = "";
              if (!_this.options.ignoreAttrs) {
                ref = node.attributes;
                for (key in ref) {
                  if (!hasProp.call(ref, key))
                    continue;
                  if (!(attrkey in obj) && !_this.options.mergeAttrs) {
                    obj[attrkey] = Object.create(null);
                  }
                  newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];
                  processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;
                  if (_this.options.mergeAttrs) {
                    _this.assignOrPush(obj, processedKey, newValue);
                  } else {
                    obj[attrkey][processedKey] = newValue;
                  }
                }
              }
              obj["#name"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;
              if (_this.options.xmlns) {
                obj[_this.options.xmlnskey] = {
                  uri: node.uri,
                  local: node.local
                };
              }
              return stack.push(obj);
            };
          }(this);
          this.saxParser.onclosetag = function(_this) {
            return function() {
              var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;
              obj = stack.pop();
              nodeName = obj["#name"];
              if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
                delete obj["#name"];
              }
              if (obj.cdata === true) {
                cdata = obj.cdata;
                delete obj.cdata;
              }
              s = stack[stack.length - 1];
              if (obj[charkey].match(/^\s*$/) && !cdata) {
                emptyStr = obj[charkey];
                delete obj[charkey];
              } else {
                if (_this.options.trim) {
                  obj[charkey] = obj[charkey].trim();
                }
                if (_this.options.normalize) {
                  obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
                }
                obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];
                if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                  obj = obj[charkey];
                }
              }
              if (isEmpty(obj)) {
                if (typeof _this.options.emptyTag === "function") {
                  obj = _this.options.emptyTag();
                } else {
                  obj = _this.options.emptyTag !== "" ? _this.options.emptyTag : emptyStr;
                }
              }
              if (_this.options.validator != null) {
                xpath = "/" + function() {
                  var i, len, results;
                  results = [];
                  for (i = 0, len = stack.length; i < len; i++) {
                    node = stack[i];
                    results.push(node["#name"]);
                  }
                  return results;
                }().concat(nodeName).join("/");
                (function() {
                  var err;
                  try {
                    return obj = _this.options.validator(xpath, s && s[nodeName], obj);
                  } catch (error1) {
                    err = error1;
                    return _this.emit("error", err);
                  }
                })();
              }
              if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === "object") {
                if (!_this.options.preserveChildrenOrder) {
                  node = Object.create(null);
                  if (_this.options.attrkey in obj) {
                    node[_this.options.attrkey] = obj[_this.options.attrkey];
                    delete obj[_this.options.attrkey];
                  }
                  if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
                    node[_this.options.charkey] = obj[_this.options.charkey];
                    delete obj[_this.options.charkey];
                  }
                  if (Object.getOwnPropertyNames(obj).length > 0) {
                    node[_this.options.childkey] = obj;
                  }
                  obj = node;
                } else if (s) {
                  s[_this.options.childkey] = s[_this.options.childkey] || [];
                  objClone = Object.create(null);
                  for (key in obj) {
                    if (!hasProp.call(obj, key))
                      continue;
                    objClone[key] = obj[key];
                  }
                  s[_this.options.childkey].push(objClone);
                  delete obj["#name"];
                  if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                    obj = obj[charkey];
                  }
                }
              }
              if (stack.length > 0) {
                return _this.assignOrPush(s, nodeName, obj);
              } else {
                if (_this.options.explicitRoot) {
                  old = obj;
                  obj = Object.create(null);
                  obj[nodeName] = old;
                }
                _this.resultObject = obj;
                _this.saxParser.ended = true;
                return _this.emit("end", _this.resultObject);
              }
            };
          }(this);
          ontext = function(_this) {
            return function(text) {
              var charChild, s;
              s = stack[stack.length - 1];
              if (s) {
                s[charkey] += text;
                if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\n/g, "").trim() !== "")) {
                  s[_this.options.childkey] = s[_this.options.childkey] || [];
                  charChild = {
                    "#name": "__text__"
                  };
                  charChild[charkey] = text;
                  if (_this.options.normalize) {
                    charChild[charkey] = charChild[charkey].replace(/\s{2,}/g, " ").trim();
                  }
                  s[_this.options.childkey].push(charChild);
                }
                return s;
              }
            };
          }(this);
          this.saxParser.ontext = ontext;
          return this.saxParser.oncdata = function(_this) {
            return function(text) {
              var s;
              s = ontext(text);
              if (s) {
                return s.cdata = true;
              }
            };
          }(this);
        };
        Parser.prototype.parseString = function(str, cb) {
          var err;
          if (cb != null && typeof cb === "function") {
            this.on("end", function(result) {
              this.reset();
              return cb(null, result);
            });
            this.on("error", function(err2) {
              this.reset();
              return cb(err2);
            });
          }
          try {
            str = str.toString();
            if (str.trim() === "") {
              this.emit("end", null);
              return true;
            }
            str = bom.stripBOM(str);
            if (this.options.async) {
              this.remaining = str;
              setImmediate(this.processAsync);
              return this.saxParser;
            }
            return this.saxParser.write(str).close();
          } catch (error1) {
            err = error1;
            if (!(this.saxParser.errThrown || this.saxParser.ended)) {
              this.emit("error", err);
              return this.saxParser.errThrown = true;
            } else if (this.saxParser.ended) {
              throw err;
            }
          }
        };
        Parser.prototype.parseStringPromise = function(str) {
          return new Promise(function(_this) {
            return function(resolve, reject) {
              return _this.parseString(str, function(err, value) {
                if (err) {
                  return reject(err);
                } else {
                  return resolve(value);
                }
              });
            };
          }(this));
        };
        return Parser;
      }(events);
      exports.parseString = function(str, a, b) {
        var cb, options, parser;
        if (b != null) {
          if (typeof b === "function") {
            cb = b;
          }
          if (typeof a === "object") {
            options = a;
          }
        } else {
          if (typeof a === "function") {
            cb = a;
          }
          options = {};
        }
        parser = new exports.Parser(options);
        return parser.parseString(str, cb);
      };
      exports.parseStringPromise = function(str, a) {
        var options, parser;
        if (typeof a === "object") {
          options = a;
        }
        parser = new exports.Parser(options);
        return parser.parseStringPromise(str);
      };
    }).call(exports);
  }
});

// node_modules/xml2js/lib/xml2js.js
var require_xml2js = __commonJS({
  "node_modules/xml2js/lib/xml2js.js"(exports) {
    (function() {
      "use strict";
      var builder, defaults, parser, processors, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      defaults = require_defaults();
      builder = require_builder();
      parser = require_parser();
      processors = require_processors();
      exports.defaults = defaults.defaults;
      exports.processors = processors;
      exports.ValidationError = function(superClass) {
        extend(ValidationError, superClass);
        function ValidationError(message) {
          this.message = message;
        }
        return ValidationError;
      }(Error);
      exports.Builder = builder.Builder;
      exports.Parser = parser.Parser;
      exports.parseString = parser.parseString;
      exports.parseStringPromise = parser.parseStringPromise;
    }).call(exports);
  }
});

// src/main.ts
__export(exports, {
  default: () => BibleLinkPlugin
});
var import_obsidian4 = __toModule(require("obsidian"));

// src/database.ts
var import_obsidian = __toModule(require("obsidian"));
var fs = __toModule(require("fs"));
var path = __toModule(require("path"));
var _BibleDatabase = class {
  constructor(plugin, dataPath = "data") {
    this.isInitialized = false;
    this.isUnloading = false;
    this.plugin = plugin;
    this.dataPath = dataPath;
    console.log(`[BibleLink] Using plugin data path: ${this.dataPath}`);
    this.data = {
      translations: [],
      verses: [],
      nextTranslationId: 1,
      nextVerseId: 1
    };
  }
  async initialize() {
    if (this.isInitialized)
      return;
    try {
      await this.loadData();
      this.isInitialized = true;
    } catch (error) {
      console.error("Failed to initialize Bible database:", error);
      this.isInitialized = true;
      throw error;
    }
  }
  async loadData() {
    try {
      const filePath = path.join(this.plugin.app.vault.adapter.basePath, ".obsidian", "plugins", "obsidian-biblelink", this.dataPath, "bible_data.json");
      console.log(`[BibleLink] [loadData] Checking for data file at: ${filePath}`);
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, "utf8");
        console.log(`[BibleLink] [loadData] File found. First 200 chars:`, content.slice(0, 200));
        this.data = JSON.parse(content);
        console.log(`[BibleLink] [loadData] Loaded: ${this.data.translations.length} translations, ${this.data.verses.length} verses`);
      } else {
        console.log("[BibleLink] [loadData] No existing Bible data file found, starting fresh");
      }
    } catch (error) {
      console.log("[BibleLink] [loadData] Starting with fresh Bible database due to error:", error);
    }
  }
  async saveData() {
    try {
      await this.ensureDirectoryExists();
      const filePath = path.join(this.plugin.app.vault.adapter.basePath, ".obsidian", "plugins", "obsidian-biblelink", this.dataPath, "bible_data.json");
      const content = JSON.stringify(this.data, null, 2);
      console.log(`[BibleLink] [saveData] Saving to: ${filePath}`);
      console.log(`[BibleLink] [saveData] Data (first 200 chars):`, content.slice(0, 200));
      fs.writeFileSync(filePath, content, "utf8");
      console.log(`[BibleLink] [saveData] Bible data saved successfully: ${this.data.translations.length} translations, ${this.data.verses.length} verses`);
    } catch (error) {
      console.error("[BibleLink] [saveData] Failed to save Bible data:", error);
      if (!this.isUnloading) {
        new import_obsidian.Notice("Failed to save Bible data");
      }
      if (!this.isUnloading) {
        throw error;
      }
    }
  }
  async ensureDirectoryExists() {
    try {
      const dirPath = path.join(this.plugin.app.vault.adapter.basePath, ".obsidian", "plugins", "obsidian-biblelink", this.dataPath);
      if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
        console.log(`[BibleLink] Created directory: ${dirPath}`);
      }
    } catch (error) {
      console.log("[BibleLink] Directory creation error (may already exist):", error);
    }
  }
  getTranslations() {
    return [...this.data.translations].sort((a, b) => a.abbreviation.localeCompare(b.abbreviation));
  }
  getBooks() {
    const books = new Set();
    for (const verse of this.data.verses) {
      books.add(verse.book);
    }
    const bookArray = Array.from(books);
    return bookArray.sort((a, b) => {
      const aIndex = _BibleDatabase.CHRONOLOGICAL_BOOK_ORDER.indexOf(a);
      const bIndex = _BibleDatabase.CHRONOLOGICAL_BOOK_ORDER.indexOf(b);
      if (aIndex !== -1 && bIndex !== -1) {
        return aIndex - bIndex;
      }
      if (aIndex !== -1)
        return -1;
      if (bIndex !== -1)
        return 1;
      return a.localeCompare(b);
    });
  }
  getChaptersForBook(book, translationAbbr) {
    const translation = this.data.translations.find((t) => t.abbreviation === translationAbbr);
    if (!translation)
      return [];
    const chapters = new Set();
    for (const verse of this.data.verses) {
      if (verse.translation_id === translation.id && verse.book === book) {
        chapters.add(verse.chapter);
      }
    }
    return Array.from(chapters).sort((a, b) => a - b);
  }
  getVersesForChapter(book, chapter, translationAbbr) {
    const translation = this.data.translations.find((t) => t.abbreviation === translationAbbr);
    if (!translation)
      return [];
    const verses = new Set();
    for (const verse of this.data.verses) {
      if (verse.translation_id === translation.id && verse.book === book && verse.chapter === chapter) {
        verses.add(verse.verse);
      }
    }
    return Array.from(verses).sort((a, b) => a - b);
  }
  getVerse(book, chapter, verse, translationAbbr) {
    const translation = this.data.translations.find((t) => t.abbreviation === translationAbbr);
    if (!translation)
      return null;
    return this.data.verses.find((v) => v.translation_id === translation.id && v.book === book && v.chapter === chapter && v.verse === verse) || null;
  }
  async addTranslation(name, abbreviation, language = "English", category = "Standard", processingRules = []) {
    const existing = this.data.translations.find((t) => t.abbreviation === abbreviation);
    if (existing) {
      throw new Error(`Translation with abbreviation '${abbreviation}' already exists`);
    }
    const id = this.data.nextTranslationId++;
    this.data.translations.push({
      id,
      name,
      abbreviation,
      language,
      category,
      processingRules
    });
    console.log(`Added translation: ${name} (${abbreviation}) with ID ${id}`);
    await this.saveData();
    return id;
  }
  async updateTranslation(id, name, abbreviation, language, category, processingRules) {
    const translation = this.data.translations.find((t) => t.id === id);
    if (!translation) {
      throw new Error("Translation not found");
    }
    if (translation.abbreviation !== abbreviation && this.data.translations.some((t) => t.abbreviation === abbreviation)) {
      throw new Error("Translation abbreviation already exists");
    }
    translation.name = name;
    translation.abbreviation = abbreviation;
    translation.language = language;
    translation.category = category;
    translation.processingRules = processingRules;
    await this.saveData();
  }
  async addVerse(translationId, book, chapter, verse, text, saveImmediately = true) {
    this.data.verses.push({
      id: this.data.nextVerseId++,
      translation_id: translationId,
      book,
      chapter,
      verse,
      text
    });
    if (saveImmediately) {
      await this.saveData();
    }
  }
  async addVersesBatch(verses) {
    if (verses.length === 0) {
      console.log("[BibleLink] No verses to add");
      return;
    }
    const startId = this.data.nextVerseId;
    for (const verse of verses) {
      this.data.verses.push({
        id: this.data.nextVerseId++,
        translation_id: verse.translationId,
        book: verse.book,
        chapter: verse.chapter,
        verse: verse.verse,
        text: verse.text
      });
    }
    console.log(`[BibleLink] Added ${verses.length} verses (IDs ${startId}-${this.data.nextVerseId - 1})`);
    console.log(`[BibleLink] Total verses in memory: ${this.data.verses.length}`);
    await this.saveData();
    console.log(`[BibleLink] After save - Total verses in memory: ${this.data.verses.length}`);
  }
  async removeTranslation(abbreviation) {
    const translationIndex = this.data.translations.findIndex((t) => t.abbreviation === abbreviation);
    if (translationIndex === -1) {
      return false;
    }
    const translation = this.data.translations[translationIndex];
    this.data.verses = this.data.verses.filter((v) => v.translation_id !== translation.id);
    this.data.translations.splice(translationIndex, 1);
    await this.saveData();
    return true;
  }
  async importFromSQLite(sqliteData) {
    if (sqliteData.translations && sqliteData.verses) {
      for (const translation of sqliteData.translations) {
        await this.addTranslation(translation.name, translation.abbreviation);
      }
      const versesToAdd = [];
      for (const verse of sqliteData.verses) {
        const translation = this.data.translations.find((t) => t.id === verse.translation_id);
        if (translation) {
          versesToAdd.push({
            translationId: translation.id,
            book: verse.book,
            chapter: verse.chapter,
            verse: verse.verse,
            text: verse.text
          });
        }
      }
      if (versesToAdd.length > 0) {
        await this.addVersesBatch(versesToAdd);
      }
    }
  }
  async importFromXML(xmlData) {
    console.log("XML import not yet implemented");
  }
  getDatabaseStats() {
    return {
      translations: this.data.translations.length,
      verses: this.data.verses.length
    };
  }
  verifyTranslationExists(abbreviation) {
    return this.data.translations.some((t) => t.abbreviation === abbreviation);
  }
  getTranslationStats(abbreviation) {
    const translation = this.data.translations.find((t) => t.abbreviation === abbreviation);
    if (!translation)
      return null;
    const translationVerses = this.data.verses.filter((v) => v.translation_id === translation.id);
    const books = [...new Set(translationVerses.map((v) => v.book))].sort();
    return {
      name: translation.name,
      verseCount: translationVerses.length,
      books
    };
  }
  applyProcessingRules(text, translationAbbr) {
    const translation = this.data.translations.find((t) => t.abbreviation === translationAbbr);
    if (!translation || !translation.processingRules) {
      return text;
    }
    let processedText = text;
    for (const rule of translation.processingRules) {
      try {
        const regex = new RegExp(rule.regex, "g");
        if (rule.escape) {
          processedText = processedText.replace(regex, (...args) => {
            let result = rule.formatting;
            for (let i = 1; i < args.length - 2; i++) {
              const group = args[i];
              const escaped = this.escapeHtml(group);
              result = result.replace(new RegExp(`\\$${i}`, "g"), escaped);
            }
            result = result.replace(/\$&/g, this.escapeHtml(args[0]));
            return result;
          });
        } else {
          processedText = processedText.replace(regex, rule.formatting);
        }
      } catch (error) {
        console.warn(`Invalid regex in processing rule for ${translationAbbr}: ${rule.regex}`, error);
      }
    }
    return processedText;
  }
  escapeHtml(str) {
    return str.replace(/[&<>\[\]]/g, (c) => {
      switch (c) {
        case "&":
          return "&amp;";
        case "<":
          return "&lt;";
        case ">":
          return "&gt;";
        case "[":
          return "&#91;";
        case "]":
          return "&#93;";
        default:
          return c;
      }
    });
  }
  getDataFilePath() {
    return path.join(this.plugin.app.vault.adapter.basePath, ".obsidian", "plugins", "obsidian-biblelink", this.dataPath, "bible_data.json");
  }
  dataFileExists() {
    return fs.existsSync(this.getDataFilePath());
  }
  async close() {
    this.isUnloading = true;
    try {
      await this.saveData();
    } catch (error) {
      console.error("Error during database close:", error);
    }
  }
};
var BibleDatabase = _BibleDatabase;
BibleDatabase.CHRONOLOGICAL_BOOK_ORDER = [
  "Genesis",
  "Exodus",
  "Leviticus",
  "Numbers",
  "Deuteronomy",
  "Joshua",
  "Judges",
  "Ruth",
  "1 Samuel",
  "2 Samuel",
  "1 Kings",
  "2 Kings",
  "1 Chronicles",
  "2 Chronicles",
  "Ezra",
  "Nehemiah",
  "Esther",
  "Job",
  "Psalms",
  "Proverbs",
  "Ecclesiastes",
  "Song of Solomon",
  "Isaiah",
  "Jeremiah",
  "Lamentations",
  "Ezekiel",
  "Daniel",
  "Hosea",
  "Joel",
  "Amos",
  "Obadiah",
  "Jonah",
  "Micah",
  "Nahum",
  "Habakkuk",
  "Zephaniah",
  "Haggai",
  "Zechariah",
  "Malachi",
  "Matthew",
  "Mark",
  "Luke",
  "John",
  "Acts",
  "Romans",
  "1 Corinthians",
  "2 Corinthians",
  "Galatians",
  "Ephesians",
  "Philippians",
  "Colossians",
  "1 Thessalonians",
  "2 Thessalonians",
  "1 Timothy",
  "2 Timothy",
  "Titus",
  "Philemon",
  "Hebrews",
  "James",
  "1 Peter",
  "2 Peter",
  "1 John",
  "2 John",
  "3 John",
  "Jude",
  "Revelation"
];

// src/selector.ts
var import_obsidian2 = __toModule(require("obsidian"));
var BibleSelectorModal = class extends import_obsidian2.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.plugin = plugin;
    this.onSubmit = onSubmit;
    this.selectedBook = null;
    this.selectedStartChapter = 1;
    this.selectedEndChapter = null;
    this.selectedStartVerse = 1;
    this.selectedEndVerse = null;
    this.selectedTranslation = null;
    this.selectedOutputType = "codeblock";
    this.selectedOptions = [];
    this.selectedBooks = new Set();
    this.selectedChapters = new Set();
    this.selectedVerses = new Set();
    this.db = plugin.db;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    this.selectedOutputType = this.plugin.settings.modalOutputType;
    this.selectedOptions = [...this.plugin.settings.modalOptions];
    contentEl.createEl("h2", { text: "Insert Bible Reference" });
    const referenceSetting = new import_obsidian2.Setting(contentEl).setName("Reference").setDesc("Enter a reference (e.g., John 1:13-25) or use the selectors below.").addText((text) => {
      text.setPlaceholder("e.g., John 1:13-25").onChange((value) => {
        this.handleReferenceInput(value);
      });
      this.referenceInput = text;
    });
    this.referenceWarning = contentEl.createEl("div", { cls: "biblelink-ref-warning" });
    this.referenceWarning.style.color = "var(--text-warning)";
    this.referenceWarning.style.display = "none";
    new import_obsidian2.Setting(contentEl).setName("Translation").setDesc("Choose a Bible translation").addDropdown((dropdown) => {
      this.translationDropdown = dropdown;
      const translations = this.db.getTranslations();
      const translationOptions = {};
      translations.forEach((trans) => {
        translationOptions[trans.abbreviation] = `${trans.name} (${trans.abbreviation})`;
      });
      dropdown.addOptions(translationOptions).setValue(this.plugin.settings.defaultTranslation).onChange((value) => {
        this.selectedTranslation = value;
        this.renderBookGrid(bookGridContainer);
        this.renderChapterGrid(chapterGridContainer);
        this.renderVerseGrid(verseGridContainer);
      });
    });
    const bookGridContainer = contentEl.createDiv({ cls: "biblelink-book-grid-container" });
    this.renderBookGrid(bookGridContainer);
    const chapterGridContainer = contentEl.createDiv({ cls: "biblelink-chapter-grid-container" });
    this.renderChapterGrid(chapterGridContainer);
    const verseGridContainer = contentEl.createDiv({ cls: "biblelink-verse-grid-container" });
    this.renderVerseGrid(verseGridContainer);
    new import_obsidian2.Setting(contentEl).setName("Output Type").setDesc("Choose how to insert the reference").addDropdown((dropdown) => dropdown.addOption("text", "Full Verse Text").addOption("link", "Literal Word Link").addOption("codeblock", "Code Block").setValue(this.selectedOutputType).onChange((value) => {
      this.selectedOutputType = value;
      this.plugin.settings.modalOutputType = this.selectedOutputType;
      this.plugin.saveSettings();
      this.updateOptionsSection();
    }));
    const optionsContainer = contentEl.createDiv();
    this.updateOptionsSection(optionsContainer);
    const submitButton = new import_obsidian2.Setting(contentEl).addButton((button) => button.setButtonText("Insert").setCta().onClick(() => {
      this.insertReference();
    }));
    if (this.referenceInput && this.referenceInput.inputEl) {
      this.referenceInput.inputEl.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          e.preventDefault();
          this.insertReference();
        }
      });
    }
    this.injectBibleGridStyles();
  }
  injectBibleGridStyles() {
    if (document.getElementById("biblelink-modal-style"))
      return;
    const style = document.createElement("style");
    style.id = "biblelink-modal-style";
    style.textContent = `
        .biblelink-book-grid-container,
        .biblelink-chapter-grid-container,
        .biblelink-verse-grid-container {
            margin-bottom: 1.2em;
        }
        .biblelink-book-grid,
        .biblelink-chapter-grid,
        .biblelink-verse-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(90px, 1fr));
            gap: 0.5em;
            max-height: 200px;
            overflow-y: auto;
            padding: 0.5em 0;
            background: var(--background-secondary-alt, #23272e);
            border-radius: 8px;
        }
        .biblelink-book-btn,
        .biblelink-chapter-btn,
        .biblelink-verse-btn {
            background: var(--background-primary, #181a20);
            color: var(--text-normal, #e0e0e0);
            border: none;
            border-radius: 6px;
            padding: 0.6em 0.8em;
            font-size: 1em;
            font-family: inherit;
            cursor: pointer;
            box-shadow: 0 1px 3px rgba(0,0,0,0.08);
            transition: background 0.15s, color 0.15s, box-shadow 0.15s, border 0.15s;
            outline: none;
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
            max-width: 100%;
        }
        .biblelink-book-btn:hover,
        .biblelink-chapter-btn:hover,
        .biblelink-verse-btn:hover {
            background: var(--interactive-accent, #3a7afe);
            color: #fff;
        }
        .biblelink-book-btn.selected,
        .biblelink-chapter-btn.selected,
        .biblelink-verse-btn.selected {
            background: var(--color-accent, #3a7afe);
            color: #fff;
            font-weight: 600;
            border: 2px solid var(--color-accent-2, #1e4fa3);
            box-shadow: 0 2px 8px rgba(58,122,254,0.15);
        }
        .biblelink-selectall-btn {
            background: var(--background-modifier-hover, #2a2d34);
            color: var(--text-muted, #b0b0b0);
            border: none;
            border-radius: 6px;
            padding: 0.4em 0.8em;
            margin-bottom: 0.5em;
            font-size: 0.95em;
            cursor: pointer;
            transition: background 0.15s, color 0.15s;
        }
        .biblelink-selectall-btn:hover {
            background: var(--interactive-accent, #3a7afe);
            color: #fff;
        }
        .biblelink-book-grid::-webkit-scrollbar,
        .biblelink-chapter-grid::-webkit-scrollbar,
        .biblelink-verse-grid::-webkit-scrollbar {
            width: 8px;
            background: transparent;
        }
        .biblelink-book-grid::-webkit-scrollbar-thumb,
        .biblelink-chapter-grid::-webkit-scrollbar-thumb,
        .biblelink-verse-grid::-webkit-scrollbar-thumb {
            background: var(--background-modifier-border, #444);
            border-radius: 4px;
        }
        @media (max-width: 600px) {
            .biblelink-book-grid,
            .biblelink-chapter-grid,
            .biblelink-verse-grid {
                grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
            }
            .biblelink-book-btn,
            .biblelink-chapter-btn,
            .biblelink-verse-btn {
                font-size: 0.95em;
                padding: 0.5em 0.5em;
            }
        }
        `;
    document.head.appendChild(style);
  }
  renderBookGrid(container) {
    container.empty();
    const books = this.db.getBooks();
    if (!books || books.length === 0)
      return;
    const grid = container.createDiv({ cls: "biblelink-book-grid" });
    books.forEach((book) => {
      const btn = grid.createEl("button", {
        text: book,
        cls: "biblelink-book-btn"
      });
      btn.setAttr("title", book);
      if (this.selectedBook === book) {
        btn.addClass("selected");
      }
      btn.onclick = (e) => {
        this.selectedBook = book;
        this.selectedStartChapter = 1;
        this.selectedEndChapter = null;
        this.selectedStartVerse = 1;
        this.selectedEndVerse = null;
        this.renderBookGrid(container);
        this.renderChapterGrid(document.querySelector(".biblelink-chapter-grid-container"));
        this.renderVerseGrid(document.querySelector(".biblelink-verse-grid-container"));
        this.updateReferenceInputFromSelection();
        this.updatePreview();
      };
    });
  }
  renderChapterGrid(container) {
    container.empty();
    if (!this.selectedBook)
      return;
    const chapters = this.db.getChaptersForBook(this.selectedBook, this.selectedTranslation || this.plugin.settings.defaultTranslation);
    if (!chapters || chapters.length === 0)
      return;
    const grid = container.createDiv({ cls: "biblelink-chapter-grid" });
    const selectAllBtn = container.createEl("button", { text: "Select All Chapters", cls: "biblelink-selectall-btn" });
    selectAllBtn.onclick = () => {
      this.selectedChapters = new Set(chapters);
      this.renderChapterGrid(container);
      this.renderVerseGrid(document.querySelector(".biblelink-verse-grid-container"));
      this.updateReferenceInputFromSelection();
    };
    chapters.forEach((chapter) => {
      const btn = grid.createEl("button", {
        text: chapter.toString(),
        cls: "biblelink-chapter-btn"
      });
      if (this.selectedChapters.has(chapter) || this.selectedStartChapter === chapter || this.selectedEndChapter && chapter >= this.selectedStartChapter && chapter <= this.selectedEndChapter) {
        btn.addClass("selected");
      }
      btn.onclick = (e) => {
        if (e.ctrlKey || e.metaKey) {
          if (this.selectedChapters.has(chapter)) {
            this.selectedChapters.delete(chapter);
          } else {
            this.selectedChapters.add(chapter);
          }
        } else if (e.shiftKey && this.selectedStartChapter) {
          const start = Math.min(this.selectedStartChapter, chapter);
          const end = Math.max(this.selectedStartChapter, chapter);
          for (let c = start; c <= end; c++) {
            this.selectedChapters.add(c);
          }
        } else {
          this.selectedChapters = new Set([chapter]);
        }
        this.selectedStartChapter = chapter;
        this.selectedEndChapter = chapter;
        this.selectedStartVerse = 1;
        this.selectedEndVerse = null;
        this.renderChapterGrid(container);
        this.renderVerseGrid(document.querySelector(".biblelink-verse-grid-container"));
        this.updateReferenceInputFromSelection();
      };
    });
  }
  renderVerseGrid(container) {
    container.empty();
    if (!this.selectedBook || !this.selectedStartChapter)
      return;
    const verses = this.db.getVersesForChapter(this.selectedBook, this.selectedStartChapter, this.selectedTranslation || this.plugin.settings.defaultTranslation);
    if (!verses || verses.length === 0)
      return;
    const grid = container.createDiv({ cls: "biblelink-verse-grid" });
    const selectAllBtn = container.createEl("button", { text: "Select All Verses", cls: "biblelink-selectall-btn" });
    selectAllBtn.onclick = () => {
      this.selectedVerses = new Set(verses);
      this.renderVerseGrid(container);
      this.updateReferenceInputFromSelection();
    };
    verses.forEach((verse) => {
      const btn = grid.createEl("button", {
        text: verse.toString(),
        cls: "biblelink-verse-btn"
      });
      if (this.selectedVerses.has(verse) || this.selectedStartVerse === verse || this.selectedEndVerse && verse >= this.selectedStartVerse && verse <= this.selectedEndVerse) {
        btn.addClass("selected");
      }
      btn.onclick = (e) => {
        if (e.ctrlKey || e.metaKey) {
          if (this.selectedVerses.has(verse)) {
            this.selectedVerses.delete(verse);
          } else {
            this.selectedVerses.add(verse);
          }
        } else if (e.shiftKey && this.selectedStartVerse) {
          const start = Math.min(this.selectedStartVerse, verse);
          const end = Math.max(this.selectedStartVerse, verse);
          for (let v = start; v <= end; v++) {
            this.selectedVerses.add(v);
          }
        } else {
          this.selectedVerses = new Set([verse]);
        }
        this.selectedStartVerse = verse;
        this.selectedEndVerse = verse;
        this.renderVerseGrid(container);
        this.updateReferenceInputFromSelection();
      };
    });
  }
  updateReferenceInputFromSelection() {
    if (this.referenceInput) {
      let ref = "";
      if (this.selectedBook) {
        ref += this.selectedBook;
        if (this.selectedChapters.size > 0) {
          const chapters = Array.from(this.selectedChapters).sort((a, b) => a - b);
          ref += " " + chapters.join(",");
        } else if (this.selectedStartChapter) {
          ref += " " + this.selectedStartChapter;
        }
        if (this.selectedVerses.size > 0) {
          const verses = Array.from(this.selectedVerses).sort((a, b) => a - b);
          ref += ":" + verses.join(",");
        } else if (this.selectedStartVerse) {
          ref += ":" + this.selectedStartVerse;
        }
      }
      this.referenceInput.setValue(ref);
    }
  }
  updateChapterDropdown(container) {
    if (!this.selectedBook)
      return;
    const chapters = this.db.getChaptersForBook(this.selectedBook, this.selectedTranslation || this.plugin.settings.defaultTranslation);
    if (!chapters || chapters.length === 0)
      return;
    const target = container || document.querySelector(".chapter-container");
    if (!target)
      return;
    target.empty();
    target.addClass("chapter-container");
    new import_obsidian2.Setting(target).setName("Start Chapter").addDropdown((dropdown) => {
      const chapterOptions = {};
      chapters.forEach((chapter) => {
        chapterOptions[chapter.toString()] = chapter.toString();
      });
      dropdown.addOptions(chapterOptions).setValue(this.selectedStartChapter.toString()).onChange((value) => {
        this.selectedStartChapter = parseInt(value);
        if (!this.selectedEndChapter || this.selectedEndChapter < this.selectedStartChapter) {
          this.selectedEndChapter = this.selectedStartChapter;
        }
        this.updateEndChapterDropdown(target);
        this.updateVerseDropdown();
      });
    });
    this.updateEndChapterDropdown(target);
    if (this.referenceInput) {
      let ref = this.selectedBook ? this.selectedBook + " " + this.selectedStartChapter : "";
      if (this.selectedStartVerse && this.selectedStartVerse !== 0) {
        ref += ":" + this.selectedStartVerse;
        if (this.selectedEndVerse && this.selectedEndVerse !== this.selectedStartVerse) {
          ref += "-" + this.selectedEndVerse;
        }
      }
      this.referenceInput.setValue(ref);
    }
  }
  updateEndChapterDropdown(container) {
    if (!this.selectedBook)
      return;
    const chapters = this.db.getChaptersForBook(this.selectedBook, this.selectedTranslation || this.plugin.settings.defaultTranslation);
    if (!chapters || chapters.length === 0)
      return;
    new import_obsidian2.Setting(container).setName("End Chapter").addDropdown((dropdown) => {
      const chapterOptions = {};
      chapters.filter((c) => c >= this.selectedStartChapter).forEach((chapter) => {
        chapterOptions[chapter.toString()] = chapter.toString();
      });
      dropdown.addOptions(chapterOptions).setValue((this.selectedEndChapter || this.selectedStartChapter).toString()).onChange((value) => {
        this.selectedEndChapter = parseInt(value);
        this.updateVerseDropdown();
      });
    });
  }
  updateVerseDropdown(container) {
    if (!this.selectedBook || !this.selectedStartChapter)
      return;
    const target = container || document.querySelector(".verse-container");
    if (!target)
      return;
    target.empty();
    target.addClass("verse-container");
    const startVerses = this.db.getVersesForChapter(this.selectedBook, this.selectedStartChapter, this.selectedTranslation || this.plugin.settings.defaultTranslation);
    if (startVerses && startVerses.length > 0) {
      new import_obsidian2.Setting(target).setName("Start Verse").addDropdown((dropdown) => {
        const verseOptions = {
          "0": "Entire Chapter"
        };
        startVerses.forEach((verse) => {
          verseOptions[verse.toString()] = verse.toString();
        });
        dropdown.addOptions(verseOptions).setValue(this.selectedStartVerse.toString()).onChange((value) => {
          const verseNum = parseInt(value);
          this.selectedStartVerse = verseNum;
          if (verseNum === 0) {
            this.selectedEndVerse = null;
            this.selectedEndChapter = null;
          }
          this.updateEndVerseDropdown(target);
        });
      });
    }
    if (this.selectedStartVerse !== 0) {
      this.updateEndVerseDropdown(target);
    }
    if (this.referenceInput) {
      let ref = this.selectedBook ? this.selectedBook + " " + this.selectedStartChapter : "";
      if (this.selectedStartVerse && this.selectedStartVerse !== 0) {
        ref += ":" + this.selectedStartVerse;
        if (this.selectedEndVerse && this.selectedEndVerse !== this.selectedStartVerse) {
          ref += "-" + this.selectedEndVerse;
        }
      }
      this.referenceInput.setValue(ref);
    }
  }
  updateEndVerseDropdown(container) {
    if (this.selectedStartVerse === 0)
      return;
    const endVerses = this.db.getVersesForChapter(this.selectedBook, this.selectedEndChapter || this.selectedStartChapter, this.selectedTranslation || this.plugin.settings.defaultTranslation);
    if (!endVerses || endVerses.length === 0)
      return;
    new import_obsidian2.Setting(container).setName("End Verse").addDropdown((dropdown) => {
      const verseOptions = {};
      const minVerse = this.selectedEndChapter === this.selectedStartChapter ? this.selectedStartVerse : 1;
      endVerses.filter((v) => v >= minVerse).forEach((verse) => {
        verseOptions[verse.toString()] = verse.toString();
      });
      dropdown.addOptions(verseOptions).setValue((this.selectedEndVerse || this.selectedStartVerse).toString()).onChange((value) => {
        this.selectedEndVerse = parseInt(value);
      });
    });
  }
  updateOptionsSection(container) {
    if (this.selectedOutputType !== "codeblock")
      return;
    const target = container || document.querySelector(".options-container");
    if (!target)
      return;
    target.empty();
    target.addClass("options-container");
    target.createEl("h3", { text: "Code Block Options" });
    new import_obsidian2.Setting(target).setName("Show Verse Numbers").setDesc("Include verse numbers in the output.").addToggle((toggle) => toggle.setValue(this.selectedOptions.includes("verse")).onChange((value) => {
      this.updateOption("verse", value);
      this.plugin.settings.modalOptions = [...this.selectedOptions];
      this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(target).setName("Show Chapter Numbers").setDesc("Include chapter numbers in the output.").addToggle((toggle) => toggle.setValue(this.selectedOptions.includes("chapter")).onChange((value) => {
      this.updateOption("chapter", value);
      this.plugin.settings.modalOptions = [...this.selectedOptions];
      this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(target).setName("Red Letter Text").setDesc("Highlight words of Jesus in red.").addToggle((toggle) => toggle.setValue(this.selectedOptions.includes("red-text")).onChange((value) => {
      this.updateOption("red-text", value);
      this.plugin.settings.modalOptions = [...this.selectedOptions];
      this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(target).setName("Add External Link").setDesc("Add a link to view the verse on Bible Gateway.").addToggle((toggle) => toggle.setValue(this.selectedOptions.includes("link")).onChange((value) => {
      this.updateOption("link", value);
      this.plugin.settings.modalOptions = [...this.selectedOptions];
      this.plugin.saveSettings();
    }));
  }
  updateOption(option, enabled) {
    if (enabled && !this.selectedOptions.includes(option)) {
      this.selectedOptions.push(option);
    } else if (!enabled) {
      this.selectedOptions = this.selectedOptions.filter((o) => o !== option);
    }
  }
  insertReference() {
    var _a, _b;
    const refValue = (_b = (_a = this.referenceInput) == null ? void 0 : _a.getValue()) == null ? void 0 : _b.trim();
    if (!refValue) {
      new import_obsidian2.Notice("Please enter a reference");
      return;
    }
    const translation = this.selectedTranslation || this.plugin.settings.defaultTranslation;
    if (!translation) {
      new import_obsidian2.Notice("Please select a translation");
      return;
    }
    this.onSubmit(refValue, translation, this.selectedOutputType, this.selectedOptions);
    this.close();
  }
  handleReferenceInput(value) {
    if (!value || value.trim() === "") {
      this.referenceWarning.style.display = "none";
      this.selectedChapters.clear();
      this.selectedVerses.clear();
      return;
    }
    const match = value.match(/^([1-3]? ?[A-Za-z ]+)\s+(\d+)(?::(\d+)(?:-(\d+))?)?$/);
    if (!match) {
      this.referenceWarning.style.display = "";
      this.referenceWarning.textContent = "Unrecognized reference format.";
      return;
    }
    this.referenceWarning.style.display = "none";
    const [, book, chapter] = match;
    const bookName = book.trim();
    const chapterNum = parseInt(chapter);
    const books = this.db.getBooks();
    const foundBook = books.find((b) => b.toLowerCase() === bookName.toLowerCase());
    if (!foundBook) {
      this.referenceWarning.style.display = "";
      this.referenceWarning.textContent = "Book not found.";
      return;
    }
    this.selectedBook = foundBook;
    this.selectedStartChapter = chapterNum;
  }
};

// src/settings.ts
var import_obsidian3 = __toModule(require("obsidian"));
var import_xml2js = __toModule(require_xml2js());
var DEFAULT_SETTINGS = {
  defaultTranslation: "ASV",
  outputType: "codeblock",
  showTranslationAbbr: true,
  showBookAbbr: false,
  enableShortcuts: true,
  shortcuts: {
    "jn316": "John 3:16",
    "gen11": "Genesis 1:1",
    "ps231": "Psalm 23:1",
    "rom828": "Romans 8:28",
    "jn11": "John 1:1"
  },
  enableDataviewMetadata: true,
  dataviewMetadataFields: ["book", "chapter", "verse", "translation", "text", "reference", "language", "category"],
  codeBlockBackgroundColor: "#f8f9fa",
  codeBlockHeadingStyle: "detailed",
  codeBlockTextColor: "#2c3e50",
  codeBlockVerseNumberColor: "#7f8c8d",
  codeBlockLanguage: "bible",
  modalOutputType: "codeblock",
  modalOptions: []
};
var AVAILABLE_TRANSLATIONS = {
  "ASV": { name: "American Standard Version (1901)", language: "en", category: "English" },
  "KJV": { name: "King James Version", language: "en", category: "English" },
  "WEB": { name: "World English Bible", language: "en", category: "English" },
  "YLT": { name: "Young's Literal Translation (1898)", language: "en", category: "English" },
  "BBE": { name: "Bible in Basic English (1949/1964)", language: "en", category: "English" },
  "AKJV": { name: "American King James Version", language: "en", category: "English" },
  "Webster": { name: "Webster Bible", language: "en", category: "English" },
  "Tyndale": { name: "William Tyndale Bible (1525/1530)", language: "en", category: "Historical" },
  "Wycliffe": { name: "John Wycliffe Bible (c.1395)", language: "enm", category: "Historical" },
  "BSB": { name: "Berean Standard Bible", language: "en", category: "English" },
  "CPDV": { name: "Catholic Public Domain Version", language: "en", category: "English" },
  "UKJV": { name: "Updated King James Version", language: "en", category: "English" },
  "Twenty": { name: "Twentieth Century New Testament", language: "en", category: "English" },
  "Anderson": { name: "Henry Tompkins Anderson's 1864 New Testament", language: "en", category: "Historical" },
  "ACV": { name: "A Conservative Version", language: "en", category: "English" },
  "SpaRV": { name: "La Santa Biblia Reina-Valera (1909)", language: "es", category: "Spanish" },
  "SpaRV1865": { name: "La Santa Biblia Reina-Valera (1865)", language: "es", category: "Spanish" },
  "SpaRVG": { name: "Reina Valera G\xF3mez", language: "es", category: "Spanish" },
  "SpaPlatense": { name: "Biblia Platense (Straubinger)", language: "es", category: "Spanish" },
  "Vulgate": { name: "Latin Vulgate", language: "la", category: "Latin" },
  "VulgClementine": { name: "Clementine Vulgate", language: "la", category: "Latin" },
  "Byz": { name: "The New Testament in the Original Greek: Byzantine Textform 2013", language: "grc", category: "Greek" },
  "TR": { name: "Textus Receptus (1550/1894)", language: "grc", category: "Greek" },
  "WLC": { name: "Westminster Leningrad Codex", language: "hbo", category: "Hebrew" },
  "StatResGNT": { name: "Statistical Restoration Greek New Testament", language: "grc", category: "Greek" },
  "VulgSistine": { name: "Vulgata Sistina", language: "la", category: "Latin" },
  "VulgHetzenauer": { name: "Vulgata Clementina, Hetzenauer editore", language: "la", category: "Latin" },
  "VulgConte": { name: "Vulgata Clementina, Conte editore", language: "la", category: "Latin" },
  "Swe1917": { name: "Swedish Bible (1917)", language: "sv", category: "Swedish" },
  "SweKarlXII": { name: "Svenska Karl XII:s Bibel (1703)", language: "sv", category: "Historical" },
  "SweKarlXII1873": { name: "Svenska Karl XII:s Bibel (1873)", language: "sv", category: "Historical" },
  "UkrOgienko": { name: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430 \u0411\u0456\u0431\u043B\u0456\u044F. \u041F\u0435\u0440\u0435\u043A\u043B\u0430\u0434 \u0406\u0432\u0430\u043D\u0430 \u041E\u0433\u0456\u0454\u043D\u043A\u0430.", language: "uk", category: "Ukrainian" },
  "Viet": { name: "Kinh Th\xE1nh Ti\u1EBFng Vi\u1EC7t (1934)", language: "vi", category: "Vietnamese" },
  "ThaiKJV": { name: "Thai King James Version", language: "th", category: "Thai" },
  "TagAngBiblia": { name: "Philippine Bible Society (1905)", language: "tl", category: "Tagalog" },
  "Tausug": { name: "Tausug Kitab Injil", language: "tsg", category: "Tausug" },
  "TpiKJPB": { name: "King Jems Pisin Baibel", language: "tpi", category: "Tok Pisin" },
  "BurJudson": { name: "1835 Judson Burmese Bible", language: "my", category: "Burmese" },
  "Alb": { name: "Albanian Bible", language: "sq", category: "Albanian" },
  "ArmEastern": { name: "Eastern Armenian Bible", language: "hy", category: "Armenian" },
  "BeaMRK": { name: "The Gospel of Mark in Beaver (Danezaa)", language: "bea", category: "Indigenous" },
  "SrKDEkavski": { name: "Serbian Bible Dani\u010Di\u0107-Karad\u017Ei\u0107 Ekavski", language: "sr", category: "Serbian" },
  "SrKDIjekav": { name: "Serbian Bible Dani\u010Di\u0107-Karad\u017Ei\u0107 Ijekavski", language: "sr", category: "Serbian" },
  "Wulfila": { name: "Bishop Wulfila Gothic Bible", language: "got", category: "Gothic" },
  "sml_BL_2008": { name: "Kitab Awal-Jaman maka Kitab Injil", language: "sml", category: "Indigenous" },
  "vlsJoNT": { name: "Het Nieuwe Testament by Nicolaas De Jonge", language: "vls", category: "Dutch" }
};
var BibleLinkSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.filterText = "";
    this.editingAbbr = null;
    this.editingName = "";
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "BibleLink Settings" });
    containerEl.createEl("h3", { text: "Basic Settings" });
    new import_obsidian3.Setting(containerEl).setName("Default Translation").setDesc("Choose your preferred Bible translation.").addDropdown((dropdown) => {
      const translations = this.plugin.db.getTranslations();
      const translationOptions = {};
      translations.forEach((trans) => {
        translationOptions[trans.abbreviation] = `${trans.name} (${trans.abbreviation})`;
      });
      dropdown.addOptions(translationOptions).setValue(this.plugin.settings.defaultTranslation).onChange(async (value) => {
        this.plugin.settings.defaultTranslation = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Default Output Type").setDesc("Choose how references are inserted.").addDropdown((dropdown) => dropdown.addOption("text", "Full Verse Text").addOption("link", "Literal Word Link").addOption("codeblock", "Code Block").setValue(this.plugin.settings.outputType).onChange(async (value) => {
      this.plugin.settings.outputType = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Show Translation Abbreviation").setDesc("Include translation abbreviation in the output.").addToggle((toggle) => toggle.setValue(this.plugin.settings.showTranslationAbbr).onChange(async (value) => {
      this.plugin.settings.showTranslationAbbr = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Show Book Abbreviations").setDesc("Use abbreviated book names (e.g., Jn instead of John).").addToggle((toggle) => toggle.setValue(this.plugin.settings.showBookAbbr).onChange(async (value) => {
      this.plugin.settings.showBookAbbr = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Code Block Styling" });
    new import_obsidian3.Setting(containerEl).setName("Background Color").setDesc("Background color for Bible verse code blocks.").addColorPicker((colorPicker) => colorPicker.setValue(this.plugin.settings.codeBlockBackgroundColor).onChange(async (value) => {
      this.plugin.settings.codeBlockBackgroundColor = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Heading Style").setDesc("Style for the reference heading in code blocks.").addDropdown((dropdown) => dropdown.addOption("none", "No Heading").addOption("simple", "Simple (John 3:16)").addOption("detailed", "Detailed (John 3:16 ASV)").setValue(this.plugin.settings.codeBlockHeadingStyle).onChange(async (value) => {
      this.plugin.settings.codeBlockHeadingStyle = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Text Color").setDesc("Color for the verse text in code blocks.").addColorPicker((colorPicker) => colorPicker.setValue(this.plugin.settings.codeBlockTextColor).onChange(async (value) => {
      this.plugin.settings.codeBlockTextColor = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Verse Number Color").setDesc("Color for verse numbers in code blocks.").addColorPicker((colorPicker) => colorPicker.setValue(this.plugin.settings.codeBlockVerseNumberColor).onChange(async (value) => {
      this.plugin.settings.codeBlockVerseNumberColor = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Code Block Language").setDesc("The language identifier for Bible verse code blocks.").addText((text) => text.setPlaceholder("bible").setValue(this.plugin.settings.codeBlockLanguage).onChange(async (value) => {
      this.plugin.settings.codeBlockLanguage = value;
      await this.plugin.saveSettings();
    }));
    const exampleContainer = containerEl.createDiv();
    exampleContainer.createEl("h4", { text: "Code Block Examples" });
    exampleContainer.createEl("p", {
      text: "Use options in square brackets after the language identifier to customize the output:"
    });
    const syntaxExample = exampleContainer.createDiv({ cls: "biblelink-syntax-example" });
    syntaxExample.createEl("p", {
      text: "Syntax: ```bible [option1,option2,option3]",
      cls: "biblelink-syntax-text"
    });
    const examples = [
      {
        label: "Basic verse (no options):",
        code: `\`\`\`${this.plugin.settings.codeBlockLanguage}
NASB 1 John 3:17
\`\`\``
      },
      {
        label: "With link option (shows a link to the verse):",
        code: `\`\`\`${this.plugin.settings.codeBlockLanguage}
NASB Matthew 8:8-40 [link]
\`\`\``
      },
      {
        label: "With verse option (displays numbers per verse):",
        code: `\`\`\`${this.plugin.settings.codeBlockLanguage}
NASB 1 Corinthians 1:2-3 [verse]
\`\`\``
      },
      {
        label: "With chapter option (displays each chapter as Chapter X):",
        code: `\`\`\`${this.plugin.settings.codeBlockLanguage}
NASB Psalm 23 [chapter]
\`\`\``
      },
      {
        label: "Multiple options (comma-separated):",
        code: `\`\`\`${this.plugin.settings.codeBlockLanguage}
NASB John 3:16-18 [verse,chapter,link]
\`\`\``
      }
    ];
    for (const ex of examples) {
      const exampleDiv = exampleContainer.createDiv({ cls: "biblelink-example-item" });
      exampleDiv.createEl("div", { text: ex.label, cls: "biblelink-example-label" });
      const codeBlock = exampleDiv.createEl("pre", { cls: "biblelink-example-code" });
      codeBlock.createEl("code", { text: ex.code });
    }
    containerEl.createEl("h3", { text: "Bible Reference Shortcuts" });
    this.renderShortcutsSection(containerEl);
    containerEl.createEl("h3", { text: "Dataview Integration" });
    new import_obsidian3.Setting(containerEl).setName("Enable Dataview Metadata").setDesc("Add rich metadata to Bible verses for Dataview queries.").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableDataviewMetadata).onChange(async (value) => {
      this.plugin.settings.enableDataviewMetadata = value;
      await this.plugin.saveSettings();
    }));
    if (this.plugin.settings.enableDataviewMetadata) {
      const metadataContainer = containerEl.createDiv();
      metadataContainer.createEl("p", {
        text: "Available metadata fields: book, chapter, verse, translation, text, reference, language, category"
      });
      const queryContainer = metadataContainer.createDiv();
      queryContainer.createEl("h4", { text: "How to Query Bible Verses" });
      queryContainer.createEl("p", {
        text: "Use Dataview queries to search and display Bible verses. You can filter by translation, book, chapter, verse, or search within the text content."
      });
      const exampleQuery = `\`\`\`dataview
TABLE book, chapter, verse, translation
FROM "Bible"
WHERE translation = "ASV"
SORT book, chapter, verse
\`\`\``;
      const codeBlock = queryContainer.createEl("pre");
      codeBlock.createEl("code", { text: exampleQuery });
    }
    containerEl.createEl("h3", { text: "Translation Management" });
    const uploadSection = containerEl.createDiv({ cls: "biblelink-upload-section" });
    uploadSection.createEl("h4", { text: "Upload Custom Translation" });
    const uploadDesc = uploadSection.createEl("p");
    uploadDesc.innerHTML = 'Upload your own Bible translation files. <strong>XML format is recommended</strong> and can be downloaded from <a href="https://github.com/scrollmapper/bible_databases" target="_blank">scrollmapper/bible_databases</a>.';
    new import_obsidian3.Setting(uploadSection).setName("Upload Translation").setDesc("Choose a file to upload (SQLite or XML format).").addButton((button) => button.setButtonText("Upload XML").setClass("mod-cta").onClick(() => this.uploadXMLFile())).addButton((button) => button.setButtonText("Upload SQLite").onClick(() => this.uploadSQLiteFile()));
    this.displayCurrentTranslations(containerEl);
  }
  displayCurrentTranslations(containerEl) {
    const sectionHeader = containerEl.createDiv({ cls: "biblelink-translations-header" });
    sectionHeader.createEl("h4", { text: "Installed Translations" });
    const filterContainer = containerEl.createDiv({ cls: "biblelink-filter-container" });
    const filterInput = filterContainer.createEl("input", {
      type: "text",
      placeholder: "Search translations...",
      cls: "biblelink-filter-input"
    });
    const tableContainer = containerEl.createDiv({ cls: "biblelink-table-container" });
    let sortField = "name";
    let sortAsc = true;
    const renderTable = () => {
      tableContainer.empty();
      const table = tableContainer.createEl("table", { cls: "biblelink-translation-table" });
      const thead = table.createEl("thead");
      const headerRow = thead.createEl("tr");
      const createSortableHeader = (text, field) => {
        const th = headerRow.createEl("th");
        th.createSpan({ text });
        if (sortField === field) {
          th.createSpan({ text: sortAsc ? " \u2193" : " \u2191" });
        }
        th.onclick = () => {
          if (sortField === field) {
            sortAsc = !sortAsc;
          } else {
            sortField = field;
            sortAsc = true;
          }
          renderTable();
        };
      };
      createSortableHeader("Translation Name", "name");
      createSortableHeader("Abbreviation", "abbreviation");
      createSortableHeader("Language", "language");
      createSortableHeader("Category", "category");
      headerRow.createEl("th", { text: "Actions" });
      const tbody = table.createEl("tbody");
      let translations = this.plugin.db.getTranslations().map((t) => ({
        ...t,
        ...AVAILABLE_TRANSLATIONS[t.abbreviation],
        installed: true
      }));
      const filterText = filterInput.value.toLowerCase();
      if (filterText) {
        translations = translations.filter((t) => {
          var _a, _b;
          return t.name.toLowerCase().includes(filterText) || t.abbreviation.toLowerCase().includes(filterText) || ((_a = t.language) == null ? void 0 : _a.toLowerCase().includes(filterText)) || ((_b = t.category) == null ? void 0 : _b.toLowerCase().includes(filterText));
        });
      }
      translations.sort((a, b) => {
        const aVal = a[sortField] || "";
        const bVal = b[sortField] || "";
        return (sortAsc ? 1 : -1) * aVal.localeCompare(bVal);
      });
      if (translations.length === 0) {
        const emptyRow = tbody.createEl("tr");
        emptyRow.createEl("td", {
          text: "No translations installed.",
          attr: { colspan: "5" }
        });
        return;
      }
      translations.forEach((trans) => {
        const row = tbody.createEl("tr");
        if (this.editingAbbr === trans.abbreviation) {
          const nameCell = row.createEl("td");
          const nameInput = nameCell.createEl("input", {
            type: "text",
            value: trans.name,
            cls: "biblelink-edit-input",
            placeholder: "Translation Name"
          });
          const abbrCell = row.createEl("td");
          const abbrInput = abbrCell.createEl("input", {
            type: "text",
            value: trans.abbreviation,
            cls: "biblelink-edit-input",
            placeholder: "Abbreviation (e.g., KJV)"
          });
          row.createEl("td", { text: trans.language || "" });
          row.createEl("td", { text: trans.category || "" });
          const actionCell = row.createEl("td", { cls: "biblelink-translation-actions" });
          actionCell.createEl("button", { text: "Save", cls: "mod-cta" }).onclick = async () => {
            var _a, _b;
            const newName = nameInput.value.trim();
            const newAbbr = abbrInput.value.trim().toUpperCase();
            if (!newName || !newAbbr) {
              new import_obsidian3.Notice("Name and abbreviation are required");
              return;
            }
            if (newAbbr !== trans.abbreviation && this.plugin.db.getTranslations().some((t) => t.abbreviation === newAbbr)) {
              new import_obsidian3.Notice("Abbreviation already exists");
              return;
            }
            const oldAbbr = trans.abbreviation;
            trans.name = newName;
            trans.abbreviation = newAbbr;
            if (this.plugin.settings.defaultTranslation === oldAbbr) {
              this.plugin.settings.defaultTranslation = newAbbr;
              await this.plugin.saveSettings();
            }
            await ((_b = (_a = this.plugin.db).saveData) == null ? void 0 : _b.call(_a));
            this.editingAbbr = null;
            renderTable();
            new import_obsidian3.Notice("Translation updated");
          };
          actionCell.createEl("button", { text: "Cancel" }).onclick = () => {
            this.editingAbbr = null;
            renderTable();
          };
        } else {
          row.createEl("td", { text: trans.name });
          row.createEl("td", { text: trans.abbreviation });
          row.createEl("td", { text: trans.language || "" });
          row.createEl("td", { text: trans.category || "" });
          const actionCell = row.createEl("td", { cls: "biblelink-translation-actions" });
          if (trans.abbreviation !== "ASV") {
            actionCell.createEl("button", { text: "Edit" }).onclick = () => {
              const translation = this.plugin.db.getTranslations().find((t) => t.abbreviation === trans.abbreviation);
              if (translation) {
                new TranslationEditModal(this.app, translation.name, translation.abbreviation, translation.language, translation.category, translation.processingRules, async (name, abbreviation, language, category, processingRules) => {
                  try {
                    await this.plugin.db.updateTranslation(translation.id, name, abbreviation, language, category, processingRules);
                    new import_obsidian3.Notice("Translation updated successfully");
                    renderTable();
                  } catch (error) {
                    new import_obsidian3.Notice(`Error updating translation: ${error.message}`);
                  }
                }, true).open();
              }
            };
            actionCell.createEl("button", {
              text: "Remove",
              cls: "mod-warning"
            }).onclick = () => {
              this.confirmRemoveTranslation(trans.abbreviation, trans.name);
            };
          } else {
            actionCell.createEl("span", {
              text: "(Built-in)",
              cls: "biblelink-builtin-label"
            });
          }
        }
      });
    };
    filterInput.addEventListener("input", renderTable);
    renderTable();
    const css = `
            .biblelink-translations-header {
                margin-bottom: 16px;
            }
            .biblelink-filter-container {
                margin-bottom: 16px;
            }
            .biblelink-filter-input {
                width: 100%;
                max-width: 300px;
                padding: 8px 12px;
                border: 1px solid var(--background-modifier-border);
                border-radius: 4px;
                background: var(--background-primary);
                color: var(--text-normal);
            }
            .biblelink-filter-input:focus {
                outline: none;
                border-color: var(--interactive-accent);
                box-shadow: 0 0 0 2px var(--interactive-accent-hover);
            }
            .biblelink-table-container {
                margin-top: 16px;
                border: 1px solid var(--background-modifier-border);
                border-radius: 8px;
                overflow: hidden;
            }
            .biblelink-translation-table {
                width: 100%;
                border-collapse: collapse;
                background: var(--background-primary);
            }
            .biblelink-translation-table th {
                background: var(--background-secondary);
                padding: 12px 16px;
                text-align: left;
                font-weight: 600;
                color: var(--text-normal);
                border-bottom: 1px solid var(--background-modifier-border);
                cursor: pointer;
                user-select: none;
            }
            .biblelink-translation-table th:hover {
                background: var(--background-modifier-hover);
            }
            .biblelink-translation-table td {
                padding: 12px 16px;
                border-bottom: 1px solid var(--background-modifier-border);
                color: var(--text-normal);
            }
            .biblelink-translation-table tr:hover {
                background: var(--background-modifier-hover);
            }
            .biblelink-translation-table tr:last-child td {
                border-bottom: none;
            }
            .biblelink-translation-actions {
                display: flex;
                gap: 8px;
                align-items: center;
            }
            .biblelink-translation-actions button {
                padding: 4px 8px;
                font-size: 12px;
                border-radius: 4px;
                border: 1px solid var(--background-modifier-border);
                background: var(--background-primary);
                color: var(--text-normal);
                cursor: pointer;
            }
            .biblelink-translation-actions button:hover {
                background: var(--background-modifier-hover);
            }
            .biblelink-translation-actions button.mod-cta {
                background: var(--interactive-accent);
                color: var(--text-on-accent);
                border-color: var(--interactive-accent);
            }
            .biblelink-translation-actions button.mod-warning {
                background: var(--text-error);
                color: var(--text-on-accent);
                border-color: var(--text-error);
            }
            .biblelink-builtin-label {
                color: var(--text-muted);
                font-style: italic;
                font-size: 12px;
            }
            .biblelink-edit-input {
                width: 100%;
                padding: 4px 8px;
                border: 1px solid var(--background-modifier-border);
                border-radius: 4px;
                background: var(--background-primary);
                color: var(--text-normal);
            }
            .biblelink-upload-section {
                margin-bottom: 24px;
                padding: 16px;
                background: var(--background-secondary);
                border-radius: 8px;
                border: 1px solid var(--background-modifier-border);
            }
            .biblelink-upload-section h4 {
                margin-top: 0;
                margin-bottom: 8px;
            }
            .biblelink-upload-section p {
                margin-bottom: 16px;
                color: var(--text-muted);
            }
        `;
    const styleEl = document.head.querySelector("#biblelink-table-styles") || document.head.createEl("style", { attr: { id: "biblelink-table-styles" } });
    styleEl.textContent = css;
    const exampleCss = `
            .biblelink-syntax-example {
                background: var(--background-secondary);
                padding: 12px;
                border-radius: 6px;
                margin-bottom: 16px;
                border-left: 4px solid var(--interactive-accent);
            }
            .biblelink-syntax-text {
                margin: 0;
                font-family: monospace;
                font-weight: 600;
                color: var(--text-normal);
            }
            .biblelink-example-item {
                margin-bottom: 16px;
                padding: 12px;
                background: var(--background-secondary);
                border-radius: 6px;
                border: 1px solid var(--background-modifier-border);
            }
            .biblelink-example-label {
                font-weight: 600;
                margin-bottom: 8px;
                color: var(--text-normal);
            }
            .biblelink-example-code {
                margin: 0;
                background: var(--background-primary);
                border: 1px solid var(--background-modifier-border);
                border-radius: 4px;
            }
            .biblelink-example-code code {
                color: var(--text-normal);
            }
        `;
    const exampleStyleEl = document.head.querySelector("#biblelink-example-styles") || document.head.createEl("style", { attr: { id: "biblelink-example-styles" } });
    exampleStyleEl.textContent = exampleCss;
  }
  async uploadSQLiteFile() {
    const input = document.createElement("input");
    input.type = "file";
    input.accept = ".sqlite,.db";
    input.onchange = async (event) => {
      var _a;
      const file = (_a = event.target.files) == null ? void 0 : _a[0];
      if (file) {
        await this.processSQLiteFile(file);
      }
    };
    input.click();
  }
  async processSQLiteFile(file) {
    try {
      new import_obsidian3.Notice(`Processing ${file.name}...`);
      const translationName = file.name.replace(/\.(sqlite|db)$/i, "");
      const abbreviation = translationName.toUpperCase();
      const modal = new TranslationEditModal(this.app, translationName, abbreviation, "English", "Standard", [], async (name, abbr, language, category, processingRules) => {
        try {
          const existingTranslations = this.plugin.db.getTranslations();
          if (existingTranslations.some((t) => t.abbreviation === abbr)) {
            throw new Error(`Translation ${abbr} already exists`);
          }
          const translationId = await this.plugin.db.addTranslation(name, abbr, language, category, processingRules);
          const sampleVerses = [
            { book: "John", chapter: 3, verse: 16, text: "Sample verse from uploaded file" },
            { book: "Genesis", chapter: 1, verse: 1, text: "Sample verse from uploaded file" }
          ];
          const versesToAdd = sampleVerses.map((verse) => ({
            translationId,
            book: verse.book,
            chapter: verse.chapter,
            verse: verse.verse,
            text: verse.text
          }));
          await this.plugin.db.addVersesBatch(versesToAdd);
          new import_obsidian3.Notice(`Successfully imported sample data from ${file.name}`);
          this.display();
        } catch (error) {
          console.error("SQLite import error:", error);
          new import_obsidian3.Notice(`Failed to import ${file.name}: ${error.message}`);
        }
      }, false);
      modal.open();
    } catch (error) {
      console.error("SQLite import error:", error);
      new import_obsidian3.Notice(`Failed to import ${file.name}: ${error.message}`);
    }
  }
  uploadXMLFile() {
    const input = document.createElement("input");
    input.type = "file";
    input.accept = ".xml";
    input.onchange = async (event) => {
      var _a;
      const file = (_a = event.target.files) == null ? void 0 : _a[0];
      if (file) {
        await this.processXMLFile(file);
      }
    };
    input.click();
  }
  async processXMLFile(file) {
    var _a;
    try {
      new import_obsidian3.Notice(`Processing ${file.name}...`);
      const text = await file.text();
      const result = await (0, import_xml2js.parseStringPromise)(text);
      if (!result.XMLBIBLE || !result.XMLBIBLE.BIBLEBOOK) {
        throw new Error("Invalid XML file: missing XMLBIBLE or BIBLEBOOK elements");
      }
      const biblename = ((_a = result.XMLBIBLE.$) == null ? void 0 : _a.biblename) || file.name.replace(".xml", "");
      const translationName = biblename;
      const abbreviation = biblename.toUpperCase();
      const modal = new TranslationEditModal(this.app, translationName, abbreviation, "English", "Standard", [], async (name, abbr, language, category, processingRules) => {
        try {
          const existingTranslations = this.plugin.db.getTranslations();
          if (existingTranslations.some((t) => t.abbreviation === abbr)) {
            const confirmModal = new ConfirmModal(this.app, `Translation '${abbr}' already exists. Overwrite?`, async (confirmed) => {
              if (confirmed) {
                await this.plugin.db.removeTranslation(abbr);
                await this.importXMLBooks(result, name, abbr, file.name, language, category, processingRules);
              } else {
                new import_obsidian3.Notice("Import cancelled.");
              }
              this.display();
            });
            confirmModal.open();
            return;
          }
          await this.importXMLBooks(result, name, abbr, file.name, language, category, processingRules);
          this.display();
        } catch (error) {
          console.error("XML import error:", error);
          new import_obsidian3.Notice(`Failed to import ${file.name}: ${error.message}`);
        }
      }, false);
      modal.open();
    } catch (error) {
      console.error("XML import error:", error);
      new import_obsidian3.Notice(`Failed to import ${file.name}: ${error.message}`);
    }
  }
  async importXMLBooks(result, translationName, abbreviation, fileName, language = "English", category = "Standard", processingRules = []) {
    var _a, _b;
    try {
      const books = result.XMLBIBLE.BIBLEBOOK;
      if (!books || books.length === 0) {
        new import_obsidian3.Notice("No books found in XML. Import aborted.");
        console.error("No books found in XML:", result);
        return;
      }
      new import_obsidian3.Notice(`Starting import of ${translationName}...`);
      const translationId = await this.plugin.db.addTranslation(translationName, abbreviation, language, category, processingRules);
      let importedCount = 0;
      let bookCount = 0;
      const versesToAdd = [];
      for (const book of books) {
        if (!book || !book.$)
          continue;
        const bookName = book.$.bname || book.$.sname || "Unknown";
        const chapters = Array.isArray(book.CHAPTER) ? book.CHAPTER : [book.CHAPTER];
        for (const chapter of chapters) {
          if (!chapter || !chapter.$)
            continue;
          const chapterNum = parseInt(chapter.$.cnumber);
          if (isNaN(chapterNum))
            continue;
          const verses = Array.isArray(chapter.VERS) ? chapter.VERS : chapter.VERS ? [chapter.VERS] : [];
          for (const verse of verses) {
            if (!verse)
              continue;
            let verseText = "";
            let verseNum = 1;
            if (typeof verse === "string") {
              verseText = verse;
            } else if (verse._) {
              verseText = verse._;
            } else if (Array.isArray(verse)) {
              verseText = verse.join("");
            }
            if (verse.$ && verse.$.vnumber) {
              verseNum = parseInt(verse.$.vnumber);
            }
            if (verseText && verseText.trim()) {
              versesToAdd.push({
                translationId,
                book: bookName,
                chapter: chapterNum,
                verse: verseNum,
                text: verseText.trim()
              });
              importedCount++;
            }
          }
        }
        bookCount++;
        if (bookCount % 10 === 0) {
          new import_obsidian3.Notice(`Processed ${bookCount} books, ${importedCount} verses...`);
        }
      }
      console.log(`[BibleLink] Parsed ${importedCount} verses from XML for ${translationName}`);
      if (versesToAdd.length > 0) {
        new import_obsidian3.Notice(`Saving ${importedCount} verses to database...`);
        await this.plugin.db.addVersesBatch(versesToAdd);
        const translationExists = this.plugin.db.verifyTranslationExists(abbreviation);
        const translationStats = this.plugin.db.getTranslationStats(abbreviation);
        const allVerses = ((_b = (_a = this.plugin.db["data"]) == null ? void 0 : _a.verses) == null ? void 0 : _b.filter((v) => v.translation_id === translationId)) || [];
        console.log(`[BibleLink] Saved ${allVerses.length} verses for ${translationName} (should match ${importedCount})`);
        if (translationExists && translationStats && allVerses.length > 0) {
          new import_obsidian3.Notice(`\u2705 Successfully imported ${translationName} (${abbreviation}) with ${translationStats.verseCount} verses from ${translationStats.books.length} books`);
          console.log(`Bible import completed: ${translationName} (${abbreviation}) - ${translationStats.verseCount} verses from ${translationStats.books.length} books`);
        } else {
          new import_obsidian3.Notice(`\u274C Import failed: No verses saved for ${translationName}. Check the XML format and try again.`);
          console.error(`[BibleLink] Import failed: No verses saved for ${translationName}.`);
          await this.plugin.db.removeTranslation(abbreviation);
        }
      } else {
        new import_obsidian3.Notice("\u274C No verses were found in the XML file. Import aborted.");
        console.error("[BibleLink] No verses found in XML:", result);
        await this.plugin.db.removeTranslation(abbreviation);
      }
    } catch (error) {
      console.error("XML import error:", error);
      new import_obsidian3.Notice(`\u274C Failed to import ${fileName}: ${error.message}`);
      try {
        await this.plugin.db.removeTranslation(abbreviation);
      } catch (cleanupError) {
        console.error("Failed to cleanup after import error:", cleanupError);
      }
    }
  }
  async removeTranslation(abbreviation) {
    if (abbreviation === "ASV") {
      new import_obsidian3.Notice("Cannot remove ASV translation");
      return;
    }
    const success = await this.plugin.db.removeTranslation(abbreviation);
    if (success) {
      new import_obsidian3.Notice(`${abbreviation} translation removed`);
      if (this.plugin.settings.defaultTranslation === abbreviation) {
        this.plugin.settings.defaultTranslation = "ASV";
        await this.plugin.saveSettings();
      }
      this.display();
    } else {
      new import_obsidian3.Notice(`Failed to remove ${abbreviation}: translation not found`);
    }
  }
  confirmRemoveTranslation(abbreviation, name) {
    const modal = new ConfirmModal(this.app, `Remove translation '${name}' (${abbreviation})?`, async (confirmed) => {
      if (confirmed) {
        await this.removeTranslation(abbreviation);
      }
      this.display();
    });
    modal.open();
  }
  renderShortcutsSection(containerEl) {
    const shortcuts = this.plugin.settings.shortcuts;
    const filterContainer = containerEl.createDiv({ cls: "biblelink-filter-container" });
    const filterInput = filterContainer.createEl("input", {
      type: "text",
      placeholder: "Filter shortcuts...",
      cls: "biblelink-filter-input"
    });
    const table = containerEl.createEl("table", { cls: "biblelink-shortcut-table" });
    const thead = table.createEl("thead");
    const headerRow = thead.createEl("tr");
    let sortField = "key";
    let sortAsc = true;
    const createSortableHeader = (text, field) => {
      const th = headerRow.createEl("th", { text });
      th.style.cursor = "pointer";
      th.onclick = () => {
        if (sortField === field) {
          sortAsc = !sortAsc;
        } else {
          sortField = field;
          sortAsc = true;
        }
        renderShortcuts();
      };
    };
    createSortableHeader("Shortcut", "key");
    createSortableHeader("Reference", "reference");
    headerRow.createEl("th", { text: "Actions" });
    const tbody = table.createEl("tbody");
    const renderShortcuts = () => {
      tbody.empty();
      let shortcutEntries = Object.entries(shortcuts);
      const filterText = filterInput.value.toLowerCase();
      if (filterText) {
        shortcutEntries = shortcutEntries.filter(([key, ref]) => key.toLowerCase().includes(filterText) || ref.toLowerCase().includes(filterText));
      }
      shortcutEntries.sort(([keyA, refA], [keyB, refB]) => {
        const aVal = sortField === "key" ? keyA : refA;
        const bVal = sortField === "key" ? keyB : refB;
        return (sortAsc ? 1 : -1) * aVal.localeCompare(bVal);
      });
      shortcutEntries.forEach(([key, reference]) => {
        const row = tbody.createEl("tr");
        if (this._editingKey === key) {
          const keyCell = row.createEl("td");
          const keyInput = keyCell.createEl("input", {
            type: "text",
            value: key,
            cls: "biblelink-edit-input",
            placeholder: "Shortcut (e.g., jn316)"
          });
          const refCell = row.createEl("td");
          const refInput = refCell.createEl("input", {
            type: "text",
            value: reference,
            cls: "biblelink-edit-input",
            placeholder: "Reference (e.g., John 3:16)"
          });
          const actionCell = row.createEl("td");
          actionCell.createEl("button", { text: "Save" }).onclick = async () => {
            const newKey = keyInput.value.trim();
            const newRef = refInput.value.trim();
            if (!newKey || !newRef) {
              new import_obsidian3.Notice("Shortcut and reference required");
              return;
            }
            if (newKey !== key && shortcuts[newKey]) {
              new import_obsidian3.Notice("Shortcut key already exists");
              return;
            }
            if (!/^\w+\s+\d+:\d+$/.test(newRef) && !/^\w+\s+\d+:\d+(-\d+)?$/.test(newRef)) {
              new import_obsidian3.Notice("Reference must be in the format Book Chapter:Verse or Book Chapter:Verse-Verse");
              return;
            }
            delete shortcuts[key];
            shortcuts[newKey] = newRef;
            this._editingKey = null;
            await this.plugin.saveSettings();
            renderShortcuts();
            new import_obsidian3.Notice("Shortcut updated");
          };
          actionCell.createEl("button", { text: "Cancel" }).onclick = () => {
            this._editingKey = null;
            renderShortcuts();
          };
        } else {
          row.createEl("td", { text: key });
          row.createEl("td", { text: reference });
          const actionCell = row.createEl("td");
          actionCell.createEl("button", { text: "Edit" }).onclick = () => {
            this._editingKey = key;
            renderShortcuts();
          };
          actionCell.createEl("button", {
            text: "Remove",
            cls: "mod-warning"
          }).onclick = () => {
            const modal = new ConfirmModal(this.app, `Remove shortcut '${key}'?`, async (confirmed) => {
              if (confirmed) {
                delete shortcuts[key];
                await this.plugin.saveSettings();
                renderShortcuts();
              }
            });
            modal.open();
          };
        }
      });
      if (this._addingShortcut) {
        const row = tbody.createEl("tr");
        const keyInput = row.createEl("td").createEl("input", {
          type: "text",
          placeholder: "Shortcut (e.g., jn316)",
          cls: "biblelink-edit-input"
        });
        const refInput = row.createEl("td").createEl("input", {
          type: "text",
          placeholder: "Reference (e.g., John 3:16)",
          cls: "biblelink-edit-input"
        });
        const actionCell = row.createEl("td");
        actionCell.createEl("button", { text: "Add" }).onclick = async () => {
          const newKey = keyInput.value.trim();
          const newRef = refInput.value.trim();
          if (!newKey || !newRef) {
            new import_obsidian3.Notice("Shortcut and reference required");
            return;
          }
          if (shortcuts[newKey]) {
            new import_obsidian3.Notice("Shortcut key already exists");
            return;
          }
          if (!/^\w+\s+\d+:\d+$/.test(newRef) && !/^\w+\s+\d+:\d+(-\d+)?$/.test(newRef)) {
            new import_obsidian3.Notice("Reference must be in the format Book Chapter:Verse or Book Chapter:Verse-Verse");
            return;
          }
          shortcuts[newKey] = newRef;
          this._addingShortcut = false;
          await this.plugin.saveSettings();
          renderShortcuts();
          new import_obsidian3.Notice("Shortcut added");
        };
        actionCell.createEl("button", { text: "Cancel" }).onclick = () => {
          this._addingShortcut = false;
          renderShortcuts();
        };
      } else {
        const addRow = tbody.createEl("tr");
        const addCell = addRow.createEl("td", { attr: { colspan: "3" } });
        addCell.createEl("button", {
          text: "Add Shortcut",
          cls: "mod-cta"
        }).onclick = () => {
          this._addingShortcut = true;
          renderShortcuts();
        };
      }
    };
    renderShortcuts();
    filterInput.addEventListener("input", renderShortcuts);
    const css = `
            .biblelink-shortcut-table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 10px;
            }
            .biblelink-shortcut-table th,
            .biblelink-shortcut-table td {
                padding: 8px;
                border: 1px solid var(--background-modifier-border);
                text-align: left;
            }
            .biblelink-shortcut-table th {
                background-color: var(--background-secondary);
            }
        `;
    const styleEl = document.head.createEl("style");
    styleEl.textContent = css;
  }
};
var ConfirmModal = class extends import_obsidian3.Modal {
  constructor(app, message, onResult) {
    super(app);
    this.message = message;
    this.onResult = onResult;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h3", { text: "Confirm" });
    contentEl.createEl("p", { text: this.message });
    const btnRow = contentEl.createDiv();
    btnRow.style.display = "flex";
    btnRow.style.gap = "10px";
    btnRow.createEl("button", { text: "Remove", cls: "mod-warning" }).onclick = () => {
      this.close();
      this.onResult(true);
    };
    btnRow.createEl("button", { text: "Cancel" }).onclick = () => {
      this.close();
      this.onResult(false);
    };
  }
  onClose() {
    this.contentEl.empty();
  }
};
var TranslationEditModal = class extends import_obsidian3.Modal {
  constructor(app, defaultName, defaultAbbr, defaultLanguage = "English", defaultCategory = "Standard", defaultProcessingRules = [], onSubmit, isEdit = false) {
    super(app);
    this.name = defaultName;
    this.abbreviation = defaultAbbr;
    this.language = defaultLanguage;
    this.category = defaultCategory;
    this.processingRules = [...defaultProcessingRules];
    this.onSubmit = onSubmit;
    this.isEdit = isEdit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: this.isEdit ? "Edit Translation" : "Add Translation" });
    new import_obsidian3.Setting(contentEl).setName("Translation Name").setDesc("Full name of the translation").addText((text) => text.setPlaceholder("e.g., American Standard Version").setValue(this.name).onChange((value) => {
      this.name = value;
    }));
    new import_obsidian3.Setting(contentEl).setName("Abbreviation").setDesc("Short abbreviation for the translation").addText((text) => text.setPlaceholder("e.g., ASV").setValue(this.abbreviation).onChange((value) => {
      this.abbreviation = value;
    }));
    new import_obsidian3.Setting(contentEl).setName("Language").setDesc("Language of the translation").addDropdown((dropdown) => {
      const languages = [
        "English",
        "Spanish",
        "French",
        "German",
        "Italian",
        "Portuguese",
        "Russian",
        "Chinese",
        "Japanese",
        "Korean",
        "Arabic",
        "Hebrew",
        "Greek",
        "Latin",
        "Swedish",
        "Norwegian",
        "Danish",
        "Dutch",
        "Polish",
        "Czech",
        "Slovak",
        "Hungarian",
        "Romanian",
        "Bulgarian",
        "Ukrainian",
        "Belarusian",
        "Serbian",
        "Croatian",
        "Slovenian",
        "Estonian",
        "Latvian",
        "Lithuanian",
        "Finnish",
        "Icelandic",
        "Turkish",
        "Persian",
        "Hindi",
        "Bengali",
        "Thai",
        "Vietnamese",
        "Indonesian",
        "Malay",
        "Filipino",
        "Other"
      ];
      languages.forEach((lang) => dropdown.addOption(lang, lang));
      dropdown.setValue(this.language);
      dropdown.onChange((value) => {
        this.language = value;
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Category").setDesc("Category of the translation").addDropdown((dropdown) => {
      const categories = [
        "Standard",
        "Study",
        "Paraphrase",
        "Literal",
        "Dynamic",
        "Historical",
        "Catholic",
        "Orthodox",
        "Protestant",
        "Jewish",
        "Academic",
        "Children",
        "Other"
      ];
      categories.forEach((cat) => dropdown.addOption(cat, cat));
      dropdown.setValue(this.category);
      dropdown.onChange((value) => {
        this.category = value;
      });
    });
    contentEl.createEl("h3", { text: "Processing Rules" });
    contentEl.createEl("p", {
      text: "Add regex patterns to format verse text. Example: \\[\\w+\\] = <em>$&</em> to make bracketed text italic.",
      cls: "setting-item-description"
    });
    const rulesContainer = contentEl.createDiv({ cls: "processing-rules-container" });
    this.renderProcessingRules(rulesContainer);
    new import_obsidian3.Setting(contentEl).addButton((button) => button.setButtonText("Add Processing Rule").onClick(() => {
      this.processingRules.push({ regex: "", formatting: "", escape: false });
      this.renderProcessingRules(rulesContainer);
    }));
    const buttonContainer = contentEl.createDiv({ cls: "setting-item-control" });
    buttonContainer.createEl("button", {
      text: "Cancel",
      cls: "mod-warning"
    }).onclick = () => this.close();
    buttonContainer.createEl("button", {
      text: this.isEdit ? "Update" : "Add",
      cls: "mod-cta"
    }).onclick = () => {
      if (this.name.trim() && this.abbreviation.trim()) {
        this.onSubmit(this.name.trim(), this.abbreviation.trim(), this.language, this.category, this.processingRules);
        this.close();
      } else {
        new import_obsidian3.Notice("Please fill in all required fields");
      }
    };
  }
  renderProcessingRules(container) {
    container.empty();
    this.processingRules.forEach((rule, index) => {
      const ruleContainer = container.createDiv({ cls: "processing-rule-item" });
      new import_obsidian3.Setting(ruleContainer).setName("Regex Pattern").setDesc("Regular expression to match").addText((text) => text.setPlaceholder("e.g., \\[\\w+\\]").setValue(rule.regex).onChange((value) => {
        this.processingRules[index].regex = value;
      }));
      new import_obsidian3.Setting(ruleContainer).setName("Formatting").setDesc("Replacement text (use $& for matched text)").addText((text) => text.setPlaceholder("e.g., <em>$&</em>").setValue(rule.formatting).onChange((value) => {
        this.processingRules[index].formatting = value;
      }));
      new import_obsidian3.Setting(ruleContainer).setName("Escape special characters").setDesc("Escape [, ], <, >, & in the matched text for HTML output.").addToggle((toggle) => toggle.setValue(!!rule.escape).onChange((value) => {
        this.processingRules[index].escape = value;
      }));
      new import_obsidian3.Setting(ruleContainer).addButton((button) => button.setButtonText("Remove").setWarning().onClick(() => {
        this.processingRules.splice(index, 1);
        this.renderProcessingRules(container);
      }));
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var fs2 = __toModule(require("fs"));
var path2 = __toModule(require("path"));
var BOOK_ABBREVIATIONS = {
  "Genesis": "Gen",
  "Exodus": "Exo",
  "Leviticus": "Lev",
  "Numbers": "Num",
  "Deuteronomy": "Deu",
  "Joshua": "Jos",
  "Judges": "Jdg",
  "Ruth": "Rut",
  "1 Samuel": "1Sa",
  "2 Samuel": "2Sa",
  "1 Kings": "1Ki",
  "2 Kings": "2Ki",
  "1 Chronicles": "1Ch",
  "2 Chronicles": "2Ch",
  "Ezra": "Ezr",
  "Nehemiah": "Neh",
  "Esther": "Est",
  "Job": "Job",
  "Psalms": "Psa",
  "Proverbs": "Pro",
  "Ecclesiastes": "Ecc",
  "Song of Solomon": "Sng",
  "Isaiah": "Isa",
  "Jeremiah": "Jer",
  "Lamentations": "Lam",
  "Ezekiel": "Ezk",
  "Daniel": "Dan",
  "Hosea": "Hos",
  "Joel": "Jol",
  "Amos": "Amo",
  "Obadiah": "Oba",
  "Jonah": "Jon",
  "Micah": "Mic",
  "Nahum": "Nah",
  "Habakkuk": "Hab",
  "Zephaniah": "Zep",
  "Haggai": "Hag",
  "Zechariah": "Zec",
  "Malachi": "Mal",
  "Matthew": "Mat",
  "Mark": "Mrk",
  "Luke": "Luk",
  "John": "Jhn",
  "Acts": "Act",
  "Romans": "Rom",
  "1 Corinthians": "1Co",
  "2 Corinthians": "2Co",
  "Galatians": "Gal",
  "Ephesians": "Eph",
  "Philippians": "Php",
  "Colossians": "Col",
  "1 Thessalonians": "1Th",
  "2 Thessalonians": "2Th",
  "1 Timothy": "1Ti",
  "2 Timothy": "2Ti",
  "Titus": "Tit",
  "Philemon": "Phm",
  "Hebrews": "Heb",
  "James": "Jas",
  "1 Peter": "1Pe",
  "2 Peter": "2Pe",
  "1 John": "1Jn",
  "2 John": "2Jn",
  "3 John": "3Jn",
  "Jude": "Jud",
  "Revelation": "Rev"
};
var BibleLinkPlugin = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    this.isFirstLoad = true;
  }
  async onload() {
    await this.loadSettings();
    this.db = new BibleDatabase(this);
    if (this.isFirstLoad) {
      await this.db.initialize();
      this.isFirstLoad = false;
      new import_obsidian4.Notice('Welcome to BibleLink! ASV Bible is ready. Use "Insert Bible Reference" command to get started.');
    } else {
      await this.db.initialize();
    }
    window.BibleLinkPlugin = this;
    window.BibleLinkAPI = {
      getAllVerses: () => this.getAllVersesWithMetadata(),
      queryVerses: (book, chapter, translation) => this.queryVerses(book, chapter, translation),
      getTranslations: () => this.db.getTranslations(),
      getBooks: () => this.db.getBooks(),
      getChaptersForBook: (book, translation) => this.db.getChaptersForBook(book, translation),
      getVersesForChapter: (book, chapter, translation) => this.db.getVersesForChapter(book, chapter, translation),
      getVerse: (book, chapter, verse, translation) => this.db.getVerse(book, chapter, verse, translation),
      plugin: this
    };
    const parseReference = (ref) => {
      const match = ref.match(/^(.+?)\s+(\d+)(?::(\d+))?$/);
      if (!match)
        return null;
      const [, book, chapter, verse] = match;
      return {
        book: book.trim(),
        chapter: parseInt(chapter),
        verse: verse ? parseInt(verse) : void 0
      };
    };
    this.registerMarkdownCodeBlockProcessor(this.settings.codeBlockLanguage, (source, el, ctx) => {
      this.processCodeBlock(source, el, ctx);
    });
    this.addCommand({
      id: "insert-bible-reference",
      name: "Insert Bible Reference",
      editorCallback: (editor) => {
        new BibleSelectorModal(this.app, this, (reference, translation, outputType, options) => {
          this.insertBibleReference(editor, reference, translation, outputType, options);
        }).open();
      }
    });
    if (this.settings.enableShortcuts) {
      this.registerShortcutCommands();
    }
    this.addSettingTab(new BibleLinkSettingTab(this.app, this));
    this.registerDataviewSource();
    this.addStyles();
    this.updateStyles();
    this.testSettingsPersistence();
    console.log("BibleLink plugin loaded");
  }
  testSettingsPersistence() {
    console.log("[BibleLink] [testSettingsPersistence] Current settings:", {
      defaultTranslation: this.settings.defaultTranslation,
      outputType: this.settings.outputType,
      modalOutputType: this.settings.modalOutputType,
      modalOptions: this.settings.modalOptions,
      codeBlockBackgroundColor: this.settings.codeBlockBackgroundColor,
      codeBlockTextColor: this.settings.codeBlockTextColor
    });
    const settingsPath = path2.join(this.app.vault.adapter.basePath, ".obsidian", "plugins", "obsidian-biblelink", "data", "settings.json");
    if (fs2.existsSync(settingsPath)) {
      const content = fs2.readFileSync(settingsPath, "utf8");
      console.log("[BibleLink] [testSettingsPersistence] Settings file exists and contains:", content.slice(0, 500));
    } else {
      console.log("[BibleLink] [testSettingsPersistence] Settings file does not exist yet");
    }
  }
  async onunload() {
    if (this.db) {
      await this.db.close();
    }
    if (window.BibleLinkAPI) {
      delete window.BibleLinkAPI;
    }
    if (window.BibleLinkPlugin) {
      delete window.BibleLinkPlugin;
    }
    console.log("BibleLink plugin unloaded");
  }
  async loadSettings() {
    try {
      const settingsPath = path2.join(this.app.vault.adapter.basePath, ".obsidian", "plugins", "obsidian-biblelink", "data", "settings.json");
      console.log(`[BibleLink] [loadSettings] Loading settings from: ${settingsPath}`);
      if (fs2.existsSync(settingsPath)) {
        const content = fs2.readFileSync(settingsPath, "utf8");
        console.log(`[BibleLink] [loadSettings] Settings file found. First 200 chars:`, content.slice(0, 200));
        const savedSettings = JSON.parse(content);
        this.settings = Object.assign({}, DEFAULT_SETTINGS, savedSettings);
        console.log(`[BibleLink] [loadSettings] Loaded settings successfully`);
      } else {
        console.log("[BibleLink] [loadSettings] No settings file found, using defaults");
        this.settings = Object.assign({}, DEFAULT_SETTINGS);
        await this.saveSettings();
        console.log("[BibleLink] [loadSettings] Created default settings file");
      }
    } catch (error) {
      console.error("[BibleLink] [loadSettings] Error loading settings:", error);
      this.settings = Object.assign({}, DEFAULT_SETTINGS);
    }
  }
  async saveSettings() {
    try {
      const dataDir = path2.join(this.app.vault.adapter.basePath, ".obsidian", "plugins", "obsidian-biblelink", "data");
      if (!fs2.existsSync(dataDir)) {
        fs2.mkdirSync(dataDir, { recursive: true });
      }
      const settingsPath = path2.join(dataDir, "settings.json");
      const content = JSON.stringify(this.settings, null, 2);
      console.log(`[BibleLink] [saveSettings] Saving settings to: ${settingsPath}`);
      console.log(`[BibleLink] [saveSettings] Settings (first 200 chars):`, content.slice(0, 200));
      fs2.writeFileSync(settingsPath, content, "utf8");
      console.log(`[BibleLink] [saveSettings] Settings saved successfully`);
      this.updateStyles();
    } catch (error) {
      console.error("[BibleLink] [saveSettings] Error saving settings:", error);
      new import_obsidian4.Notice("Failed to save settings");
    }
  }
  addStyles() {
    this.updateStyles();
  }
  updateStyles() {
    const existingStyle = document.getElementById("biblelink-styles");
    if (existingStyle) {
      existingStyle.remove();
    }
    const style = document.createElement("style");
    style.id = "biblelink-styles";
    style.textContent = `
            .bible-reference {
                color: ${this.settings.codeBlockTextColor};
                background-color: ${this.settings.codeBlockBackgroundColor};
                padding: 2px 6px;
                border-radius: 4px;
                display: inline-block;
                margin: 0 2px;
            }
            
            .bible-reference.simple {
                font-weight: normal;
                background: none;
                padding: 0;
                color: inherit;
            }
            
            .bible-reference.detailed {
                font-weight: 500;
            }
            
            .bible-reference.custom {
                font-style: italic;
            }

            .bible-verse-container {
                margin: 1em 0;
                line-height: 1.5;
            }

            .bible-verse-reference {
                font-weight: 500;
                color: var(--text-muted);
            }

            .bible-verse-text {
                margin-top: 0.5em;
            }

            .bible-verse-text sup {
                color: ${this.settings.codeBlockVerseNumberColor};
                font-size: 0.8em;
                font-weight: 500;
                vertical-align: super;
            }

            .red-letter-text {
                color: var(--text-red);
            }

            .chapter-number {
                font-weight: bold;
                color: var(--text-muted);
                margin-top: 1em;
                margin-bottom: 0.5em;
            }

            .bible-verse-link {
                margin-top: 1em;
                text-align: right;
            }

            .bible-verse-link a {
                color: var(--text-accent);
                font-size: 0.9em;
                text-decoration: none;
            }

            .bible-verse-link a:hover {
                text-decoration: underline;
            }

            /* BibleLink chapter/verse grid styles */
            .biblelink-chapter-grid, .biblelink-verse-grid {
                display: flex;
                flex-wrap: wrap;
                gap: 6px;
                margin-bottom: 8px;
            }
            .biblelink-chapter-btn, .biblelink-verse-btn {
                min-width: 32px;
                min-height: 32px;
                border-radius: 4px;
                border: 1px solid var(--background-modifier-border);
                background: var(--background-secondary);
                cursor: pointer;
                font-size: 1em;
                transition: background 0.2s, color 0.2s;
            }
            .biblelink-chapter-btn.selected, .biblelink-verse-btn.selected {
                background: var(--interactive-accent);
                color: var(--text-on-accent);
                font-weight: bold;
            }
        `;
    document.head.appendChild(style);
  }
  processCodeBlock(source, el, ctx) {
    el.style.backgroundColor = this.settings.codeBlockBackgroundColor;
    el.style.color = this.settings.codeBlockTextColor;
    const lines = source.trim().split("\n");
    if (lines.length === 0)
      return;
    const firstLine = lines[0].trim();
    const parts = firstLine.split(" ").filter((p) => p.length > 0);
    const options = {
      verse: false,
      chapter: false,
      redText: false,
      link: false
    };
    let translationIndex = 0;
    let referenceStartIndex = 1;
    for (let i = 1; i < parts.length; i++) {
      const part = parts[i].toLowerCase();
      if (["verse", "chapter", "red-text", "link"].includes(part)) {
        switch (part) {
          case "verse":
            options.verse = true;
            break;
          case "chapter":
            options.chapter = true;
            break;
          case "red-text":
            options.redText = true;
            break;
          case "link":
            options.link = true;
            break;
        }
        translationIndex = i + 1;
      } else {
        break;
      }
    }
    const lastPart = parts[parts.length - 1];
    let referenceEndIndex = parts.length;
    if (lastPart.startsWith("[") && lastPart.endsWith("]")) {
      const optionsStr = lastPart.slice(1, -1);
      const optionsList = optionsStr.split(/[,|]/).map((o) => o.trim()).filter((o) => o.length > 0);
      options.verse = options.verse || optionsList.includes("verse");
      options.chapter = options.chapter || optionsList.includes("chapter");
      options.redText = options.redText || optionsList.includes("red-text");
      options.link = options.link || optionsList.includes("link");
      referenceEndIndex--;
    }
    if (translationIndex >= referenceEndIndex) {
      el.createSpan({ text: "Invalid format. Use: ```bible [option1,option2] TRANSLATION REFERENCE``` or ```bible TRANSLATION REFERENCE [option1,option2]```" });
      return;
    }
    const translation = parts[translationIndex];
    const referenceText = parts.slice(translationIndex + 1, referenceEndIndex).join(" ");
    const crossRefMatch = referenceText.match(/^(.+?)\s+(\d+):(\d+)-(.+?)\s+(\d+):(\d+)$/);
    let verses = [];
    if (crossRefMatch) {
      const [, startBook, startChapter, startVerse, endBook, endChapter, endVerse] = crossRefMatch;
      const startChapterNum = parseInt(startChapter);
      const startVerseNum = parseInt(startVerse);
      const endChapterNum = parseInt(endChapter);
      const endVerseNum = parseInt(endVerse);
      if (startBook !== endBook) {
        el.createSpan({ text: "Cross-book references are not supported yet." });
        return;
      }
      for (let chapter = startChapterNum; chapter <= endChapterNum; chapter++) {
        const start = chapter === startChapterNum ? startVerseNum : 1;
        const end = chapter === endChapterNum ? endVerseNum : 999;
        for (let verse = start; verse <= end; verse++) {
          const verseData = this.db.getVerse(startBook, chapter, verse, translation);
          if (verseData) {
            verses.push({ chapter, verse, text: verseData.text });
          }
        }
      }
      if (verses.length === 0) {
        el.createSpan({ text: `Invalid reference: ${referenceText} in ${translation}` });
        return;
      }
      const container = el.createDiv({
        cls: `bible-verse-container${options.redText ? " red-letter" : ""}${options.chapter ? " show-chapter" : ""}${options.verse ? " show-verse" : ""}`
      });
      const ref = `${startBook} ${startChapterNum}:${startVerseNum}-${endChapterNum}:${endVerseNum} (${translation})`;
      container.createSpan({ text: ref + ": ", cls: "bible-verse-reference" });
      const verseContainer = container.createDiv({ cls: "bible-verse-text" });
      let lastChapter = -1;
      verses.forEach((verse) => {
        if (options.chapter && verse.chapter !== lastChapter) {
          verseContainer.createEl("h4", {
            text: `Chapter ${verse.chapter}`,
            cls: "chapter-number"
          });
          lastChapter = verse.chapter;
        }
        if (options.verse) {
          const sup = verseContainer.createEl("sup", { text: verse.verse.toString() });
          sup.style.marginRight = "0.3em";
        }
        let processedText = this.db.applyProcessingRules(verse.text, translation);
        if (options.redText) {
          const words = processedText.split(" ");
          words.forEach((word, i) => {
            const isJesusWord = this.isJesusWord(word);
            verseContainer.createSpan({
              text: word + (i < words.length - 1 ? " " : ""),
              cls: isJesusWord ? "red-letter-text" : ""
            });
          });
        } else {
          const textSpan = verseContainer.createSpan();
          textSpan.innerHTML = processedText + " ";
        }
      });
      if (options.link) {
        const linkContainer = container.createDiv({ cls: "bible-verse-link" });
        const linkText = `${startBook} ${startChapterNum}:${startVerseNum}${endVerseNum !== startVerseNum ? "-" + endVerseNum : ""}`;
        const linkUrl = this.generateBibleGatewayUrl(linkText, translation);
        const link = linkContainer.createEl("a", {
          text: `[@${linkUrl}]`,
          href: linkUrl
        });
        link.addClass("external-link");
      }
    } else {
      const match = referenceText.match(/^(.+?)\s+(\d+)(?::(\d+)(?:-(\d+))?)?$/);
      if (!match) {
        el.createSpan({ text: `Invalid reference format: ${referenceText}` });
        return;
      }
      const [, book, chapter, startVerse, endVerse] = match;
      const startChapterNum = parseInt(chapter);
      const startVerseNum = startVerse ? parseInt(startVerse) : 1;
      const endVerseNum = endVerse ? parseInt(endVerse) : startVerseNum;
      for (let v = startVerseNum; v <= endVerseNum; v++) {
        const verseData = this.db.getVerse(book, startChapterNum, v, translation);
        if (verseData) {
          verses.push({ chapter: startChapterNum, verse: v, text: verseData.text });
        }
      }
      if (verses.length === 0) {
        el.createSpan({ text: `Invalid reference: ${book} ${startChapterNum}:${startVerseNum}${endVerseNum !== startVerseNum ? "-" + endVerseNum : ""} in ${translation}` });
        return;
      }
      const container = el.createDiv({
        cls: `bible-verse-container${options.redText ? " red-letter" : ""}${options.chapter ? " show-chapter" : ""}${options.verse ? " show-verse" : ""}`
      });
      const ref = `${book} ${startChapterNum}:${startVerseNum}${endVerseNum !== startVerseNum ? "-" + endVerseNum : ""} (${translation})`;
      container.createSpan({ text: ref + ": ", cls: "bible-verse-reference" });
      const verseContainer = container.createDiv({ cls: "bible-verse-text" });
      let lastChapter = -1;
      verses.forEach((verse) => {
        if (options.chapter && verse.chapter !== lastChapter) {
          const chapterNum = verseContainer.createEl("strong", {
            text: verse.chapter.toString(),
            cls: "chapter-number"
          });
          chapterNum.style.marginRight = "0.5em";
          lastChapter = verse.chapter;
        }
        if (options.verse || verses.length > 1) {
          const sup = verseContainer.createEl("sup", { text: verse.verse.toString() });
          sup.style.marginRight = "0.3em";
        }
        let processedText = this.db.applyProcessingRules(verse.text, translation);
        if (options.redText) {
          const words = processedText.split(" ");
          words.forEach((word, i) => {
            const isJesusWord = this.isJesusWord(word);
            verseContainer.createSpan({
              text: word + (i < words.length - 1 ? " " : ""),
              cls: isJesusWord ? "red-letter-text" : ""
            });
          });
        } else {
          const textSpan = verseContainer.createSpan();
          textSpan.innerHTML = processedText + " ";
        }
      });
      if (options.link) {
        const linkContainer = container.createDiv({ cls: "bible-verse-link" });
        const linkText = `${book} ${startChapterNum}:${startVerseNum}${endVerseNum !== startVerseNum ? "-" + endVerseNum : ""}`;
        const linkUrl = this.generateBibleGatewayUrl(linkText, translation);
        const link = linkContainer.createEl("a", {
          text: `[@${linkUrl}]`,
          href: linkUrl
        });
        link.addClass("external-link");
      }
    }
  }
  registerShortcutCommands() {
    Object.entries(this.settings.shortcuts).forEach(([shortcut, reference]) => {
      this.addCommand({
        id: `bible-shortcut-${shortcut}`,
        name: `Insert ${reference} (${shortcut})`,
        editorCallback: (editor) => {
          this.insertShortcutReference(editor, reference);
        }
      });
    });
  }
  insertShortcutReference(editor, reference) {
    const match = reference.match(/^(\w+)\s+(\d+):(\d+)$/);
    if (!match) {
      new import_obsidian4.Notice(`Invalid reference format: ${reference}`);
      return;
    }
    const [, book, chapter, verse] = match;
    const chapterNum = parseInt(chapter);
    const verseNum = parseInt(verse);
    const verseData = this.db.getVerse(book, chapterNum, verseNum, this.settings.defaultTranslation);
    if (!verseData) {
      new import_obsidian4.Notice(`Verse not found: ${reference} in ${this.settings.defaultTranslation}`);
      return;
    }
    this.insertBibleReference(editor, reference, this.settings.defaultTranslation, this.settings.outputType, []);
  }
  insertBibleReference(editor, reference, translation, outputType, options) {
    let multiVerseMatch = reference.match(/^(.+?)\s+(\d+):([\d,\-]+)$/);
    let crossChapterMatch = reference.match(/^(.+?)\s+(\d+):(\d+)-(.+?)\s+(\d+):(\d+)$/);
    let match = reference.match(/^(.+?)\s+(\d+)(?::(\d+))?$/);
    let verses = [];
    let book, chapterNum, startVerseNum, endVerseNum;
    if (crossChapterMatch) {
      new import_obsidian4.Notice("Cross-chapter references are not supported yet.");
      return;
    } else if (multiVerseMatch) {
      let versePart;
      [, book, chapterNum, versePart] = multiVerseMatch;
      book = book.trim();
      chapterNum = parseInt(chapterNum);
      let verseNumbers = [];
      versePart.split(",").forEach((part) => {
        if (part.includes("-")) {
          const [start, end] = part.split("-").map(Number);
          for (let v = start; v <= end; v++) {
            verseNumbers.push(v);
          }
        } else {
          verseNumbers.push(Number(part));
        }
      });
      for (const v of verseNumbers) {
        const verseData = this.db.getVerse(book, chapterNum, v, translation);
        if (verseData) {
          verses.push({ verse: v, text: verseData.text });
        }
      }
    } else if (match) {
      [, book, chapterNum, startVerseNum] = match;
      book = book.trim();
      chapterNum = parseInt(chapterNum);
      startVerseNum = startVerseNum ? parseInt(startVerseNum) : 1;
      endVerseNum = startVerseNum;
      const verseData = this.db.getVerse(book, chapterNum, startVerseNum, translation);
      if (verseData) {
        verses.push({ verse: startVerseNum, text: verseData.text });
      }
    } else {
      new import_obsidian4.Notice(`Invalid reference format: ${reference}`);
      return;
    }
    if (verses.length === 0) {
      new import_obsidian4.Notice(`Invalid reference: ${reference} in ${translation}`);
      return;
    }
    let text;
    if (outputType === "text") {
      const verseTexts = verses.map((v) => {
        return verses.length > 1 ? `${v.verse} ${v.text}` : v.text;
      });
      text = `${reference} (${translation}): ${verseTexts.join(" ")}`;
    } else if (outputType === "link") {
      text = `[${reference} (${translation})](${this.generateBibleGatewayUrl(reference, translation)})`;
    } else {
      const optionsStr = options.length > 0 ? ` [${options.join("|")}]` : "";
      text = `\`\`\`${this.settings.codeBlockLanguage}
${translation} ${reference}${optionsStr}
${verses.map((v) => v.text).join(" ")}
\`\`\``;
    }
    editor.replaceSelection(text);
  }
  formatReference(book, chapter, verse, translation) {
    let formattedBook = book;
    if (this.settings.showBookAbbr && BOOK_ABBREVIATIONS[book]) {
      formattedBook = BOOK_ABBREVIATIONS[book];
    }
    return this.settings.showTranslationAbbr ? `${formattedBook} ${chapter}:${verse} ${translation}` : `${formattedBook} ${chapter}:${verse}`;
  }
  async createVerseNote(book, chapter, verse, translation) {
    try {
      const verseData = this.db.getVerse(book, chapter, verse, translation);
      if (!verseData)
        return;
      const notePath = `Bible/${book}/${chapter}/${verse}.md`;
      const existingFile = this.app.vault.getAbstractFileByPath(notePath);
      if (existingFile)
        return;
      const dirPath = `Bible/${book}/${chapter}`;
      const dirExists = this.app.vault.getAbstractFileByPath(dirPath);
      if (!dirExists) {
        await this.createDirectoryRecursive(dirPath);
      }
      const translationInfo = this.getTranslationInfo(translation);
      const reference = this.formatReference(book, chapter, verse, translation);
      const content = `---
book: ${book}
chapter: ${chapter}
verse: ${verse}
translation: ${translation}
text: "${verseData.text.replace(/"/g, '\\"')}"
reference: "${reference}"
language: "${translationInfo.language}"
category: "${translationInfo.category}"
translation_name: "${translationInfo.name}"
created: ${new Date().toISOString()}
---

# ${reference}

${verseData.text}

*Translation: ${translationInfo.name} (${translation})*

## Metadata

- **Book**: ${book}
- **Chapter**: ${chapter}
- **Verse**: ${verse}
- **Translation**: ${translation}
- **Language**: ${translationInfo.language}
- **Category**: ${translationInfo.category}
- **Reference**: ${reference}

## Related Verses

\`\`\`dataview
LIST reference, text
FROM "Bible"
WHERE book = "${book}" AND chapter = ${chapter}
SORT verse
\`\`\`

## Cross-References

\`\`\`dataview
LIST reference, text
FROM "Bible"
WHERE contains(text, "${verseData.text.split(" ").slice(0, 3).join(" ")}")
AND file.name != this.file.name
LIMIT 5
\`\`\`
`;
      await this.app.vault.create(notePath, content);
    } catch (error) {
      console.error("Error creating verse note:", error);
    }
  }
  getTranslationInfo(abbreviation) {
    const translation = this.db.getTranslations().find((t) => t.abbreviation === abbreviation);
    if (translation) {
      const knownTranslation = this.getKnownTranslation(abbreviation);
      return {
        name: translation.name,
        language: (knownTranslation == null ? void 0 : knownTranslation.language) || "unknown",
        category: (knownTranslation == null ? void 0 : knownTranslation.category) || "Unknown"
      };
    }
    return {
      name: abbreviation,
      language: "unknown",
      category: "Unknown"
    };
  }
  getKnownTranslation(abbreviation) {
    const knownTranslations = {
      "ASV": { name: "American Standard Version (1901)", language: "en", category: "English" },
      "KJV": { name: "King James Version", language: "en", category: "English" },
      "WEB": { name: "World English Bible", language: "en", category: "English" },
      "YLT": { name: "Young's Literal Translation (1898)", language: "en", category: "English" },
      "BBE": { name: "Bible in Basic English (1949/1964)", language: "en", category: "English" },
      "BSB": { name: "Berean Standard Bible", language: "en", category: "English" },
      "CPDV": { name: "Catholic Public Domain Version", language: "en", category: "English" },
      "SpaRV": { name: "La Santa Biblia Reina-Valera (1909)", language: "es", category: "Spanish" },
      "Vulgate": { name: "Latin Vulgate", language: "la", category: "Latin" },
      "Byz": { name: "Byzantine Textform (Greek)", language: "grc", category: "Greek" },
      "WLC": { name: "Westminster Leningrad Codex", language: "hbo", category: "Hebrew" }
    };
    return knownTranslations[abbreviation] || null;
  }
  async createDirectoryRecursive(dirPath) {
    const parts = dirPath.split("/");
    let currentPath = "";
    for (const part of parts) {
      currentPath = currentPath ? `${currentPath}/${part}` : part;
      const exists = this.app.vault.getAbstractFileByPath(currentPath);
      if (!exists) {
        try {
          await this.app.vault.createFolder(currentPath);
        } catch (error) {
        }
      }
    }
  }
  registerDataviewSource() {
    const dataviewPlugin = this.app.plugins.plugins["dataview"];
    if (!dataviewPlugin) {
      console.log("[BibleLink] Dataview plugin not found, skipping Dataview integration");
      return;
    }
    try {
      console.log("[BibleLink] Dataview plugin found, exposing API for DataviewJS access");
      console.log("[BibleLink] Use BibleLinkAPI or BibleLinkPlugin in DataviewJS queries");
    } catch (error) {
      console.error("[BibleLink] Failed to initialize Dataview integration:", error);
    }
  }
  handleDataviewQuery(query) {
    try {
      console.log("[BibleLink] Processing Dataview query:", query);
      const parsedQuery = this.parseDataviewQuery(query);
      console.log("[BibleLink] Parsed query:", parsedQuery);
      let results = this.getAllVersesWithMetadata();
      if (parsedQuery.where) {
        results = this.applyWhereConditions(results, parsedQuery.where);
      }
      if (parsedQuery.sort) {
        results = this.applySort(results, parsedQuery.sort);
      }
      if (parsedQuery.limit) {
        results = results.slice(0, parsedQuery.limit);
      }
      console.log(`[BibleLink] Query returned ${results.length} results`);
      return results;
    } catch (error) {
      console.error("[BibleLink] Dataview query error:", error);
      return [];
    }
  }
  parseDataviewQuery(query) {
    const result = {};
    const whereMatch = query.match(/WHERE\s+(.+?)(?:\s+SORT|\s+LIMIT|$)/i);
    if (whereMatch) {
      result.where = this.parseWhereConditions(whereMatch[1]);
    }
    const sortMatch = query.match(/SORT\s+(.+?)(?:\s+LIMIT|$)/i);
    if (sortMatch) {
      result.sort = this.parseSortConditions(sortMatch[1]);
    }
    const limitMatch = query.match(/LIMIT\s+(\d+)/i);
    if (limitMatch) {
      result.limit = parseInt(limitMatch[1]);
    }
    return result;
  }
  parseWhereConditions(conditions) {
    const parsedConditions = [];
    const andParts = conditions.split(/\s+AND\s+/i);
    for (const part of andParts) {
      const eqMatch = part.match(/(\w+)\s*=\s*"([^"]+)"/i);
      if (eqMatch) {
        parsedConditions.push({
          type: "equals",
          field: eqMatch[1].toLowerCase(),
          value: eqMatch[2]
        });
        continue;
      }
      const numMatch = part.match(/(\w+)\s*=\s*(\d+)/i);
      if (numMatch) {
        parsedConditions.push({
          type: "equals",
          field: numMatch[1].toLowerCase(),
          value: parseInt(numMatch[2])
        });
        continue;
      }
      const containsMatch = part.match(/contains\((\w+),\s*"([^"]+)"\)/i);
      if (containsMatch) {
        parsedConditions.push({
          type: "contains",
          field: containsMatch[1].toLowerCase(),
          value: containsMatch[2]
        });
        continue;
      }
      const gtMatch = part.match(/(\w+)\s*>\s*(\d+)/i);
      if (gtMatch) {
        parsedConditions.push({
          type: "greater_than",
          field: gtMatch[1].toLowerCase(),
          value: parseInt(gtMatch[2])
        });
        continue;
      }
      const ltMatch = part.match(/(\w+)\s*<\s*(\d+)/i);
      if (ltMatch) {
        parsedConditions.push({
          type: "less_than",
          field: ltMatch[1].toLowerCase(),
          value: parseInt(ltMatch[2])
        });
        continue;
      }
    }
    return parsedConditions;
  }
  parseSortConditions(sortClause) {
    const sorts = [];
    const parts = sortClause.split(",").map((p) => p.trim());
    for (const part of parts) {
      const descMatch = part.match(/(\w+)\s+DESC/i);
      if (descMatch) {
        sorts.push({ field: descMatch[1].toLowerCase(), direction: "desc" });
        continue;
      }
      const ascMatch = part.match(/(\w+)\s+ASC/i);
      if (ascMatch) {
        sorts.push({ field: ascMatch[1].toLowerCase(), direction: "asc" });
        continue;
      }
      const fieldMatch = part.match(/(\w+)/i);
      if (fieldMatch) {
        sorts.push({ field: fieldMatch[1].toLowerCase(), direction: "asc" });
      }
    }
    return sorts;
  }
  getAllVersesWithMetadata() {
    const results = [];
    for (const translation of this.db.getTranslations()) {
      for (const book of this.db.getBooks()) {
        const chapters = this.db.getChaptersForBook(book, translation.abbreviation);
        for (const chapter of chapters) {
          const verses = this.db.getVersesForChapter(book, chapter, translation.abbreviation);
          for (const verseNum of verses) {
            const verseData = this.db.getVerse(book, chapter, verseNum, translation.abbreviation);
            if (verseData) {
              const text = verseData.text;
              const wordCount = text.split(/\s+/).length;
              const charCount = text.length;
              results.push({
                book: verseData.book,
                chapter: verseData.chapter,
                verse: verseData.verse,
                text,
                translation: translation.abbreviation,
                translation_name: translation.name,
                reference: `${verseData.book} ${verseData.chapter}:${verseData.verse}`,
                word_count: wordCount,
                char_count: charCount,
                is_jesus_word: this.isJesusWord(text),
                has_red_letter: this.hasRedLetterWords(text),
                testament: this.getTestament(verseData.book),
                book_category: this.getBookCategory(verseData.book)
              });
            }
          }
        }
      }
    }
    return results;
  }
  applyWhereConditions(verses, conditions) {
    return verses.filter((verse) => {
      return conditions.every((condition) => {
        const fieldValue = verse[condition.field];
        switch (condition.type) {
          case "equals":
            return fieldValue === condition.value;
          case "contains":
            return typeof fieldValue === "string" && fieldValue.toLowerCase().includes(condition.value.toLowerCase());
          case "greater_than":
            return typeof fieldValue === "number" && fieldValue > condition.value;
          case "less_than":
            return typeof fieldValue === "number" && fieldValue < condition.value;
          default:
            return true;
        }
      });
    });
  }
  applySort(verses, sorts) {
    return [...verses].sort((a, b) => {
      for (const sort of sorts) {
        const aVal = a[sort.field];
        const bVal = b[sort.field];
        let comparison = 0;
        if (typeof aVal === "string" && typeof bVal === "string") {
          comparison = aVal.localeCompare(bVal);
        } else if (typeof aVal === "number" && typeof bVal === "number") {
          comparison = aVal - bVal;
        } else {
          comparison = String(aVal).localeCompare(String(bVal));
        }
        if (comparison !== 0) {
          return sort.direction === "desc" ? -comparison : comparison;
        }
      }
      return 0;
    });
  }
  getTestament(book) {
    const oldTestamentBooks = [
      "Genesis",
      "Exodus",
      "Leviticus",
      "Numbers",
      "Deuteronomy",
      "Joshua",
      "Judges",
      "Ruth",
      "1 Samuel",
      "2 Samuel",
      "1 Kings",
      "2 Kings",
      "1 Chronicles",
      "2 Chronicles",
      "Ezra",
      "Nehemiah",
      "Esther",
      "Job",
      "Psalms",
      "Proverbs",
      "Ecclesiastes",
      "Song of Solomon",
      "Isaiah",
      "Jeremiah",
      "Lamentations",
      "Ezekiel",
      "Daniel",
      "Hosea",
      "Joel",
      "Amos",
      "Obadiah",
      "Jonah",
      "Micah",
      "Nahum",
      "Habakkuk",
      "Zephaniah",
      "Haggai",
      "Zechariah",
      "Malachi"
    ];
    return oldTestamentBooks.includes(book) ? "Old Testament" : "New Testament";
  }
  getBookCategory(book) {
    const categories = {
      "Genesis": "Law",
      "Exodus": "Law",
      "Leviticus": "Law",
      "Numbers": "Law",
      "Deuteronomy": "Law",
      "Joshua": "Historical",
      "Judges": "Historical",
      "Ruth": "Historical",
      "1 Samuel": "Historical",
      "2 Samuel": "Historical",
      "1 Kings": "Historical",
      "2 Kings": "Historical",
      "1 Chronicles": "Historical",
      "2 Chronicles": "Historical",
      "Ezra": "Historical",
      "Nehemiah": "Historical",
      "Esther": "Historical",
      "Job": "Wisdom",
      "Psalms": "Wisdom",
      "Proverbs": "Wisdom",
      "Ecclesiastes": "Wisdom",
      "Song of Solomon": "Wisdom",
      "Isaiah": "Prophetic",
      "Jeremiah": "Prophetic",
      "Lamentations": "Prophetic",
      "Ezekiel": "Prophetic",
      "Daniel": "Prophetic",
      "Hosea": "Prophetic",
      "Joel": "Prophetic",
      "Amos": "Prophetic",
      "Obadiah": "Prophetic",
      "Jonah": "Prophetic",
      "Micah": "Prophetic",
      "Nahum": "Prophetic",
      "Habakkuk": "Prophetic",
      "Zephaniah": "Prophetic",
      "Haggai": "Prophetic",
      "Zechariah": "Prophetic",
      "Malachi": "Prophetic",
      "Matthew": "Gospel",
      "Mark": "Gospel",
      "Luke": "Gospel",
      "John": "Gospel",
      "Acts": "Historical",
      "Romans": "Epistle",
      "1 Corinthians": "Epistle",
      "2 Corinthians": "Epistle",
      "Galatians": "Epistle",
      "Ephesians": "Epistle",
      "Philippians": "Epistle",
      "Colossians": "Epistle",
      "1 Thessalonians": "Epistle",
      "2 Thessalonians": "Epistle",
      "1 Timothy": "Epistle",
      "2 Timothy": "Epistle",
      "Titus": "Epistle",
      "Philemon": "Epistle",
      "Hebrews": "Epistle",
      "James": "Epistle",
      "1 Peter": "Epistle",
      "2 Peter": "Epistle",
      "1 John": "Epistle",
      "2 John": "Epistle",
      "3 John": "Epistle",
      "Jude": "Epistle",
      "Revelation": "Apocalyptic"
    };
    return categories[book] || "Unknown";
  }
  hasRedLetterWords(text) {
    const jesusIndicators = [
      "I am",
      "verily",
      "truly",
      "amen",
      "father",
      "kingdom",
      "heaven",
      "parable",
      "disciple",
      "follow me",
      "come unto me",
      "my father"
    ];
    const lowerText = text.toLowerCase();
    return jesusIndicators.some((indicator) => lowerText.includes(indicator.toLowerCase()));
  }
  queryVerses(book, chapter, translation) {
    let results = this.getAllVersesWithMetadata();
    if (book) {
      results = results.filter((v) => v.book === book);
    }
    if (chapter) {
      results = results.filter((v) => v.chapter === chapter);
    }
    if (translation) {
      results = results.filter((v) => v.translation === translation);
    }
    return results.slice(0, 1e3);
  }
  isJesusWord(word) {
    const jesusWords = ["Jesus", "Christ", "Lord", "Master", "Rabbi", "Teacher"];
    return jesusWords.some((w) => word.includes(w));
  }
  generateBibleGatewayUrl(reference, translation) {
    const translationMap = {
      "KJV": "KJV",
      "ASV": "ASV",
      "WEB": "WEB",
      "YLT": "YLT",
      "BBE": "BBE",
      "BSB": "BSB",
      "CPDV": "CPDV",
      "SpaRV": "RVR1909",
      "Vulgate": "VULGATE",
      "Byz": "BYZ",
      "WLC": "WLC"
    };
    const bibleGatewayTranslation = translationMap[translation] || translation;
    const encodedReference = encodeURIComponent(reference);
    return `https://www.biblegateway.com/passage/?search=${encodedReference}&version=${bibleGatewayTranslation}`;
  }
};
/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3htbDJqcy9saWIvZGVmYXVsdHMuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1V0aWxpdHkuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTUltcGxlbWVudGF0aW9uLmpzIiwgIm5vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxET01FcnJvckhhbmRsZXIuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTVN0cmluZ0xpc3QuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTUNvbmZpZ3VyYXRpb24uanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL05vZGVUeXBlLmpzIiwgIm5vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxBdHRyaWJ1dGUuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTE5hbWVkTm9kZU1hcC5qcyIsICJub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRWxlbWVudC5qcyIsICJub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MQ2hhcmFjdGVyRGF0YS5qcyIsICJub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MQ0RhdGEuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTENvbW1lbnQuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERlY2xhcmF0aW9uLmpzIiwgIm5vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEVERBdHRMaXN0LmpzIiwgIm5vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEVERFbnRpdHkuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERUREVsZW1lbnQuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERURE5vdGF0aW9uLmpzIiwgIm5vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEb2NUeXBlLmpzIiwgIm5vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxSYXcuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFRleHQuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5qcyIsICJub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRHVtbXkuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTE5vZGVMaXN0LmpzIiwgIm5vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9Eb2N1bWVudFBvc2l0aW9uLmpzIiwgIm5vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxOb2RlLmpzIiwgIm5vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxTdHJpbmdpZmllci5qcyIsICJub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvV3JpdGVyU3RhdGUuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFdyaXRlckJhc2UuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFN0cmluZ1dyaXRlci5qcyIsICJub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRG9jdW1lbnQuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERvY3VtZW50Q0IuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFN0cmVhbVdyaXRlci5qcyIsICJub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL3htbDJqcy9saWIvYnVpbGRlci5qcyIsICJub2RlX21vZHVsZXMvc2F4L2xpYi9zYXguanMiLCAibm9kZV9tb2R1bGVzL3htbDJqcy9saWIvYm9tLmpzIiwgIm5vZGVfbW9kdWxlcy94bWwyanMvbGliL3Byb2Nlc3NvcnMuanMiLCAibm9kZV9tb2R1bGVzL3htbDJqcy9saWIvcGFyc2VyLmpzIiwgIm5vZGVfbW9kdWxlcy94bWwyanMvbGliL3htbDJqcy5qcyIsICJzcmMvbWFpbi50cyIsICJzcmMvZGF0YWJhc2UudHMiLCAic3JjL3NlbGVjdG9yLnRzIiwgInNyYy9zZXR0aW5ncy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgZXhwb3J0cy5kZWZhdWx0cyA9IHtcbiAgICBcIjAuMVwiOiB7XG4gICAgICBleHBsaWNpdENoYXJrZXk6IGZhbHNlLFxuICAgICAgdHJpbTogdHJ1ZSxcbiAgICAgIG5vcm1hbGl6ZTogdHJ1ZSxcbiAgICAgIG5vcm1hbGl6ZVRhZ3M6IGZhbHNlLFxuICAgICAgYXR0cmtleTogXCJAXCIsXG4gICAgICBjaGFya2V5OiBcIiNcIixcbiAgICAgIGV4cGxpY2l0QXJyYXk6IGZhbHNlLFxuICAgICAgaWdub3JlQXR0cnM6IGZhbHNlLFxuICAgICAgbWVyZ2VBdHRyczogZmFsc2UsXG4gICAgICBleHBsaWNpdFJvb3Q6IGZhbHNlLFxuICAgICAgdmFsaWRhdG9yOiBudWxsLFxuICAgICAgeG1sbnM6IGZhbHNlLFxuICAgICAgZXhwbGljaXRDaGlsZHJlbjogZmFsc2UsXG4gICAgICBjaGlsZGtleTogJ0BAJyxcbiAgICAgIGNoYXJzQXNDaGlsZHJlbjogZmFsc2UsXG4gICAgICBpbmNsdWRlV2hpdGVDaGFyczogZmFsc2UsXG4gICAgICBhc3luYzogZmFsc2UsXG4gICAgICBzdHJpY3Q6IHRydWUsXG4gICAgICBhdHRyTmFtZVByb2Nlc3NvcnM6IG51bGwsXG4gICAgICBhdHRyVmFsdWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgdGFnTmFtZVByb2Nlc3NvcnM6IG51bGwsXG4gICAgICB2YWx1ZVByb2Nlc3NvcnM6IG51bGwsXG4gICAgICBlbXB0eVRhZzogJydcbiAgICB9LFxuICAgIFwiMC4yXCI6IHtcbiAgICAgIGV4cGxpY2l0Q2hhcmtleTogZmFsc2UsXG4gICAgICB0cmltOiBmYWxzZSxcbiAgICAgIG5vcm1hbGl6ZTogZmFsc2UsXG4gICAgICBub3JtYWxpemVUYWdzOiBmYWxzZSxcbiAgICAgIGF0dHJrZXk6IFwiJFwiLFxuICAgICAgY2hhcmtleTogXCJfXCIsXG4gICAgICBleHBsaWNpdEFycmF5OiB0cnVlLFxuICAgICAgaWdub3JlQXR0cnM6IGZhbHNlLFxuICAgICAgbWVyZ2VBdHRyczogZmFsc2UsXG4gICAgICBleHBsaWNpdFJvb3Q6IHRydWUsXG4gICAgICB2YWxpZGF0b3I6IG51bGwsXG4gICAgICB4bWxuczogZmFsc2UsXG4gICAgICBleHBsaWNpdENoaWxkcmVuOiBmYWxzZSxcbiAgICAgIHByZXNlcnZlQ2hpbGRyZW5PcmRlcjogZmFsc2UsXG4gICAgICBjaGlsZGtleTogJyQkJyxcbiAgICAgIGNoYXJzQXNDaGlsZHJlbjogZmFsc2UsXG4gICAgICBpbmNsdWRlV2hpdGVDaGFyczogZmFsc2UsXG4gICAgICBhc3luYzogZmFsc2UsXG4gICAgICBzdHJpY3Q6IHRydWUsXG4gICAgICBhdHRyTmFtZVByb2Nlc3NvcnM6IG51bGwsXG4gICAgICBhdHRyVmFsdWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgdGFnTmFtZVByb2Nlc3NvcnM6IG51bGwsXG4gICAgICB2YWx1ZVByb2Nlc3NvcnM6IG51bGwsXG4gICAgICByb290TmFtZTogJ3Jvb3QnLFxuICAgICAgeG1sZGVjOiB7XG4gICAgICAgICd2ZXJzaW9uJzogJzEuMCcsXG4gICAgICAgICdlbmNvZGluZyc6ICdVVEYtOCcsXG4gICAgICAgICdzdGFuZGFsb25lJzogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGRvY3R5cGU6IG51bGwsXG4gICAgICByZW5kZXJPcHRzOiB7XG4gICAgICAgICdwcmV0dHknOiB0cnVlLFxuICAgICAgICAnaW5kZW50JzogJyAgJyxcbiAgICAgICAgJ25ld2xpbmUnOiAnXFxuJ1xuICAgICAgfSxcbiAgICAgIGhlYWRsZXNzOiBmYWxzZSxcbiAgICAgIGNodW5rU2l6ZTogMTAwMDAsXG4gICAgICBlbXB0eVRhZzogJycsXG4gICAgICBjZGF0YTogZmFsc2VcbiAgICB9XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIGFzc2lnbiwgZ2V0VmFsdWUsIGlzQXJyYXksIGlzRW1wdHksIGlzRnVuY3Rpb24sIGlzT2JqZWN0LCBpc1BsYWluT2JqZWN0LFxuICAgIHNsaWNlID0gW10uc2xpY2UsXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIGFzc2lnbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBrZXksIGxlbiwgc291cmNlLCBzb3VyY2VzLCB0YXJnZXQ7XG4gICAgdGFyZ2V0ID0gYXJndW1lbnRzWzBdLCBzb3VyY2VzID0gMiA8PSBhcmd1bWVudHMubGVuZ3RoID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpIDogW107XG4gICAgaWYgKGlzRnVuY3Rpb24oT2JqZWN0LmFzc2lnbikpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gc291cmNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgICAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmICghaGFzUHJvcC5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWwpIHtcbiAgICByZXR1cm4gISF2YWwgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gIH07XG5cbiAgaXNPYmplY3QgPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIgcmVmO1xuICAgIHJldHVybiAhIXZhbCAmJiAoKHJlZiA9IHR5cGVvZiB2YWwpID09PSAnZnVuY3Rpb24nIHx8IHJlZiA9PT0gJ29iamVjdCcpO1xuICB9O1xuXG4gIGlzQXJyYXkgPSBmdW5jdGlvbih2YWwpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihBcnJheS5pc0FycmF5KSkge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH1cbiAgfTtcblxuICBpc0VtcHR5ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgdmFyIGtleTtcbiAgICBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXR1cm4gIXZhbC5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoa2V5IGluIHZhbCkge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbCh2YWwsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHZhciBjdG9yLCBwcm90bztcbiAgICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiAocHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKSkgJiYgKGN0b3IgPSBwcm90by5jb25zdHJ1Y3RvcikgJiYgKHR5cGVvZiBjdG9yID09PSAnZnVuY3Rpb24nKSAmJiAoY3RvciBpbnN0YW5jZW9mIGN0b3IpICYmIChGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChjdG9yKSA9PT0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoT2JqZWN0KSk7XG4gIH07XG5cbiAgZ2V0VmFsdWUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvYmoudmFsdWVPZikpIHtcbiAgICAgIHJldHVybiBvYmoudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cy5hc3NpZ24gPSBhc3NpZ247XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuICBtb2R1bGUuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuICBtb2R1bGUuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcblxuICBtb2R1bGUuZXhwb3J0cy5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcblxuICBtb2R1bGUuZXhwb3J0cy5nZXRWYWx1ZSA9IGdldFZhbHVlO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxET01JbXBsZW1lbnRhdGlvbjtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERPTUltcGxlbWVudGF0aW9uID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTERPTUltcGxlbWVudGF0aW9uKCkge31cblxuICAgIFhNTERPTUltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5oYXNGZWF0dXJlID0gZnVuY3Rpb24oZmVhdHVyZSwgdmVyc2lvbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIFhNTERPTUltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5jcmVhdGVEb2N1bWVudFR5cGUgPSBmdW5jdGlvbihxdWFsaWZpZWROYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH07XG5cbiAgICBYTUxET01JbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUuY3JlYXRlRG9jdW1lbnQgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkksIHF1YWxpZmllZE5hbWUsIGRvY3R5cGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH07XG5cbiAgICBYTUxET01JbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUuY3JlYXRlSFRNTERvY3VtZW50ID0gZnVuY3Rpb24odGl0bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH07XG5cbiAgICBYTUxET01JbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUuZ2V0RmVhdHVyZSA9IGZ1bmN0aW9uKGZlYXR1cmUsIHZlcnNpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRE9NSW1wbGVtZW50YXRpb247XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MRE9NRXJyb3JIYW5kbGVyO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRE9NRXJyb3JIYW5kbGVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTERPTUVycm9ySGFuZGxlcigpIHt9XG5cbiAgICBYTUxET01FcnJvckhhbmRsZXIucHJvdG90eXBlLmhhbmRsZUVycm9yID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxET01FcnJvckhhbmRsZXI7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MRE9NU3RyaW5nTGlzdDtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERPTVN0cmluZ0xpc3QgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MRE9NU3RyaW5nTGlzdChhcnIpIHtcbiAgICAgIHRoaXMuYXJyID0gYXJyIHx8IFtdO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxET01TdHJpbmdMaXN0LnByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFyci5sZW5ndGg7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxET01TdHJpbmdMaXN0LnByb3RvdHlwZS5pdGVtID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLmFycltpbmRleF0gfHwgbnVsbDtcbiAgICB9O1xuXG4gICAgWE1MRE9NU3RyaW5nTGlzdC5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHJldHVybiB0aGlzLmFyci5pbmRleE9mKHN0cikgIT09IC0xO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRE9NU3RyaW5nTGlzdDtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxET01Db25maWd1cmF0aW9uLCBYTUxET01FcnJvckhhbmRsZXIsIFhNTERPTVN0cmluZ0xpc3Q7XG5cbiAgWE1MRE9NRXJyb3JIYW5kbGVyID0gcmVxdWlyZSgnLi9YTUxET01FcnJvckhhbmRsZXInKTtcblxuICBYTUxET01TdHJpbmdMaXN0ID0gcmVxdWlyZSgnLi9YTUxET01TdHJpbmdMaXN0Jyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxET01Db25maWd1cmF0aW9uID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTERPTUNvbmZpZ3VyYXRpb24oKSB7XG4gICAgICB2YXIgY2xvbmVkU2VsZjtcbiAgICAgIHRoaXMuZGVmYXVsdFBhcmFtcyA9IHtcbiAgICAgICAgXCJjYW5vbmljYWwtZm9ybVwiOiBmYWxzZSxcbiAgICAgICAgXCJjZGF0YS1zZWN0aW9uc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb21tZW50c1wiOiBmYWxzZSxcbiAgICAgICAgXCJkYXRhdHlwZS1ub3JtYWxpemF0aW9uXCI6IGZhbHNlLFxuICAgICAgICBcImVsZW1lbnQtY29udGVudC13aGl0ZXNwYWNlXCI6IHRydWUsXG4gICAgICAgIFwiZW50aXRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJlcnJvci1oYW5kbGVyXCI6IG5ldyBYTUxET01FcnJvckhhbmRsZXIoKSxcbiAgICAgICAgXCJpbmZvc2V0XCI6IHRydWUsXG4gICAgICAgIFwidmFsaWRhdGUtaWYtc2NoZW1hXCI6IGZhbHNlLFxuICAgICAgICBcIm5hbWVzcGFjZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJuYW1lc3BhY2UtZGVjbGFyYXRpb25zXCI6IHRydWUsXG4gICAgICAgIFwibm9ybWFsaXplLWNoYXJhY3RlcnNcIjogZmFsc2UsXG4gICAgICAgIFwic2NoZW1hLWxvY2F0aW9uXCI6ICcnLFxuICAgICAgICBcInNjaGVtYS10eXBlXCI6ICcnLFxuICAgICAgICBcInNwbGl0LWNkYXRhLXNlY3Rpb25zXCI6IHRydWUsXG4gICAgICAgIFwidmFsaWRhdGVcIjogZmFsc2UsXG4gICAgICAgIFwid2VsbC1mb3JtZWRcIjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHRoaXMucGFyYW1zID0gY2xvbmVkU2VsZiA9IE9iamVjdC5jcmVhdGUodGhpcy5kZWZhdWx0UGFyYW1zKTtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRE9NQ29uZmlndXJhdGlvbi5wcm90b3R5cGUsICdwYXJhbWV0ZXJOYW1lcycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgWE1MRE9NU3RyaW5nTGlzdChPYmplY3Qua2V5cyh0aGlzLmRlZmF1bHRQYXJhbXMpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFhNTERPTUNvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmdldFBhcmFtZXRlciA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIGlmICh0aGlzLnBhcmFtcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXNbbmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRE9NQ29uZmlndXJhdGlvbi5wcm90b3R5cGUuY2FuU2V0UGFyYW1ldGVyID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICBYTUxET01Db25maWd1cmF0aW9uLnByb3RvdHlwZS5zZXRQYXJhbWV0ZXIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zW25hbWVdID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVsZXRlIHRoaXMucGFyYW1zW25hbWVdO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRE9NQ29uZmlndXJhdGlvbjtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIEVsZW1lbnQ6IDEsXG4gICAgQXR0cmlidXRlOiAyLFxuICAgIFRleHQ6IDMsXG4gICAgQ0RhdGE6IDQsXG4gICAgRW50aXR5UmVmZXJlbmNlOiA1LFxuICAgIEVudGl0eURlY2xhcmF0aW9uOiA2LFxuICAgIFByb2Nlc3NpbmdJbnN0cnVjdGlvbjogNyxcbiAgICBDb21tZW50OiA4LFxuICAgIERvY3VtZW50OiA5LFxuICAgIERvY1R5cGU6IDEwLFxuICAgIERvY3VtZW50RnJhZ21lbnQ6IDExLFxuICAgIE5vdGF0aW9uRGVjbGFyYXRpb246IDEyLFxuICAgIERlY2xhcmF0aW9uOiAyMDEsXG4gICAgUmF3OiAyMDIsXG4gICAgQXR0cmlidXRlRGVjbGFyYXRpb246IDIwMyxcbiAgICBFbGVtZW50RGVjbGFyYXRpb246IDIwNCxcbiAgICBEdW1teTogMjA1XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxBdHRyaWJ1dGUsIFhNTE5vZGU7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MQXR0cmlidXRlID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTEF0dHJpYnV0ZShwYXJlbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnBhcmVudC5vcHRpb25zO1xuICAgICAgICB0aGlzLnN0cmluZ2lmeSA9IHRoaXMucGFyZW50LnN0cmluZ2lmeTtcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBhdHRyaWJ1dGUgbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKG5hbWUpO1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LmF0dFZhbHVlKHZhbHVlKTtcbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkF0dHJpYnV0ZTtcbiAgICAgIHRoaXMuaXNJZCA9IGZhbHNlO1xuICAgICAgdGhpcy5zY2hlbWFUeXBlSW5mbyA9IG51bGw7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUsICdub2RlVHlwZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQXR0cmlidXRlLnByb3RvdHlwZSwgJ293bmVyRWxlbWVudCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxBdHRyaWJ1dGUucHJvdG90eXBlLCAndGV4dENvbnRlbnQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID0gdmFsdWUgfHwgJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQXR0cmlidXRlLnByb3RvdHlwZSwgJ25hbWVzcGFjZVVSSScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxBdHRyaWJ1dGUucHJvdG90eXBlLCAncHJlZml4Jywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUsICdsb2NhbE5hbWUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUsICdzcGVjaWZpZWQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxBdHRyaWJ1dGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuYXR0cmlidXRlKHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUuZGVidWdJbmZvID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgbmFtZSA9IG5hbWUgfHwgdGhpcy5uYW1lO1xuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gXCJwYXJlbnQ6IDxcIiArIHRoaXMucGFyZW50Lm5hbWUgKyBcIj5cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImF0dHJpYnV0ZToge1wiICsgbmFtZSArIFwifSwgcGFyZW50OiA8XCIgKyB0aGlzLnBhcmVudC5uYW1lICsgXCI+XCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUuaXNFcXVhbE5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAobm9kZS5uYW1lc3BhY2VVUkkgIT09IHRoaXMubmFtZXNwYWNlVVJJKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnByZWZpeCAhPT0gdGhpcy5wcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUubG9jYWxOYW1lICE9PSB0aGlzLmxvY2FsTmFtZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS52YWx1ZSAhPT0gdGhpcy52YWx1ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTEF0dHJpYnV0ZTtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxOYW1lZE5vZGVNYXA7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxOYW1lZE5vZGVNYXAgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MTmFtZWROb2RlTWFwKG5vZGVzKSB7XG4gICAgICB0aGlzLm5vZGVzID0gbm9kZXM7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUsICdsZW5ndGgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5ub2RlcykubGVuZ3RoIHx8IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlcyA9IG51bGw7XG4gICAgfTtcblxuICAgIFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUuZ2V0TmFtZWRJdGVtID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbbmFtZV07XG4gICAgfTtcblxuICAgIFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUuc2V0TmFtZWRJdGVtID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIG9sZE5vZGU7XG4gICAgICBvbGROb2RlID0gdGhpcy5ub2Rlc1tub2RlLm5vZGVOYW1lXTtcbiAgICAgIHRoaXMubm9kZXNbbm9kZS5ub2RlTmFtZV0gPSBub2RlO1xuICAgICAgcmV0dXJuIG9sZE5vZGUgfHwgbnVsbDtcbiAgICB9O1xuXG4gICAgWE1MTmFtZWROb2RlTWFwLnByb3RvdHlwZS5yZW1vdmVOYW1lZEl0ZW0gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgb2xkTm9kZTtcbiAgICAgIG9sZE5vZGUgPSB0aGlzLm5vZGVzW25hbWVdO1xuICAgICAgZGVsZXRlIHRoaXMubm9kZXNbbmFtZV07XG4gICAgICByZXR1cm4gb2xkTm9kZSB8fCBudWxsO1xuICAgIH07XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLml0ZW0gPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbT2JqZWN0LmtleXModGhpcy5ub2RlcylbaW5kZXhdXSB8fCBudWxsO1xuICAgIH07XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLmdldE5hbWVkSXRlbU5TID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH07XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLnNldE5hbWVkSXRlbU5TID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfTtcblxuICAgIFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUucmVtb3ZlTmFtZWRJdGVtTlMgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxOYW1lZE5vZGVNYXA7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTEF0dHJpYnV0ZSwgWE1MRWxlbWVudCwgWE1MTmFtZWROb2RlTWFwLCBYTUxOb2RlLCBnZXRWYWx1ZSwgaXNGdW5jdGlvbiwgaXNPYmplY3QsIHJlZixcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIHJlZiA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLCBpc09iamVjdCA9IHJlZi5pc09iamVjdCwgaXNGdW5jdGlvbiA9IHJlZi5pc0Z1bmN0aW9uLCBnZXRWYWx1ZSA9IHJlZi5nZXRWYWx1ZTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MQXR0cmlidXRlID0gcmVxdWlyZSgnLi9YTUxBdHRyaWJ1dGUnKTtcblxuICBYTUxOYW1lZE5vZGVNYXAgPSByZXF1aXJlKCcuL1hNTE5hbWVkTm9kZU1hcCcpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRWxlbWVudCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTEVsZW1lbnQsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MRWxlbWVudChwYXJlbnQsIG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICAgIHZhciBjaGlsZCwgaiwgbGVuLCByZWYxO1xuICAgICAgWE1MRWxlbWVudC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGVsZW1lbnQgbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubmFtZSA9IHRoaXMuc3RyaW5naWZ5Lm5hbWUobmFtZSk7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5FbGVtZW50O1xuICAgICAgdGhpcy5hdHRyaWJzID0ge307XG4gICAgICB0aGlzLnNjaGVtYVR5cGVJbmZvID0gbnVsbDtcbiAgICAgIGlmIChhdHRyaWJ1dGVzICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGUoYXR0cmlidXRlcyk7XG4gICAgICB9XG4gICAgICBpZiAocGFyZW50LnR5cGUgPT09IE5vZGVUeXBlLkRvY3VtZW50KSB7XG4gICAgICAgIHRoaXMuaXNSb290ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kb2N1bWVudE9iamVjdCA9IHBhcmVudDtcbiAgICAgICAgcGFyZW50LnJvb3RPYmplY3QgPSB0aGlzO1xuICAgICAgICBpZiAocGFyZW50LmNoaWxkcmVuKSB7XG4gICAgICAgICAgcmVmMSA9IHBhcmVudC5jaGlsZHJlbjtcbiAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYxLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBjaGlsZCA9IHJlZjFbal07XG4gICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gTm9kZVR5cGUuRG9jVHlwZSkge1xuICAgICAgICAgICAgICBjaGlsZC5uYW1lID0gdGhpcy5uYW1lO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRWxlbWVudC5wcm90b3R5cGUsICd0YWdOYW1lJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxFbGVtZW50LnByb3RvdHlwZSwgJ25hbWVzcGFjZVVSSScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxFbGVtZW50LnByb3RvdHlwZSwgJ3ByZWZpeCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxFbGVtZW50LnByb3RvdHlwZSwgJ2xvY2FsTmFtZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRWxlbWVudC5wcm90b3R5cGUsICdpZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxFbGVtZW50LnByb3RvdHlwZSwgJ2NsYXNzTmFtZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxFbGVtZW50LnByb3RvdHlwZSwgJ2NsYXNzTGlzdCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxFbGVtZW50LnByb3RvdHlwZSwgJ2F0dHJpYnV0ZXMnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuYXR0cmlidXRlTWFwIHx8ICF0aGlzLmF0dHJpYnV0ZU1hcC5ub2Rlcykge1xuICAgICAgICAgIHRoaXMuYXR0cmlidXRlTWFwID0gbmV3IFhNTE5hbWVkTm9kZU1hcCh0aGlzLmF0dHJpYnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZU1hcDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXR0LCBhdHROYW1lLCBjbG9uZWRTZWxmLCByZWYxO1xuICAgICAgY2xvbmVkU2VsZiA9IE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgICBpZiAoY2xvbmVkU2VsZi5pc1Jvb3QpIHtcbiAgICAgICAgY2xvbmVkU2VsZi5kb2N1bWVudE9iamVjdCA9IG51bGw7XG4gICAgICB9XG4gICAgICBjbG9uZWRTZWxmLmF0dHJpYnMgPSB7fTtcbiAgICAgIHJlZjEgPSB0aGlzLmF0dHJpYnM7XG4gICAgICBmb3IgKGF0dE5hbWUgaW4gcmVmMSkge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYxLCBhdHROYW1lKSkgY29udGludWU7XG4gICAgICAgIGF0dCA9IHJlZjFbYXR0TmFtZV07XG4gICAgICAgIGNsb25lZFNlbGYuYXR0cmlic1thdHROYW1lXSA9IGF0dC5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgY2xvbmVkU2VsZi5jaGlsZHJlbiA9IFtdO1xuICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIHZhciBjbG9uZWRDaGlsZDtcbiAgICAgICAgY2xvbmVkQ2hpbGQgPSBjaGlsZC5jbG9uZSgpO1xuICAgICAgICBjbG9uZWRDaGlsZC5wYXJlbnQgPSBjbG9uZWRTZWxmO1xuICAgICAgICByZXR1cm4gY2xvbmVkU2VsZi5jaGlsZHJlbi5wdXNoKGNsb25lZENoaWxkKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNsb25lZFNlbGY7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmF0dHJpYnV0ZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgYXR0TmFtZSwgYXR0VmFsdWU7XG4gICAgICBpZiAobmFtZSAhPSBudWxsKSB7XG4gICAgICAgIG5hbWUgPSBnZXRWYWx1ZShuYW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChuYW1lKSkge1xuICAgICAgICBmb3IgKGF0dE5hbWUgaW4gbmFtZSkge1xuICAgICAgICAgIGlmICghaGFzUHJvcC5jYWxsKG5hbWUsIGF0dE5hbWUpKSBjb250aW51ZTtcbiAgICAgICAgICBhdHRWYWx1ZSA9IG5hbWVbYXR0TmFtZV07XG4gICAgICAgICAgdGhpcy5hdHRyaWJ1dGUoYXR0TmFtZSwgYXR0VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmFwcGx5KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5rZWVwTnVsbEF0dHJpYnV0ZXMgJiYgKHZhbHVlID09IG51bGwpKSB7XG4gICAgICAgICAgdGhpcy5hdHRyaWJzW25hbWVdID0gbmV3IFhNTEF0dHJpYnV0ZSh0aGlzLCBuYW1lLCBcIlwiKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5hdHRyaWJzW25hbWVdID0gbmV3IFhNTEF0dHJpYnV0ZSh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgYXR0TmFtZSwgaiwgbGVuO1xuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGF0dHJpYnV0ZSBuYW1lLiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgbmFtZSA9IGdldFZhbHVlKG5hbWUpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmFtZSkpIHtcbiAgICAgICAgZm9yIChqID0gMCwgbGVuID0gbmFtZS5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIGF0dE5hbWUgPSBuYW1lW2pdO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLmF0dHJpYnNbYXR0TmFtZV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmF0dHJpYnNbbmFtZV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5lbGVtZW50KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmF0dCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5hID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIGlmICh0aGlzLmF0dHJpYnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cmlic1tuYW1lXS52YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVOb2RlID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgaWYgKHRoaXMuYXR0cmlicy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJzW25hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZU5vZGUgPSBmdW5jdGlvbihuZXdBdHRyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZU5vZGUgPSBmdW5jdGlvbihvbGRBdHRyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVOUyA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZU5TID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBxdWFsaWZpZWROYW1lLCB2YWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGVOUyA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZU5vZGVOUyA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZU5vZGVOUyA9IGZ1bmN0aW9uKG5ld0F0dHIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWVOUyA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmhhc0F0dHJpYnV0ZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJpYnMuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmhhc0F0dHJpYnV0ZU5TID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuc2V0SWRBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lLCBpc0lkKSB7XG4gICAgICBpZiAodGhpcy5hdHRyaWJzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnNbbmFtZV0uaXNJZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpc0lkO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5zZXRJZEF0dHJpYnV0ZU5TID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUsIGlzSWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuc2V0SWRBdHRyaWJ1dGVOb2RlID0gZnVuY3Rpb24oaWRBdHRyLCBpc0lkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lID0gZnVuY3Rpb24odGFnbmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZU5TID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IGZ1bmN0aW9uKGNsYXNzTmFtZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuaXNFcXVhbE5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgaSwgaiwgcmVmMTtcbiAgICAgIGlmICghWE1MRWxlbWVudC5fX3N1cGVyX18uaXNFcXVhbE5vZGUuYXBwbHkodGhpcywgYXJndW1lbnRzKS5pc0VxdWFsTm9kZShub2RlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5uYW1lc3BhY2VVUkkgIT09IHRoaXMubmFtZXNwYWNlVVJJKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnByZWZpeCAhPT0gdGhpcy5wcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUubG9jYWxOYW1lICE9PSB0aGlzLmxvY2FsTmFtZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5hdHRyaWJzLmxlbmd0aCAhPT0gdGhpcy5hdHRyaWJzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSBqID0gMCwgcmVmMSA9IHRoaXMuYXR0cmlicy5sZW5ndGggLSAxOyAwIDw9IHJlZjEgPyBqIDw9IHJlZjEgOiBqID49IHJlZjE7IGkgPSAwIDw9IHJlZjEgPyArK2ogOiAtLWopIHtcbiAgICAgICAgaWYgKCF0aGlzLmF0dHJpYnNbaV0uaXNFcXVhbE5vZGUobm9kZS5hdHRyaWJzW2ldKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxFbGVtZW50O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxDaGFyYWN0ZXJEYXRhLCBYTUxOb2RlLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MQ2hhcmFjdGVyRGF0YSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTENoYXJhY3RlckRhdGEsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MQ2hhcmFjdGVyRGF0YShwYXJlbnQpIHtcbiAgICAgIFhNTENoYXJhY3RlckRhdGEuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUsICdkYXRhJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9IHZhbHVlIHx8ICcnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLCAnbGVuZ3RoJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLCAndGV4dENvbnRlbnQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID0gdmFsdWUgfHwgJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLnN1YnN0cmluZ0RhdGEgPSBmdW5jdGlvbihvZmZzZXQsIGNvdW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLmFwcGVuZERhdGEgPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUuaW5zZXJ0RGF0YSA9IGZ1bmN0aW9uKG9mZnNldCwgYXJnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLmRlbGV0ZURhdGEgPSBmdW5jdGlvbihvZmZzZXQsIGNvdW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLnJlcGxhY2VEYXRhID0gZnVuY3Rpb24ob2Zmc2V0LCBjb3VudCwgYXJnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLmlzRXF1YWxOb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKCFYTUxDaGFyYWN0ZXJEYXRhLl9fc3VwZXJfXy5pc0VxdWFsTm9kZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLmlzRXF1YWxOb2RlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmRhdGEgIT09IHRoaXMuZGF0YSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTENoYXJhY3RlckRhdGE7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxDRGF0YSwgWE1MQ2hhcmFjdGVyRGF0YSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTENoYXJhY3RlckRhdGEgPSByZXF1aXJlKCcuL1hNTENoYXJhY3RlckRhdGEnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTENEYXRhID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MQ0RhdGEsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MQ0RhdGEocGFyZW50LCB0ZXh0KSB7XG4gICAgICBYTUxDRGF0YS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKHRleHQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIENEQVRBIHRleHQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSBcIiNjZGF0YS1zZWN0aW9uXCI7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5DRGF0YTtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5jZGF0YSh0ZXh0KTtcbiAgICB9XG5cbiAgICBYTUxDRGF0YS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxDRGF0YS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5jZGF0YSh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MQ0RhdGE7XG5cbiAgfSkoWE1MQ2hhcmFjdGVyRGF0YSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxDaGFyYWN0ZXJEYXRhLCBYTUxDb21tZW50LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MQ2hhcmFjdGVyRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ2hhcmFjdGVyRGF0YScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MQ29tbWVudCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTENvbW1lbnQsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MQ29tbWVudChwYXJlbnQsIHRleHQpIHtcbiAgICAgIFhNTENvbW1lbnQuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmICh0ZXh0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBjb21tZW50IHRleHQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSBcIiNjb21tZW50XCI7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5Db21tZW50O1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LmNvbW1lbnQodGV4dCk7XG4gICAgfVxuXG4gICAgWE1MQ29tbWVudC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxDb21tZW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLmNvbW1lbnQodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTENvbW1lbnQ7XG5cbiAgfSkoWE1MQ2hhcmFjdGVyRGF0YSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxEZWNsYXJhdGlvbiwgWE1MTm9kZSwgaXNPYmplY3QsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBpc09iamVjdCA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLmlzT2JqZWN0O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERlY2xhcmF0aW9uID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRGVjbGFyYXRpb24sIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MRGVjbGFyYXRpb24ocGFyZW50LCB2ZXJzaW9uLCBlbmNvZGluZywgc3RhbmRhbG9uZSkge1xuICAgICAgdmFyIHJlZjtcbiAgICAgIFhNTERlY2xhcmF0aW9uLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAoaXNPYmplY3QodmVyc2lvbikpIHtcbiAgICAgICAgcmVmID0gdmVyc2lvbiwgdmVyc2lvbiA9IHJlZi52ZXJzaW9uLCBlbmNvZGluZyA9IHJlZi5lbmNvZGluZywgc3RhbmRhbG9uZSA9IHJlZi5zdGFuZGFsb25lO1xuICAgICAgfVxuICAgICAgaWYgKCF2ZXJzaW9uKSB7XG4gICAgICAgIHZlcnNpb24gPSAnMS4wJztcbiAgICAgIH1cbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkRlY2xhcmF0aW9uO1xuICAgICAgdGhpcy52ZXJzaW9uID0gdGhpcy5zdHJpbmdpZnkueG1sVmVyc2lvbih2ZXJzaW9uKTtcbiAgICAgIGlmIChlbmNvZGluZyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuZW5jb2RpbmcgPSB0aGlzLnN0cmluZ2lmeS54bWxFbmNvZGluZyhlbmNvZGluZyk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhbmRhbG9uZSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3RhbmRhbG9uZSA9IHRoaXMuc3RyaW5naWZ5LnhtbFN0YW5kYWxvbmUoc3RhbmRhbG9uZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgWE1MRGVjbGFyYXRpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuZGVjbGFyYXRpb24odGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTERlY2xhcmF0aW9uO1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRFREQXR0TGlzdCwgWE1MTm9kZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERUREF0dExpc3QgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxEVERBdHRMaXN0LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERUREF0dExpc3QocGFyZW50LCBlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBYTUxEVERBdHRMaXN0Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAoZWxlbWVudE5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBlbGVtZW50IG5hbWUuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICBpZiAoYXR0cmlidXRlTmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGF0dHJpYnV0ZSBuYW1lLiBcIiArIHRoaXMuZGVidWdJbmZvKGVsZW1lbnROYW1lKSk7XG4gICAgICB9XG4gICAgICBpZiAoIWF0dHJpYnV0ZVR5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgYXR0cmlidXRlIHR5cGUuIFwiICsgdGhpcy5kZWJ1Z0luZm8oZWxlbWVudE5hbWUpKTtcbiAgICAgIH1cbiAgICAgIGlmICghZGVmYXVsdFZhbHVlVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBhdHRyaWJ1dGUgZGVmYXVsdC4gXCIgKyB0aGlzLmRlYnVnSW5mbyhlbGVtZW50TmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmF1bHRWYWx1ZVR5cGUuaW5kZXhPZignIycpICE9PSAwKSB7XG4gICAgICAgIGRlZmF1bHRWYWx1ZVR5cGUgPSAnIycgKyBkZWZhdWx0VmFsdWVUeXBlO1xuICAgICAgfVxuICAgICAgaWYgKCFkZWZhdWx0VmFsdWVUeXBlLm1hdGNoKC9eKCNSRVFVSVJFRHwjSU1QTElFRHwjRklYRUR8I0RFRkFVTFQpJC8pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZGVmYXVsdCB2YWx1ZSB0eXBlOyBleHBlY3RlZDogI1JFUVVJUkVELCAjSU1QTElFRCwgI0ZJWEVEIG9yICNERUZBVUxULiBcIiArIHRoaXMuZGVidWdJbmZvKGVsZW1lbnROYW1lKSk7XG4gICAgICB9XG4gICAgICBpZiAoZGVmYXVsdFZhbHVlICYmICFkZWZhdWx0VmFsdWVUeXBlLm1hdGNoKC9eKCNGSVhFRHwjREVGQVVMVCkkLykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGVmYXVsdCB2YWx1ZSBvbmx5IGFwcGxpZXMgdG8gI0ZJWEVEIG9yICNERUZBVUxULiBcIiArIHRoaXMuZGVidWdJbmZvKGVsZW1lbnROYW1lKSk7XG4gICAgICB9XG4gICAgICB0aGlzLmVsZW1lbnROYW1lID0gdGhpcy5zdHJpbmdpZnkubmFtZShlbGVtZW50TmFtZSk7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5BdHRyaWJ1dGVEZWNsYXJhdGlvbjtcbiAgICAgIHRoaXMuYXR0cmlidXRlTmFtZSA9IHRoaXMuc3RyaW5naWZ5Lm5hbWUoYXR0cmlidXRlTmFtZSk7XG4gICAgICB0aGlzLmF0dHJpYnV0ZVR5cGUgPSB0aGlzLnN0cmluZ2lmeS5kdGRBdHRUeXBlKGF0dHJpYnV0ZVR5cGUpO1xuICAgICAgaWYgKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IHRoaXMuc3RyaW5naWZ5LmR0ZEF0dERlZmF1bHQoZGVmYXVsdFZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGVmYXVsdFZhbHVlVHlwZSA9IGRlZmF1bHRWYWx1ZVR5cGU7XG4gICAgfVxuXG4gICAgWE1MRFREQXR0TGlzdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kdGRBdHRMaXN0KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEVERBdHRMaXN0O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRFRERW50aXR5LCBYTUxOb2RlLCBpc09iamVjdCxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9VdGlsaXR5JykuaXNPYmplY3Q7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRFRERW50aXR5ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRFRERW50aXR5LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERUREVudGl0eShwYXJlbnQsIHBlLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgWE1MRFRERW50aXR5Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGVudGl0eSBuYW1lLiBcIiArIHRoaXMuZGVidWdJbmZvKG5hbWUpKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGVudGl0eSB2YWx1ZS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICB9XG4gICAgICB0aGlzLnBlID0gISFwZTtcbiAgICAgIHRoaXMubmFtZSA9IHRoaXMuc3RyaW5naWZ5Lm5hbWUobmFtZSk7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5FbnRpdHlEZWNsYXJhdGlvbjtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5kdGRFbnRpdHlWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIHRoaXMuaW50ZXJuYWwgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF2YWx1ZS5wdWJJRCAmJiAhdmFsdWUuc3lzSUQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQdWJsaWMgYW5kL29yIHN5c3RlbSBpZGVudGlmaWVycyBhcmUgcmVxdWlyZWQgZm9yIGFuIGV4dGVybmFsIGVudGl0eS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlLnB1YklEICYmICF2YWx1ZS5zeXNJRCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5c3RlbSBpZGVudGlmaWVyIGlzIHJlcXVpcmVkIGZvciBhIHB1YmxpYyBleHRlcm5hbCBlbnRpdHkuIFwiICsgdGhpcy5kZWJ1Z0luZm8obmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW50ZXJuYWwgPSBmYWxzZTtcbiAgICAgICAgaWYgKHZhbHVlLnB1YklEICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnB1YklEID0gdGhpcy5zdHJpbmdpZnkuZHRkUHViSUQodmFsdWUucHViSUQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZS5zeXNJRCAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5zeXNJRCA9IHRoaXMuc3RyaW5naWZ5LmR0ZFN5c0lEKHZhbHVlLnN5c0lEKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUubkRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMubkRhdGEgPSB0aGlzLnN0cmluZ2lmeS5kdGRORGF0YSh2YWx1ZS5uRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucGUgJiYgdGhpcy5uRGF0YSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdGF0aW9uIGRlY2xhcmF0aW9uIGlzIG5vdCBhbGxvd2VkIGluIGEgcGFyYW1ldGVyIGVudGl0eS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRFRERW50aXR5LnByb3RvdHlwZSwgJ3B1YmxpY0lkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHViSUQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRFRERW50aXR5LnByb3RvdHlwZSwgJ3N5c3RlbUlkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3lzSUQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRFRERW50aXR5LnByb3RvdHlwZSwgJ25vdGF0aW9uTmFtZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5EYXRhIHx8IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRFRERW50aXR5LnByb3RvdHlwZSwgJ2lucHV0RW5jb2RpbmcnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEVERFbnRpdHkucHJvdG90eXBlLCAneG1sRW5jb2RpbmcnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEVERFbnRpdHkucHJvdG90eXBlLCAneG1sVmVyc2lvbicsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MRFRERW50aXR5LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLmR0ZEVudGl0eSh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRFRERW50aXR5O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRFRERWxlbWVudCwgWE1MTm9kZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERUREVsZW1lbnQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxEVERFbGVtZW50LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERUREVsZW1lbnQocGFyZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgICAgWE1MRFRERWxlbWVudC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBlbGVtZW50IG5hbWUuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gJygjUENEQVRBKSc7XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSAnKCcgKyB2YWx1ZS5qb2luKCcsJykgKyAnKSc7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKG5hbWUpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuRWxlbWVudERlY2xhcmF0aW9uO1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LmR0ZEVsZW1lbnRWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgWE1MRFRERWxlbWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kdGRFbGVtZW50KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEVERFbGVtZW50O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRFRETm90YXRpb24sIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEVEROb3RhdGlvbiA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERURE5vdGF0aW9uLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERURE5vdGF0aW9uKHBhcmVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIFhNTERURE5vdGF0aW9uLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIG5vdGF0aW9uIG5hbWUuIFwiICsgdGhpcy5kZWJ1Z0luZm8obmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKCF2YWx1ZS5wdWJJRCAmJiAhdmFsdWUuc3lzSUQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHVibGljIG9yIHN5c3RlbSBpZGVudGlmaWVycyBhcmUgcmVxdWlyZWQgZm9yIGFuIGV4dGVybmFsIGVudGl0eS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKG5hbWUpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuTm90YXRpb25EZWNsYXJhdGlvbjtcbiAgICAgIGlmICh2YWx1ZS5wdWJJRCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMucHViSUQgPSB0aGlzLnN0cmluZ2lmeS5kdGRQdWJJRCh2YWx1ZS5wdWJJRCk7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUuc3lzSUQgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnN5c0lEID0gdGhpcy5zdHJpbmdpZnkuZHRkU3lzSUQodmFsdWUuc3lzSUQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEVEROb3RhdGlvbi5wcm90b3R5cGUsICdwdWJsaWNJZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB1YklEO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERURE5vdGF0aW9uLnByb3RvdHlwZSwgJ3N5c3RlbUlkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3lzSUQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxEVEROb3RhdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kdGROb3RhdGlvbih0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRFRETm90YXRpb247XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxEVERBdHRMaXN0LCBYTUxEVERFbGVtZW50LCBYTUxEVERFbnRpdHksIFhNTERURE5vdGF0aW9uLCBYTUxEb2NUeXBlLCBYTUxOYW1lZE5vZGVNYXAsIFhNTE5vZGUsIGlzT2JqZWN0LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgaXNPYmplY3QgPSByZXF1aXJlKCcuL1V0aWxpdHknKS5pc09iamVjdDtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MRFREQXR0TGlzdCA9IHJlcXVpcmUoJy4vWE1MRFREQXR0TGlzdCcpO1xuXG4gIFhNTERUREVudGl0eSA9IHJlcXVpcmUoJy4vWE1MRFRERW50aXR5Jyk7XG5cbiAgWE1MRFRERWxlbWVudCA9IHJlcXVpcmUoJy4vWE1MRFRERWxlbWVudCcpO1xuXG4gIFhNTERURE5vdGF0aW9uID0gcmVxdWlyZSgnLi9YTUxEVEROb3RhdGlvbicpO1xuXG4gIFhNTE5hbWVkTm9kZU1hcCA9IHJlcXVpcmUoJy4vWE1MTmFtZWROb2RlTWFwJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEb2NUeXBlID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRG9jVHlwZSwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxEb2NUeXBlKHBhcmVudCwgcHViSUQsIHN5c0lEKSB7XG4gICAgICB2YXIgY2hpbGQsIGksIGxlbiwgcmVmLCByZWYxLCByZWYyO1xuICAgICAgWE1MRG9jVHlwZS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuRG9jVHlwZTtcbiAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4pIHtcbiAgICAgICAgcmVmID0gcGFyZW50LmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gTm9kZVR5cGUuRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gY2hpbGQubmFtZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5kb2N1bWVudE9iamVjdCA9IHBhcmVudDtcbiAgICAgIGlmIChpc09iamVjdChwdWJJRCkpIHtcbiAgICAgICAgcmVmMSA9IHB1YklELCBwdWJJRCA9IHJlZjEucHViSUQsIHN5c0lEID0gcmVmMS5zeXNJRDtcbiAgICAgIH1cbiAgICAgIGlmIChzeXNJRCA9PSBudWxsKSB7XG4gICAgICAgIHJlZjIgPSBbcHViSUQsIHN5c0lEXSwgc3lzSUQgPSByZWYyWzBdLCBwdWJJRCA9IHJlZjJbMV07XG4gICAgICB9XG4gICAgICBpZiAocHViSUQgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnB1YklEID0gdGhpcy5zdHJpbmdpZnkuZHRkUHViSUQocHViSUQpO1xuICAgICAgfVxuICAgICAgaWYgKHN5c0lEICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zeXNJRCA9IHRoaXMuc3RyaW5naWZ5LmR0ZFN5c0lEKHN5c0lEKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jVHlwZS5wcm90b3R5cGUsICdlbnRpdGllcycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaGlsZCwgaSwgbGVuLCBub2RlcywgcmVmO1xuICAgICAgICBub2RlcyA9IHt9O1xuICAgICAgICByZWYgPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgICAgICBpZiAoKGNoaWxkLnR5cGUgPT09IE5vZGVUeXBlLkVudGl0eURlY2xhcmF0aW9uKSAmJiAhY2hpbGQucGUpIHtcbiAgICAgICAgICAgIG5vZGVzW2NoaWxkLm5hbWVdID0gY2hpbGQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgWE1MTmFtZWROb2RlTWFwKG5vZGVzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2NUeXBlLnByb3RvdHlwZSwgJ25vdGF0aW9ucycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaGlsZCwgaSwgbGVuLCBub2RlcywgcmVmO1xuICAgICAgICBub2RlcyA9IHt9O1xuICAgICAgICByZWYgPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gTm9kZVR5cGUuTm90YXRpb25EZWNsYXJhdGlvbikge1xuICAgICAgICAgICAgbm9kZXNbY2hpbGQubmFtZV0gPSBjaGlsZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBYTUxOYW1lZE5vZGVNYXAobm9kZXMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY1R5cGUucHJvdG90eXBlLCAncHVibGljSWQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdWJJRDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2NUeXBlLnByb3RvdHlwZSwgJ3N5c3RlbUlkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3lzSUQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jVHlwZS5wcm90b3R5cGUsICdpbnRlcm5hbFN1YnNldCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLmVsZW1lbnQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkO1xuICAgICAgY2hpbGQgPSBuZXcgWE1MRFRERWxlbWVudCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLmF0dExpc3QgPSBmdW5jdGlvbihlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgY2hpbGQ7XG4gICAgICBjaGlsZCA9IG5ldyBYTUxEVERBdHRMaXN0KHRoaXMsIGVsZW1lbnROYW1lLCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVUeXBlLCBkZWZhdWx0VmFsdWVUeXBlLCBkZWZhdWx0VmFsdWUpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2NUeXBlLnByb3RvdHlwZS5lbnRpdHkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkO1xuICAgICAgY2hpbGQgPSBuZXcgWE1MRFRERW50aXR5KHRoaXMsIGZhbHNlLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLnBFbnRpdHkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkO1xuICAgICAgY2hpbGQgPSBuZXcgWE1MRFRERW50aXR5KHRoaXMsIHRydWUsIG5hbWUsIHZhbHVlKTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUubm90YXRpb24gPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkO1xuICAgICAgY2hpbGQgPSBuZXcgWE1MRFRETm90YXRpb24odGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2NUeXBlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLmRvY1R5cGUodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUuZWxlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQobmFtZSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2NUeXBlLnByb3RvdHlwZS5hdHQgPSBmdW5jdGlvbihlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRMaXN0KGVsZW1lbnROYW1lLCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVUeXBlLCBkZWZhdWx0VmFsdWVUeXBlLCBkZWZhdWx0VmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2NUeXBlLnByb3RvdHlwZS5lbnQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZW50aXR5KG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUucGVudCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5wRW50aXR5KG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUubm90ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdGF0aW9uKG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUudXAgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnJvb3QoKSB8fCB0aGlzLmRvY3VtZW50T2JqZWN0O1xuICAgIH07XG5cbiAgICBYTUxEb2NUeXBlLnByb3RvdHlwZS5pc0VxdWFsTm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmICghWE1MRG9jVHlwZS5fX3N1cGVyX18uaXNFcXVhbE5vZGUuYXBwbHkodGhpcywgYXJndW1lbnRzKS5pc0VxdWFsTm9kZShub2RlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5uYW1lICE9PSB0aGlzLm5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUucHVibGljSWQgIT09IHRoaXMucHVibGljSWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuc3lzdGVtSWQgIT09IHRoaXMuc3lzdGVtSWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEb2NUeXBlO1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MTm9kZSwgWE1MUmF3LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MUmF3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MUmF3LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTFJhdyhwYXJlbnQsIHRleHQpIHtcbiAgICAgIFhNTFJhdy5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKHRleHQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHJhdyB0ZXh0LiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuUmF3O1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LnJhdyh0ZXh0KTtcbiAgICB9XG5cbiAgICBYTUxSYXcucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MUmF3LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLnJhdyh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MUmF3O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MQ2hhcmFjdGVyRGF0YSwgWE1MVGV4dCxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTENoYXJhY3RlckRhdGEgPSByZXF1aXJlKCcuL1hNTENoYXJhY3RlckRhdGEnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFRleHQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxUZXh0LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTFRleHQocGFyZW50LCB0ZXh0KSB7XG4gICAgICBYTUxUZXh0Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAodGV4dCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgZWxlbWVudCB0ZXh0LiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy5uYW1lID0gXCIjdGV4dFwiO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuVGV4dDtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS50ZXh0KHRleHQpO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxUZXh0LnByb3RvdHlwZSwgJ2lzRWxlbWVudENvbnRlbnRXaGl0ZXNwYWNlJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTFRleHQucHJvdG90eXBlLCAnd2hvbGVUZXh0Jywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG5leHQsIHByZXYsIHN0cjtcbiAgICAgICAgc3RyID0gJyc7XG4gICAgICAgIHByZXYgPSB0aGlzLnByZXZpb3VzU2libGluZztcbiAgICAgICAgd2hpbGUgKHByZXYpIHtcbiAgICAgICAgICBzdHIgPSBwcmV2LmRhdGEgKyBzdHI7XG4gICAgICAgICAgcHJldiA9IHByZXYucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIHN0ciArPSB0aGlzLmRhdGE7XG4gICAgICAgIG5leHQgPSB0aGlzLm5leHRTaWJsaW5nO1xuICAgICAgICB3aGlsZSAobmV4dCkge1xuICAgICAgICAgIHN0ciA9IHN0ciArIG5leHQuZGF0YTtcbiAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MVGV4dC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxUZXh0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLnRleHQodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgWE1MVGV4dC5wcm90b3R5cGUuc3BsaXRUZXh0ID0gZnVuY3Rpb24ob2Zmc2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTFRleHQucHJvdG90eXBlLnJlcGxhY2VXaG9sZVRleHQgPSBmdW5jdGlvbihjb250ZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxUZXh0O1xuXG4gIH0pKFhNTENoYXJhY3RlckRhdGEpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MQ2hhcmFjdGVyRGF0YSwgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MQ2hhcmFjdGVyRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ2hhcmFjdGVyRGF0YScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbihwYXJlbnQsIHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgaW5zdHJ1Y3Rpb24gdGFyZ2V0LiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9uO1xuICAgICAgdGhpcy50YXJnZXQgPSB0aGlzLnN0cmluZ2lmeS5pbnNUYXJnZXQodGFyZ2V0KTtcbiAgICAgIHRoaXMubmFtZSA9IHRoaXMudGFyZ2V0O1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5pbnNWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24odGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLnByb3RvdHlwZS5pc0VxdWFsTm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmICghWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLl9fc3VwZXJfXy5pc0VxdWFsTm9kZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLmlzRXF1YWxOb2RlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnRhcmdldCAhPT0gdGhpcy50YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb247XG5cbiAgfSkoWE1MQ2hhcmFjdGVyRGF0YSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxEdW1teSwgWE1MTm9kZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTER1bW15ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRHVtbXksIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MRHVtbXkocGFyZW50KSB7XG4gICAgICBYTUxEdW1teS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuRHVtbXk7XG4gICAgfVxuXG4gICAgWE1MRHVtbXkucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MRHVtbXkucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRHVtbXk7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTE5vZGVMaXN0O1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MTm9kZUxpc3QgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MTm9kZUxpc3Qobm9kZXMpIHtcbiAgICAgIHRoaXMubm9kZXMgPSBub2RlcztcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTm9kZUxpc3QucHJvdG90eXBlLCAnbGVuZ3RoJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZXMubGVuZ3RoIHx8IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxOb2RlTGlzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGVzID0gbnVsbDtcbiAgICB9O1xuXG4gICAgWE1MTm9kZUxpc3QucHJvdG90eXBlLml0ZW0gPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbaW5kZXhdIHx8IG51bGw7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxOb2RlTGlzdDtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIERpc2Nvbm5lY3RlZDogMSxcbiAgICBQcmVjZWRpbmc6IDIsXG4gICAgRm9sbG93aW5nOiA0LFxuICAgIENvbnRhaW5zOiA4LFxuICAgIENvbnRhaW5lZEJ5OiAxNixcbiAgICBJbXBsZW1lbnRhdGlvblNwZWNpZmljOiAzMlxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBEb2N1bWVudFBvc2l0aW9uLCBOb2RlVHlwZSwgWE1MQ0RhdGEsIFhNTENvbW1lbnQsIFhNTERlY2xhcmF0aW9uLCBYTUxEb2NUeXBlLCBYTUxEdW1teSwgWE1MRWxlbWVudCwgWE1MTmFtZWROb2RlTWFwLCBYTUxOb2RlLCBYTUxOb2RlTGlzdCwgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLCBYTUxSYXcsIFhNTFRleHQsIGdldFZhbHVlLCBpc0VtcHR5LCBpc0Z1bmN0aW9uLCBpc09iamVjdCwgcmVmMSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgcmVmMSA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLCBpc09iamVjdCA9IHJlZjEuaXNPYmplY3QsIGlzRnVuY3Rpb24gPSByZWYxLmlzRnVuY3Rpb24sIGlzRW1wdHkgPSByZWYxLmlzRW1wdHksIGdldFZhbHVlID0gcmVmMS5nZXRWYWx1ZTtcblxuICBYTUxFbGVtZW50ID0gbnVsbDtcblxuICBYTUxDRGF0YSA9IG51bGw7XG5cbiAgWE1MQ29tbWVudCA9IG51bGw7XG5cbiAgWE1MRGVjbGFyYXRpb24gPSBudWxsO1xuXG4gIFhNTERvY1R5cGUgPSBudWxsO1xuXG4gIFhNTFJhdyA9IG51bGw7XG5cbiAgWE1MVGV4dCA9IG51bGw7XG5cbiAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gbnVsbDtcblxuICBYTUxEdW1teSA9IG51bGw7XG5cbiAgTm9kZVR5cGUgPSBudWxsO1xuXG4gIFhNTE5vZGVMaXN0ID0gbnVsbDtcblxuICBYTUxOYW1lZE5vZGVNYXAgPSBudWxsO1xuXG4gIERvY3VtZW50UG9zaXRpb24gPSBudWxsO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MTm9kZSA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBYTUxOb2RlKHBhcmVudDEpIHtcbiAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50MTtcbiAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnBhcmVudC5vcHRpb25zO1xuICAgICAgICB0aGlzLnN0cmluZ2lmeSA9IHRoaXMucGFyZW50LnN0cmluZ2lmeTtcbiAgICAgIH1cbiAgICAgIHRoaXMudmFsdWUgPSBudWxsO1xuICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgdGhpcy5iYXNlVVJJID0gbnVsbDtcbiAgICAgIGlmICghWE1MRWxlbWVudCkge1xuICAgICAgICBYTUxFbGVtZW50ID0gcmVxdWlyZSgnLi9YTUxFbGVtZW50Jyk7XG4gICAgICAgIFhNTENEYXRhID0gcmVxdWlyZSgnLi9YTUxDRGF0YScpO1xuICAgICAgICBYTUxDb21tZW50ID0gcmVxdWlyZSgnLi9YTUxDb21tZW50Jyk7XG4gICAgICAgIFhNTERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9YTUxEZWNsYXJhdGlvbicpO1xuICAgICAgICBYTUxEb2NUeXBlID0gcmVxdWlyZSgnLi9YTUxEb2NUeXBlJyk7XG4gICAgICAgIFhNTFJhdyA9IHJlcXVpcmUoJy4vWE1MUmF3Jyk7XG4gICAgICAgIFhNTFRleHQgPSByZXF1aXJlKCcuL1hNTFRleHQnKTtcbiAgICAgICAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gcmVxdWlyZSgnLi9YTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24nKTtcbiAgICAgICAgWE1MRHVtbXkgPSByZXF1aXJlKCcuL1hNTER1bW15Jyk7XG4gICAgICAgIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuICAgICAgICBYTUxOb2RlTGlzdCA9IHJlcXVpcmUoJy4vWE1MTm9kZUxpc3QnKTtcbiAgICAgICAgWE1MTmFtZWROb2RlTWFwID0gcmVxdWlyZSgnLi9YTUxOYW1lZE5vZGVNYXAnKTtcbiAgICAgICAgRG9jdW1lbnRQb3NpdGlvbiA9IHJlcXVpcmUoJy4vRG9jdW1lbnRQb3NpdGlvbicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ25vZGVOYW1lJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ25vZGVUeXBlJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ25vZGVWYWx1ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTE5vZGUucHJvdG90eXBlLCAncGFyZW50Tm9kZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ2NoaWxkTm9kZXMnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2hpbGROb2RlTGlzdCB8fCAhdGhpcy5jaGlsZE5vZGVMaXN0Lm5vZGVzKSB7XG4gICAgICAgICAgdGhpcy5jaGlsZE5vZGVMaXN0ID0gbmV3IFhNTE5vZGVMaXN0KHRoaXMuY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkTm9kZUxpc3Q7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTm9kZS5wcm90b3R5cGUsICdmaXJzdENoaWxkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bMF0gfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ2xhc3RDaGlsZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV0gfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ3ByZXZpb3VzU2libGluZycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICBpID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZih0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmNoaWxkcmVuW2kgLSAxXSB8fCBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTE5vZGUucHJvdG90eXBlLCAnbmV4dFNpYmxpbmcnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5jaGlsZHJlbltpICsgMV0gfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ293bmVyRG9jdW1lbnQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudCgpIHx8IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTm9kZS5wcm90b3R5cGUsICd0ZXh0Q29udGVudCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaGlsZCwgaiwgbGVuLCByZWYyLCBzdHI7XG4gICAgICAgIGlmICh0aGlzLm5vZGVUeXBlID09PSBOb2RlVHlwZS5FbGVtZW50IHx8IHRoaXMubm9kZVR5cGUgPT09IE5vZGVUeXBlLkRvY3VtZW50RnJhZ21lbnQpIHtcbiAgICAgICAgICBzdHIgPSAnJztcbiAgICAgICAgICByZWYyID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYyLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBjaGlsZCA9IHJlZjJbal07XG4gICAgICAgICAgICBpZiAoY2hpbGQudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgc3RyICs9IGNoaWxkLnRleHRDb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5zZXRQYXJlbnQgPSBmdW5jdGlvbihwYXJlbnQpIHtcbiAgICAgIHZhciBjaGlsZCwgaiwgbGVuLCByZWYyLCByZXN1bHRzO1xuICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHBhcmVudC5vcHRpb25zO1xuICAgICAgICB0aGlzLnN0cmluZ2lmeSA9IHBhcmVudC5zdHJpbmdpZnk7XG4gICAgICB9XG4gICAgICByZWYyID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZjIubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgY2hpbGQgPSByZWYyW2pdO1xuICAgICAgICByZXN1bHRzLnB1c2goY2hpbGQuc2V0UGFyZW50KHRoaXMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5lbGVtZW50ID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgdmFyIGNoaWxkTm9kZSwgaXRlbSwgaiwgaywga2V5LCBsYXN0Q2hpbGQsIGxlbiwgbGVuMSwgcmVmMiwgcmVmMywgdmFsO1xuICAgICAgbGFzdENoaWxkID0gbnVsbDtcbiAgICAgIGlmIChhdHRyaWJ1dGVzID09PSBudWxsICYmICh0ZXh0ID09IG51bGwpKSB7XG4gICAgICAgIHJlZjIgPSBbe30sIG51bGxdLCBhdHRyaWJ1dGVzID0gcmVmMlswXSwgdGV4dCA9IHJlZjJbMV07XG4gICAgICB9XG4gICAgICBpZiAoYXR0cmlidXRlcyA9PSBudWxsKSB7XG4gICAgICAgIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgIH1cbiAgICAgIGF0dHJpYnV0ZXMgPSBnZXRWYWx1ZShhdHRyaWJ1dGVzKTtcbiAgICAgIGlmICghaXNPYmplY3QoYXR0cmlidXRlcykpIHtcbiAgICAgICAgcmVmMyA9IFthdHRyaWJ1dGVzLCB0ZXh0XSwgdGV4dCA9IHJlZjNbMF0sIGF0dHJpYnV0ZXMgPSByZWYzWzFdO1xuICAgICAgfVxuICAgICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgICBuYW1lID0gZ2V0VmFsdWUobmFtZSk7XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShuYW1lKSkge1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSBuYW1lLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgaXRlbSA9IG5hbWVbal07XG4gICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5lbGVtZW50KGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24obmFtZSkpIHtcbiAgICAgICAgbGFzdENoaWxkID0gdGhpcy5lbGVtZW50KG5hbWUuYXBwbHkoKSk7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG5hbWUpKSB7XG4gICAgICAgIGZvciAoa2V5IGluIG5hbWUpIHtcbiAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChuYW1lLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgICB2YWwgPSBuYW1lW2tleV07XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgICAgICAgdmFsID0gdmFsLmFwcGx5KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZURlY29yYXRvcnMgJiYgdGhpcy5zdHJpbmdpZnkuY29udmVydEF0dEtleSAmJiBrZXkuaW5kZXhPZih0aGlzLnN0cmluZ2lmeS5jb252ZXJ0QXR0S2V5KSA9PT0gMCkge1xuICAgICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5hdHRyaWJ1dGUoa2V5LnN1YnN0cih0aGlzLnN0cmluZ2lmeS5jb252ZXJ0QXR0S2V5Lmxlbmd0aCksIHZhbCk7XG4gICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLnNlcGFyYXRlQXJyYXlJdGVtcyAmJiBBcnJheS5pc0FycmF5KHZhbCkgJiYgaXNFbXB0eSh2YWwpKSB7XG4gICAgICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLmR1bW15KCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpICYmIGlzRW1wdHkodmFsKSkge1xuICAgICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5lbGVtZW50KGtleSk7XG4gICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLmtlZXBOdWxsTm9kZXMgJiYgKHZhbCA9PSBudWxsKSkge1xuICAgICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5kdW1teSgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMub3B0aW9ucy5zZXBhcmF0ZUFycmF5SXRlbXMgJiYgQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgICAgICBmb3IgKGsgPSAwLCBsZW4xID0gdmFsLmxlbmd0aDsgayA8IGxlbjE7IGsrKykge1xuICAgICAgICAgICAgICBpdGVtID0gdmFsW2tdO1xuICAgICAgICAgICAgICBjaGlsZE5vZGUgPSB7fTtcbiAgICAgICAgICAgICAgY2hpbGROb2RlW2tleV0gPSBpdGVtO1xuICAgICAgICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLmVsZW1lbnQoY2hpbGROb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZURlY29yYXRvcnMgJiYgdGhpcy5zdHJpbmdpZnkuY29udmVydFRleHRLZXkgJiYga2V5LmluZGV4T2YodGhpcy5zdHJpbmdpZnkuY29udmVydFRleHRLZXkpID09PSAwKSB7XG4gICAgICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuZWxlbWVudCh2YWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5lbGVtZW50KGtleSk7XG4gICAgICAgICAgICAgIGxhc3RDaGlsZC5lbGVtZW50KHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuZWxlbWVudChrZXksIHZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLm9wdGlvbnMua2VlcE51bGxOb2RlcyAmJiB0ZXh0ID09PSBudWxsKSB7XG4gICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuZHVtbXkoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZURlY29yYXRvcnMgJiYgdGhpcy5zdHJpbmdpZnkuY29udmVydFRleHRLZXkgJiYgbmFtZS5pbmRleE9mKHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRUZXh0S2V5KSA9PT0gMCkge1xuICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMudGV4dCh0ZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZURlY29yYXRvcnMgJiYgdGhpcy5zdHJpbmdpZnkuY29udmVydENEYXRhS2V5ICYmIG5hbWUuaW5kZXhPZih0aGlzLnN0cmluZ2lmeS5jb252ZXJ0Q0RhdGFLZXkpID09PSAwKSB7XG4gICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5jZGF0YSh0ZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZURlY29yYXRvcnMgJiYgdGhpcy5zdHJpbmdpZnkuY29udmVydENvbW1lbnRLZXkgJiYgbmFtZS5pbmRleE9mKHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRDb21tZW50S2V5KSA9PT0gMCkge1xuICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuY29tbWVudCh0ZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZURlY29yYXRvcnMgJiYgdGhpcy5zdHJpbmdpZnkuY29udmVydFJhd0tleSAmJiBuYW1lLmluZGV4T2YodGhpcy5zdHJpbmdpZnkuY29udmVydFJhd0tleSkgPT09IDApIHtcbiAgICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLnJhdyh0ZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZURlY29yYXRvcnMgJiYgdGhpcy5zdHJpbmdpZnkuY29udmVydFBJS2V5ICYmIG5hbWUuaW5kZXhPZih0aGlzLnN0cmluZ2lmeS5jb252ZXJ0UElLZXkpID09PSAwKSB7XG4gICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5pbnN0cnVjdGlvbihuYW1lLnN1YnN0cih0aGlzLnN0cmluZ2lmeS5jb252ZXJ0UElLZXkubGVuZ3RoKSwgdGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5ub2RlKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobGFzdENoaWxkID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGNyZWF0ZSBhbnkgZWxlbWVudHMgd2l0aDogXCIgKyBuYW1lICsgXCIuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGFzdENoaWxkO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pbnNlcnRCZWZvcmUgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICB2YXIgY2hpbGQsIGksIG5ld0NoaWxkLCByZWZDaGlsZCwgcmVtb3ZlZDtcbiAgICAgIGlmIChuYW1lICE9IG51bGwgPyBuYW1lLnR5cGUgOiB2b2lkIDApIHtcbiAgICAgICAgbmV3Q2hpbGQgPSBuYW1lO1xuICAgICAgICByZWZDaGlsZCA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIG5ld0NoaWxkLnNldFBhcmVudCh0aGlzKTtcbiAgICAgICAgaWYgKHJlZkNoaWxkKSB7XG4gICAgICAgICAgaSA9IGNoaWxkcmVuLmluZGV4T2YocmVmQ2hpbGQpO1xuICAgICAgICAgIHJlbW92ZWQgPSBjaGlsZHJlbi5zcGxpY2UoaSk7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChuZXdDaGlsZCk7XG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoY2hpbGRyZW4sIHJlbW92ZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2gobmV3Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdDaGlsZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmlzUm9vdCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBpbnNlcnQgZWxlbWVudHMgYXQgcm9vdCBsZXZlbC4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICAgIH1cbiAgICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICAgIHJlbW92ZWQgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaSk7XG4gICAgICAgIGNoaWxkID0gdGhpcy5wYXJlbnQuZWxlbWVudChuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KTtcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5wYXJlbnQuY2hpbGRyZW4sIHJlbW92ZWQpO1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmluc2VydEFmdGVyID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgdmFyIGNoaWxkLCBpLCByZW1vdmVkO1xuICAgICAgaWYgKHRoaXMuaXNSb290KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBpbnNlcnQgZWxlbWVudHMgYXQgcm9vdCBsZXZlbC4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICB9XG4gICAgICBpID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZih0aGlzKTtcbiAgICAgIHJlbW92ZWQgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaSArIDEpO1xuICAgICAgY2hpbGQgPSB0aGlzLnBhcmVudC5lbGVtZW50KG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5wYXJlbnQuY2hpbGRyZW4sIHJlbW92ZWQpO1xuICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpLCByZWYyO1xuICAgICAgaWYgKHRoaXMuaXNSb290KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZW1vdmUgdGhlIHJvb3QgZWxlbWVudC4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIGkgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuICAgICAgW10uc3BsaWNlLmFwcGx5KHRoaXMucGFyZW50LmNoaWxkcmVuLCBbaSwgaSAtIGkgKyAxXS5jb25jYXQocmVmMiA9IFtdKSksIHJlZjI7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLm5vZGUgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICB2YXIgY2hpbGQsIHJlZjI7XG4gICAgICBpZiAobmFtZSAhPSBudWxsKSB7XG4gICAgICAgIG5hbWUgPSBnZXRWYWx1ZShuYW1lKTtcbiAgICAgIH1cbiAgICAgIGF0dHJpYnV0ZXMgfHwgKGF0dHJpYnV0ZXMgPSB7fSk7XG4gICAgICBhdHRyaWJ1dGVzID0gZ2V0VmFsdWUoYXR0cmlidXRlcyk7XG4gICAgICBpZiAoIWlzT2JqZWN0KGF0dHJpYnV0ZXMpKSB7XG4gICAgICAgIHJlZjIgPSBbYXR0cmlidXRlcywgdGV4dF0sIHRleHQgPSByZWYyWzBdLCBhdHRyaWJ1dGVzID0gcmVmMlsxXTtcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gbmV3IFhNTEVsZW1lbnQodGhpcywgbmFtZSwgYXR0cmlidXRlcyk7XG4gICAgICBpZiAodGV4dCAhPSBudWxsKSB7XG4gICAgICAgIGNoaWxkLnRleHQodGV4dCk7XG4gICAgICB9XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZDtcbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gbmV3IFhNTFRleHQodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5jZGF0YSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgY2hpbGQ7XG4gICAgICBjaGlsZCA9IG5ldyBYTUxDRGF0YSh0aGlzLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmNvbW1lbnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkO1xuICAgICAgY2hpbGQgPSBuZXcgWE1MQ29tbWVudCh0aGlzLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmNvbW1lbnRCZWZvcmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkLCBpLCByZW1vdmVkO1xuICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICByZW1vdmVkID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGkpO1xuICAgICAgY2hpbGQgPSB0aGlzLnBhcmVudC5jb21tZW50KHZhbHVlKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMucGFyZW50LmNoaWxkcmVuLCByZW1vdmVkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5jb21tZW50QWZ0ZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkLCBpLCByZW1vdmVkO1xuICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICByZW1vdmVkID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGkgKyAxKTtcbiAgICAgIGNoaWxkID0gdGhpcy5wYXJlbnQuY29tbWVudCh2YWx1ZSk7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLnBhcmVudC5jaGlsZHJlbiwgcmVtb3ZlZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZDtcbiAgICAgIGNoaWxkID0gbmV3IFhNTFJhdyh0aGlzLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmR1bW15ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY2hpbGQ7XG4gICAgICBjaGlsZCA9IG5ldyBYTUxEdW1teSh0aGlzKTtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbih0YXJnZXQsIHZhbHVlKSB7XG4gICAgICB2YXIgaW5zVGFyZ2V0LCBpbnNWYWx1ZSwgaW5zdHJ1Y3Rpb24sIGosIGxlbjtcbiAgICAgIGlmICh0YXJnZXQgIT0gbnVsbCkge1xuICAgICAgICB0YXJnZXQgPSBnZXRWYWx1ZSh0YXJnZXQpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgdmFsdWUgPSBnZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHRhcmdldC5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIGluc1RhcmdldCA9IHRhcmdldFtqXTtcbiAgICAgICAgICB0aGlzLmluc3RydWN0aW9uKGluc1RhcmdldCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodGFyZ2V0KSkge1xuICAgICAgICBmb3IgKGluc1RhcmdldCBpbiB0YXJnZXQpIHtcbiAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbCh0YXJnZXQsIGluc1RhcmdldCkpIGNvbnRpbnVlO1xuICAgICAgICAgIGluc1ZhbHVlID0gdGFyZ2V0W2luc1RhcmdldF07XG4gICAgICAgICAgdGhpcy5pbnN0cnVjdGlvbihpbnNUYXJnZXQsIGluc1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5hcHBseSgpO1xuICAgICAgICB9XG4gICAgICAgIGluc3RydWN0aW9uID0gbmV3IFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbih0aGlzLCB0YXJnZXQsIHZhbHVlKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGluc3RydWN0aW9uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pbnN0cnVjdGlvbkJlZm9yZSA9IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgcmVtb3ZlZDtcbiAgICAgIGkgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuICAgICAgcmVtb3ZlZCA9IHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpKTtcbiAgICAgIGNoaWxkID0gdGhpcy5wYXJlbnQuaW5zdHJ1Y3Rpb24odGFyZ2V0LCB2YWx1ZSk7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLnBhcmVudC5jaGlsZHJlbiwgcmVtb3ZlZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaW5zdHJ1Y3Rpb25BZnRlciA9IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgcmVtb3ZlZDtcbiAgICAgIGkgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuICAgICAgcmVtb3ZlZCA9IHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpICsgMSk7XG4gICAgICBjaGlsZCA9IHRoaXMucGFyZW50Lmluc3RydWN0aW9uKHRhcmdldCwgdmFsdWUpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5wYXJlbnQuY2hpbGRyZW4sIHJlbW92ZWQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmRlY2xhcmF0aW9uID0gZnVuY3Rpb24odmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpIHtcbiAgICAgIHZhciBkb2MsIHhtbGRlYztcbiAgICAgIGRvYyA9IHRoaXMuZG9jdW1lbnQoKTtcbiAgICAgIHhtbGRlYyA9IG5ldyBYTUxEZWNsYXJhdGlvbihkb2MsIHZlcnNpb24sIGVuY29kaW5nLCBzdGFuZGFsb25lKTtcbiAgICAgIGlmIChkb2MuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRvYy5jaGlsZHJlbi51bnNoaWZ0KHhtbGRlYyk7XG4gICAgICB9IGVsc2UgaWYgKGRvYy5jaGlsZHJlblswXS50eXBlID09PSBOb2RlVHlwZS5EZWNsYXJhdGlvbikge1xuICAgICAgICBkb2MuY2hpbGRyZW5bMF0gPSB4bWxkZWM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2MuY2hpbGRyZW4udW5zaGlmdCh4bWxkZWMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRvYy5yb290KCkgfHwgZG9jO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5kdGQgPSBmdW5jdGlvbihwdWJJRCwgc3lzSUQpIHtcbiAgICAgIHZhciBjaGlsZCwgZG9jLCBkb2N0eXBlLCBpLCBqLCBrLCBsZW4sIGxlbjEsIHJlZjIsIHJlZjM7XG4gICAgICBkb2MgPSB0aGlzLmRvY3VtZW50KCk7XG4gICAgICBkb2N0eXBlID0gbmV3IFhNTERvY1R5cGUoZG9jLCBwdWJJRCwgc3lzSUQpO1xuICAgICAgcmVmMiA9IGRvYy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSByZWYyLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgICBjaGlsZCA9IHJlZjJbaV07XG4gICAgICAgIGlmIChjaGlsZC50eXBlID09PSBOb2RlVHlwZS5Eb2NUeXBlKSB7XG4gICAgICAgICAgZG9jLmNoaWxkcmVuW2ldID0gZG9jdHlwZTtcbiAgICAgICAgICByZXR1cm4gZG9jdHlwZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVmMyA9IGRvYy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IGsgPSAwLCBsZW4xID0gcmVmMy5sZW5ndGg7IGsgPCBsZW4xOyBpID0gKytrKSB7XG4gICAgICAgIGNoaWxkID0gcmVmM1tpXTtcbiAgICAgICAgaWYgKGNoaWxkLmlzUm9vdCkge1xuICAgICAgICAgIGRvYy5jaGlsZHJlbi5zcGxpY2UoaSwgMCwgZG9jdHlwZSk7XG4gICAgICAgICAgcmV0dXJuIGRvY3R5cGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRvYy5jaGlsZHJlbi5wdXNoKGRvY3R5cGUpO1xuICAgICAgcmV0dXJuIGRvY3R5cGU7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnVwID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5pc1Jvb3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJvb3Qgbm9kZSBoYXMgbm8gcGFyZW50LiBVc2UgZG9jKCkgaWYgeW91IG5lZWQgdG8gZ2V0IHRoZSBkb2N1bWVudCBvYmplY3QuXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5yb290ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIG5vZGUgPSB0aGlzO1xuICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gTm9kZVR5cGUuRG9jdW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZS5yb290T2JqZWN0O1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGUuaXNSb290KSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmRvY3VtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIG5vZGUgPSB0aGlzO1xuICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gTm9kZVR5cGUuRG9jdW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQoKS5lbmQob3B0aW9ucyk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpO1xuICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICBpZiAoaSA8IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWxyZWFkeSBhdCB0aGUgZmlyc3Qgbm9kZS4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnBhcmVudC5jaGlsZHJlbltpIC0gMV07XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpO1xuICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICBpZiAoaSA9PT0gLTEgfHwgaSA9PT0gdGhpcy5wYXJlbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbHJlYWR5IGF0IHRoZSBsYXN0IG5vZGUuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQuY2hpbGRyZW5baSArIDFdO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pbXBvcnREb2N1bWVudCA9IGZ1bmN0aW9uKGRvYykge1xuICAgICAgdmFyIGNsb25lZFJvb3Q7XG4gICAgICBjbG9uZWRSb290ID0gZG9jLnJvb3QoKS5jbG9uZSgpO1xuICAgICAgY2xvbmVkUm9vdC5wYXJlbnQgPSB0aGlzO1xuICAgICAgY2xvbmVkUm9vdC5pc1Jvb3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjbG9uZWRSb290KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5kZWJ1Z0luZm8gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgcmVmMiwgcmVmMztcbiAgICAgIG5hbWUgPSBuYW1lIHx8IHRoaXMubmFtZTtcbiAgICAgIGlmICgobmFtZSA9PSBudWxsKSAmJiAhKChyZWYyID0gdGhpcy5wYXJlbnQpICE9IG51bGwgPyByZWYyLm5hbWUgOiB2b2lkIDApKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfSBlbHNlIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFwicGFyZW50OiA8XCIgKyB0aGlzLnBhcmVudC5uYW1lICsgXCI+XCI7XG4gICAgICB9IGVsc2UgaWYgKCEoKHJlZjMgPSB0aGlzLnBhcmVudCkgIT0gbnVsbCA/IHJlZjMubmFtZSA6IHZvaWQgMCkpIHtcbiAgICAgICAgcmV0dXJuIFwibm9kZTogPFwiICsgbmFtZSArIFwiPlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibm9kZTogPFwiICsgbmFtZSArIFwiPiwgcGFyZW50OiA8XCIgKyB0aGlzLnBhcmVudC5uYW1lICsgXCI+XCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmVsZSA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQobmFtZSwgYXR0cmlidXRlcywgdGV4dCk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLm5vZCA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGUobmFtZSwgYXR0cmlidXRlcywgdGV4dCk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnR4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZGF0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNkYXRhKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuY29tID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbW1lbnQodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pbnMgPSBmdW5jdGlvbih0YXJnZXQsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnN0cnVjdGlvbih0YXJnZXQsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZG9jID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb2N1bWVudCgpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5kZWMgPSBmdW5jdGlvbih2ZXJzaW9uLCBlbmNvZGluZywgc3RhbmRhbG9uZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVjbGFyYXRpb24odmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5lID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudChuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUubiA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGUobmFtZSwgYXR0cmlidXRlcywgdGV4dCk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2RhdGEodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5jID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbW1lbnQodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJhdyh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmkgPSBmdW5jdGlvbih0YXJnZXQsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnN0cnVjdGlvbih0YXJnZXQsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUudSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudXAoKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaW1wb3J0WE1MQnVpbGRlciA9IGZ1bmN0aW9uKGRvYykge1xuICAgICAgcmV0dXJuIHRoaXMuaW1wb3J0RG9jdW1lbnQoZG9jKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUucmVwbGFjZUNoaWxkID0gZnVuY3Rpb24obmV3Q2hpbGQsIG9sZENoaWxkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24ob2xkQ2hpbGQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQgPSBmdW5jdGlvbihuZXdDaGlsZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5oYXNDaGlsZE5vZGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5sZW5ndGggIT09IDA7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmNsb25lTm9kZSA9IGZ1bmN0aW9uKGRlZXApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmlzU3VwcG9ydGVkID0gZnVuY3Rpb24oZmVhdHVyZSwgdmVyc2lvbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmhhc0F0dHJpYnV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJpYnMubGVuZ3RoICE9PSAwO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICB2YXIgcmVmLCByZXM7XG4gICAgICByZWYgPSB0aGlzO1xuICAgICAgaWYgKHJlZiA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZG9jdW1lbnQoKSAhPT0gb3RoZXIuZG9jdW1lbnQoKSkge1xuICAgICAgICByZXMgPSBEb2N1bWVudFBvc2l0aW9uLkRpc2Nvbm5lY3RlZCB8IERvY3VtZW50UG9zaXRpb24uSW1wbGVtZW50YXRpb25TcGVjaWZpYztcbiAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPCAwLjUpIHtcbiAgICAgICAgICByZXMgfD0gRG9jdW1lbnRQb3NpdGlvbi5QcmVjZWRpbmc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzIHw9IERvY3VtZW50UG9zaXRpb24uRm9sbG93aW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9IGVsc2UgaWYgKHJlZi5pc0FuY2VzdG9yKG90aGVyKSkge1xuICAgICAgICByZXR1cm4gRG9jdW1lbnRQb3NpdGlvbi5Db250YWlucyB8IERvY3VtZW50UG9zaXRpb24uUHJlY2VkaW5nO1xuICAgICAgfSBlbHNlIGlmIChyZWYuaXNEZXNjZW5kYW50KG90aGVyKSkge1xuICAgICAgICByZXR1cm4gRG9jdW1lbnRQb3NpdGlvbi5Db250YWlucyB8IERvY3VtZW50UG9zaXRpb24uRm9sbG93aW5nO1xuICAgICAgfSBlbHNlIGlmIChyZWYuaXNQcmVjZWRpbmcob3RoZXIpKSB7XG4gICAgICAgIHJldHVybiBEb2N1bWVudFBvc2l0aW9uLlByZWNlZGluZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBEb2N1bWVudFBvc2l0aW9uLkZvbGxvd2luZztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaXNTYW1lTm9kZSA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmxvb2t1cFByZWZpeCA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pc0RlZmF1bHROYW1lc3BhY2UgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUubG9va3VwTmFtZXNwYWNlVVJJID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmlzRXF1YWxOb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIGksIGosIHJlZjI7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gdGhpcy5ub2RlVHlwZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggIT09IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IGogPSAwLCByZWYyID0gdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxOyAwIDw9IHJlZjIgPyBqIDw9IHJlZjIgOiBqID49IHJlZjI7IGkgPSAwIDw9IHJlZjIgPyArK2ogOiAtLWopIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoaWxkcmVuW2ldLmlzRXF1YWxOb2RlKG5vZGUuY2hpbGRyZW5baV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZ2V0RmVhdHVyZSA9IGZ1bmN0aW9uKGZlYXR1cmUsIHZlcnNpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuc2V0VXNlckRhdGEgPSBmdW5jdGlvbihrZXksIGRhdGEsIGhhbmRsZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZ2V0VXNlckRhdGEgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbihvdGhlcikge1xuICAgICAgaWYgKCFvdGhlcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3RoZXIgPT09IHRoaXMgfHwgdGhpcy5pc0Rlc2NlbmRhbnQob3RoZXIpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pc0Rlc2NlbmRhbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgY2hpbGQsIGlzRGVzY2VuZGFudENoaWxkLCBqLCBsZW4sIHJlZjI7XG4gICAgICByZWYyID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZjIubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgY2hpbGQgPSByZWYyW2pdO1xuICAgICAgICBpZiAobm9kZSA9PT0gY2hpbGQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpc0Rlc2NlbmRhbnRDaGlsZCA9IGNoaWxkLmlzRGVzY2VuZGFudChub2RlKTtcbiAgICAgICAgaWYgKGlzRGVzY2VuZGFudENoaWxkKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaXNBbmNlc3RvciA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLmlzRGVzY2VuZGFudCh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaXNQcmVjZWRpbmcgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgbm9kZVBvcywgdGhpc1BvcztcbiAgICAgIG5vZGVQb3MgPSB0aGlzLnRyZWVQb3NpdGlvbihub2RlKTtcbiAgICAgIHRoaXNQb3MgPSB0aGlzLnRyZWVQb3NpdGlvbih0aGlzKTtcbiAgICAgIGlmIChub2RlUG9zID09PSAtMSB8fCB0aGlzUG9zID09PSAtMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbm9kZVBvcyA8IHRoaXNQb3M7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmlzRm9sbG93aW5nID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIG5vZGVQb3MsIHRoaXNQb3M7XG4gICAgICBub2RlUG9zID0gdGhpcy50cmVlUG9zaXRpb24obm9kZSk7XG4gICAgICB0aGlzUG9zID0gdGhpcy50cmVlUG9zaXRpb24odGhpcyk7XG4gICAgICBpZiAobm9kZVBvcyA9PT0gLTEgfHwgdGhpc1BvcyA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5vZGVQb3MgPiB0aGlzUG9zO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS50cmVlUG9zaXRpb24gPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgZm91bmQsIHBvcztcbiAgICAgIHBvcyA9IDA7XG4gICAgICBmb3VuZCA9IGZhbHNlO1xuICAgICAgdGhpcy5mb3JlYWNoVHJlZU5vZGUodGhpcy5kb2N1bWVudCgpLCBmdW5jdGlvbihjaGlsZE5vZGUpIHtcbiAgICAgICAgcG9zKys7XG4gICAgICAgIGlmICghZm91bmQgJiYgY2hpbGROb2RlID09PSBub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZm9yZWFjaFRyZWVOb2RlID0gZnVuY3Rpb24obm9kZSwgZnVuYykge1xuICAgICAgdmFyIGNoaWxkLCBqLCBsZW4sIHJlZjIsIHJlcztcbiAgICAgIG5vZGUgfHwgKG5vZGUgPSB0aGlzLmRvY3VtZW50KCkpO1xuICAgICAgcmVmMiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYyLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIGNoaWxkID0gcmVmMltqXTtcbiAgICAgICAgaWYgKHJlcyA9IGZ1bmMoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMgPSB0aGlzLmZvcmVhY2hUcmVlTm9kZShjaGlsZCwgZnVuYyk7XG4gICAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTE5vZGU7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MU3RyaW5naWZpZXIsXG4gICAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MU3RyaW5naWZpZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MU3RyaW5naWZpZXIob3B0aW9ucykge1xuICAgICAgdGhpcy5hc3NlcnRMZWdhbE5hbWUgPSBiaW5kKHRoaXMuYXNzZXJ0TGVnYWxOYW1lLCB0aGlzKTtcbiAgICAgIHRoaXMuYXNzZXJ0TGVnYWxDaGFyID0gYmluZCh0aGlzLmFzc2VydExlZ2FsQ2hhciwgdGhpcyk7XG4gICAgICB2YXIga2V5LCByZWYsIHZhbHVlO1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy52ZXJzaW9uKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy52ZXJzaW9uID0gJzEuMCc7XG4gICAgICB9XG4gICAgICByZWYgPSBvcHRpb25zLnN0cmluZ2lmeSB8fCB7fTtcbiAgICAgIGZvciAoa2V5IGluIHJlZikge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICB2YWx1ZSA9IHJlZltrZXldO1xuICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUubmFtZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmFzc2VydExlZ2FsTmFtZSgnJyArIHZhbCB8fCAnJyk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKHRoaXMudGV4dEVzY2FwZSgnJyArIHZhbCB8fCAnJykpO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuY2RhdGEgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICB2YWwgPSAnJyArIHZhbCB8fCAnJztcbiAgICAgIHZhbCA9IHZhbC5yZXBsYWNlKCddXT4nLCAnXV1dXT48IVtDREFUQVs+Jyk7XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbENoYXIodmFsKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmNvbW1lbnQgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICB2YWwgPSAnJyArIHZhbCB8fCAnJztcbiAgICAgIGlmICh2YWwubWF0Y2goLy0tLykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29tbWVudCB0ZXh0IGNhbm5vdCBjb250YWluIGRvdWJsZS1oeXBlbjogXCIgKyB2YWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKHZhbCk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5yYXcgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gJycgKyB2YWwgfHwgJyc7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5hdHRWYWx1ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmFzc2VydExlZ2FsQ2hhcih0aGlzLmF0dEVzY2FwZSh2YWwgPSAnJyArIHZhbCB8fCAnJykpO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuaW5zVGFyZ2V0ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKCcnICsgdmFsIHx8ICcnKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmluc1ZhbHVlID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgdmFsID0gJycgKyB2YWwgfHwgJyc7XG4gICAgICBpZiAodmFsLm1hdGNoKC9cXD8+LykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwcm9jZXNzaW5nIGluc3RydWN0aW9uIHZhbHVlOiBcIiArIHZhbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbENoYXIodmFsKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLnhtbFZlcnNpb24gPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICB2YWwgPSAnJyArIHZhbCB8fCAnJztcbiAgICAgIGlmICghdmFsLm1hdGNoKC8xXFwuWzAtOV0rLykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2ZXJzaW9uIG51bWJlcjogXCIgKyB2YWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLnhtbEVuY29kaW5nID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgdmFsID0gJycgKyB2YWwgfHwgJyc7XG4gICAgICBpZiAoIXZhbC5tYXRjaCgvXltBLVphLXpdKD86W0EtWmEtejAtOS5fLV0pKiQvKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGVuY29kaW5nOiBcIiArIHZhbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbENoYXIodmFsKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLnhtbFN0YW5kYWxvbmUgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICBpZiAodmFsKSB7XG4gICAgICAgIHJldHVybiBcInllc1wiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibm9cIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmR0ZFB1YklEID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKCcnICsgdmFsIHx8ICcnKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmR0ZFN5c0lEID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKCcnICsgdmFsIHx8ICcnKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmR0ZEVsZW1lbnRWYWx1ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmFzc2VydExlZ2FsQ2hhcignJyArIHZhbCB8fCAnJyk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5kdGRBdHRUeXBlID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKCcnICsgdmFsIHx8ICcnKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmR0ZEF0dERlZmF1bHQgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbENoYXIoJycgKyB2YWwgfHwgJycpO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuZHRkRW50aXR5VmFsdWUgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbENoYXIoJycgKyB2YWwgfHwgJycpO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuZHRkTkRhdGEgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbENoYXIoJycgKyB2YWwgfHwgJycpO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuY29udmVydEF0dEtleSA9ICdAJztcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5jb252ZXJ0UElLZXkgPSAnPyc7XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuY29udmVydFRleHRLZXkgPSAnI3RleHQnO1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmNvbnZlcnRDRGF0YUtleSA9ICcjY2RhdGEnO1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmNvbnZlcnRDb21tZW50S2V5ID0gJyNjb21tZW50JztcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5jb252ZXJ0UmF3S2V5ID0gJyNyYXcnO1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmFzc2VydExlZ2FsQ2hhciA9IGZ1bmN0aW9uKHN0cikge1xuICAgICAgdmFyIHJlZ2V4LCByZXM7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuICAgICAgcmVnZXggPSAnJztcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudmVyc2lvbiA9PT0gJzEuMCcpIHtcbiAgICAgICAgcmVnZXggPSAvW1xcMC1cXHgwOFxceDBCXFxmXFx4MEUtXFx4MUZcXHVGRkZFXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0vO1xuICAgICAgICBpZiAocmVzID0gc3RyLm1hdGNoKHJlZ2V4KSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2hhcmFjdGVyIGluIHN0cmluZzogXCIgKyBzdHIgKyBcIiBhdCBpbmRleCBcIiArIHJlcy5pbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnZlcnNpb24gPT09ICcxLjEnKSB7XG4gICAgICAgIHJlZ2V4ID0gL1tcXDBcXHVGRkZFXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0vO1xuICAgICAgICBpZiAocmVzID0gc3RyLm1hdGNoKHJlZ2V4KSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2hhcmFjdGVyIGluIHN0cmluZzogXCIgKyBzdHIgKyBcIiBhdCBpbmRleCBcIiArIHJlcy5pbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5hc3NlcnRMZWdhbE5hbWUgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHZhciByZWdleDtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgICB9XG4gICAgICB0aGlzLmFzc2VydExlZ2FsQ2hhcihzdHIpO1xuICAgICAgcmVnZXggPSAvXihbOkEtWl9hLXpcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMENcXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXXxbXFx1RDgwMC1cXHVEQjdGXVtcXHVEQzAwLVxcdURGRkZdKShbXFx4MkRcXC4wLTpBLVpfYS16XFx4QjdcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMENcXHUyMDBEXFx1MjAzRlxcdTIwNDBcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdfFtcXHVEODAwLVxcdURCN0ZdW1xcdURDMDAtXFx1REZGRl0pKiQvO1xuICAgICAgaWYgKCFzdHIubWF0Y2gocmVnZXgpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2hhcmFjdGVyIGluIG5hbWVcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUudGV4dEVzY2FwZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgICAgdmFyIGFtcHJlZ2V4O1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH1cbiAgICAgIGFtcHJlZ2V4ID0gdGhpcy5vcHRpb25zLm5vRG91YmxlRW5jb2RpbmcgPyAvKD8hJlxcUys7KSYvZyA6IC8mL2c7XG4gICAgICByZXR1cm4gc3RyLnJlcGxhY2UoYW1wcmVnZXgsICcmYW1wOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7JykucmVwbGFjZSgvXFxyL2csICcmI3hEOycpO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuYXR0RXNjYXBlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgICB2YXIgYW1wcmVnZXg7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuICAgICAgYW1wcmVnZXggPSB0aGlzLm9wdGlvbnMubm9Eb3VibGVFbmNvZGluZyA/IC8oPyEmXFxTKzspJi9nIDogLyYvZztcbiAgICAgIHJldHVybiBzdHIucmVwbGFjZShhbXByZWdleCwgJyZhbXA7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKS5yZXBsYWNlKC9cXHQvZywgJyYjeDk7JykucmVwbGFjZSgvXFxuL2csICcmI3hBOycpLnJlcGxhY2UoL1xcci9nLCAnJiN4RDsnKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTFN0cmluZ2lmaWVyO1xuXG4gIH0pKCk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgTm9uZTogMCxcbiAgICBPcGVuVGFnOiAxLFxuICAgIEluc2lkZVRhZzogMixcbiAgICBDbG9zZVRhZzogM1xuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgV3JpdGVyU3RhdGUsIFhNTENEYXRhLCBYTUxDb21tZW50LCBYTUxEVERBdHRMaXN0LCBYTUxEVERFbGVtZW50LCBYTUxEVERFbnRpdHksIFhNTERURE5vdGF0aW9uLCBYTUxEZWNsYXJhdGlvbiwgWE1MRG9jVHlwZSwgWE1MRHVtbXksIFhNTEVsZW1lbnQsIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiwgWE1MUmF3LCBYTUxUZXh0LCBYTUxXcml0ZXJCYXNlLCBhc3NpZ24sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIGFzc2lnbiA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLmFzc2lnbjtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBYTUxEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vWE1MRGVjbGFyYXRpb24nKTtcblxuICBYTUxEb2NUeXBlID0gcmVxdWlyZSgnLi9YTUxEb2NUeXBlJyk7XG5cbiAgWE1MQ0RhdGEgPSByZXF1aXJlKCcuL1hNTENEYXRhJyk7XG5cbiAgWE1MQ29tbWVudCA9IHJlcXVpcmUoJy4vWE1MQ29tbWVudCcpO1xuXG4gIFhNTEVsZW1lbnQgPSByZXF1aXJlKCcuL1hNTEVsZW1lbnQnKTtcblxuICBYTUxSYXcgPSByZXF1aXJlKCcuL1hNTFJhdycpO1xuXG4gIFhNTFRleHQgPSByZXF1aXJlKCcuL1hNTFRleHQnKTtcblxuICBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSByZXF1aXJlKCcuL1hNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbicpO1xuXG4gIFhNTER1bW15ID0gcmVxdWlyZSgnLi9YTUxEdW1teScpO1xuXG4gIFhNTERUREF0dExpc3QgPSByZXF1aXJlKCcuL1hNTERUREF0dExpc3QnKTtcblxuICBYTUxEVERFbGVtZW50ID0gcmVxdWlyZSgnLi9YTUxEVERFbGVtZW50Jyk7XG5cbiAgWE1MRFRERW50aXR5ID0gcmVxdWlyZSgnLi9YTUxEVERFbnRpdHknKTtcblxuICBYTUxEVEROb3RhdGlvbiA9IHJlcXVpcmUoJy4vWE1MRFRETm90YXRpb24nKTtcblxuICBXcml0ZXJTdGF0ZSA9IHJlcXVpcmUoJy4vV3JpdGVyU3RhdGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFdyaXRlckJhc2UgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MV3JpdGVyQmFzZShvcHRpb25zKSB7XG4gICAgICB2YXIga2V5LCByZWYsIHZhbHVlO1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICByZWYgPSBvcHRpb25zLndyaXRlciB8fCB7fTtcbiAgICAgIGZvciAoa2V5IGluIHJlZikge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICB2YWx1ZSA9IHJlZltrZXldO1xuICAgICAgICB0aGlzW1wiX1wiICsga2V5XSA9IHRoaXNba2V5XTtcbiAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUuZmlsdGVyT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBmaWx0ZXJlZE9wdGlvbnMsIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgcmVmNCwgcmVmNSwgcmVmNjtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgICBvcHRpb25zID0gYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgZmlsdGVyZWRPcHRpb25zID0ge1xuICAgICAgICB3cml0ZXI6IHRoaXNcbiAgICAgIH07XG4gICAgICBmaWx0ZXJlZE9wdGlvbnMucHJldHR5ID0gb3B0aW9ucy5wcmV0dHkgfHwgZmFsc2U7XG4gICAgICBmaWx0ZXJlZE9wdGlvbnMuYWxsb3dFbXB0eSA9IG9wdGlvbnMuYWxsb3dFbXB0eSB8fCBmYWxzZTtcbiAgICAgIGZpbHRlcmVkT3B0aW9ucy5pbmRlbnQgPSAocmVmID0gb3B0aW9ucy5pbmRlbnQpICE9IG51bGwgPyByZWYgOiAnICAnO1xuICAgICAgZmlsdGVyZWRPcHRpb25zLm5ld2xpbmUgPSAocmVmMSA9IG9wdGlvbnMubmV3bGluZSkgIT0gbnVsbCA/IHJlZjEgOiAnXFxuJztcbiAgICAgIGZpbHRlcmVkT3B0aW9ucy5vZmZzZXQgPSAocmVmMiA9IG9wdGlvbnMub2Zmc2V0KSAhPSBudWxsID8gcmVmMiA6IDA7XG4gICAgICBmaWx0ZXJlZE9wdGlvbnMuZG9udFByZXR0eVRleHROb2RlcyA9IChyZWYzID0gKHJlZjQgPSBvcHRpb25zLmRvbnRQcmV0dHlUZXh0Tm9kZXMpICE9IG51bGwgPyByZWY0IDogb3B0aW9ucy5kb250cHJldHR5dGV4dG5vZGVzKSAhPSBudWxsID8gcmVmMyA6IDA7XG4gICAgICBmaWx0ZXJlZE9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCA9IChyZWY1ID0gKHJlZjYgPSBvcHRpb25zLnNwYWNlQmVmb3JlU2xhc2gpICE9IG51bGwgPyByZWY2IDogb3B0aW9ucy5zcGFjZWJlZm9yZXNsYXNoKSAhPSBudWxsID8gcmVmNSA6ICcnO1xuICAgICAgaWYgKGZpbHRlcmVkT3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoID09PSB0cnVlKSB7XG4gICAgICAgIGZpbHRlcmVkT3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoID0gJyAnO1xuICAgICAgfVxuICAgICAgZmlsdGVyZWRPcHRpb25zLnN1cHByZXNzUHJldHR5Q291bnQgPSAwO1xuICAgICAgZmlsdGVyZWRPcHRpb25zLnVzZXIgPSB7fTtcbiAgICAgIGZpbHRlcmVkT3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk5vbmU7XG4gICAgICByZXR1cm4gZmlsdGVyZWRPcHRpb25zO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5pbmRlbnQgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIGluZGVudExldmVsO1xuICAgICAgaWYgKCFvcHRpb25zLnByZXR0eSB8fCBvcHRpb25zLnN1cHByZXNzUHJldHR5Q291bnQpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnByZXR0eSkge1xuICAgICAgICBpbmRlbnRMZXZlbCA9IChsZXZlbCB8fCAwKSArIG9wdGlvbnMub2Zmc2V0ICsgMTtcbiAgICAgICAgaWYgKGluZGVudExldmVsID4gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgQXJyYXkoaW5kZW50TGV2ZWwpLmpvaW4ob3B0aW9ucy5pbmRlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmVuZGxpbmUgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgaWYgKCFvcHRpb25zLnByZXR0eSB8fCBvcHRpb25zLnN1cHByZXNzUHJldHR5Q291bnQpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMubmV3bGluZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUuYXR0cmlidXRlID0gZnVuY3Rpb24oYXR0LCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICB0aGlzLm9wZW5BdHRyaWJ1dGUoYXR0LCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICByID0gJyAnICsgYXR0Lm5hbWUgKyAnPVwiJyArIGF0dC52YWx1ZSArICdcIic7XG4gICAgICB0aGlzLmNsb3NlQXR0cmlidXRlKGF0dCwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmNkYXRhID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciByO1xuICAgICAgdGhpcy5vcGVuTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuT3BlblRhZztcbiAgICAgIHIgPSB0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCkgKyAnPCFbQ0RBVEFbJztcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICByICs9IG5vZGUudmFsdWU7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICByICs9ICddXT4nICsgdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgdGhpcy5jbG9zZU5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmNvbW1lbnQgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgciA9IHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSArICc8IS0tICc7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgciArPSBub2RlLnZhbHVlO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgciArPSAnIC0tPicgKyB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk5vbmU7XG4gICAgICB0aGlzLmNsb3NlTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUuZGVjbGFyYXRpb24gPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgciA9IHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSArICc8P3htbCc7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgciArPSAnIHZlcnNpb249XCInICsgbm9kZS52ZXJzaW9uICsgJ1wiJztcbiAgICAgIGlmIChub2RlLmVuY29kaW5nICE9IG51bGwpIHtcbiAgICAgICAgciArPSAnIGVuY29kaW5nPVwiJyArIG5vZGUuZW5jb2RpbmcgKyAnXCInO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuc3RhbmRhbG9uZSAhPSBudWxsKSB7XG4gICAgICAgIHIgKz0gJyBzdGFuZGFsb25lPVwiJyArIG5vZGUuc3RhbmRhbG9uZSArICdcIic7XG4gICAgICB9XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICByICs9IG9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCArICc/Pic7XG4gICAgICByICs9IHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5kb2NUeXBlID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgbGVuLCByLCByZWY7XG4gICAgICBsZXZlbCB8fCAobGV2ZWwgPSAwKTtcbiAgICAgIHRoaXMub3Blbk5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk9wZW5UYWc7XG4gICAgICByID0gdGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgciArPSAnPCFET0NUWVBFICcgKyBub2RlLnJvb3QoKS5uYW1lO1xuICAgICAgaWYgKG5vZGUucHViSUQgJiYgbm9kZS5zeXNJRCkge1xuICAgICAgICByICs9ICcgUFVCTElDIFwiJyArIG5vZGUucHViSUQgKyAnXCIgXCInICsgbm9kZS5zeXNJRCArICdcIic7XG4gICAgICB9IGVsc2UgaWYgKG5vZGUuc3lzSUQpIHtcbiAgICAgICAgciArPSAnIFNZU1RFTSBcIicgKyBub2RlLnN5c0lEICsgJ1wiJztcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgciArPSAnIFsnO1xuICAgICAgICByICs9IHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICAgIHJlZiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGNoaWxkID0gcmVmW2ldO1xuICAgICAgICAgIHIgKz0gdGhpcy53cml0ZUNoaWxkTm9kZShjaGlsZCwgb3B0aW9ucywgbGV2ZWwgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICAgIHIgKz0gJ10nO1xuICAgICAgfVxuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgciArPSBvcHRpb25zLnNwYWNlQmVmb3JlU2xhc2ggKyAnPic7XG4gICAgICByICs9IHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5lbGVtZW50ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciBhdHQsIGNoaWxkLCBjaGlsZE5vZGVDb3VudCwgZmlyc3RDaGlsZE5vZGUsIGksIGosIGxlbiwgbGVuMSwgbmFtZSwgcHJldHR5U3VwcHJlc3NlZCwgciwgcmVmLCByZWYxLCByZWYyO1xuICAgICAgbGV2ZWwgfHwgKGxldmVsID0gMCk7XG4gICAgICBwcmV0dHlTdXBwcmVzc2VkID0gZmFsc2U7XG4gICAgICByID0gJyc7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgciArPSB0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCkgKyAnPCcgKyBub2RlLm5hbWU7XG4gICAgICByZWYgPSBub2RlLmF0dHJpYnM7XG4gICAgICBmb3IgKG5hbWUgaW4gcmVmKSB7XG4gICAgICAgIGlmICghaGFzUHJvcC5jYWxsKHJlZiwgbmFtZSkpIGNvbnRpbnVlO1xuICAgICAgICBhdHQgPSByZWZbbmFtZV07XG4gICAgICAgIHIgKz0gdGhpcy5hdHRyaWJ1dGUoYXR0LCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICB9XG4gICAgICBjaGlsZE5vZGVDb3VudCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgZmlyc3RDaGlsZE5vZGUgPSBjaGlsZE5vZGVDb3VudCA9PT0gMCA/IG51bGwgOiBub2RlLmNoaWxkcmVuWzBdO1xuICAgICAgaWYgKGNoaWxkTm9kZUNvdW50ID09PSAwIHx8IG5vZGUuY2hpbGRyZW4uZXZlcnkoZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gKGUudHlwZSA9PT0gTm9kZVR5cGUuVGV4dCB8fCBlLnR5cGUgPT09IE5vZGVUeXBlLlJhdykgJiYgZS52YWx1ZSA9PT0gJyc7XG4gICAgICB9KSkge1xuICAgICAgICBpZiAob3B0aW9ucy5hbGxvd0VtcHR5KSB7XG4gICAgICAgICAgciArPSAnPic7XG4gICAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICAgIHIgKz0gJzwvJyArIG5vZGUubmFtZSArICc+JyArIHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICAgIHIgKz0gb3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoICsgJy8+JyArIHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5wcmV0dHkgJiYgY2hpbGROb2RlQ291bnQgPT09IDEgJiYgKGZpcnN0Q2hpbGROb2RlLnR5cGUgPT09IE5vZGVUeXBlLlRleHQgfHwgZmlyc3RDaGlsZE5vZGUudHlwZSA9PT0gTm9kZVR5cGUuUmF3KSAmJiAoZmlyc3RDaGlsZE5vZGUudmFsdWUgIT0gbnVsbCkpIHtcbiAgICAgICAgciArPSAnPic7XG4gICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICAgIG9wdGlvbnMuc3VwcHJlc3NQcmV0dHlDb3VudCsrO1xuICAgICAgICBwcmV0dHlTdXBwcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgciArPSB0aGlzLndyaXRlQ2hpbGROb2RlKGZpcnN0Q2hpbGROb2RlLCBvcHRpb25zLCBsZXZlbCArIDEpO1xuICAgICAgICBvcHRpb25zLnN1cHByZXNzUHJldHR5Q291bnQtLTtcbiAgICAgICAgcHJldHR5U3VwcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICAgIHIgKz0gJzwvJyArIG5vZGUubmFtZSArICc+JyArIHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAob3B0aW9ucy5kb250UHJldHR5VGV4dE5vZGVzKSB7XG4gICAgICAgICAgcmVmMSA9IG5vZGUuY2hpbGRyZW47XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmMS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY2hpbGQgPSByZWYxW2ldO1xuICAgICAgICAgICAgaWYgKChjaGlsZC50eXBlID09PSBOb2RlVHlwZS5UZXh0IHx8IGNoaWxkLnR5cGUgPT09IE5vZGVUeXBlLlJhdykgJiYgKGNoaWxkLnZhbHVlICE9IG51bGwpKSB7XG4gICAgICAgICAgICAgIG9wdGlvbnMuc3VwcHJlc3NQcmV0dHlDb3VudCsrO1xuICAgICAgICAgICAgICBwcmV0dHlTdXBwcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHIgKz0gJz4nICsgdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgICAgcmVmMiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSByZWYyLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgIGNoaWxkID0gcmVmMltqXTtcbiAgICAgICAgICByICs9IHRoaXMud3JpdGVDaGlsZE5vZGUoY2hpbGQsIG9wdGlvbnMsIGxldmVsICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICByICs9IHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSArICc8LycgKyBub2RlLm5hbWUgKyAnPic7XG4gICAgICAgIGlmIChwcmV0dHlTdXBwcmVzc2VkKSB7XG4gICAgICAgICAgb3B0aW9ucy5zdXBwcmVzc1ByZXR0eUNvdW50LS07XG4gICAgICAgIH1cbiAgICAgICAgciArPSB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS53cml0ZUNoaWxkTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkNEYXRhOlxuICAgICAgICAgIHJldHVybiB0aGlzLmNkYXRhKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5Db21tZW50OlxuICAgICAgICAgIHJldHVybiB0aGlzLmNvbW1lbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkVsZW1lbnQ6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudChub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuUmF3OlxuICAgICAgICAgIHJldHVybiB0aGlzLnJhdyhub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuVGV4dDpcbiAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0KG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb246XG4gICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc2luZ0luc3RydWN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5EdW1teTpcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuRGVjbGFyYXRpb246XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZGVjbGFyYXRpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkRvY1R5cGU6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZG9jVHlwZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuQXR0cmlidXRlRGVjbGFyYXRpb246XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZHRkQXR0TGlzdChub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuRWxlbWVudERlY2xhcmF0aW9uOlxuICAgICAgICAgIHJldHVybiB0aGlzLmR0ZEVsZW1lbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkVudGl0eURlY2xhcmF0aW9uOlxuICAgICAgICAgIHJldHVybiB0aGlzLmR0ZEVudGl0eShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuTm90YXRpb25EZWNsYXJhdGlvbjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5kdGROb3RhdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBYTUwgbm9kZSB0eXBlOiBcIiArIG5vZGUuY29uc3RydWN0b3IubmFtZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLnByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICB2YXIgcjtcbiAgICAgIHRoaXMub3Blbk5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk9wZW5UYWc7XG4gICAgICByID0gdGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpICsgJzw/JztcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICByICs9IG5vZGUudGFyZ2V0O1xuICAgICAgaWYgKG5vZGUudmFsdWUpIHtcbiAgICAgICAgciArPSAnICcgKyBub2RlLnZhbHVlO1xuICAgICAgfVxuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgciArPSBvcHRpb25zLnNwYWNlQmVmb3JlU2xhc2ggKyAnPz4nO1xuICAgICAgciArPSB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk5vbmU7XG4gICAgICB0aGlzLmNsb3NlTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciByO1xuICAgICAgdGhpcy5vcGVuTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuT3BlblRhZztcbiAgICAgIHIgPSB0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgciArPSBub2RlLnZhbHVlO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgciArPSB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk5vbmU7XG4gICAgICB0aGlzLmNsb3NlTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICB2YXIgcjtcbiAgICAgIHRoaXMub3Blbk5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk9wZW5UYWc7XG4gICAgICByID0gdGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgIHIgKz0gbm9kZS52YWx1ZTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgIHIgKz0gdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgdGhpcy5jbG9zZU5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmR0ZEF0dExpc3QgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgciA9IHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSArICc8IUFUVExJU1QnO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgIHIgKz0gJyAnICsgbm9kZS5lbGVtZW50TmFtZSArICcgJyArIG5vZGUuYXR0cmlidXRlTmFtZSArICcgJyArIG5vZGUuYXR0cmlidXRlVHlwZTtcbiAgICAgIGlmIChub2RlLmRlZmF1bHRWYWx1ZVR5cGUgIT09ICcjREVGQVVMVCcpIHtcbiAgICAgICAgciArPSAnICcgKyBub2RlLmRlZmF1bHRWYWx1ZVR5cGU7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5kZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgciArPSAnIFwiJyArIG5vZGUuZGVmYXVsdFZhbHVlICsgJ1wiJztcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgIHIgKz0gb3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoICsgJz4nICsgdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgdGhpcy5jbG9zZU5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmR0ZEVsZW1lbnQgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgciA9IHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSArICc8IUVMRU1FTlQnO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgIHIgKz0gJyAnICsgbm9kZS5uYW1lICsgJyAnICsgbm9kZS52YWx1ZTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgIHIgKz0gb3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoICsgJz4nICsgdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgdGhpcy5jbG9zZU5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmR0ZEVudGl0eSA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICB2YXIgcjtcbiAgICAgIHRoaXMub3Blbk5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk9wZW5UYWc7XG4gICAgICByID0gdGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpICsgJzwhRU5USVRZJztcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICBpZiAobm9kZS5wZSkge1xuICAgICAgICByICs9ICcgJSc7XG4gICAgICB9XG4gICAgICByICs9ICcgJyArIG5vZGUubmFtZTtcbiAgICAgIGlmIChub2RlLnZhbHVlKSB7XG4gICAgICAgIHIgKz0gJyBcIicgKyBub2RlLnZhbHVlICsgJ1wiJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChub2RlLnB1YklEICYmIG5vZGUuc3lzSUQpIHtcbiAgICAgICAgICByICs9ICcgUFVCTElDIFwiJyArIG5vZGUucHViSUQgKyAnXCIgXCInICsgbm9kZS5zeXNJRCArICdcIic7XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5zeXNJRCkge1xuICAgICAgICAgIHIgKz0gJyBTWVNURU0gXCInICsgbm9kZS5zeXNJRCArICdcIic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUubkRhdGEpIHtcbiAgICAgICAgICByICs9ICcgTkRBVEEgJyArIG5vZGUubkRhdGE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgIHIgKz0gb3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoICsgJz4nICsgdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgdGhpcy5jbG9zZU5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmR0ZE5vdGF0aW9uID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciByO1xuICAgICAgdGhpcy5vcGVuTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuT3BlblRhZztcbiAgICAgIHIgPSB0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCkgKyAnPCFOT1RBVElPTic7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgciArPSAnICcgKyBub2RlLm5hbWU7XG4gICAgICBpZiAobm9kZS5wdWJJRCAmJiBub2RlLnN5c0lEKSB7XG4gICAgICAgIHIgKz0gJyBQVUJMSUMgXCInICsgbm9kZS5wdWJJRCArICdcIiBcIicgKyBub2RlLnN5c0lEICsgJ1wiJztcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5wdWJJRCkge1xuICAgICAgICByICs9ICcgUFVCTElDIFwiJyArIG5vZGUucHViSUQgKyAnXCInO1xuICAgICAgfSBlbHNlIGlmIChub2RlLnN5c0lEKSB7XG4gICAgICAgIHIgKz0gJyBTWVNURU0gXCInICsgbm9kZS5zeXNJRCArICdcIic7XG4gICAgICB9XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICByICs9IG9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCArICc+JyArIHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5vcGVuTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7fTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmNsb3NlTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7fTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLm9wZW5BdHRyaWJ1dGUgPSBmdW5jdGlvbihhdHQsIG9wdGlvbnMsIGxldmVsKSB7fTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmNsb3NlQXR0cmlidXRlID0gZnVuY3Rpb24oYXR0LCBvcHRpb25zLCBsZXZlbCkge307XG5cbiAgICByZXR1cm4gWE1MV3JpdGVyQmFzZTtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxTdHJpbmdXcml0ZXIsIFhNTFdyaXRlckJhc2UsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxXcml0ZXJCYXNlID0gcmVxdWlyZSgnLi9YTUxXcml0ZXJCYXNlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxTdHJpbmdXcml0ZXIgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxTdHJpbmdXcml0ZXIsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MU3RyaW5nV3JpdGVyKG9wdGlvbnMpIHtcbiAgICAgIFhNTFN0cmluZ1dyaXRlci5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBYTUxTdHJpbmdXcml0ZXIucHJvdG90eXBlLmRvY3VtZW50ID0gZnVuY3Rpb24oZG9jLCBvcHRpb25zKSB7XG4gICAgICB2YXIgY2hpbGQsIGksIGxlbiwgciwgcmVmO1xuICAgICAgb3B0aW9ucyA9IHRoaXMuZmlsdGVyT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIHIgPSAnJztcbiAgICAgIHJlZiA9IGRvYy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgICAgciArPSB0aGlzLndyaXRlQ2hpbGROb2RlKGNoaWxkLCBvcHRpb25zLCAwKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLnByZXR0eSAmJiByLnNsaWNlKC1vcHRpb25zLm5ld2xpbmUubGVuZ3RoKSA9PT0gb3B0aW9ucy5uZXdsaW5lKSB7XG4gICAgICAgIHIgPSByLnNsaWNlKDAsIC1vcHRpb25zLm5ld2xpbmUubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MU3RyaW5nV3JpdGVyO1xuXG4gIH0pKFhNTFdyaXRlckJhc2UpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRE9NQ29uZmlndXJhdGlvbiwgWE1MRE9NSW1wbGVtZW50YXRpb24sIFhNTERvY3VtZW50LCBYTUxOb2RlLCBYTUxTdHJpbmdXcml0ZXIsIFhNTFN0cmluZ2lmaWVyLCBpc1BsYWluT2JqZWN0LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLmlzUGxhaW5PYmplY3Q7XG5cbiAgWE1MRE9NSW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL1hNTERPTUltcGxlbWVudGF0aW9uJyk7XG5cbiAgWE1MRE9NQ29uZmlndXJhdGlvbiA9IHJlcXVpcmUoJy4vWE1MRE9NQ29uZmlndXJhdGlvbicpO1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBYTUxTdHJpbmdpZmllciA9IHJlcXVpcmUoJy4vWE1MU3RyaW5naWZpZXInKTtcblxuICBYTUxTdHJpbmdXcml0ZXIgPSByZXF1aXJlKCcuL1hNTFN0cmluZ1dyaXRlcicpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRG9jdW1lbnQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxEb2N1bWVudCwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxEb2N1bWVudChvcHRpb25zKSB7XG4gICAgICBYTUxEb2N1bWVudC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBudWxsKTtcbiAgICAgIHRoaXMubmFtZSA9IFwiI2RvY3VtZW50XCI7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5Eb2N1bWVudDtcbiAgICAgIHRoaXMuZG9jdW1lbnRVUkkgPSBudWxsO1xuICAgICAgdGhpcy5kb21Db25maWcgPSBuZXcgWE1MRE9NQ29uZmlndXJhdGlvbigpO1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICAgIGlmICghb3B0aW9ucy53cml0ZXIpIHtcbiAgICAgICAgb3B0aW9ucy53cml0ZXIgPSBuZXcgWE1MU3RyaW5nV3JpdGVyKCk7XG4gICAgICB9XG4gICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgdGhpcy5zdHJpbmdpZnkgPSBuZXcgWE1MU3RyaW5naWZpZXIob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY3VtZW50LnByb3RvdHlwZSwgJ2ltcGxlbWVudGF0aW9uJywge1xuICAgICAgdmFsdWU6IG5ldyBYTUxET01JbXBsZW1lbnRhdGlvbigpXG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jdW1lbnQucHJvdG90eXBlLCAnZG9jdHlwZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaGlsZCwgaSwgbGVuLCByZWY7XG4gICAgICAgIHJlZiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGNoaWxkID0gcmVmW2ldO1xuICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBOb2RlVHlwZS5Eb2NUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY3VtZW50LnByb3RvdHlwZSwgJ2RvY3VtZW50RWxlbWVudCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3RPYmplY3QgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2N1bWVudC5wcm90b3R5cGUsICdpbnB1dEVuY29kaW5nJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jdW1lbnQucHJvdG90eXBlLCAnc3RyaWN0RXJyb3JDaGVja2luZycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2N1bWVudC5wcm90b3R5cGUsICd4bWxFbmNvZGluZycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCAhPT0gMCAmJiB0aGlzLmNoaWxkcmVuWzBdLnR5cGUgPT09IE5vZGVUeXBlLkRlY2xhcmF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bMF0uZW5jb2Rpbmc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2N1bWVudC5wcm90b3R5cGUsICd4bWxTdGFuZGFsb25lJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoICE9PSAwICYmIHRoaXMuY2hpbGRyZW5bMF0udHlwZSA9PT0gTm9kZVR5cGUuRGVjbGFyYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlblswXS5zdGFuZGFsb25lID09PSAneWVzJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2N1bWVudC5wcm90b3R5cGUsICd4bWxWZXJzaW9uJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoICE9PSAwICYmIHRoaXMuY2hpbGRyZW5bMF0udHlwZSA9PT0gTm9kZVR5cGUuRGVjbGFyYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlblswXS52ZXJzaW9uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcIjEuMFwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jdW1lbnQucHJvdG90eXBlLCAnVVJMJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRVUkk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jdW1lbnQucHJvdG90eXBlLCAnb3JpZ2luJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jdW1lbnQucHJvdG90eXBlLCAnY29tcGF0TW9kZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY3VtZW50LnByb3RvdHlwZSwgJ2NoYXJhY3RlclNldCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY3VtZW50LnByb3RvdHlwZSwgJ2NvbnRlbnRUeXBlJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24od3JpdGVyKSB7XG4gICAgICB2YXIgd3JpdGVyT3B0aW9ucztcbiAgICAgIHdyaXRlck9wdGlvbnMgPSB7fTtcbiAgICAgIGlmICghd3JpdGVyKSB7XG4gICAgICAgIHdyaXRlciA9IHRoaXMub3B0aW9ucy53cml0ZXI7XG4gICAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qod3JpdGVyKSkge1xuICAgICAgICB3cml0ZXJPcHRpb25zID0gd3JpdGVyO1xuICAgICAgICB3cml0ZXIgPSB0aGlzLm9wdGlvbnMud3JpdGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyaXRlci5kb2N1bWVudCh0aGlzLCB3cml0ZXIuZmlsdGVyT3B0aW9ucyh3cml0ZXJPcHRpb25zKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLmRvY3VtZW50KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24odGFnTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlVGV4dE5vZGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVDb21tZW50ID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlQ0RBVEFTZWN0aW9uID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gZnVuY3Rpb24odGFyZ2V0LCBkYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFbnRpdHlSZWZlcmVuY2UgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGZ1bmN0aW9uKHRhZ25hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmltcG9ydE5vZGUgPSBmdW5jdGlvbihpbXBvcnRlZE5vZGUsIGRlZXApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnROUyA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgcXVhbGlmaWVkTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlQXR0cmlidXRlTlMgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkksIHF1YWxpZmllZE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lTlMgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudEJ5SWQgPSBmdW5jdGlvbihlbGVtZW50SWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmFkb3B0Tm9kZSA9IGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUubm9ybWFsaXplRG9jdW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLnJlbmFtZU5vZGUgPSBmdW5jdGlvbihub2RlLCBuYW1lc3BhY2VVUkksIHF1YWxpZmllZE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBmdW5jdGlvbihjbGFzc05hbWVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFdmVudCA9IGZ1bmN0aW9uKGV2ZW50SW50ZXJmYWNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVSYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlTm9kZUl0ZXJhdG9yID0gZnVuY3Rpb24ocm9vdCwgd2hhdFRvU2hvdywgZmlsdGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVUcmVlV2Fsa2VyID0gZnVuY3Rpb24ocm9vdCwgd2hhdFRvU2hvdywgZmlsdGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEb2N1bWVudDtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFdyaXRlclN0YXRlLCBYTUxBdHRyaWJ1dGUsIFhNTENEYXRhLCBYTUxDb21tZW50LCBYTUxEVERBdHRMaXN0LCBYTUxEVERFbGVtZW50LCBYTUxEVERFbnRpdHksIFhNTERURE5vdGF0aW9uLCBYTUxEZWNsYXJhdGlvbiwgWE1MRG9jVHlwZSwgWE1MRG9jdW1lbnQsIFhNTERvY3VtZW50Q0IsIFhNTEVsZW1lbnQsIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiwgWE1MUmF3LCBYTUxTdHJpbmdXcml0ZXIsIFhNTFN0cmluZ2lmaWVyLCBYTUxUZXh0LCBnZXRWYWx1ZSwgaXNGdW5jdGlvbiwgaXNPYmplY3QsIGlzUGxhaW5PYmplY3QsIHJlZixcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgcmVmID0gcmVxdWlyZSgnLi9VdGlsaXR5JyksIGlzT2JqZWN0ID0gcmVmLmlzT2JqZWN0LCBpc0Z1bmN0aW9uID0gcmVmLmlzRnVuY3Rpb24sIGlzUGxhaW5PYmplY3QgPSByZWYuaXNQbGFpbk9iamVjdCwgZ2V0VmFsdWUgPSByZWYuZ2V0VmFsdWU7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MRG9jdW1lbnQgPSByZXF1aXJlKCcuL1hNTERvY3VtZW50Jyk7XG5cbiAgWE1MRWxlbWVudCA9IHJlcXVpcmUoJy4vWE1MRWxlbWVudCcpO1xuXG4gIFhNTENEYXRhID0gcmVxdWlyZSgnLi9YTUxDRGF0YScpO1xuXG4gIFhNTENvbW1lbnQgPSByZXF1aXJlKCcuL1hNTENvbW1lbnQnKTtcblxuICBYTUxSYXcgPSByZXF1aXJlKCcuL1hNTFJhdycpO1xuXG4gIFhNTFRleHQgPSByZXF1aXJlKCcuL1hNTFRleHQnKTtcblxuICBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSByZXF1aXJlKCcuL1hNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbicpO1xuXG4gIFhNTERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9YTUxEZWNsYXJhdGlvbicpO1xuXG4gIFhNTERvY1R5cGUgPSByZXF1aXJlKCcuL1hNTERvY1R5cGUnKTtcblxuICBYTUxEVERBdHRMaXN0ID0gcmVxdWlyZSgnLi9YTUxEVERBdHRMaXN0Jyk7XG5cbiAgWE1MRFRERW50aXR5ID0gcmVxdWlyZSgnLi9YTUxEVERFbnRpdHknKTtcblxuICBYTUxEVERFbGVtZW50ID0gcmVxdWlyZSgnLi9YTUxEVERFbGVtZW50Jyk7XG5cbiAgWE1MRFRETm90YXRpb24gPSByZXF1aXJlKCcuL1hNTERURE5vdGF0aW9uJyk7XG5cbiAgWE1MQXR0cmlidXRlID0gcmVxdWlyZSgnLi9YTUxBdHRyaWJ1dGUnKTtcblxuICBYTUxTdHJpbmdpZmllciA9IHJlcXVpcmUoJy4vWE1MU3RyaW5naWZpZXInKTtcblxuICBYTUxTdHJpbmdXcml0ZXIgPSByZXF1aXJlKCcuL1hNTFN0cmluZ1dyaXRlcicpO1xuXG4gIFdyaXRlclN0YXRlID0gcmVxdWlyZSgnLi9Xcml0ZXJTdGF0ZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRG9jdW1lbnRDQiA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBYTUxEb2N1bWVudENCKG9wdGlvbnMsIG9uRGF0YSwgb25FbmQpIHtcbiAgICAgIHZhciB3cml0ZXJPcHRpb25zO1xuICAgICAgdGhpcy5uYW1lID0gXCI/eG1sXCI7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5Eb2N1bWVudDtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgICB3cml0ZXJPcHRpb25zID0ge307XG4gICAgICBpZiAoIW9wdGlvbnMud3JpdGVyKSB7XG4gICAgICAgIG9wdGlvbnMud3JpdGVyID0gbmV3IFhNTFN0cmluZ1dyaXRlcigpO1xuICAgICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KG9wdGlvbnMud3JpdGVyKSkge1xuICAgICAgICB3cml0ZXJPcHRpb25zID0gb3B0aW9ucy53cml0ZXI7XG4gICAgICAgIG9wdGlvbnMud3JpdGVyID0gbmV3IFhNTFN0cmluZ1dyaXRlcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgIHRoaXMud3JpdGVyID0gb3B0aW9ucy53cml0ZXI7XG4gICAgICB0aGlzLndyaXRlck9wdGlvbnMgPSB0aGlzLndyaXRlci5maWx0ZXJPcHRpb25zKHdyaXRlck9wdGlvbnMpO1xuICAgICAgdGhpcy5zdHJpbmdpZnkgPSBuZXcgWE1MU3RyaW5naWZpZXIob3B0aW9ucyk7XG4gICAgICB0aGlzLm9uRGF0YUNhbGxiYWNrID0gb25EYXRhIHx8IGZ1bmN0aW9uKCkge307XG4gICAgICB0aGlzLm9uRW5kQ2FsbGJhY2sgPSBvbkVuZCB8fCBmdW5jdGlvbigpIHt9O1xuICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IG51bGw7XG4gICAgICB0aGlzLmN1cnJlbnRMZXZlbCA9IC0xO1xuICAgICAgdGhpcy5vcGVuVGFncyA9IHt9O1xuICAgICAgdGhpcy5kb2N1bWVudFN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuZG9jdW1lbnRDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMucm9vdCA9IG51bGw7XG4gICAgfVxuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuY3JlYXRlQ2hpbGROb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIGF0dCwgYXR0TmFtZSwgYXR0cmlidXRlcywgY2hpbGQsIGksIGxlbiwgcmVmMSwgcmVmMjtcbiAgICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuQ0RhdGE6XG4gICAgICAgICAgdGhpcy5jZGF0YShub2RlLnZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5Db21tZW50OlxuICAgICAgICAgIHRoaXMuY29tbWVudChub2RlLnZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5FbGVtZW50OlxuICAgICAgICAgIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgICByZWYxID0gbm9kZS5hdHRyaWJzO1xuICAgICAgICAgIGZvciAoYXR0TmFtZSBpbiByZWYxKSB7XG4gICAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYxLCBhdHROYW1lKSkgY29udGludWU7XG4gICAgICAgICAgICBhdHQgPSByZWYxW2F0dE5hbWVdO1xuICAgICAgICAgICAgYXR0cmlidXRlc1thdHROYW1lXSA9IGF0dC52YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5ub2RlKG5vZGUubmFtZSwgYXR0cmlidXRlcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuRHVtbXk6XG4gICAgICAgICAgdGhpcy5kdW1teSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLlJhdzpcbiAgICAgICAgICB0aGlzLnJhdyhub2RlLnZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5UZXh0OlxuICAgICAgICAgIHRoaXMudGV4dChub2RlLnZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb246XG4gICAgICAgICAgdGhpcy5pbnN0cnVjdGlvbihub2RlLnRhcmdldCwgbm9kZS52YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBYTUwgbm9kZSB0eXBlIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYSBKUyBvYmplY3Q6IFwiICsgbm9kZS5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICAgIH1cbiAgICAgIHJlZjIgPSBub2RlLmNoaWxkcmVuO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmMi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjaGlsZCA9IHJlZjJbaV07XG4gICAgICAgIHRoaXMuY3JlYXRlQ2hpbGROb2RlKGNoaWxkKTtcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IE5vZGVUeXBlLkVsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLnVwKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kdW1teSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm5vZGUgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICB2YXIgcmVmMTtcbiAgICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBub2RlIG5hbWUuXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucm9vdCAmJiB0aGlzLmN1cnJlbnRMZXZlbCA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRG9jdW1lbnQgY2FuIG9ubHkgaGF2ZSBvbmUgcm9vdCBub2RlLiBcIiArIHRoaXMuZGVidWdJbmZvKG5hbWUpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5hbWUgPSBnZXRWYWx1ZShuYW1lKTtcbiAgICAgIGlmIChhdHRyaWJ1dGVzID09IG51bGwpIHtcbiAgICAgICAgYXR0cmlidXRlcyA9IHt9O1xuICAgICAgfVxuICAgICAgYXR0cmlidXRlcyA9IGdldFZhbHVlKGF0dHJpYnV0ZXMpO1xuICAgICAgaWYgKCFpc09iamVjdChhdHRyaWJ1dGVzKSkge1xuICAgICAgICByZWYxID0gW2F0dHJpYnV0ZXMsIHRleHRdLCB0ZXh0ID0gcmVmMVswXSwgYXR0cmlidXRlcyA9IHJlZjFbMV07XG4gICAgICB9XG4gICAgICB0aGlzLmN1cnJlbnROb2RlID0gbmV3IFhNTEVsZW1lbnQodGhpcywgbmFtZSwgYXR0cmlidXRlcyk7XG4gICAgICB0aGlzLmN1cnJlbnROb2RlLmNoaWxkcmVuID0gZmFsc2U7XG4gICAgICB0aGlzLmN1cnJlbnRMZXZlbCsrO1xuICAgICAgdGhpcy5vcGVuVGFnc1t0aGlzLmN1cnJlbnRMZXZlbF0gPSB0aGlzLmN1cnJlbnROb2RlO1xuICAgICAgaWYgKHRleHQgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnRleHQodGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZWxlbWVudCA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgbGVuLCBvbGRWYWxpZGF0aW9uRmxhZywgcmVmMSwgcm9vdDtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnROb2RlICYmIHRoaXMuY3VycmVudE5vZGUudHlwZSA9PT0gTm9kZVR5cGUuRG9jVHlwZSkge1xuICAgICAgICB0aGlzLmR0ZEVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5hbWUpIHx8IGlzT2JqZWN0KG5hbWUpIHx8IGlzRnVuY3Rpb24obmFtZSkpIHtcbiAgICAgICAgICBvbGRWYWxpZGF0aW9uRmxhZyA9IHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb247XG4gICAgICAgICAgdGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbiA9IHRydWU7XG4gICAgICAgICAgcm9vdCA9IG5ldyBYTUxEb2N1bWVudCh0aGlzLm9wdGlvbnMpLmVsZW1lbnQoJ1RFTVBfUk9PVCcpO1xuICAgICAgICAgIHJvb3QuZWxlbWVudChuYW1lKTtcbiAgICAgICAgICB0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uID0gb2xkVmFsaWRhdGlvbkZsYWc7XG4gICAgICAgICAgcmVmMSA9IHJvb3QuY2hpbGRyZW47XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmMS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY2hpbGQgPSByZWYxW2ldO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVDaGlsZE5vZGUoY2hpbGQpO1xuICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IE5vZGVUeXBlLkVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgdGhpcy51cCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm5vZGUobmFtZSwgYXR0cmlidXRlcywgdGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5hdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGF0dE5hbWUsIGF0dFZhbHVlO1xuICAgICAgaWYgKCF0aGlzLmN1cnJlbnROb2RlIHx8IHRoaXMuY3VycmVudE5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXR0KCkgY2FuIG9ubHkgYmUgdXNlZCBpbW1lZGlhdGVseSBhZnRlciBhbiBlbGUoKSBjYWxsIGluIGNhbGxiYWNrIG1vZGUuIFwiICsgdGhpcy5kZWJ1Z0luZm8obmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgICBuYW1lID0gZ2V0VmFsdWUobmFtZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICAgICAgZm9yIChhdHROYW1lIGluIG5hbWUpIHtcbiAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChuYW1lLCBhdHROYW1lKSkgY29udGludWU7XG4gICAgICAgICAgYXR0VmFsdWUgPSBuYW1lW2F0dE5hbWVdO1xuICAgICAgICAgIHRoaXMuYXR0cmlidXRlKGF0dE5hbWUsIGF0dFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5hcHBseSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMua2VlcE51bGxBdHRyaWJ1dGVzICYmICh2YWx1ZSA9PSBudWxsKSkge1xuICAgICAgICAgIHRoaXMuY3VycmVudE5vZGUuYXR0cmlic1tuYW1lXSA9IG5ldyBYTUxBdHRyaWJ1dGUodGhpcywgbmFtZSwgXCJcIik7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuY3VycmVudE5vZGUuYXR0cmlic1tuYW1lXSA9IG5ldyBYTUxBdHRyaWJ1dGUodGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MVGV4dCh0aGlzLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9uRGF0YSh0aGlzLndyaXRlci50ZXh0KG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKSwgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5jZGF0YSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MQ0RhdGEodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIuY2RhdGEobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmNvbW1lbnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIG5vZGU7XG4gICAgICB0aGlzLm9wZW5DdXJyZW50KCk7XG4gICAgICBub2RlID0gbmV3IFhNTENvbW1lbnQodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIuY29tbWVudChub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsICsgMSksIHRoaXMuY3VycmVudExldmVsICsgMSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBub2RlO1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgbm9kZSA9IG5ldyBYTUxSYXcodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIucmF3KG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKSwgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5pbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHZhciBpLCBpbnNUYXJnZXQsIGluc1ZhbHVlLCBsZW4sIG5vZGU7XG4gICAgICB0aGlzLm9wZW5DdXJyZW50KCk7XG4gICAgICBpZiAodGFyZ2V0ICE9IG51bGwpIHtcbiAgICAgICAgdGFyZ2V0ID0gZ2V0VmFsdWUodGFyZ2V0KTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHZhbHVlID0gZ2V0VmFsdWUodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSB0YXJnZXQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBpbnNUYXJnZXQgPSB0YXJnZXRbaV07XG4gICAgICAgICAgdGhpcy5pbnN0cnVjdGlvbihpbnNUYXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHRhcmdldCkpIHtcbiAgICAgICAgZm9yIChpbnNUYXJnZXQgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwodGFyZ2V0LCBpbnNUYXJnZXQpKSBjb250aW51ZTtcbiAgICAgICAgICBpbnNWYWx1ZSA9IHRhcmdldFtpbnNUYXJnZXRdO1xuICAgICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb24oaW5zVGFyZ2V0LCBpbnNWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUuYXBwbHkoKTtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbmV3IFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbih0aGlzLCB0YXJnZXQsIHZhbHVlKTtcbiAgICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIucHJvY2Vzc2luZ0luc3RydWN0aW9uKG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKSwgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kZWNsYXJhdGlvbiA9IGZ1bmN0aW9uKHZlcnNpb24sIGVuY29kaW5nLCBzdGFuZGFsb25lKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIGlmICh0aGlzLmRvY3VtZW50U3RhcnRlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkZWNsYXJhdGlvbigpIG11c3QgYmUgdGhlIGZpcnN0IG5vZGUuXCIpO1xuICAgICAgfVxuICAgICAgbm9kZSA9IG5ldyBYTUxEZWNsYXJhdGlvbih0aGlzLCB2ZXJzaW9uLCBlbmNvZGluZywgc3RhbmRhbG9uZSk7XG4gICAgICB0aGlzLm9uRGF0YSh0aGlzLndyaXRlci5kZWNsYXJhdGlvbihub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsICsgMSksIHRoaXMuY3VycmVudExldmVsICsgMSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZG9jdHlwZSA9IGZ1bmN0aW9uKHJvb3QsIHB1YklELCBzeXNJRCkge1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgaWYgKHJvb3QgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHJvb3Qgbm9kZSBuYW1lLlwiKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnJvb3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZHRkKCkgbXVzdCBjb21lIGJlZm9yZSB0aGUgcm9vdCBub2RlLlwiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY3VycmVudE5vZGUgPSBuZXcgWE1MRG9jVHlwZSh0aGlzLCBwdWJJRCwgc3lzSUQpO1xuICAgICAgdGhpcy5jdXJyZW50Tm9kZS5yb290Tm9kZU5hbWUgPSByb290O1xuICAgICAgdGhpcy5jdXJyZW50Tm9kZS5jaGlsZHJlbiA9IGZhbHNlO1xuICAgICAgdGhpcy5jdXJyZW50TGV2ZWwrKztcbiAgICAgIHRoaXMub3BlblRhZ3NbdGhpcy5jdXJyZW50TGV2ZWxdID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kdGRFbGVtZW50ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBub2RlO1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgbm9kZSA9IG5ldyBYTUxEVERFbGVtZW50KHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgIHRoaXMub25EYXRhKHRoaXMud3JpdGVyLmR0ZEVsZW1lbnQobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmF0dExpc3QgPSBmdW5jdGlvbihlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MRFREQXR0TGlzdCh0aGlzLCBlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKTtcbiAgICAgIHRoaXMub25EYXRhKHRoaXMud3JpdGVyLmR0ZEF0dExpc3Qobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmVudGl0eSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MRFRERW50aXR5KHRoaXMsIGZhbHNlLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9uRGF0YSh0aGlzLndyaXRlci5kdGRFbnRpdHkobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLnBFbnRpdHkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIG5vZGU7XG4gICAgICB0aGlzLm9wZW5DdXJyZW50KCk7XG4gICAgICBub2RlID0gbmV3IFhNTERUREVudGl0eSh0aGlzLCB0cnVlLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9uRGF0YSh0aGlzLndyaXRlci5kdGRFbnRpdHkobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm5vdGF0aW9uID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBub2RlO1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgbm9kZSA9IG5ldyBYTUxEVEROb3RhdGlvbih0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9uRGF0YSh0aGlzLndyaXRlci5kdGROb3RhdGlvbihub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsICsgMSksIHRoaXMuY3VycmVudExldmVsICsgMSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUudXAgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRMZXZlbCA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGRvY3VtZW50IG5vZGUgaGFzIG5vIHBhcmVudC5cIik7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jdXJyZW50Tm9kZSkge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50Tm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgIHRoaXMuY2xvc2VOb2RlKHRoaXMuY3VycmVudE5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMub3Blbk5vZGUodGhpcy5jdXJyZW50Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNsb3NlTm9kZSh0aGlzLm9wZW5UYWdzW3RoaXMuY3VycmVudExldmVsXSk7XG4gICAgICB9XG4gICAgICBkZWxldGUgdGhpcy5vcGVuVGFnc1t0aGlzLmN1cnJlbnRMZXZlbF07XG4gICAgICB0aGlzLmN1cnJlbnRMZXZlbC0tO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgd2hpbGUgKHRoaXMuY3VycmVudExldmVsID49IDApIHtcbiAgICAgICAgdGhpcy51cCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMub25FbmQoKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUub3BlbkN1cnJlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnROb2RlKSB7XG4gICAgICAgIHRoaXMuY3VycmVudE5vZGUuY2hpbGRyZW4gPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcy5vcGVuTm9kZSh0aGlzLmN1cnJlbnROb2RlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUub3Blbk5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgYXR0LCBjaHVuaywgbmFtZSwgcmVmMTtcbiAgICAgIGlmICghbm9kZS5pc09wZW4pIHtcbiAgICAgICAgaWYgKCF0aGlzLnJvb3QgJiYgdGhpcy5jdXJyZW50TGV2ZWwgPT09IDAgJiYgbm9kZS50eXBlID09PSBOb2RlVHlwZS5FbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy5yb290ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBjaHVuayA9ICcnO1xuICAgICAgICBpZiAobm9kZS50eXBlID09PSBOb2RlVHlwZS5FbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy53cml0ZXJPcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuT3BlblRhZztcbiAgICAgICAgICBjaHVuayA9IHRoaXMud3JpdGVyLmluZGVudChub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsKSArICc8JyArIG5vZGUubmFtZTtcbiAgICAgICAgICByZWYxID0gbm9kZS5hdHRyaWJzO1xuICAgICAgICAgIGZvciAobmFtZSBpbiByZWYxKSB7XG4gICAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYxLCBuYW1lKSkgY29udGludWU7XG4gICAgICAgICAgICBhdHQgPSByZWYxW25hbWVdO1xuICAgICAgICAgICAgY2h1bmsgKz0gdGhpcy53cml0ZXIuYXR0cmlidXRlKGF0dCwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNodW5rICs9IChub2RlLmNoaWxkcmVuID8gJz4nIDogJy8+JykgKyB0aGlzLndyaXRlci5lbmRsaW5lKG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwpO1xuICAgICAgICAgIHRoaXMud3JpdGVyT3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLndyaXRlck9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgICAgIGNodW5rID0gdGhpcy53cml0ZXIuaW5kZW50KG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwpICsgJzwhRE9DVFlQRSAnICsgbm9kZS5yb290Tm9kZU5hbWU7XG4gICAgICAgICAgaWYgKG5vZGUucHViSUQgJiYgbm9kZS5zeXNJRCkge1xuICAgICAgICAgICAgY2h1bmsgKz0gJyBQVUJMSUMgXCInICsgbm9kZS5wdWJJRCArICdcIiBcIicgKyBub2RlLnN5c0lEICsgJ1wiJztcbiAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUuc3lzSUQpIHtcbiAgICAgICAgICAgIGNodW5rICs9ICcgU1lTVEVNIFwiJyArIG5vZGUuc3lzSUQgKyAnXCInO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgY2h1bmsgKz0gJyBbJztcbiAgICAgICAgICAgIHRoaXMud3JpdGVyT3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy53cml0ZXJPcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICAgICAgICBjaHVuayArPSAnPic7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNodW5rICs9IHRoaXMud3JpdGVyLmVuZGxpbmUobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbkRhdGEoY2h1bmssIHRoaXMuY3VycmVudExldmVsKTtcbiAgICAgICAgcmV0dXJuIG5vZGUuaXNPcGVuID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuY2xvc2VOb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIGNodW5rO1xuICAgICAgaWYgKCFub2RlLmlzQ2xvc2VkKSB7XG4gICAgICAgIGNodW5rID0gJyc7XG4gICAgICAgIHRoaXMud3JpdGVyT3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICBpZiAobm9kZS50eXBlID09PSBOb2RlVHlwZS5FbGVtZW50KSB7XG4gICAgICAgICAgY2h1bmsgPSB0aGlzLndyaXRlci5pbmRlbnQobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCkgKyAnPC8nICsgbm9kZS5uYW1lICsgJz4nICsgdGhpcy53cml0ZXIuZW5kbGluZShub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaHVuayA9IHRoaXMud3JpdGVyLmluZGVudChub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsKSArICddPicgKyB0aGlzLndyaXRlci5lbmRsaW5lKG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud3JpdGVyT3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk5vbmU7XG4gICAgICAgIHRoaXMub25EYXRhKGNodW5rLCB0aGlzLmN1cnJlbnRMZXZlbCk7XG4gICAgICAgIHJldHVybiBub2RlLmlzQ2xvc2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24oY2h1bmssIGxldmVsKSB7XG4gICAgICB0aGlzLmRvY3VtZW50U3RhcnRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcy5vbkRhdGFDYWxsYmFjayhjaHVuaywgbGV2ZWwgKyAxKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUub25FbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9jdW1lbnRDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXMub25FbmRDYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kZWJ1Z0luZm8gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibm9kZTogPFwiICsgbmFtZSArIFwiPlwiO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5lbGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUubm9kID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZShuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUudHh0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kYXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2RhdGEodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5jb20gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tbWVudCh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmlucyA9IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc3RydWN0aW9uKHRhcmdldCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kZWMgPSBmdW5jdGlvbih2ZXJzaW9uLCBlbmNvZGluZywgc3RhbmRhbG9uZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVjbGFyYXRpb24odmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kdGQgPSBmdW5jdGlvbihyb290LCBwdWJJRCwgc3lzSUQpIHtcbiAgICAgIHJldHVybiB0aGlzLmRvY3R5cGUocm9vdCwgcHViSUQsIHN5c0lEKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZSA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQobmFtZSwgYXR0cmlidXRlcywgdGV4dCk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm4gPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS50ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNkYXRhKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuYyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21tZW50KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yYXcodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5pID0gZnVuY3Rpb24odGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5zdHJ1Y3Rpb24odGFyZ2V0LCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmF0dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudE5vZGUgJiYgdGhpcy5jdXJyZW50Tm9kZS50eXBlID09PSBOb2RlVHlwZS5Eb2NUeXBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dExpc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5hID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50Tm9kZSAmJiB0aGlzLmN1cnJlbnROb2RlLnR5cGUgPT09IE5vZGVUeXBlLkRvY1R5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0TGlzdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmVudCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbnRpdHkobmFtZSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5wZW50ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnBFbnRpdHkobmFtZSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5ub3QgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMubm90YXRpb24obmFtZSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRG9jdW1lbnRDQjtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgV3JpdGVyU3RhdGUsIFhNTFN0cmVhbVdyaXRlciwgWE1MV3JpdGVyQmFzZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTFdyaXRlckJhc2UgPSByZXF1aXJlKCcuL1hNTFdyaXRlckJhc2UnKTtcblxuICBXcml0ZXJTdGF0ZSA9IHJlcXVpcmUoJy4vV3JpdGVyU3RhdGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFN0cmVhbVdyaXRlciA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTFN0cmVhbVdyaXRlciwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxTdHJlYW1Xcml0ZXIoc3RyZWFtLCBvcHRpb25zKSB7XG4gICAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgIFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLmVuZGxpbmUgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgaWYgKG5vZGUuaXNMYXN0Um9vdE5vZGUgJiYgb3B0aW9ucy5zdGF0ZSA9PT0gV3JpdGVyU3RhdGUuQ2xvc2VUYWcpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18uZW5kbGluZS5jYWxsKHRoaXMsIG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5kb2N1bWVudCA9IGZ1bmN0aW9uKGRvYywgb3B0aW9ucykge1xuICAgICAgdmFyIGNoaWxkLCBpLCBqLCBrLCBsZW4sIGxlbjEsIHJlZiwgcmVmMSwgcmVzdWx0cztcbiAgICAgIHJlZiA9IGRvYy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgICAgIGNoaWxkID0gcmVmW2ldO1xuICAgICAgICBjaGlsZC5pc0xhc3RSb290Tm9kZSA9IGkgPT09IGRvYy5jaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IHRoaXMuZmlsdGVyT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIHJlZjEgPSBkb2MuY2hpbGRyZW47XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGsgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgICAgY2hpbGQgPSByZWYxW2tdO1xuICAgICAgICByZXN1bHRzLnB1c2godGhpcy53cml0ZUNoaWxkTm9kZShjaGlsZCwgb3B0aW9ucywgMCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuYXR0cmlidXRlID0gZnVuY3Rpb24oYXR0LCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18uYXR0cmlidXRlLmNhbGwodGhpcywgYXR0LCBvcHRpb25zLCBsZXZlbCkpO1xuICAgIH07XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLmNkYXRhID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShYTUxTdHJlYW1Xcml0ZXIuX19zdXBlcl9fLmNkYXRhLmNhbGwodGhpcywgbm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5jb21tZW50ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShYTUxTdHJlYW1Xcml0ZXIuX19zdXBlcl9fLmNvbW1lbnQuY2FsbCh0aGlzLCBub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgIH07XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLmRlY2xhcmF0aW9uID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShYTUxTdHJlYW1Xcml0ZXIuX19zdXBlcl9fLmRlY2xhcmF0aW9uLmNhbGwodGhpcywgbm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5kb2NUeXBlID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciBjaGlsZCwgaiwgbGVuLCByZWY7XG4gICAgICBsZXZlbCB8fCAobGV2ZWwgPSAwKTtcbiAgICAgIHRoaXMub3Blbk5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk9wZW5UYWc7XG4gICAgICB0aGlzLnN0cmVhbS53cml0ZSh0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJzwhRE9DVFlQRSAnICsgbm9kZS5yb290KCkubmFtZSk7XG4gICAgICBpZiAobm9kZS5wdWJJRCAmJiBub2RlLnN5c0lEKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCcgUFVCTElDIFwiJyArIG5vZGUucHViSUQgKyAnXCIgXCInICsgbm9kZS5zeXNJRCArICdcIicpO1xuICAgICAgfSBlbHNlIGlmIChub2RlLnN5c0lEKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCcgU1lTVEVNIFwiJyArIG5vZGUuc3lzSUQgKyAnXCInKTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJyBbJyk7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgICByZWYgPSBub2RlLmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBjaGlsZCA9IHJlZltqXTtcbiAgICAgICAgICB0aGlzLndyaXRlQ2hpbGROb2RlKGNoaWxkLCBvcHRpb25zLCBsZXZlbCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJ10nKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgIHRoaXMuc3RyZWFtLndyaXRlKG9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCArICc+Jyk7XG4gICAgICB0aGlzLnN0cmVhbS53cml0ZSh0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgcmV0dXJuIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5lbGVtZW50ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciBhdHQsIGNoaWxkLCBjaGlsZE5vZGVDb3VudCwgZmlyc3RDaGlsZE5vZGUsIGosIGxlbiwgbmFtZSwgcHJldHR5U3VwcHJlc3NlZCwgcmVmLCByZWYxO1xuICAgICAgbGV2ZWwgfHwgKGxldmVsID0gMCk7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgdGhpcy5zdHJlYW0ud3JpdGUodGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpICsgJzwnICsgbm9kZS5uYW1lKTtcbiAgICAgIHJlZiA9IG5vZGUuYXR0cmlicztcbiAgICAgIGZvciAobmFtZSBpbiByZWYpIHtcbiAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmLCBuYW1lKSkgY29udGludWU7XG4gICAgICAgIGF0dCA9IHJlZltuYW1lXTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGUoYXR0LCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICB9XG4gICAgICBjaGlsZE5vZGVDb3VudCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgZmlyc3RDaGlsZE5vZGUgPSBjaGlsZE5vZGVDb3VudCA9PT0gMCA/IG51bGwgOiBub2RlLmNoaWxkcmVuWzBdO1xuICAgICAgaWYgKGNoaWxkTm9kZUNvdW50ID09PSAwIHx8IG5vZGUuY2hpbGRyZW4uZXZlcnkoZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gKGUudHlwZSA9PT0gTm9kZVR5cGUuVGV4dCB8fCBlLnR5cGUgPT09IE5vZGVUeXBlLlJhdykgJiYgZS52YWx1ZSA9PT0gJyc7XG4gICAgICB9KSkge1xuICAgICAgICBpZiAob3B0aW9ucy5hbGxvd0VtcHR5KSB7XG4gICAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJz4nKTtcbiAgICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJzwvJyArIG5vZGUubmFtZSArICc+Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKG9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCArICcvPicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucHJldHR5ICYmIGNoaWxkTm9kZUNvdW50ID09PSAxICYmIChmaXJzdENoaWxkTm9kZS50eXBlID09PSBOb2RlVHlwZS5UZXh0IHx8IGZpcnN0Q2hpbGROb2RlLnR5cGUgPT09IE5vZGVUeXBlLlJhdykgJiYgKGZpcnN0Q2hpbGROb2RlLnZhbHVlICE9IG51bGwpKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCc+Jyk7XG4gICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICAgIG9wdGlvbnMuc3VwcHJlc3NQcmV0dHlDb3VudCsrO1xuICAgICAgICBwcmV0dHlTdXBwcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53cml0ZUNoaWxkTm9kZShmaXJzdENoaWxkTm9kZSwgb3B0aW9ucywgbGV2ZWwgKyAxKTtcbiAgICAgICAgb3B0aW9ucy5zdXBwcmVzc1ByZXR0eUNvdW50LS07XG4gICAgICAgIHByZXR0eVN1cHByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnPC8nICsgbm9kZS5uYW1lICsgJz4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCc+JyArIHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgICByZWYxID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmMS5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIGNoaWxkID0gcmVmMVtqXTtcbiAgICAgICAgICB0aGlzLndyaXRlQ2hpbGROb2RlKGNoaWxkLCBvcHRpb25zLCBsZXZlbCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUodGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpICsgJzwvJyArIG5vZGUubmFtZSArICc+Jyk7XG4gICAgICB9XG4gICAgICB0aGlzLnN0cmVhbS53cml0ZSh0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgcmV0dXJuIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18ucHJvY2Vzc2luZ0luc3RydWN0aW9uLmNhbGwodGhpcywgbm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5yYXcgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18ucmF3LmNhbGwodGhpcywgbm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShYTUxTdHJlYW1Xcml0ZXIuX19zdXBlcl9fLnRleHQuY2FsbCh0aGlzLCBub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgIH07XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLmR0ZEF0dExpc3QgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18uZHRkQXR0TGlzdC5jYWxsKHRoaXMsIG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuZHRkRWxlbWVudCA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGUoWE1MU3RyZWFtV3JpdGVyLl9fc3VwZXJfXy5kdGRFbGVtZW50LmNhbGwodGhpcywgbm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5kdGRFbnRpdHkgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18uZHRkRW50aXR5LmNhbGwodGhpcywgbm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5kdGROb3RhdGlvbiA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGUoWE1MU3RyZWFtV3JpdGVyLl9fc3VwZXJfXy5kdGROb3RhdGlvbi5jYWxsKHRoaXMsIG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxTdHJlYW1Xcml0ZXI7XG5cbiAgfSkoWE1MV3JpdGVyQmFzZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBXcml0ZXJTdGF0ZSwgWE1MRE9NSW1wbGVtZW50YXRpb24sIFhNTERvY3VtZW50LCBYTUxEb2N1bWVudENCLCBYTUxTdHJlYW1Xcml0ZXIsIFhNTFN0cmluZ1dyaXRlciwgYXNzaWduLCBpc0Z1bmN0aW9uLCByZWY7XG5cbiAgcmVmID0gcmVxdWlyZSgnLi9VdGlsaXR5JyksIGFzc2lnbiA9IHJlZi5hc3NpZ24sIGlzRnVuY3Rpb24gPSByZWYuaXNGdW5jdGlvbjtcblxuICBYTUxET01JbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vWE1MRE9NSW1wbGVtZW50YXRpb24nKTtcblxuICBYTUxEb2N1bWVudCA9IHJlcXVpcmUoJy4vWE1MRG9jdW1lbnQnKTtcblxuICBYTUxEb2N1bWVudENCID0gcmVxdWlyZSgnLi9YTUxEb2N1bWVudENCJyk7XG5cbiAgWE1MU3RyaW5nV3JpdGVyID0gcmVxdWlyZSgnLi9YTUxTdHJpbmdXcml0ZXInKTtcblxuICBYTUxTdHJlYW1Xcml0ZXIgPSByZXF1aXJlKCcuL1hNTFN0cmVhbVdyaXRlcicpO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFdyaXRlclN0YXRlID0gcmVxdWlyZSgnLi9Xcml0ZXJTdGF0ZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzLmNyZWF0ZSA9IGZ1bmN0aW9uKG5hbWUsIHhtbGRlYywgZG9jdHlwZSwgb3B0aW9ucykge1xuICAgIHZhciBkb2MsIHJvb3Q7XG4gICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUm9vdCBlbGVtZW50IG5lZWRzIGEgbmFtZS5cIik7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBhc3NpZ24oe30sIHhtbGRlYywgZG9jdHlwZSwgb3B0aW9ucyk7XG4gICAgZG9jID0gbmV3IFhNTERvY3VtZW50KG9wdGlvbnMpO1xuICAgIHJvb3QgPSBkb2MuZWxlbWVudChuYW1lKTtcbiAgICBpZiAoIW9wdGlvbnMuaGVhZGxlc3MpIHtcbiAgICAgIGRvYy5kZWNsYXJhdGlvbihvcHRpb25zKTtcbiAgICAgIGlmICgob3B0aW9ucy5wdWJJRCAhPSBudWxsKSB8fCAob3B0aW9ucy5zeXNJRCAhPSBudWxsKSkge1xuICAgICAgICBkb2MuZHRkKG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcm9vdDtcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cy5iZWdpbiA9IGZ1bmN0aW9uKG9wdGlvbnMsIG9uRGF0YSwgb25FbmQpIHtcbiAgICB2YXIgcmVmMTtcbiAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgICAgcmVmMSA9IFtvcHRpb25zLCBvbkRhdGFdLCBvbkRhdGEgPSByZWYxWzBdLCBvbkVuZCA9IHJlZjFbMV07XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGlmIChvbkRhdGEpIHtcbiAgICAgIHJldHVybiBuZXcgWE1MRG9jdW1lbnRDQihvcHRpb25zLCBvbkRhdGEsIG9uRW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBYTUxEb2N1bWVudChvcHRpb25zKTtcbiAgICB9XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMuc3RyaW5nV3JpdGVyID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgWE1MU3RyaW5nV3JpdGVyKG9wdGlvbnMpO1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzLnN0cmVhbVdyaXRlciA9IGZ1bmN0aW9uKHN0cmVhbSwgb3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgWE1MU3RyZWFtV3JpdGVyKHN0cmVhbSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMuaW1wbGVtZW50YXRpb24gPSBuZXcgWE1MRE9NSW1wbGVtZW50YXRpb24oKTtcblxuICBtb2R1bGUuZXhwb3J0cy5ub2RlVHlwZSA9IE5vZGVUeXBlO1xuXG4gIG1vZHVsZS5leHBvcnRzLndyaXRlclN0YXRlID0gV3JpdGVyU3RhdGU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIHZhciBidWlsZGVyLCBkZWZhdWx0cywgZXNjYXBlQ0RBVEEsIHJlcXVpcmVzQ0RBVEEsIHdyYXBDREFUQSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgYnVpbGRlciA9IHJlcXVpcmUoJ3htbGJ1aWxkZXInKTtcblxuICBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKS5kZWZhdWx0cztcblxuICByZXF1aXJlc0NEQVRBID0gZnVuY3Rpb24oZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSBcInN0cmluZ1wiICYmIChlbnRyeS5pbmRleE9mKCcmJykgPj0gMCB8fCBlbnRyeS5pbmRleE9mKCc+JykgPj0gMCB8fCBlbnRyeS5pbmRleE9mKCc8JykgPj0gMCk7XG4gIH07XG5cbiAgd3JhcENEQVRBID0gZnVuY3Rpb24oZW50cnkpIHtcbiAgICByZXR1cm4gXCI8IVtDREFUQVtcIiArIChlc2NhcGVDREFUQShlbnRyeSkpICsgXCJdXT5cIjtcbiAgfTtcblxuICBlc2NhcGVDREFUQSA9IGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgcmV0dXJuIGVudHJ5LnJlcGxhY2UoJ11dPicsICddXV1dPjwhW0NEQVRBWz4nKTtcbiAgfTtcblxuICBleHBvcnRzLkJ1aWxkZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gQnVpbGRlcihvcHRzKSB7XG4gICAgICB2YXIga2V5LCByZWYsIHZhbHVlO1xuICAgICAgdGhpcy5vcHRpb25zID0ge307XG4gICAgICByZWYgPSBkZWZhdWx0c1tcIjAuMlwiXTtcbiAgICAgIGZvciAoa2V5IGluIHJlZikge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICB2YWx1ZSA9IHJlZltrZXldO1xuICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgZm9yIChrZXkgaW4gb3B0cykge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChvcHRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgdmFsdWUgPSBvcHRzW2tleV07XG4gICAgICAgIHRoaXMub3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQnVpbGRlci5wcm90b3R5cGUuYnVpbGRPYmplY3QgPSBmdW5jdGlvbihyb290T2JqKSB7XG4gICAgICB2YXIgYXR0cmtleSwgY2hhcmtleSwgcmVuZGVyLCByb290RWxlbWVudCwgcm9vdE5hbWU7XG4gICAgICBhdHRya2V5ID0gdGhpcy5vcHRpb25zLmF0dHJrZXk7XG4gICAgICBjaGFya2V5ID0gdGhpcy5vcHRpb25zLmNoYXJrZXk7XG4gICAgICBpZiAoKE9iamVjdC5rZXlzKHJvb3RPYmopLmxlbmd0aCA9PT0gMSkgJiYgKHRoaXMub3B0aW9ucy5yb290TmFtZSA9PT0gZGVmYXVsdHNbJzAuMiddLnJvb3ROYW1lKSkge1xuICAgICAgICByb290TmFtZSA9IE9iamVjdC5rZXlzKHJvb3RPYmopWzBdO1xuICAgICAgICByb290T2JqID0gcm9vdE9ialtyb290TmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290TmFtZSA9IHRoaXMub3B0aW9ucy5yb290TmFtZTtcbiAgICAgIH1cbiAgICAgIHJlbmRlciA9IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudCwgb2JqKSB7XG4gICAgICAgICAgdmFyIGF0dHIsIGNoaWxkLCBlbnRyeSwgaW5kZXgsIGtleSwgdmFsdWU7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5jZGF0YSAmJiByZXF1aXJlc0NEQVRBKG9iaikpIHtcbiAgICAgICAgICAgICAgZWxlbWVudC5yYXcod3JhcENEQVRBKG9iaikpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZWxlbWVudC50eHQob2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgZm9yIChpbmRleCBpbiBvYmopIHtcbiAgICAgICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwob2JqLCBpbmRleCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICBjaGlsZCA9IG9ialtpbmRleF07XG4gICAgICAgICAgICAgIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgZW50cnkgPSBjaGlsZFtrZXldO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSByZW5kZXIoZWxlbWVudC5lbGUoa2V5KSwgZW50cnkpLnVwKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgIGlmICghaGFzUHJvcC5jYWxsKG9iaiwga2V5KSkgY29udGludWU7XG4gICAgICAgICAgICAgIGNoaWxkID0gb2JqW2tleV07XG4gICAgICAgICAgICAgIGlmIChrZXkgPT09IGF0dHJrZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNoaWxkID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKGF0dHIgaW4gY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjaGlsZFthdHRyXTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQuYXR0KGF0dHIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBjaGFya2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2RhdGEgJiYgcmVxdWlyZXNDREFUQShjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnJhdyh3cmFwQ0RBVEEoY2hpbGQpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQudHh0KGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGluZGV4IGluIGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChjaGlsZCwgaW5kZXgpKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgIGVudHJ5ID0gY2hpbGRbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2RhdGEgJiYgcmVxdWlyZXNDREFUQShlbnRyeSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5lbGUoa2V5KS5yYXcod3JhcENEQVRBKGVudHJ5KSkudXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5lbGUoa2V5LCBlbnRyeSkudXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IHJlbmRlcihlbGVtZW50LmVsZShrZXkpLCBlbnRyeSkudXAoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNoaWxkID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudCA9IHJlbmRlcihlbGVtZW50LmVsZShrZXkpLCBjaGlsZCkudXAoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJyAmJiBfdGhpcy5vcHRpb25zLmNkYXRhICYmIHJlcXVpcmVzQ0RBVEEoY2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5lbGUoa2V5KS5yYXcod3JhcENEQVRBKGNoaWxkKSkudXAoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSAnJztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LmVsZShrZXksIGNoaWxkLnRvU3RyaW5nKCkpLnVwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcyk7XG4gICAgICByb290RWxlbWVudCA9IGJ1aWxkZXIuY3JlYXRlKHJvb3ROYW1lLCB0aGlzLm9wdGlvbnMueG1sZGVjLCB0aGlzLm9wdGlvbnMuZG9jdHlwZSwge1xuICAgICAgICBoZWFkbGVzczogdGhpcy5vcHRpb25zLmhlYWRsZXNzLFxuICAgICAgICBhbGxvd1N1cnJvZ2F0ZUNoYXJzOiB0aGlzLm9wdGlvbnMuYWxsb3dTdXJyb2dhdGVDaGFyc1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVuZGVyKHJvb3RFbGVtZW50LCByb290T2JqKS5lbmQodGhpcy5vcHRpb25zLnJlbmRlck9wdHMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQnVpbGRlcjtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIjsoZnVuY3Rpb24gKHNheCkgeyAvLyB3cmFwcGVyIGZvciBub24tbm9kZSBlbnZzXG4gIHNheC5wYXJzZXIgPSBmdW5jdGlvbiAoc3RyaWN0LCBvcHQpIHsgcmV0dXJuIG5ldyBTQVhQYXJzZXIoc3RyaWN0LCBvcHQpIH1cbiAgc2F4LlNBWFBhcnNlciA9IFNBWFBhcnNlclxuICBzYXguU0FYU3RyZWFtID0gU0FYU3RyZWFtXG4gIHNheC5jcmVhdGVTdHJlYW0gPSBjcmVhdGVTdHJlYW1cblxuICAvLyBXaGVuIHdlIHBhc3MgdGhlIE1BWF9CVUZGRVJfTEVOR1RIIHBvc2l0aW9uLCBzdGFydCBjaGVja2luZyBmb3IgYnVmZmVyIG92ZXJydW5zLlxuICAvLyBXaGVuIHdlIGNoZWNrLCBzY2hlZHVsZSB0aGUgbmV4dCBjaGVjayBmb3IgTUFYX0JVRkZFUl9MRU5HVEggLSAobWF4KGJ1ZmZlciBsZW5ndGhzKSksXG4gIC8vIHNpbmNlIHRoYXQncyB0aGUgZWFybGllc3QgdGhhdCBhIGJ1ZmZlciBvdmVycnVuIGNvdWxkIG9jY3VyLiAgVGhpcyB3YXksIGNoZWNrcyBhcmVcbiAgLy8gYXMgcmFyZSBhcyByZXF1aXJlZCwgYnV0IGFzIG9mdGVuIGFzIG5lY2Vzc2FyeSB0byBlbnN1cmUgbmV2ZXIgY3Jvc3NpbmcgdGhpcyBib3VuZC5cbiAgLy8gRnVydGhlcm1vcmUsIGJ1ZmZlcnMgYXJlIG9ubHkgdGVzdGVkIGF0IG1vc3Qgb25jZSBwZXIgd3JpdGUoKSwgc28gcGFzc2luZyBhIHZlcnlcbiAgLy8gbGFyZ2Ugc3RyaW5nIGludG8gd3JpdGUoKSBtaWdodCBoYXZlIHVuZGVzaXJhYmxlIGVmZmVjdHMsIGJ1dCB0aGlzIGlzIG1hbmFnZWFibGUgYnlcbiAgLy8gdGhlIGNhbGxlciwgc28gaXQgaXMgYXNzdW1lZCB0byBiZSBzYWZlLiAgVGh1cywgYSBjYWxsIHRvIHdyaXRlKCkgbWF5LCBpbiB0aGUgZXh0cmVtZVxuICAvLyBlZGdlIGNhc2UsIHJlc3VsdCBpbiBjcmVhdGluZyBhdCBtb3N0IG9uZSBjb21wbGV0ZSBjb3B5IG9mIHRoZSBzdHJpbmcgcGFzc2VkIGluLlxuICAvLyBTZXQgdG8gSW5maW5pdHkgdG8gaGF2ZSB1bmxpbWl0ZWQgYnVmZmVycy5cbiAgc2F4Lk1BWF9CVUZGRVJfTEVOR1RIID0gNjQgKiAxMDI0XG5cbiAgdmFyIGJ1ZmZlcnMgPSBbXG4gICAgJ2NvbW1lbnQnLCAnc2dtbERlY2wnLCAndGV4dE5vZGUnLCAndGFnTmFtZScsICdkb2N0eXBlJyxcbiAgICAncHJvY0luc3ROYW1lJywgJ3Byb2NJbnN0Qm9keScsICdlbnRpdHknLCAnYXR0cmliTmFtZScsXG4gICAgJ2F0dHJpYlZhbHVlJywgJ2NkYXRhJywgJ3NjcmlwdCdcbiAgXVxuXG4gIHNheC5FVkVOVFMgPSBbXG4gICAgJ3RleHQnLFxuICAgICdwcm9jZXNzaW5naW5zdHJ1Y3Rpb24nLFxuICAgICdzZ21sZGVjbGFyYXRpb24nLFxuICAgICdkb2N0eXBlJyxcbiAgICAnY29tbWVudCcsXG4gICAgJ29wZW50YWdzdGFydCcsXG4gICAgJ2F0dHJpYnV0ZScsXG4gICAgJ29wZW50YWcnLFxuICAgICdjbG9zZXRhZycsXG4gICAgJ29wZW5jZGF0YScsXG4gICAgJ2NkYXRhJyxcbiAgICAnY2xvc2VjZGF0YScsXG4gICAgJ2Vycm9yJyxcbiAgICAnZW5kJyxcbiAgICAncmVhZHknLFxuICAgICdzY3JpcHQnLFxuICAgICdvcGVubmFtZXNwYWNlJyxcbiAgICAnY2xvc2VuYW1lc3BhY2UnXG4gIF1cblxuICBmdW5jdGlvbiBTQVhQYXJzZXIgKHN0cmljdCwgb3B0KSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNBWFBhcnNlcikpIHtcbiAgICAgIHJldHVybiBuZXcgU0FYUGFyc2VyKHN0cmljdCwgb3B0KVxuICAgIH1cblxuICAgIHZhciBwYXJzZXIgPSB0aGlzXG4gICAgY2xlYXJCdWZmZXJzKHBhcnNlcilcbiAgICBwYXJzZXIucSA9IHBhcnNlci5jID0gJydcbiAgICBwYXJzZXIuYnVmZmVyQ2hlY2tQb3NpdGlvbiA9IHNheC5NQVhfQlVGRkVSX0xFTkdUSFxuICAgIHBhcnNlci5vcHQgPSBvcHQgfHwge31cbiAgICBwYXJzZXIub3B0Lmxvd2VyY2FzZSA9IHBhcnNlci5vcHQubG93ZXJjYXNlIHx8IHBhcnNlci5vcHQubG93ZXJjYXNldGFnc1xuICAgIHBhcnNlci5sb29zZUNhc2UgPSBwYXJzZXIub3B0Lmxvd2VyY2FzZSA/ICd0b0xvd2VyQ2FzZScgOiAndG9VcHBlckNhc2UnXG4gICAgcGFyc2VyLnRhZ3MgPSBbXVxuICAgIHBhcnNlci5jbG9zZWQgPSBwYXJzZXIuY2xvc2VkUm9vdCA9IHBhcnNlci5zYXdSb290ID0gZmFsc2VcbiAgICBwYXJzZXIudGFnID0gcGFyc2VyLmVycm9yID0gbnVsbFxuICAgIHBhcnNlci5zdHJpY3QgPSAhIXN0cmljdFxuICAgIHBhcnNlci5ub3NjcmlwdCA9ICEhKHN0cmljdCB8fCBwYXJzZXIub3B0Lm5vc2NyaXB0KVxuICAgIHBhcnNlci5zdGF0ZSA9IFMuQkVHSU5cbiAgICBwYXJzZXIuc3RyaWN0RW50aXRpZXMgPSBwYXJzZXIub3B0LnN0cmljdEVudGl0aWVzXG4gICAgcGFyc2VyLkVOVElUSUVTID0gcGFyc2VyLnN0cmljdEVudGl0aWVzID8gT2JqZWN0LmNyZWF0ZShzYXguWE1MX0VOVElUSUVTKSA6IE9iamVjdC5jcmVhdGUoc2F4LkVOVElUSUVTKVxuICAgIHBhcnNlci5hdHRyaWJMaXN0ID0gW11cblxuICAgIC8vIG5hbWVzcGFjZXMgZm9ybSBhIHByb3RvdHlwZSBjaGFpbi5cbiAgICAvLyBpdCBhbHdheXMgcG9pbnRzIGF0IHRoZSBjdXJyZW50IHRhZyxcbiAgICAvLyB3aGljaCBwcm90b3MgdG8gaXRzIHBhcmVudCB0YWcuXG4gICAgaWYgKHBhcnNlci5vcHQueG1sbnMpIHtcbiAgICAgIHBhcnNlci5ucyA9IE9iamVjdC5jcmVhdGUocm9vdE5TKVxuICAgIH1cblxuICAgIC8vIGRpc2FsbG93IHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZXMgaWYgbm90IG90aGVyd2lzZSBjb25maWd1cmVkXG4gICAgLy8gYW5kIHN0cmljdCBtb2RlIGlzIHRydWVcbiAgICBpZiAocGFyc2VyLm9wdC51bnF1b3RlZEF0dHJpYnV0ZVZhbHVlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJzZXIub3B0LnVucXVvdGVkQXR0cmlidXRlVmFsdWVzID0gIXN0cmljdDtcbiAgICB9XG5cbiAgICAvLyBtb3N0bHkganVzdCBmb3IgZXJyb3IgcmVwb3J0aW5nXG4gICAgcGFyc2VyLnRyYWNrUG9zaXRpb24gPSBwYXJzZXIub3B0LnBvc2l0aW9uICE9PSBmYWxzZVxuICAgIGlmIChwYXJzZXIudHJhY2tQb3NpdGlvbikge1xuICAgICAgcGFyc2VyLnBvc2l0aW9uID0gcGFyc2VyLmxpbmUgPSBwYXJzZXIuY29sdW1uID0gMFxuICAgIH1cbiAgICBlbWl0KHBhcnNlciwgJ29ucmVhZHknKVxuICB9XG5cbiAgaWYgKCFPYmplY3QuY3JlYXRlKSB7XG4gICAgT2JqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICBmdW5jdGlvbiBGICgpIHt9XG4gICAgICBGLnByb3RvdHlwZSA9IG9cbiAgICAgIHZhciBuZXdmID0gbmV3IEYoKVxuICAgICAgcmV0dXJuIG5ld2ZcbiAgICB9XG4gIH1cblxuICBpZiAoIU9iamVjdC5rZXlzKSB7XG4gICAgT2JqZWN0LmtleXMgPSBmdW5jdGlvbiAobykge1xuICAgICAgdmFyIGEgPSBbXVxuICAgICAgZm9yICh2YXIgaSBpbiBvKSBpZiAoby5oYXNPd25Qcm9wZXJ0eShpKSkgYS5wdXNoKGkpXG4gICAgICByZXR1cm4gYVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrQnVmZmVyTGVuZ3RoIChwYXJzZXIpIHtcbiAgICB2YXIgbWF4QWxsb3dlZCA9IE1hdGgubWF4KHNheC5NQVhfQlVGRkVSX0xFTkdUSCwgMTApXG4gICAgdmFyIG1heEFjdHVhbCA9IDBcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGJ1ZmZlcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgbGVuID0gcGFyc2VyW2J1ZmZlcnNbaV1dLmxlbmd0aFxuICAgICAgaWYgKGxlbiA+IG1heEFsbG93ZWQpIHtcbiAgICAgICAgLy8gVGV4dC9jZGF0YSBub2RlcyBjYW4gZ2V0IGJpZywgYW5kIHNpbmNlIHRoZXkncmUgYnVmZmVyZWQsXG4gICAgICAgIC8vIHdlIGNhbiBnZXQgaGVyZSB1bmRlciBub3JtYWwgY29uZGl0aW9ucy5cbiAgICAgICAgLy8gQXZvaWQgaXNzdWVzIGJ5IGVtaXR0aW5nIHRoZSB0ZXh0IG5vZGUgbm93LFxuICAgICAgICAvLyBzbyBhdCBsZWFzdCBpdCB3b24ndCBnZXQgYW55IGJpZ2dlci5cbiAgICAgICAgc3dpdGNoIChidWZmZXJzW2ldKSB7XG4gICAgICAgICAgY2FzZSAndGV4dE5vZGUnOlxuICAgICAgICAgICAgY2xvc2VUZXh0KHBhcnNlcilcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdjZGF0YSc6XG4gICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmNkYXRhJywgcGFyc2VyLmNkYXRhKVxuICAgICAgICAgICAgcGFyc2VyLmNkYXRhID0gJydcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdzY3JpcHQnOlxuICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25zY3JpcHQnLCBwYXJzZXIuc2NyaXB0KVxuICAgICAgICAgICAgcGFyc2VyLnNjcmlwdCA9ICcnXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGVycm9yKHBhcnNlciwgJ01heCBidWZmZXIgbGVuZ3RoIGV4Y2VlZGVkOiAnICsgYnVmZmVyc1tpXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbWF4QWN0dWFsID0gTWF0aC5tYXgobWF4QWN0dWFsLCBsZW4pXG4gICAgfVxuICAgIC8vIHNjaGVkdWxlIHRoZSBuZXh0IGNoZWNrIGZvciB0aGUgZWFybGllc3QgcG9zc2libGUgYnVmZmVyIG92ZXJydW4uXG4gICAgdmFyIG0gPSBzYXguTUFYX0JVRkZFUl9MRU5HVEggLSBtYXhBY3R1YWxcbiAgICBwYXJzZXIuYnVmZmVyQ2hlY2tQb3NpdGlvbiA9IG0gKyBwYXJzZXIucG9zaXRpb25cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyQnVmZmVycyAocGFyc2VyKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBidWZmZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcGFyc2VyW2J1ZmZlcnNbaV1dID0gJydcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaEJ1ZmZlcnMgKHBhcnNlcikge1xuICAgIGNsb3NlVGV4dChwYXJzZXIpXG4gICAgaWYgKHBhcnNlci5jZGF0YSAhPT0gJycpIHtcbiAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uY2RhdGEnLCBwYXJzZXIuY2RhdGEpXG4gICAgICBwYXJzZXIuY2RhdGEgPSAnJ1xuICAgIH1cbiAgICBpZiAocGFyc2VyLnNjcmlwdCAhPT0gJycpIHtcbiAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uc2NyaXB0JywgcGFyc2VyLnNjcmlwdClcbiAgICAgIHBhcnNlci5zY3JpcHQgPSAnJ1xuICAgIH1cbiAgfVxuXG4gIFNBWFBhcnNlci5wcm90b3R5cGUgPSB7XG4gICAgZW5kOiBmdW5jdGlvbiAoKSB7IGVuZCh0aGlzKSB9LFxuICAgIHdyaXRlOiB3cml0ZSxcbiAgICByZXN1bWU6IGZ1bmN0aW9uICgpIHsgdGhpcy5lcnJvciA9IG51bGw7IHJldHVybiB0aGlzIH0sXG4gICAgY2xvc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMud3JpdGUobnVsbCkgfSxcbiAgICBmbHVzaDogZnVuY3Rpb24gKCkgeyBmbHVzaEJ1ZmZlcnModGhpcykgfVxuICB9XG5cbiAgdmFyIFN0cmVhbVxuICB0cnkge1xuICAgIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpLlN0cmVhbVxuICB9IGNhdGNoIChleCkge1xuICAgIFN0cmVhbSA9IGZ1bmN0aW9uICgpIHt9XG4gIH1cbiAgaWYgKCFTdHJlYW0pIFN0cmVhbSA9IGZ1bmN0aW9uICgpIHt9XG5cbiAgdmFyIHN0cmVhbVdyYXBzID0gc2F4LkVWRU5UUy5maWx0ZXIoZnVuY3Rpb24gKGV2KSB7XG4gICAgcmV0dXJuIGV2ICE9PSAnZXJyb3InICYmIGV2ICE9PSAnZW5kJ1xuICB9KVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVN0cmVhbSAoc3RyaWN0LCBvcHQpIHtcbiAgICByZXR1cm4gbmV3IFNBWFN0cmVhbShzdHJpY3QsIG9wdClcbiAgfVxuXG4gIGZ1bmN0aW9uIFNBWFN0cmVhbSAoc3RyaWN0LCBvcHQpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0FYU3RyZWFtKSkge1xuICAgICAgcmV0dXJuIG5ldyBTQVhTdHJlYW0oc3RyaWN0LCBvcHQpXG4gICAgfVxuXG4gICAgU3RyZWFtLmFwcGx5KHRoaXMpXG5cbiAgICB0aGlzLl9wYXJzZXIgPSBuZXcgU0FYUGFyc2VyKHN0cmljdCwgb3B0KVxuICAgIHRoaXMud3JpdGFibGUgPSB0cnVlXG4gICAgdGhpcy5yZWFkYWJsZSA9IHRydWVcblxuICAgIHZhciBtZSA9IHRoaXNcblxuICAgIHRoaXMuX3BhcnNlci5vbmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG1lLmVtaXQoJ2VuZCcpXG4gICAgfVxuXG4gICAgdGhpcy5fcGFyc2VyLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXIpIHtcbiAgICAgIG1lLmVtaXQoJ2Vycm9yJywgZXIpXG5cbiAgICAgIC8vIGlmIGRpZG4ndCB0aHJvdywgdGhlbiBtZWFucyBlcnJvciB3YXMgaGFuZGxlZC5cbiAgICAgIC8vIGdvIGFoZWFkIGFuZCBjbGVhciBlcnJvciwgc28gd2UgY2FuIHdyaXRlIGFnYWluLlxuICAgICAgbWUuX3BhcnNlci5lcnJvciA9IG51bGxcbiAgICB9XG5cbiAgICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuXG4gICAgc3RyZWFtV3JhcHMuZm9yRWFjaChmdW5jdGlvbiAoZXYpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtZSwgJ29uJyArIGV2LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBtZS5fcGFyc2VyWydvbicgKyBldl1cbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoaCkge1xuICAgICAgICAgIGlmICghaCkge1xuICAgICAgICAgICAgbWUucmVtb3ZlQWxsTGlzdGVuZXJzKGV2KVxuICAgICAgICAgICAgbWUuX3BhcnNlclsnb24nICsgZXZdID0gaFxuICAgICAgICAgICAgcmV0dXJuIGhcbiAgICAgICAgICB9XG4gICAgICAgICAgbWUub24oZXYsIGgpXG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIFNBWFN0cmVhbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN0cmVhbS5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IFNBWFN0cmVhbVxuICAgIH1cbiAgfSlcblxuICBTQVhTdHJlYW0ucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIEJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdHlwZW9mIEJ1ZmZlci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgICBpZiAoIXRoaXMuX2RlY29kZXIpIHtcbiAgICAgICAgdmFyIFNEID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKS5TdHJpbmdEZWNvZGVyXG4gICAgICAgIHRoaXMuX2RlY29kZXIgPSBuZXcgU0QoJ3V0ZjgnKVxuICAgICAgfVxuICAgICAgZGF0YSA9IHRoaXMuX2RlY29kZXIud3JpdGUoZGF0YSlcbiAgICB9XG5cbiAgICB0aGlzLl9wYXJzZXIud3JpdGUoZGF0YS50b1N0cmluZygpKVxuICAgIHRoaXMuZW1pdCgnZGF0YScsIGRhdGEpXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIFNBWFN0cmVhbS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgdGhpcy53cml0ZShjaHVuaylcbiAgICB9XG4gICAgdGhpcy5fcGFyc2VyLmVuZCgpXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIFNBWFN0cmVhbS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGhhbmRsZXIpIHtcbiAgICB2YXIgbWUgPSB0aGlzXG4gICAgaWYgKCFtZS5fcGFyc2VyWydvbicgKyBldl0gJiYgc3RyZWFtV3JhcHMuaW5kZXhPZihldikgIT09IC0xKSB7XG4gICAgICBtZS5fcGFyc2VyWydvbicgKyBldl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IFthcmd1bWVudHNbMF1dIDogQXJyYXkuYXBwbHkobnVsbCwgYXJndW1lbnRzKVxuICAgICAgICBhcmdzLnNwbGljZSgwLCAwLCBldilcbiAgICAgICAgbWUuZW1pdC5hcHBseShtZSwgYXJncylcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKG1lLCBldiwgaGFuZGxlcilcbiAgfVxuXG4gIC8vIHRoaXMgcmVhbGx5IG5lZWRzIHRvIGJlIHJlcGxhY2VkIHdpdGggY2hhcmFjdGVyIGNsYXNzZXMuXG4gIC8vIFhNTCBhbGxvd3MgYWxsIG1hbm5lciBvZiByaWRpY3Vsb3VzIG51bWJlcnMgYW5kIGRpZ2l0cy5cbiAgdmFyIENEQVRBID0gJ1tDREFUQVsnXG4gIHZhciBET0NUWVBFID0gJ0RPQ1RZUEUnXG4gIHZhciBYTUxfTkFNRVNQQUNFID0gJ2h0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZSdcbiAgdmFyIFhNTE5TX05BTUVTUEFDRSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLydcbiAgdmFyIHJvb3ROUyA9IHsgeG1sOiBYTUxfTkFNRVNQQUNFLCB4bWxuczogWE1MTlNfTkFNRVNQQUNFIH1cblxuICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMteG1sLyNOVC1OYW1lU3RhcnRDaGFyXG4gIC8vIFRoaXMgaW1wbGVtZW50YXRpb24gd29ya3Mgb24gc3RyaW5ncywgYSBzaW5nbGUgY2hhcmFjdGVyIGF0IGEgdGltZVxuICAvLyBhcyBzdWNoLCBpdCBjYW5ub3QgZXZlciBzdXBwb3J0IGFzdHJhbC1wbGFuZSBjaGFyYWN0ZXJzICgxMDAwMC1FRkZGRilcbiAgLy8gd2l0aG91dCBhIHNpZ25pZmljYW50IGJyZWFraW5nIGNoYW5nZSB0byBlaXRoZXIgdGhpcyAgcGFyc2VyLCBvciB0aGVcbiAgLy8gSmF2YVNjcmlwdCBsYW5ndWFnZS4gIEltcGxlbWVudGF0aW9uIG9mIGFuIGVtb2ppLWNhcGFibGUgeG1sIHBhcnNlclxuICAvLyBpcyBsZWZ0IGFzIGFuIGV4ZXJjaXNlIGZvciB0aGUgcmVhZGVyLlxuICB2YXIgbmFtZVN0YXJ0ID0gL1s6X0EtWmEtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF0vXG5cbiAgdmFyIG5hbWVCb2R5ID0gL1s6X0EtWmEtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDAuXFxkLV0vXG5cbiAgdmFyIGVudGl0eVN0YXJ0ID0gL1sjOl9BLVphLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdL1xuICB2YXIgZW50aXR5Qm9keSA9IC9bIzpfQS1aYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MC5cXGQtXS9cblxuICBmdW5jdGlvbiBpc1doaXRlc3BhY2UgKGMpIHtcbiAgICByZXR1cm4gYyA9PT0gJyAnIHx8IGMgPT09ICdcXG4nIHx8IGMgPT09ICdcXHInIHx8IGMgPT09ICdcXHQnXG4gIH1cblxuICBmdW5jdGlvbiBpc1F1b3RlIChjKSB7XG4gICAgcmV0dXJuIGMgPT09ICdcIicgfHwgYyA9PT0gJ1xcJydcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQXR0cmliRW5kIChjKSB7XG4gICAgcmV0dXJuIGMgPT09ICc+JyB8fCBpc1doaXRlc3BhY2UoYylcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTWF0Y2ggKHJlZ2V4LCBjKSB7XG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QoYylcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdE1hdGNoIChyZWdleCwgYykge1xuICAgIHJldHVybiAhaXNNYXRjaChyZWdleCwgYylcbiAgfVxuXG4gIHZhciBTID0gMFxuICBzYXguU1RBVEUgPSB7XG4gICAgQkVHSU46IFMrKywgLy8gbGVhZGluZyBieXRlIG9yZGVyIG1hcmsgb3Igd2hpdGVzcGFjZVxuICAgIEJFR0lOX1dISVRFU1BBQ0U6IFMrKywgLy8gbGVhZGluZyB3aGl0ZXNwYWNlXG4gICAgVEVYVDogUysrLCAvLyBnZW5lcmFsIHN0dWZmXG4gICAgVEVYVF9FTlRJVFk6IFMrKywgLy8gJmFtcCBhbmQgc3VjaC5cbiAgICBPUEVOX1dBS0E6IFMrKywgLy8gPFxuICAgIFNHTUxfREVDTDogUysrLCAvLyA8IUJMQVJHXG4gICAgU0dNTF9ERUNMX1FVT1RFRDogUysrLCAvLyA8IUJMQVJHIGZvbyBcImJhclxuICAgIERPQ1RZUEU6IFMrKywgLy8gPCFET0NUWVBFXG4gICAgRE9DVFlQRV9RVU9URUQ6IFMrKywgLy8gPCFET0NUWVBFIFwiLy9ibGFoXG4gICAgRE9DVFlQRV9EVEQ6IFMrKywgLy8gPCFET0NUWVBFIFwiLy9ibGFoXCIgWyAuLi5cbiAgICBET0NUWVBFX0RURF9RVU9URUQ6IFMrKywgLy8gPCFET0NUWVBFIFwiLy9ibGFoXCIgWyBcImZvb1xuICAgIENPTU1FTlRfU1RBUlRJTkc6IFMrKywgLy8gPCEtXG4gICAgQ09NTUVOVDogUysrLCAvLyA8IS0tXG4gICAgQ09NTUVOVF9FTkRJTkc6IFMrKywgLy8gPCEtLSBibGFoIC1cbiAgICBDT01NRU5UX0VOREVEOiBTKyssIC8vIDwhLS0gYmxhaCAtLVxuICAgIENEQVRBOiBTKyssIC8vIDwhW0NEQVRBWyBzb21ldGhpbmdcbiAgICBDREFUQV9FTkRJTkc6IFMrKywgLy8gXVxuICAgIENEQVRBX0VORElOR18yOiBTKyssIC8vIF1dXG4gICAgUFJPQ19JTlNUOiBTKyssIC8vIDw/aGlcbiAgICBQUk9DX0lOU1RfQk9EWTogUysrLCAvLyA8P2hpIHRoZXJlXG4gICAgUFJPQ19JTlNUX0VORElORzogUysrLCAvLyA8P2hpIFwidGhlcmVcIiA/XG4gICAgT1BFTl9UQUc6IFMrKywgLy8gPHN0cm9uZ1xuICAgIE9QRU5fVEFHX1NMQVNIOiBTKyssIC8vIDxzdHJvbmcgL1xuICAgIEFUVFJJQjogUysrLCAvLyA8YVxuICAgIEFUVFJJQl9OQU1FOiBTKyssIC8vIDxhIGZvb1xuICAgIEFUVFJJQl9OQU1FX1NBV19XSElURTogUysrLCAvLyA8YSBmb28gX1xuICAgIEFUVFJJQl9WQUxVRTogUysrLCAvLyA8YSBmb289XG4gICAgQVRUUklCX1ZBTFVFX1FVT1RFRDogUysrLCAvLyA8YSBmb289XCJiYXJcbiAgICBBVFRSSUJfVkFMVUVfQ0xPU0VEOiBTKyssIC8vIDxhIGZvbz1cImJhclwiXG4gICAgQVRUUklCX1ZBTFVFX1VOUVVPVEVEOiBTKyssIC8vIDxhIGZvbz1iYXJcbiAgICBBVFRSSUJfVkFMVUVfRU5USVRZX1E6IFMrKywgLy8gPGZvbyBiYXI9XCImcXVvdDtcIlxuICAgIEFUVFJJQl9WQUxVRV9FTlRJVFlfVTogUysrLCAvLyA8Zm9vIGJhcj0mcXVvdFxuICAgIENMT1NFX1RBRzogUysrLCAvLyA8L2FcbiAgICBDTE9TRV9UQUdfU0FXX1dISVRFOiBTKyssIC8vIDwvYSAgID5cbiAgICBTQ1JJUFQ6IFMrKywgLy8gPHNjcmlwdD4gLi4uXG4gICAgU0NSSVBUX0VORElORzogUysrIC8vIDxzY3JpcHQ+IC4uLiA8XG4gIH1cblxuICBzYXguWE1MX0VOVElUSUVTID0ge1xuICAgICdhbXAnOiAnJicsXG4gICAgJ2d0JzogJz4nLFxuICAgICdsdCc6ICc8JyxcbiAgICAncXVvdCc6ICdcIicsXG4gICAgJ2Fwb3MnOiBcIidcIlxuICB9XG5cbiAgc2F4LkVOVElUSUVTID0ge1xuICAgICdhbXAnOiAnJicsXG4gICAgJ2d0JzogJz4nLFxuICAgICdsdCc6ICc8JyxcbiAgICAncXVvdCc6ICdcIicsXG4gICAgJ2Fwb3MnOiBcIidcIixcbiAgICAnQUVsaWcnOiAxOTgsXG4gICAgJ0FhY3V0ZSc6IDE5MyxcbiAgICAnQWNpcmMnOiAxOTQsXG4gICAgJ0FncmF2ZSc6IDE5MixcbiAgICAnQXJpbmcnOiAxOTcsXG4gICAgJ0F0aWxkZSc6IDE5NSxcbiAgICAnQXVtbCc6IDE5NixcbiAgICAnQ2NlZGlsJzogMTk5LFxuICAgICdFVEgnOiAyMDgsXG4gICAgJ0VhY3V0ZSc6IDIwMSxcbiAgICAnRWNpcmMnOiAyMDIsXG4gICAgJ0VncmF2ZSc6IDIwMCxcbiAgICAnRXVtbCc6IDIwMyxcbiAgICAnSWFjdXRlJzogMjA1LFxuICAgICdJY2lyYyc6IDIwNixcbiAgICAnSWdyYXZlJzogMjA0LFxuICAgICdJdW1sJzogMjA3LFxuICAgICdOdGlsZGUnOiAyMDksXG4gICAgJ09hY3V0ZSc6IDIxMSxcbiAgICAnT2NpcmMnOiAyMTIsXG4gICAgJ09ncmF2ZSc6IDIxMCxcbiAgICAnT3NsYXNoJzogMjE2LFxuICAgICdPdGlsZGUnOiAyMTMsXG4gICAgJ091bWwnOiAyMTQsXG4gICAgJ1RIT1JOJzogMjIyLFxuICAgICdVYWN1dGUnOiAyMTgsXG4gICAgJ1VjaXJjJzogMjE5LFxuICAgICdVZ3JhdmUnOiAyMTcsXG4gICAgJ1V1bWwnOiAyMjAsXG4gICAgJ1lhY3V0ZSc6IDIyMSxcbiAgICAnYWFjdXRlJzogMjI1LFxuICAgICdhY2lyYyc6IDIyNixcbiAgICAnYWVsaWcnOiAyMzAsXG4gICAgJ2FncmF2ZSc6IDIyNCxcbiAgICAnYXJpbmcnOiAyMjksXG4gICAgJ2F0aWxkZSc6IDIyNyxcbiAgICAnYXVtbCc6IDIyOCxcbiAgICAnY2NlZGlsJzogMjMxLFxuICAgICdlYWN1dGUnOiAyMzMsXG4gICAgJ2VjaXJjJzogMjM0LFxuICAgICdlZ3JhdmUnOiAyMzIsXG4gICAgJ2V0aCc6IDI0MCxcbiAgICAnZXVtbCc6IDIzNSxcbiAgICAnaWFjdXRlJzogMjM3LFxuICAgICdpY2lyYyc6IDIzOCxcbiAgICAnaWdyYXZlJzogMjM2LFxuICAgICdpdW1sJzogMjM5LFxuICAgICdudGlsZGUnOiAyNDEsXG4gICAgJ29hY3V0ZSc6IDI0MyxcbiAgICAnb2NpcmMnOiAyNDQsXG4gICAgJ29ncmF2ZSc6IDI0MixcbiAgICAnb3NsYXNoJzogMjQ4LFxuICAgICdvdGlsZGUnOiAyNDUsXG4gICAgJ291bWwnOiAyNDYsXG4gICAgJ3N6bGlnJzogMjIzLFxuICAgICd0aG9ybic6IDI1NCxcbiAgICAndWFjdXRlJzogMjUwLFxuICAgICd1Y2lyYyc6IDI1MSxcbiAgICAndWdyYXZlJzogMjQ5LFxuICAgICd1dW1sJzogMjUyLFxuICAgICd5YWN1dGUnOiAyNTMsXG4gICAgJ3l1bWwnOiAyNTUsXG4gICAgJ2NvcHknOiAxNjksXG4gICAgJ3JlZyc6IDE3NCxcbiAgICAnbmJzcCc6IDE2MCxcbiAgICAnaWV4Y2wnOiAxNjEsXG4gICAgJ2NlbnQnOiAxNjIsXG4gICAgJ3BvdW5kJzogMTYzLFxuICAgICdjdXJyZW4nOiAxNjQsXG4gICAgJ3llbic6IDE2NSxcbiAgICAnYnJ2YmFyJzogMTY2LFxuICAgICdzZWN0JzogMTY3LFxuICAgICd1bWwnOiAxNjgsXG4gICAgJ29yZGYnOiAxNzAsXG4gICAgJ2xhcXVvJzogMTcxLFxuICAgICdub3QnOiAxNzIsXG4gICAgJ3NoeSc6IDE3MyxcbiAgICAnbWFjcic6IDE3NSxcbiAgICAnZGVnJzogMTc2LFxuICAgICdwbHVzbW4nOiAxNzcsXG4gICAgJ3N1cDEnOiAxODUsXG4gICAgJ3N1cDInOiAxNzgsXG4gICAgJ3N1cDMnOiAxNzksXG4gICAgJ2FjdXRlJzogMTgwLFxuICAgICdtaWNybyc6IDE4MSxcbiAgICAncGFyYSc6IDE4MixcbiAgICAnbWlkZG90JzogMTgzLFxuICAgICdjZWRpbCc6IDE4NCxcbiAgICAnb3JkbSc6IDE4NixcbiAgICAncmFxdW8nOiAxODcsXG4gICAgJ2ZyYWMxNCc6IDE4OCxcbiAgICAnZnJhYzEyJzogMTg5LFxuICAgICdmcmFjMzQnOiAxOTAsXG4gICAgJ2lxdWVzdCc6IDE5MSxcbiAgICAndGltZXMnOiAyMTUsXG4gICAgJ2RpdmlkZSc6IDI0NyxcbiAgICAnT0VsaWcnOiAzMzgsXG4gICAgJ29lbGlnJzogMzM5LFxuICAgICdTY2Fyb24nOiAzNTIsXG4gICAgJ3NjYXJvbic6IDM1MyxcbiAgICAnWXVtbCc6IDM3NixcbiAgICAnZm5vZic6IDQwMixcbiAgICAnY2lyYyc6IDcxMCxcbiAgICAndGlsZGUnOiA3MzIsXG4gICAgJ0FscGhhJzogOTEzLFxuICAgICdCZXRhJzogOTE0LFxuICAgICdHYW1tYSc6IDkxNSxcbiAgICAnRGVsdGEnOiA5MTYsXG4gICAgJ0Vwc2lsb24nOiA5MTcsXG4gICAgJ1pldGEnOiA5MTgsXG4gICAgJ0V0YSc6IDkxOSxcbiAgICAnVGhldGEnOiA5MjAsXG4gICAgJ0lvdGEnOiA5MjEsXG4gICAgJ0thcHBhJzogOTIyLFxuICAgICdMYW1iZGEnOiA5MjMsXG4gICAgJ011JzogOTI0LFxuICAgICdOdSc6IDkyNSxcbiAgICAnWGknOiA5MjYsXG4gICAgJ09taWNyb24nOiA5MjcsXG4gICAgJ1BpJzogOTI4LFxuICAgICdSaG8nOiA5MjksXG4gICAgJ1NpZ21hJzogOTMxLFxuICAgICdUYXUnOiA5MzIsXG4gICAgJ1Vwc2lsb24nOiA5MzMsXG4gICAgJ1BoaSc6IDkzNCxcbiAgICAnQ2hpJzogOTM1LFxuICAgICdQc2knOiA5MzYsXG4gICAgJ09tZWdhJzogOTM3LFxuICAgICdhbHBoYSc6IDk0NSxcbiAgICAnYmV0YSc6IDk0NixcbiAgICAnZ2FtbWEnOiA5NDcsXG4gICAgJ2RlbHRhJzogOTQ4LFxuICAgICdlcHNpbG9uJzogOTQ5LFxuICAgICd6ZXRhJzogOTUwLFxuICAgICdldGEnOiA5NTEsXG4gICAgJ3RoZXRhJzogOTUyLFxuICAgICdpb3RhJzogOTUzLFxuICAgICdrYXBwYSc6IDk1NCxcbiAgICAnbGFtYmRhJzogOTU1LFxuICAgICdtdSc6IDk1NixcbiAgICAnbnUnOiA5NTcsXG4gICAgJ3hpJzogOTU4LFxuICAgICdvbWljcm9uJzogOTU5LFxuICAgICdwaSc6IDk2MCxcbiAgICAncmhvJzogOTYxLFxuICAgICdzaWdtYWYnOiA5NjIsXG4gICAgJ3NpZ21hJzogOTYzLFxuICAgICd0YXUnOiA5NjQsXG4gICAgJ3Vwc2lsb24nOiA5NjUsXG4gICAgJ3BoaSc6IDk2NixcbiAgICAnY2hpJzogOTY3LFxuICAgICdwc2knOiA5NjgsXG4gICAgJ29tZWdhJzogOTY5LFxuICAgICd0aGV0YXN5bSc6IDk3NyxcbiAgICAndXBzaWgnOiA5NzgsXG4gICAgJ3Bpdic6IDk4MixcbiAgICAnZW5zcCc6IDgxOTQsXG4gICAgJ2Vtc3AnOiA4MTk1LFxuICAgICd0aGluc3AnOiA4MjAxLFxuICAgICd6d25qJzogODIwNCxcbiAgICAnendqJzogODIwNSxcbiAgICAnbHJtJzogODIwNixcbiAgICAncmxtJzogODIwNyxcbiAgICAnbmRhc2gnOiA4MjExLFxuICAgICdtZGFzaCc6IDgyMTIsXG4gICAgJ2xzcXVvJzogODIxNixcbiAgICAncnNxdW8nOiA4MjE3LFxuICAgICdzYnF1byc6IDgyMTgsXG4gICAgJ2xkcXVvJzogODIyMCxcbiAgICAncmRxdW8nOiA4MjIxLFxuICAgICdiZHF1byc6IDgyMjIsXG4gICAgJ2RhZ2dlcic6IDgyMjQsXG4gICAgJ0RhZ2dlcic6IDgyMjUsXG4gICAgJ2J1bGwnOiA4MjI2LFxuICAgICdoZWxsaXAnOiA4MjMwLFxuICAgICdwZXJtaWwnOiA4MjQwLFxuICAgICdwcmltZSc6IDgyNDIsXG4gICAgJ1ByaW1lJzogODI0MyxcbiAgICAnbHNhcXVvJzogODI0OSxcbiAgICAncnNhcXVvJzogODI1MCxcbiAgICAnb2xpbmUnOiA4MjU0LFxuICAgICdmcmFzbCc6IDgyNjAsXG4gICAgJ2V1cm8nOiA4MzY0LFxuICAgICdpbWFnZSc6IDg0NjUsXG4gICAgJ3dlaWVycCc6IDg0NzIsXG4gICAgJ3JlYWwnOiA4NDc2LFxuICAgICd0cmFkZSc6IDg0ODIsXG4gICAgJ2FsZWZzeW0nOiA4NTAxLFxuICAgICdsYXJyJzogODU5MixcbiAgICAndWFycic6IDg1OTMsXG4gICAgJ3JhcnInOiA4NTk0LFxuICAgICdkYXJyJzogODU5NSxcbiAgICAnaGFycic6IDg1OTYsXG4gICAgJ2NyYXJyJzogODYyOSxcbiAgICAnbEFycic6IDg2NTYsXG4gICAgJ3VBcnInOiA4NjU3LFxuICAgICdyQXJyJzogODY1OCxcbiAgICAnZEFycic6IDg2NTksXG4gICAgJ2hBcnInOiA4NjYwLFxuICAgICdmb3JhbGwnOiA4NzA0LFxuICAgICdwYXJ0JzogODcwNixcbiAgICAnZXhpc3QnOiA4NzA3LFxuICAgICdlbXB0eSc6IDg3MDksXG4gICAgJ25hYmxhJzogODcxMSxcbiAgICAnaXNpbic6IDg3MTIsXG4gICAgJ25vdGluJzogODcxMyxcbiAgICAnbmknOiA4NzE1LFxuICAgICdwcm9kJzogODcxOSxcbiAgICAnc3VtJzogODcyMSxcbiAgICAnbWludXMnOiA4NzIyLFxuICAgICdsb3dhc3QnOiA4NzI3LFxuICAgICdyYWRpYyc6IDg3MzAsXG4gICAgJ3Byb3AnOiA4NzMzLFxuICAgICdpbmZpbic6IDg3MzQsXG4gICAgJ2FuZyc6IDg3MzYsXG4gICAgJ2FuZCc6IDg3NDMsXG4gICAgJ29yJzogODc0NCxcbiAgICAnY2FwJzogODc0NSxcbiAgICAnY3VwJzogODc0NixcbiAgICAnaW50JzogODc0NyxcbiAgICAndGhlcmU0JzogODc1NixcbiAgICAnc2ltJzogODc2NCxcbiAgICAnY29uZyc6IDg3NzMsXG4gICAgJ2FzeW1wJzogODc3NixcbiAgICAnbmUnOiA4ODAwLFxuICAgICdlcXVpdic6IDg4MDEsXG4gICAgJ2xlJzogODgwNCxcbiAgICAnZ2UnOiA4ODA1LFxuICAgICdzdWInOiA4ODM0LFxuICAgICdzdXAnOiA4ODM1LFxuICAgICduc3ViJzogODgzNixcbiAgICAnc3ViZSc6IDg4MzgsXG4gICAgJ3N1cGUnOiA4ODM5LFxuICAgICdvcGx1cyc6IDg4NTMsXG4gICAgJ290aW1lcyc6IDg4NTUsXG4gICAgJ3BlcnAnOiA4ODY5LFxuICAgICdzZG90JzogODkwMSxcbiAgICAnbGNlaWwnOiA4OTY4LFxuICAgICdyY2VpbCc6IDg5NjksXG4gICAgJ2xmbG9vcic6IDg5NzAsXG4gICAgJ3JmbG9vcic6IDg5NzEsXG4gICAgJ2xhbmcnOiA5MDAxLFxuICAgICdyYW5nJzogOTAwMixcbiAgICAnbG96JzogOTY3NCxcbiAgICAnc3BhZGVzJzogOTgyNCxcbiAgICAnY2x1YnMnOiA5ODI3LFxuICAgICdoZWFydHMnOiA5ODI5LFxuICAgICdkaWFtcyc6IDk4MzBcbiAgfVxuXG4gIE9iamVjdC5rZXlzKHNheC5FTlRJVElFUykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGUgPSBzYXguRU5USVRJRVNba2V5XVxuICAgIHZhciBzID0gdHlwZW9mIGUgPT09ICdudW1iZXInID8gU3RyaW5nLmZyb21DaGFyQ29kZShlKSA6IGVcbiAgICBzYXguRU5USVRJRVNba2V5XSA9IHNcbiAgfSlcblxuICBmb3IgKHZhciBzIGluIHNheC5TVEFURSkge1xuICAgIHNheC5TVEFURVtzYXguU1RBVEVbc11dID0gc1xuICB9XG5cbiAgLy8gc2hvcnRoYW5kXG4gIFMgPSBzYXguU1RBVEVcblxuICBmdW5jdGlvbiBlbWl0IChwYXJzZXIsIGV2ZW50LCBkYXRhKSB7XG4gICAgcGFyc2VyW2V2ZW50XSAmJiBwYXJzZXJbZXZlbnRdKGRhdGEpXG4gIH1cblxuICBmdW5jdGlvbiBlbWl0Tm9kZSAocGFyc2VyLCBub2RlVHlwZSwgZGF0YSkge1xuICAgIGlmIChwYXJzZXIudGV4dE5vZGUpIGNsb3NlVGV4dChwYXJzZXIpXG4gICAgZW1pdChwYXJzZXIsIG5vZGVUeXBlLCBkYXRhKVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2VUZXh0IChwYXJzZXIpIHtcbiAgICBwYXJzZXIudGV4dE5vZGUgPSB0ZXh0b3B0cyhwYXJzZXIub3B0LCBwYXJzZXIudGV4dE5vZGUpXG4gICAgaWYgKHBhcnNlci50ZXh0Tm9kZSkgZW1pdChwYXJzZXIsICdvbnRleHQnLCBwYXJzZXIudGV4dE5vZGUpXG4gICAgcGFyc2VyLnRleHROb2RlID0gJydcbiAgfVxuXG4gIGZ1bmN0aW9uIHRleHRvcHRzIChvcHQsIHRleHQpIHtcbiAgICBpZiAob3B0LnRyaW0pIHRleHQgPSB0ZXh0LnRyaW0oKVxuICAgIGlmIChvcHQubm9ybWFsaXplKSB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHMrL2csICcgJylcbiAgICByZXR1cm4gdGV4dFxuICB9XG5cbiAgZnVuY3Rpb24gZXJyb3IgKHBhcnNlciwgZXIpIHtcbiAgICBjbG9zZVRleHQocGFyc2VyKVxuICAgIGlmIChwYXJzZXIudHJhY2tQb3NpdGlvbikge1xuICAgICAgZXIgKz0gJ1xcbkxpbmU6ICcgKyBwYXJzZXIubGluZSArXG4gICAgICAgICdcXG5Db2x1bW46ICcgKyBwYXJzZXIuY29sdW1uICtcbiAgICAgICAgJ1xcbkNoYXI6ICcgKyBwYXJzZXIuY1xuICAgIH1cbiAgICBlciA9IG5ldyBFcnJvcihlcilcbiAgICBwYXJzZXIuZXJyb3IgPSBlclxuICAgIGVtaXQocGFyc2VyLCAnb25lcnJvcicsIGVyKVxuICAgIHJldHVybiBwYXJzZXJcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZCAocGFyc2VyKSB7XG4gICAgaWYgKHBhcnNlci5zYXdSb290ICYmICFwYXJzZXIuY2xvc2VkUm9vdCkgc3RyaWN0RmFpbChwYXJzZXIsICdVbmNsb3NlZCByb290IHRhZycpXG4gICAgaWYgKChwYXJzZXIuc3RhdGUgIT09IFMuQkVHSU4pICYmXG4gICAgICAocGFyc2VyLnN0YXRlICE9PSBTLkJFR0lOX1dISVRFU1BBQ0UpICYmXG4gICAgICAocGFyc2VyLnN0YXRlICE9PSBTLlRFWFQpKSB7XG4gICAgICBlcnJvcihwYXJzZXIsICdVbmV4cGVjdGVkIGVuZCcpXG4gICAgfVxuICAgIGNsb3NlVGV4dChwYXJzZXIpXG4gICAgcGFyc2VyLmMgPSAnJ1xuICAgIHBhcnNlci5jbG9zZWQgPSB0cnVlXG4gICAgZW1pdChwYXJzZXIsICdvbmVuZCcpXG4gICAgU0FYUGFyc2VyLmNhbGwocGFyc2VyLCBwYXJzZXIuc3RyaWN0LCBwYXJzZXIub3B0KVxuICAgIHJldHVybiBwYXJzZXJcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0cmljdEZhaWwgKHBhcnNlciwgbWVzc2FnZSkge1xuICAgIGlmICh0eXBlb2YgcGFyc2VyICE9PSAnb2JqZWN0JyB8fCAhKHBhcnNlciBpbnN0YW5jZW9mIFNBWFBhcnNlcikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIGNhbGwgdG8gc3RyaWN0RmFpbCcpXG4gICAgfVxuICAgIGlmIChwYXJzZXIuc3RyaWN0KSB7XG4gICAgICBlcnJvcihwYXJzZXIsIG1lc3NhZ2UpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbmV3VGFnIChwYXJzZXIpIHtcbiAgICBpZiAoIXBhcnNlci5zdHJpY3QpIHBhcnNlci50YWdOYW1lID0gcGFyc2VyLnRhZ05hbWVbcGFyc2VyLmxvb3NlQ2FzZV0oKVxuICAgIHZhciBwYXJlbnQgPSBwYXJzZXIudGFnc1twYXJzZXIudGFncy5sZW5ndGggLSAxXSB8fCBwYXJzZXJcbiAgICB2YXIgdGFnID0gcGFyc2VyLnRhZyA9IHsgbmFtZTogcGFyc2VyLnRhZ05hbWUsIGF0dHJpYnV0ZXM6IHt9IH1cblxuICAgIC8vIHdpbGwgYmUgb3ZlcnJpZGRlbiBpZiB0YWcgY29udGFpbHMgYW4geG1sbnM9XCJmb29cIiBvciB4bWxuczpmb289XCJiYXJcIlxuICAgIGlmIChwYXJzZXIub3B0LnhtbG5zKSB7XG4gICAgICB0YWcubnMgPSBwYXJlbnQubnNcbiAgICB9XG4gICAgcGFyc2VyLmF0dHJpYkxpc3QubGVuZ3RoID0gMFxuICAgIGVtaXROb2RlKHBhcnNlciwgJ29ub3BlbnRhZ3N0YXJ0JywgdGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gcW5hbWUgKG5hbWUsIGF0dHJpYnV0ZSkge1xuICAgIHZhciBpID0gbmFtZS5pbmRleE9mKCc6JylcbiAgICB2YXIgcXVhbE5hbWUgPSBpIDwgMCA/IFsgJycsIG5hbWUgXSA6IG5hbWUuc3BsaXQoJzonKVxuICAgIHZhciBwcmVmaXggPSBxdWFsTmFtZVswXVxuICAgIHZhciBsb2NhbCA9IHF1YWxOYW1lWzFdXG5cbiAgICAvLyA8eCBcInhtbG5zXCI9XCJodHRwOi8vZm9vXCI+XG4gICAgaWYgKGF0dHJpYnV0ZSAmJiBuYW1lID09PSAneG1sbnMnKSB7XG4gICAgICBwcmVmaXggPSAneG1sbnMnXG4gICAgICBsb2NhbCA9ICcnXG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcHJlZml4OiBwcmVmaXgsIGxvY2FsOiBsb2NhbCB9XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyaWIgKHBhcnNlcikge1xuICAgIGlmICghcGFyc2VyLnN0cmljdCkge1xuICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBwYXJzZXIuYXR0cmliTmFtZVtwYXJzZXIubG9vc2VDYXNlXSgpXG4gICAgfVxuXG4gICAgaWYgKHBhcnNlci5hdHRyaWJMaXN0LmluZGV4T2YocGFyc2VyLmF0dHJpYk5hbWUpICE9PSAtMSB8fFxuICAgICAgcGFyc2VyLnRhZy5hdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KHBhcnNlci5hdHRyaWJOYW1lKSkge1xuICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBwYXJzZXIuYXR0cmliVmFsdWUgPSAnJ1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHBhcnNlci5vcHQueG1sbnMpIHtcbiAgICAgIHZhciBxbiA9IHFuYW1lKHBhcnNlci5hdHRyaWJOYW1lLCB0cnVlKVxuICAgICAgdmFyIHByZWZpeCA9IHFuLnByZWZpeFxuICAgICAgdmFyIGxvY2FsID0gcW4ubG9jYWxcblxuICAgICAgaWYgKHByZWZpeCA9PT0gJ3htbG5zJykge1xuICAgICAgICAvLyBuYW1lc3BhY2UgYmluZGluZyBhdHRyaWJ1dGUuIHB1c2ggdGhlIGJpbmRpbmcgaW50byBzY29wZVxuICAgICAgICBpZiAobG9jYWwgPT09ICd4bWwnICYmIHBhcnNlci5hdHRyaWJWYWx1ZSAhPT0gWE1MX05BTUVTUEFDRSkge1xuICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLFxuICAgICAgICAgICAgJ3htbDogcHJlZml4IG11c3QgYmUgYm91bmQgdG8gJyArIFhNTF9OQU1FU1BBQ0UgKyAnXFxuJyArXG4gICAgICAgICAgICAnQWN0dWFsOiAnICsgcGFyc2VyLmF0dHJpYlZhbHVlKVxuICAgICAgICB9IGVsc2UgaWYgKGxvY2FsID09PSAneG1sbnMnICYmIHBhcnNlci5hdHRyaWJWYWx1ZSAhPT0gWE1MTlNfTkFNRVNQQUNFKSB7XG4gICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsXG4gICAgICAgICAgICAneG1sbnM6IHByZWZpeCBtdXN0IGJlIGJvdW5kIHRvICcgKyBYTUxOU19OQU1FU1BBQ0UgKyAnXFxuJyArXG4gICAgICAgICAgICAnQWN0dWFsOiAnICsgcGFyc2VyLmF0dHJpYlZhbHVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0YWcgPSBwYXJzZXIudGFnXG4gICAgICAgICAgdmFyIHBhcmVudCA9IHBhcnNlci50YWdzW3BhcnNlci50YWdzLmxlbmd0aCAtIDFdIHx8IHBhcnNlclxuICAgICAgICAgIGlmICh0YWcubnMgPT09IHBhcmVudC5ucykge1xuICAgICAgICAgICAgdGFnLm5zID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQubnMpXG4gICAgICAgICAgfVxuICAgICAgICAgIHRhZy5uc1tsb2NhbF0gPSBwYXJzZXIuYXR0cmliVmFsdWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBkZWZlciBvbmF0dHJpYnV0ZSBldmVudHMgdW50aWwgYWxsIGF0dHJpYnV0ZXMgaGF2ZSBiZWVuIHNlZW5cbiAgICAgIC8vIHNvIGFueSBuZXcgYmluZGluZ3MgY2FuIHRha2UgZWZmZWN0LiBwcmVzZXJ2ZSBhdHRyaWJ1dGUgb3JkZXJcbiAgICAgIC8vIHNvIGRlZmVycmVkIGV2ZW50cyBjYW4gYmUgZW1pdHRlZCBpbiBkb2N1bWVudCBvcmRlclxuICAgICAgcGFyc2VyLmF0dHJpYkxpc3QucHVzaChbcGFyc2VyLmF0dHJpYk5hbWUsIHBhcnNlci5hdHRyaWJWYWx1ZV0pXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluIG5vbi14bWxucyBtb2RlLCB3ZSBjYW4gZW1pdCB0aGUgZXZlbnQgcmlnaHQgYXdheVxuICAgICAgcGFyc2VyLnRhZy5hdHRyaWJ1dGVzW3BhcnNlci5hdHRyaWJOYW1lXSA9IHBhcnNlci5hdHRyaWJWYWx1ZVxuICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25hdHRyaWJ1dGUnLCB7XG4gICAgICAgIG5hbWU6IHBhcnNlci5hdHRyaWJOYW1lLFxuICAgICAgICB2YWx1ZTogcGFyc2VyLmF0dHJpYlZhbHVlXG4gICAgICB9KVxuICAgIH1cblxuICAgIHBhcnNlci5hdHRyaWJOYW1lID0gcGFyc2VyLmF0dHJpYlZhbHVlID0gJydcbiAgfVxuXG4gIGZ1bmN0aW9uIG9wZW5UYWcgKHBhcnNlciwgc2VsZkNsb3NpbmcpIHtcbiAgICBpZiAocGFyc2VyLm9wdC54bWxucykge1xuICAgICAgLy8gZW1pdCBuYW1lc3BhY2UgYmluZGluZyBldmVudHNcbiAgICAgIHZhciB0YWcgPSBwYXJzZXIudGFnXG5cbiAgICAgIC8vIGFkZCBuYW1lc3BhY2UgaW5mbyB0byB0YWdcbiAgICAgIHZhciBxbiA9IHFuYW1lKHBhcnNlci50YWdOYW1lKVxuICAgICAgdGFnLnByZWZpeCA9IHFuLnByZWZpeFxuICAgICAgdGFnLmxvY2FsID0gcW4ubG9jYWxcbiAgICAgIHRhZy51cmkgPSB0YWcubnNbcW4ucHJlZml4XSB8fCAnJ1xuXG4gICAgICBpZiAodGFnLnByZWZpeCAmJiAhdGFnLnVyaSkge1xuICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ1VuYm91bmQgbmFtZXNwYWNlIHByZWZpeDogJyArXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkocGFyc2VyLnRhZ05hbWUpKVxuICAgICAgICB0YWcudXJpID0gcW4ucHJlZml4XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBwYXJzZXIudGFnc1twYXJzZXIudGFncy5sZW5ndGggLSAxXSB8fCBwYXJzZXJcbiAgICAgIGlmICh0YWcubnMgJiYgcGFyZW50Lm5zICE9PSB0YWcubnMpIHtcbiAgICAgICAgT2JqZWN0LmtleXModGFnLm5zKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25vcGVubmFtZXNwYWNlJywge1xuICAgICAgICAgICAgcHJlZml4OiBwLFxuICAgICAgICAgICAgdXJpOiB0YWcubnNbcF1cbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICAvLyBoYW5kbGUgZGVmZXJyZWQgb25hdHRyaWJ1dGUgZXZlbnRzXG4gICAgICAvLyBOb3RlOiBkbyBub3QgYXBwbHkgZGVmYXVsdCBucyB0byBhdHRyaWJ1dGVzOlxuICAgICAgLy8gICBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMteG1sLW5hbWVzLyNkZWZhdWx0aW5nXG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgbnYgPSBwYXJzZXIuYXR0cmliTGlzdFtpXVxuICAgICAgICB2YXIgbmFtZSA9IG52WzBdXG4gICAgICAgIHZhciB2YWx1ZSA9IG52WzFdXG4gICAgICAgIHZhciBxdWFsTmFtZSA9IHFuYW1lKG5hbWUsIHRydWUpXG4gICAgICAgIHZhciBwcmVmaXggPSBxdWFsTmFtZS5wcmVmaXhcbiAgICAgICAgdmFyIGxvY2FsID0gcXVhbE5hbWUubG9jYWxcbiAgICAgICAgdmFyIHVyaSA9IHByZWZpeCA9PT0gJycgPyAnJyA6ICh0YWcubnNbcHJlZml4XSB8fCAnJylcbiAgICAgICAgdmFyIGEgPSB7XG4gICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgcHJlZml4OiBwcmVmaXgsXG4gICAgICAgICAgbG9jYWw6IGxvY2FsLFxuICAgICAgICAgIHVyaTogdXJpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB0aGVyZSdzIGFueSBhdHRyaWJ1dGVzIHdpdGggYW4gdW5kZWZpbmVkIG5hbWVzcGFjZSxcbiAgICAgICAgLy8gdGhlbiBmYWlsIG9uIHRoZW0gbm93LlxuICAgICAgICBpZiAocHJlZml4ICYmIHByZWZpeCAhPT0gJ3htbG5zJyAmJiAhdXJpKSB7XG4gICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdVbmJvdW5kIG5hbWVzcGFjZSBwcmVmaXg6ICcgK1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkocHJlZml4KSlcbiAgICAgICAgICBhLnVyaSA9IHByZWZpeFxuICAgICAgICB9XG4gICAgICAgIHBhcnNlci50YWcuYXR0cmlidXRlc1tuYW1lXSA9IGFcbiAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25hdHRyaWJ1dGUnLCBhKVxuICAgICAgfVxuICAgICAgcGFyc2VyLmF0dHJpYkxpc3QubGVuZ3RoID0gMFxuICAgIH1cblxuICAgIHBhcnNlci50YWcuaXNTZWxmQ2xvc2luZyA9ICEhc2VsZkNsb3NpbmdcblxuICAgIC8vIHByb2Nlc3MgdGhlIHRhZ1xuICAgIHBhcnNlci5zYXdSb290ID0gdHJ1ZVxuICAgIHBhcnNlci50YWdzLnB1c2gocGFyc2VyLnRhZylcbiAgICBlbWl0Tm9kZShwYXJzZXIsICdvbm9wZW50YWcnLCBwYXJzZXIudGFnKVxuICAgIGlmICghc2VsZkNsb3NpbmcpIHtcbiAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgPHNjcmlwdD4gaW4gbm9uLXN0cmljdCBtb2RlLlxuICAgICAgaWYgKCFwYXJzZXIubm9zY3JpcHQgJiYgcGFyc2VyLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NjcmlwdCcpIHtcbiAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgfVxuICAgICAgcGFyc2VyLnRhZyA9IG51bGxcbiAgICAgIHBhcnNlci50YWdOYW1lID0gJydcbiAgICB9XG4gICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBwYXJzZXIuYXR0cmliVmFsdWUgPSAnJ1xuICAgIHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aCA9IDBcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlVGFnIChwYXJzZXIpIHtcbiAgICBpZiAoIXBhcnNlci50YWdOYW1lKSB7XG4gICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ1dlaXJkIGVtcHR5IGNsb3NlIHRhZy4nKVxuICAgICAgcGFyc2VyLnRleHROb2RlICs9ICc8Lz4nXG4gICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChwYXJzZXIuc2NyaXB0KSB7XG4gICAgICBpZiAocGFyc2VyLnRhZ05hbWUgIT09ICdzY3JpcHQnKSB7XG4gICAgICAgIHBhcnNlci5zY3JpcHQgKz0gJzwvJyArIHBhcnNlci50YWdOYW1lICsgJz4nXG4gICAgICAgIHBhcnNlci50YWdOYW1lID0gJydcbiAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFRcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbnNjcmlwdCcsIHBhcnNlci5zY3JpcHQpXG4gICAgICBwYXJzZXIuc2NyaXB0ID0gJydcbiAgICB9XG5cbiAgICAvLyBmaXJzdCBtYWtlIHN1cmUgdGhhdCB0aGUgY2xvc2luZyB0YWcgYWN0dWFsbHkgZXhpc3RzLlxuICAgIC8vIDxhPjxiPjwvYz48L2I+PC9hPiB3aWxsIGNsb3NlIGV2ZXJ5dGhpbmcsIG90aGVyd2lzZS5cbiAgICB2YXIgdCA9IHBhcnNlci50YWdzLmxlbmd0aFxuICAgIHZhciB0YWdOYW1lID0gcGFyc2VyLnRhZ05hbWVcbiAgICBpZiAoIXBhcnNlci5zdHJpY3QpIHtcbiAgICAgIHRhZ05hbWUgPSB0YWdOYW1lW3BhcnNlci5sb29zZUNhc2VdKClcbiAgICB9XG4gICAgdmFyIGNsb3NlVG8gPSB0YWdOYW1lXG4gICAgd2hpbGUgKHQtLSkge1xuICAgICAgdmFyIGNsb3NlID0gcGFyc2VyLnRhZ3NbdF1cbiAgICAgIGlmIChjbG9zZS5uYW1lICE9PSBjbG9zZVRvKSB7XG4gICAgICAgIC8vIGZhaWwgdGhlIGZpcnN0IHRpbWUgaW4gc3RyaWN0IG1vZGVcbiAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdVbmV4cGVjdGVkIGNsb3NlIHRhZycpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRpZG4ndCBmaW5kIGl0LiAgd2UgYWxyZWFkeSBmYWlsZWQgZm9yIHN0cmljdCwgc28ganVzdCBhYm9ydC5cbiAgICBpZiAodCA8IDApIHtcbiAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnVW5tYXRjaGVkIGNsb3NpbmcgdGFnOiAnICsgcGFyc2VyLnRhZ05hbWUpXG4gICAgICBwYXJzZXIudGV4dE5vZGUgKz0gJzwvJyArIHBhcnNlci50YWdOYW1lICsgJz4nXG4gICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBwYXJzZXIudGFnTmFtZSA9IHRhZ05hbWVcbiAgICB2YXIgcyA9IHBhcnNlci50YWdzLmxlbmd0aFxuICAgIHdoaWxlIChzLS0gPiB0KSB7XG4gICAgICB2YXIgdGFnID0gcGFyc2VyLnRhZyA9IHBhcnNlci50YWdzLnBvcCgpXG4gICAgICBwYXJzZXIudGFnTmFtZSA9IHBhcnNlci50YWcubmFtZVxuICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25jbG9zZXRhZycsIHBhcnNlci50YWdOYW1lKVxuXG4gICAgICB2YXIgeCA9IHt9XG4gICAgICBmb3IgKHZhciBpIGluIHRhZy5ucykge1xuICAgICAgICB4W2ldID0gdGFnLm5zW2ldXG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBwYXJzZXIudGFnc1twYXJzZXIudGFncy5sZW5ndGggLSAxXSB8fCBwYXJzZXJcbiAgICAgIGlmIChwYXJzZXIub3B0LnhtbG5zICYmIHRhZy5ucyAhPT0gcGFyZW50Lm5zKSB7XG4gICAgICAgIC8vIHJlbW92ZSBuYW1lc3BhY2UgYmluZGluZ3MgaW50cm9kdWNlZCBieSB0YWdcbiAgICAgICAgT2JqZWN0LmtleXModGFnLm5zKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgdmFyIG4gPSB0YWcubnNbcF1cbiAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmNsb3NlbmFtZXNwYWNlJywgeyBwcmVmaXg6IHAsIHVyaTogbiB9KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodCA9PT0gMCkgcGFyc2VyLmNsb3NlZFJvb3QgPSB0cnVlXG4gICAgcGFyc2VyLnRhZ05hbWUgPSBwYXJzZXIuYXR0cmliVmFsdWUgPSBwYXJzZXIuYXR0cmliTmFtZSA9ICcnXG4gICAgcGFyc2VyLmF0dHJpYkxpc3QubGVuZ3RoID0gMFxuICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VFbnRpdHkgKHBhcnNlcikge1xuICAgIHZhciBlbnRpdHkgPSBwYXJzZXIuZW50aXR5XG4gICAgdmFyIGVudGl0eUxDID0gZW50aXR5LnRvTG93ZXJDYXNlKClcbiAgICB2YXIgbnVtXG4gICAgdmFyIG51bVN0ciA9ICcnXG5cbiAgICBpZiAocGFyc2VyLkVOVElUSUVTW2VudGl0eV0pIHtcbiAgICAgIHJldHVybiBwYXJzZXIuRU5USVRJRVNbZW50aXR5XVxuICAgIH1cbiAgICBpZiAocGFyc2VyLkVOVElUSUVTW2VudGl0eUxDXSkge1xuICAgICAgcmV0dXJuIHBhcnNlci5FTlRJVElFU1tlbnRpdHlMQ11cbiAgICB9XG4gICAgZW50aXR5ID0gZW50aXR5TENcbiAgICBpZiAoZW50aXR5LmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICBpZiAoZW50aXR5LmNoYXJBdCgxKSA9PT0gJ3gnKSB7XG4gICAgICAgIGVudGl0eSA9IGVudGl0eS5zbGljZSgyKVxuICAgICAgICBudW0gPSBwYXJzZUludChlbnRpdHksIDE2KVxuICAgICAgICBudW1TdHIgPSBudW0udG9TdHJpbmcoMTYpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbnRpdHkgPSBlbnRpdHkuc2xpY2UoMSlcbiAgICAgICAgbnVtID0gcGFyc2VJbnQoZW50aXR5LCAxMClcbiAgICAgICAgbnVtU3RyID0gbnVtLnRvU3RyaW5nKDEwKVxuICAgICAgfVxuICAgIH1cbiAgICBlbnRpdHkgPSBlbnRpdHkucmVwbGFjZSgvXjArLywgJycpXG4gICAgaWYgKGlzTmFOKG51bSkgfHwgbnVtU3RyLnRvTG93ZXJDYXNlKCkgIT09IGVudGl0eSkge1xuICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdJbnZhbGlkIGNoYXJhY3RlciBlbnRpdHknKVxuICAgICAgcmV0dXJuICcmJyArIHBhcnNlci5lbnRpdHkgKyAnOydcbiAgICB9XG5cbiAgICByZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQobnVtKVxuICB9XG5cbiAgZnVuY3Rpb24gYmVnaW5XaGl0ZVNwYWNlIChwYXJzZXIsIGMpIHtcbiAgICBpZiAoYyA9PT0gJzwnKSB7XG4gICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fV0FLQVxuICAgICAgcGFyc2VyLnN0YXJ0VGFnUG9zaXRpb24gPSBwYXJzZXIucG9zaXRpb25cbiAgICB9IGVsc2UgaWYgKCFpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgIC8vIGhhdmUgdG8gcHJvY2VzcyB0aGlzIGFzIGEgdGV4dCBub2RlLlxuICAgICAgLy8gd2VpcmQsIGJ1dCBoYXBwZW5zLlxuICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdOb24td2hpdGVzcGFjZSBiZWZvcmUgZmlyc3QgdGFnLicpXG4gICAgICBwYXJzZXIudGV4dE5vZGUgPSBjXG4gICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGFyQXQgKGNodW5rLCBpKSB7XG4gICAgdmFyIHJlc3VsdCA9ICcnXG4gICAgaWYgKGkgPCBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdCA9IGNodW5rLmNoYXJBdChpKVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBmdW5jdGlvbiB3cml0ZSAoY2h1bmspIHtcbiAgICB2YXIgcGFyc2VyID0gdGhpc1xuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aHJvdyB0aGlzLmVycm9yXG4gICAgfVxuICAgIGlmIChwYXJzZXIuY2xvc2VkKSB7XG4gICAgICByZXR1cm4gZXJyb3IocGFyc2VyLFxuICAgICAgICAnQ2Fubm90IHdyaXRlIGFmdGVyIGNsb3NlLiBBc3NpZ24gYW4gb25yZWFkeSBoYW5kbGVyLicpXG4gICAgfVxuICAgIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGVuZChwYXJzZXIpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdvYmplY3QnKSB7XG4gICAgICBjaHVuayA9IGNodW5rLnRvU3RyaW5nKClcbiAgICB9XG4gICAgdmFyIGkgPSAwXG4gICAgdmFyIGMgPSAnJ1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjID0gY2hhckF0KGNodW5rLCBpKyspXG4gICAgICBwYXJzZXIuYyA9IGNcblxuICAgICAgaWYgKCFjKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJzZXIudHJhY2tQb3NpdGlvbikge1xuICAgICAgICBwYXJzZXIucG9zaXRpb24rK1xuICAgICAgICBpZiAoYyA9PT0gJ1xcbicpIHtcbiAgICAgICAgICBwYXJzZXIubGluZSsrXG4gICAgICAgICAgcGFyc2VyLmNvbHVtbiA9IDBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJzZXIuY29sdW1uKytcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHBhcnNlci5zdGF0ZSkge1xuICAgICAgICBjYXNlIFMuQkVHSU46XG4gICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5CRUdJTl9XSElURVNQQUNFXG4gICAgICAgICAgaWYgKGMgPT09ICdcXHVGRUZGJykge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgICAgYmVnaW5XaGl0ZVNwYWNlKHBhcnNlciwgYylcbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5CRUdJTl9XSElURVNQQUNFOlxuICAgICAgICAgIGJlZ2luV2hpdGVTcGFjZShwYXJzZXIsIGMpXG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuVEVYVDpcbiAgICAgICAgICBpZiAocGFyc2VyLnNhd1Jvb3QgJiYgIXBhcnNlci5jbG9zZWRSb290KSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRpID0gaSAtIDFcbiAgICAgICAgICAgIHdoaWxlIChjICYmIGMgIT09ICc8JyAmJiBjICE9PSAnJicpIHtcbiAgICAgICAgICAgICAgYyA9IGNoYXJBdChjaHVuaywgaSsrKVxuICAgICAgICAgICAgICBpZiAoYyAmJiBwYXJzZXIudHJhY2tQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHBhcnNlci5wb3NpdGlvbisrXG4gICAgICAgICAgICAgICAgaWYgKGMgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICBwYXJzZXIubGluZSsrXG4gICAgICAgICAgICAgICAgICBwYXJzZXIuY29sdW1uID0gMFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwYXJzZXIuY29sdW1uKytcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnNlci50ZXh0Tm9kZSArPSBjaHVuay5zdWJzdHJpbmcoc3RhcnRpLCBpIC0gMSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGMgPT09ICc8JyAmJiAhKHBhcnNlci5zYXdSb290ICYmIHBhcnNlci5jbG9zZWRSb290ICYmICFwYXJzZXIuc3RyaWN0KSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1dBS0FcbiAgICAgICAgICAgIHBhcnNlci5zdGFydFRhZ1Bvc2l0aW9uID0gcGFyc2VyLnBvc2l0aW9uXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaXNXaGl0ZXNwYWNlKGMpICYmICghcGFyc2VyLnNhd1Jvb3QgfHwgcGFyc2VyLmNsb3NlZFJvb3QpKSB7XG4gICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnVGV4dCBkYXRhIG91dHNpZGUgb2Ygcm9vdCBub2RlLicpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA9PT0gJyYnKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVF9FTlRJVFlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlci50ZXh0Tm9kZSArPSBjXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLlNDUklQVDpcbiAgICAgICAgICAvLyBvbmx5IG5vbi1zdHJpY3RcbiAgICAgICAgICBpZiAoYyA9PT0gJzwnKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlNDUklQVF9FTkRJTkdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLnNjcmlwdCArPSBjXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLlNDUklQVF9FTkRJTkc6XG4gICAgICAgICAgaWYgKGMgPT09ICcvJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DTE9TRV9UQUdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLnNjcmlwdCArPSAnPCcgKyBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlNDUklQVFxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5PUEVOX1dBS0E6XG4gICAgICAgICAgLy8gZWl0aGVyIGEgLywgPywgISwgb3IgdGV4dCBpcyBjb21pbmcgbmV4dC5cbiAgICAgICAgICBpZiAoYyA9PT0gJyEnKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlNHTUxfREVDTFxuICAgICAgICAgICAgcGFyc2VyLnNnbWxEZWNsID0gJydcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgLy8gd2FpdCBmb3IgaXQuLi5cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzTWF0Y2gobmFtZVN0YXJ0LCBjKSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1RBR1xuICAgICAgICAgICAgcGFyc2VyLnRhZ05hbWUgPSBjXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnLycpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0xPU0VfVEFHXG4gICAgICAgICAgICBwYXJzZXIudGFnTmFtZSA9ICcnXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnPycpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuUFJPQ19JTlNUXG4gICAgICAgICAgICBwYXJzZXIucHJvY0luc3ROYW1lID0gcGFyc2VyLnByb2NJbnN0Qm9keSA9ICcnXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnVW5lbmNvZGVkIDwnKVxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgd2FzIHNvbWUgd2hpdGVzcGFjZSwgdGhlbiBhZGQgdGhhdCBpbi5cbiAgICAgICAgICAgIGlmIChwYXJzZXIuc3RhcnRUYWdQb3NpdGlvbiArIDEgPCBwYXJzZXIucG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgdmFyIHBhZCA9IHBhcnNlci5wb3NpdGlvbiAtIHBhcnNlci5zdGFydFRhZ1Bvc2l0aW9uXG4gICAgICAgICAgICAgIGMgPSBuZXcgQXJyYXkocGFkKS5qb2luKCcgJykgKyBjXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJzZXIudGV4dE5vZGUgKz0gJzwnICsgY1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLlNHTUxfREVDTDpcbiAgICAgICAgICBpZiAocGFyc2VyLnNnbWxEZWNsICsgYyA9PT0gJy0tJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DT01NRU5UXG4gICAgICAgICAgICBwYXJzZXIuY29tbWVudCA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgPSAnJ1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHBhcnNlci5kb2N0eXBlICYmIHBhcnNlci5kb2N0eXBlICE9PSB0cnVlICYmIHBhcnNlci5zZ21sRGVjbCkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFX0RURFxuICAgICAgICAgICAgcGFyc2VyLmRvY3R5cGUgKz0gJzwhJyArIHBhcnNlci5zZ21sRGVjbCArIGNcbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCA9ICcnXG4gICAgICAgICAgfSBlbHNlIGlmICgocGFyc2VyLnNnbWxEZWNsICsgYykudG9VcHBlckNhc2UoKSA9PT0gQ0RBVEEpIHtcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29ub3BlbmNkYXRhJylcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0RBVEFcbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuY2RhdGEgPSAnJ1xuICAgICAgICAgIH0gZWxzZSBpZiAoKHBhcnNlci5zZ21sRGVjbCArIGMpLnRvVXBwZXJDYXNlKCkgPT09IERPQ1RZUEUpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRVxuICAgICAgICAgICAgaWYgKHBhcnNlci5kb2N0eXBlIHx8IHBhcnNlci5zYXdSb290KSB7XG4gICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLFxuICAgICAgICAgICAgICAgICdJbmFwcHJvcHJpYXRlbHkgbG9jYXRlZCBkb2N0eXBlIGRlY2xhcmF0aW9uJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnNlci5kb2N0eXBlID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCA9ICcnXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uc2dtbGRlY2xhcmF0aW9uJywgcGFyc2VyLnNnbWxEZWNsKVxuICAgICAgICAgICAgcGFyc2VyLnNnbWxEZWNsID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNRdW90ZShjKSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TR01MX0RFQ0xfUVVPVEVEXG4gICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgKz0gY1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgKz0gY1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5TR01MX0RFQ0xfUVVPVEVEOlxuICAgICAgICAgIGlmIChjID09PSBwYXJzZXIucSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TR01MX0RFQ0xcbiAgICAgICAgICAgIHBhcnNlci5xID0gJydcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyc2VyLnNnbWxEZWNsICs9IGNcbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5ET0NUWVBFOlxuICAgICAgICAgIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25kb2N0eXBlJywgcGFyc2VyLmRvY3R5cGUpXG4gICAgICAgICAgICBwYXJzZXIuZG9jdHlwZSA9IHRydWUgLy8ganVzdCByZW1lbWJlciB0aGF0IHdlIHNhdyBpdC5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLmRvY3R5cGUgKz0gY1xuICAgICAgICAgICAgaWYgKGMgPT09ICdbJykge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkRPQ1RZUEVfRFREXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUXVvdGUoYykpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFX1FVT1RFRFxuICAgICAgICAgICAgICBwYXJzZXIucSA9IGNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuRE9DVFlQRV9RVU9URUQ6XG4gICAgICAgICAgcGFyc2VyLmRvY3R5cGUgKz0gY1xuICAgICAgICAgIGlmIChjID09PSBwYXJzZXIucSkge1xuICAgICAgICAgICAgcGFyc2VyLnEgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkRPQ1RZUEVfRFREOlxuICAgICAgICAgIGlmIChjID09PSAnXScpIHtcbiAgICAgICAgICAgIHBhcnNlci5kb2N0eXBlICs9IGNcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRVxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJzwnKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fV0FLQVxuICAgICAgICAgICAgcGFyc2VyLnN0YXJ0VGFnUG9zaXRpb24gPSBwYXJzZXIucG9zaXRpb25cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzUXVvdGUoYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5kb2N0eXBlICs9IGNcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRV9EVERfUVVPVEVEXG4gICAgICAgICAgICBwYXJzZXIucSA9IGNcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLmRvY3R5cGUgKz0gY1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5ET0NUWVBFX0RURF9RVU9URUQ6XG4gICAgICAgICAgcGFyc2VyLmRvY3R5cGUgKz0gY1xuICAgICAgICAgIGlmIChjID09PSBwYXJzZXIucSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFX0RURFxuICAgICAgICAgICAgcGFyc2VyLnEgPSAnJ1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DT01NRU5UOlxuICAgICAgICAgIGlmIChjID09PSAnLScpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ09NTUVOVF9FTkRJTkdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLmNvbW1lbnQgKz0gY1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DT01NRU5UX0VORElORzpcbiAgICAgICAgICBpZiAoYyA9PT0gJy0nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNPTU1FTlRfRU5ERURcbiAgICAgICAgICAgIHBhcnNlci5jb21tZW50ID0gdGV4dG9wdHMocGFyc2VyLm9wdCwgcGFyc2VyLmNvbW1lbnQpXG4gICAgICAgICAgICBpZiAocGFyc2VyLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25jb21tZW50JywgcGFyc2VyLmNvbW1lbnQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJzZXIuY29tbWVudCA9ICcnXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5jb21tZW50ICs9ICctJyArIGNcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ09NTUVOVFxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DT01NRU5UX0VOREVEOlxuICAgICAgICAgIGlmIChjICE9PSAnPicpIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnTWFsZm9ybWVkIGNvbW1lbnQnKVxuICAgICAgICAgICAgLy8gYWxsb3cgPCEtLSBibGFoIC0tIGJsb28gLS0+IGluIG5vbi1zdHJpY3QgbW9kZSxcbiAgICAgICAgICAgIC8vIHdoaWNoIGlzIGEgY29tbWVudCBvZiBcIiBibGFoIC0tIGJsb28gXCJcbiAgICAgICAgICAgIHBhcnNlci5jb21tZW50ICs9ICctLScgKyBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNPTU1FTlRcbiAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlci5kb2N0eXBlICYmIHBhcnNlci5kb2N0eXBlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkRPQ1RZUEVfRFREXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DREFUQTpcbiAgICAgICAgICBpZiAoYyA9PT0gJ10nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNEQVRBX0VORElOR1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuY2RhdGEgKz0gY1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DREFUQV9FTkRJTkc6XG4gICAgICAgICAgaWYgKGMgPT09ICddJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DREFUQV9FTkRJTkdfMlxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuY2RhdGEgKz0gJ10nICsgY1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DREFUQVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DREFUQV9FTkRJTkdfMjpcbiAgICAgICAgICBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBpZiAocGFyc2VyLmNkYXRhKSB7XG4gICAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uY2RhdGEnLCBwYXJzZXIuY2RhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmNsb3NlY2RhdGEnKVxuICAgICAgICAgICAgcGFyc2VyLmNkYXRhID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJ10nKSB7XG4gICAgICAgICAgICBwYXJzZXIuY2RhdGEgKz0gJ10nXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5jZGF0YSArPSAnXV0nICsgY1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DREFUQVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5QUk9DX0lOU1Q6XG4gICAgICAgICAgaWYgKGMgPT09ICc/Jykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5QUk9DX0lOU1RfRU5ESU5HXG4gICAgICAgICAgfSBlbHNlIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuUFJPQ19JTlNUX0JPRFlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLnByb2NJbnN0TmFtZSArPSBjXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLlBST0NfSU5TVF9CT0RZOlxuICAgICAgICAgIGlmICghcGFyc2VyLnByb2NJbnN0Qm9keSAmJiBpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnPycpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuUFJPQ19JTlNUX0VORElOR1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIucHJvY0luc3RCb2R5ICs9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuUFJPQ19JTlNUX0VORElORzpcbiAgICAgICAgICBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbnByb2Nlc3NpbmdpbnN0cnVjdGlvbicsIHtcbiAgICAgICAgICAgICAgbmFtZTogcGFyc2VyLnByb2NJbnN0TmFtZSxcbiAgICAgICAgICAgICAgYm9keTogcGFyc2VyLnByb2NJbnN0Qm9keVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHBhcnNlci5wcm9jSW5zdE5hbWUgPSBwYXJzZXIucHJvY0luc3RCb2R5ID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIucHJvY0luc3RCb2R5ICs9ICc/JyArIGNcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuUFJPQ19JTlNUX0JPRFlcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuT1BFTl9UQUc6XG4gICAgICAgICAgaWYgKGlzTWF0Y2gobmFtZUJvZHksIGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIudGFnTmFtZSArPSBjXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1RhZyhwYXJzZXIpXG4gICAgICAgICAgICBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnLycpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1RBR19TTEFTSFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCFpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgY2hhcmFjdGVyIGluIHRhZyBuYW1lJylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5PUEVOX1RBR19TTEFTSDpcbiAgICAgICAgICBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBvcGVuVGFnKHBhcnNlciwgdHJ1ZSlcbiAgICAgICAgICAgIGNsb3NlVGFnKHBhcnNlcilcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdGb3J3YXJkLXNsYXNoIGluIG9wZW5pbmcgdGFnIG5vdCBmb2xsb3dlZCBieSA+JylcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkFUVFJJQjpcbiAgICAgICAgICAvLyBoYXZlbid0IHJlYWQgdGhlIGF0dHJpYnV0ZSBuYW1lIHlldC5cbiAgICAgICAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBvcGVuVGFnKHBhcnNlcilcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICcvJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1RBR19TTEFTSFxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChuYW1lU3RhcnQsIGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIuYXR0cmliTmFtZSA9IGNcbiAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9OQU1FXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnSW52YWxpZCBhdHRyaWJ1dGUgbmFtZScpXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkFUVFJJQl9OQU1FOlxuICAgICAgICAgIGlmIChjID09PSAnPScpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX1ZBTFVFXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnQXR0cmlidXRlIHdpdGhvdXQgdmFsdWUnKVxuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlID0gcGFyc2VyLmF0dHJpYk5hbWVcbiAgICAgICAgICAgIGF0dHJpYihwYXJzZXIpXG4gICAgICAgICAgICBvcGVuVGFnKHBhcnNlcilcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfTkFNRV9TQVdfV0hJVEVcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzTWF0Y2gobmFtZUJvZHksIGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIuYXR0cmliTmFtZSArPSBjXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnSW52YWxpZCBhdHRyaWJ1dGUgbmFtZScpXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkFUVFJJQl9OQU1FX1NBV19XSElURTpcbiAgICAgICAgICBpZiAoYyA9PT0gJz0nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9WQUxVRVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0F0dHJpYnV0ZSB3aXRob3V0IHZhbHVlJylcbiAgICAgICAgICAgIHBhcnNlci50YWcuYXR0cmlidXRlc1twYXJzZXIuYXR0cmliTmFtZV0gPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlID0gJydcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uYXR0cmlidXRlJywge1xuICAgICAgICAgICAgICBuYW1lOiBwYXJzZXIuYXR0cmliTmFtZSxcbiAgICAgICAgICAgICAgdmFsdWU6ICcnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSAnJ1xuICAgICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgICBvcGVuVGFnKHBhcnNlcilcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChuYW1lU3RhcnQsIGMpKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gY1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9OQU1FXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgYXR0cmlidXRlIG5hbWUnKVxuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUU6XG4gICAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzUXVvdGUoYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5xID0gY1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVfUVVPVEVEXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghcGFyc2VyLm9wdC51bnF1b3RlZEF0dHJpYnV0ZVZhbHVlcykge1xuICAgICAgICAgICAgICBlcnJvcihwYXJzZXIsICdVbnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVfVU5RVU9URURcbiAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSA9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX1FVT1RFRDpcbiAgICAgICAgICBpZiAoYyAhPT0gcGFyc2VyLnEpIHtcbiAgICAgICAgICAgIGlmIChjID09PSAnJicpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVfRU5USVRZX1FcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSArPSBjXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBhdHRyaWIocGFyc2VyKVxuICAgICAgICAgIHBhcnNlci5xID0gJydcbiAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9DTE9TRURcbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfQ0xPU0VEOlxuICAgICAgICAgIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyKVxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJy8nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fVEFHX1NMQVNIXG4gICAgICAgICAgfSBlbHNlIGlmIChpc01hdGNoKG5hbWVTdGFydCwgYykpIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnTm8gd2hpdGVzcGFjZSBiZXR3ZWVuIGF0dHJpYnV0ZXMnKVxuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBjXG4gICAgICAgICAgICBwYXJzZXIuYXR0cmliVmFsdWUgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfTkFNRVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgYXR0cmlidXRlIG5hbWUnKVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfVU5RVU9URUQ6XG4gICAgICAgICAgaWYgKCFpc0F0dHJpYkVuZChjKSkge1xuICAgICAgICAgICAgaWYgKGMgPT09ICcmJykge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9FTlRJVFlfVVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlICs9IGNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGF0dHJpYihwYXJzZXIpXG4gICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgb3BlblRhZyhwYXJzZXIpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkNMT1NFX1RBRzpcbiAgICAgICAgICBpZiAoIXBhcnNlci50YWdOYW1lKSB7XG4gICAgICAgICAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5vdE1hdGNoKG5hbWVTdGFydCwgYykpIHtcbiAgICAgICAgICAgICAgaWYgKHBhcnNlci5zY3JpcHQpIHtcbiAgICAgICAgICAgICAgICBwYXJzZXIuc2NyaXB0ICs9ICc8LycgKyBjXG4gICAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFRcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgdGFnbmFtZSBpbiBjbG9zaW5nIHRhZy4nKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIudGFnTmFtZSA9IGNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgY2xvc2VUYWcocGFyc2VyKVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChuYW1lQm9keSwgYykpIHtcbiAgICAgICAgICAgIHBhcnNlci50YWdOYW1lICs9IGNcbiAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlci5zY3JpcHQpIHtcbiAgICAgICAgICAgIHBhcnNlci5zY3JpcHQgKz0gJzwvJyArIHBhcnNlci50YWdOYW1lXG4gICAgICAgICAgICBwYXJzZXIudGFnTmFtZSA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlNDUklQVFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgdGFnbmFtZSBpbiBjbG9zaW5nIHRhZycpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNMT1NFX1RBR19TQVdfV0hJVEVcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQ0xPU0VfVEFHX1NBV19XSElURTpcbiAgICAgICAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBjbG9zZVRhZyhwYXJzZXIpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnSW52YWxpZCBjaGFyYWN0ZXJzIGluIGNsb3NpbmcgdGFnJylcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuVEVYVF9FTlRJVFk6XG4gICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfRU5USVRZX1E6XG4gICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfRU5USVRZX1U6XG4gICAgICAgICAgdmFyIHJldHVyblN0YXRlXG4gICAgICAgICAgdmFyIGJ1ZmZlclxuICAgICAgICAgIHN3aXRjaCAocGFyc2VyLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIFMuVEVYVF9FTlRJVFk6XG4gICAgICAgICAgICAgIHJldHVyblN0YXRlID0gUy5URVhUXG4gICAgICAgICAgICAgIGJ1ZmZlciA9ICd0ZXh0Tm9kZSdcbiAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgY2FzZSBTLkFUVFJJQl9WQUxVRV9FTlRJVFlfUTpcbiAgICAgICAgICAgICAgcmV0dXJuU3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9RVU9URURcbiAgICAgICAgICAgICAgYnVmZmVyID0gJ2F0dHJpYlZhbHVlJ1xuICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX0VOVElUWV9VOlxuICAgICAgICAgICAgICByZXR1cm5TdGF0ZSA9IFMuQVRUUklCX1ZBTFVFX1VOUVVPVEVEXG4gICAgICAgICAgICAgIGJ1ZmZlciA9ICdhdHRyaWJWYWx1ZSdcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYyA9PT0gJzsnKSB7XG4gICAgICAgICAgICB2YXIgcGFyc2VkRW50aXR5ID0gcGFyc2VFbnRpdHkocGFyc2VyKVxuICAgICAgICAgICAgaWYgKHBhcnNlci5vcHQudW5wYXJzZWRFbnRpdGllcyAmJiAhT2JqZWN0LnZhbHVlcyhzYXguWE1MX0VOVElUSUVTKS5pbmNsdWRlcyhwYXJzZWRFbnRpdHkpKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5lbnRpdHkgPSAnJ1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSByZXR1cm5TdGF0ZVxuICAgICAgICAgICAgICBwYXJzZXIud3JpdGUocGFyc2VkRW50aXR5KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyW2J1ZmZlcl0gKz0gcGFyc2VkRW50aXR5XG4gICAgICAgICAgICAgIHBhcnNlci5lbnRpdHkgPSAnJ1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSByZXR1cm5TdGF0ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChwYXJzZXIuZW50aXR5Lmxlbmd0aCA/IGVudGl0eUJvZHkgOiBlbnRpdHlTdGFydCwgYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5lbnRpdHkgKz0gY1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgY2hhcmFjdGVyIGluIGVudGl0eSBuYW1lJylcbiAgICAgICAgICAgIHBhcnNlcltidWZmZXJdICs9ICcmJyArIHBhcnNlci5lbnRpdHkgKyBjXG4gICAgICAgICAgICBwYXJzZXIuZW50aXR5ID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IHJldHVyblN0YXRlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBkZWZhdWx0OiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHBhcnNlciwgJ1Vua25vd24gc3RhdGU6ICcgKyBwYXJzZXIuc3RhdGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIHdoaWxlXG5cbiAgICBpZiAocGFyc2VyLnBvc2l0aW9uID49IHBhcnNlci5idWZmZXJDaGVja1Bvc2l0aW9uKSB7XG4gICAgICBjaGVja0J1ZmZlckxlbmd0aChwYXJzZXIpXG4gICAgfVxuICAgIHJldHVybiBwYXJzZXJcbiAgfVxuXG4gIC8qISBodHRwOi8vbXRocy5iZS9mcm9tY29kZXBvaW50IHYwLjEuMCBieSBAbWF0aGlhcyAqL1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoIVN0cmluZy5mcm9tQ29kZVBvaW50KSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG4gICAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yXG4gICAgICB2YXIgZnJvbUNvZGVQb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIE1BWF9TSVpFID0gMHg0MDAwXG4gICAgICAgIHZhciBjb2RlVW5pdHMgPSBbXVxuICAgICAgICB2YXIgaGlnaFN1cnJvZ2F0ZVxuICAgICAgICB2YXIgbG93U3Vycm9nYXRlXG4gICAgICAgIHZhciBpbmRleCA9IC0xXG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGNvZGVQb2ludCA9IE51bWJlcihhcmd1bWVudHNbaW5kZXhdKVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICFpc0Zpbml0ZShjb2RlUG9pbnQpIHx8IC8vIGBOYU5gLCBgK0luZmluaXR5YCwgb3IgYC1JbmZpbml0eWBcbiAgICAgICAgICAgIGNvZGVQb2ludCA8IDAgfHwgLy8gbm90IGEgdmFsaWQgVW5pY29kZSBjb2RlIHBvaW50XG4gICAgICAgICAgICBjb2RlUG9pbnQgPiAweDEwRkZGRiB8fCAvLyBub3QgYSB2YWxpZCBVbmljb2RlIGNvZGUgcG9pbnRcbiAgICAgICAgICAgIGZsb29yKGNvZGVQb2ludCkgIT09IGNvZGVQb2ludCAvLyBub3QgYW4gaW50ZWdlclxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCBjb2RlIHBvaW50OiAnICsgY29kZVBvaW50KVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29kZVBvaW50IDw9IDB4RkZGRikgeyAvLyBCTVAgY29kZSBwb2ludFxuICAgICAgICAgICAgY29kZVVuaXRzLnB1c2goY29kZVBvaW50KVxuICAgICAgICAgIH0gZWxzZSB7IC8vIEFzdHJhbCBjb2RlIHBvaW50OyBzcGxpdCBpbiBzdXJyb2dhdGUgaGFsdmVzXG4gICAgICAgICAgICAvLyBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuICAgICAgICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgICAgICAgIGhpZ2hTdXJyb2dhdGUgPSAoY29kZVBvaW50ID4+IDEwKSArIDB4RDgwMFxuICAgICAgICAgICAgbG93U3Vycm9nYXRlID0gKGNvZGVQb2ludCAlIDB4NDAwKSArIDB4REMwMFxuICAgICAgICAgICAgY29kZVVuaXRzLnB1c2goaGlnaFN1cnJvZ2F0ZSwgbG93U3Vycm9nYXRlKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaW5kZXggKyAxID09PSBsZW5ndGggfHwgY29kZVVuaXRzLmxlbmd0aCA+IE1BWF9TSVpFKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNvZGVVbml0cylcbiAgICAgICAgICAgIGNvZGVVbml0cy5sZW5ndGggPSAwXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcsICdmcm9tQ29kZVBvaW50Jywge1xuICAgICAgICAgIHZhbHVlOiBmcm9tQ29kZVBvaW50LFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgU3RyaW5nLmZyb21Db2RlUG9pbnQgPSBmcm9tQ29kZVBvaW50XG4gICAgICB9XG4gICAgfSgpKVxuICB9XG59KSh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLnNheCA9IHt9IDogZXhwb3J0cylcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgZXhwb3J0cy5zdHJpcEJPTSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIGlmIChzdHJbMF0gPT09ICdcXHVGRUZGJykge1xuICAgICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICB2YXIgcHJlZml4TWF0Y2g7XG5cbiAgcHJlZml4TWF0Y2ggPSBuZXcgUmVnRXhwKC8oPyF4bWxucyleLio6Lyk7XG5cbiAgZXhwb3J0cy5ub3JtYWxpemUgPSBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCk7XG4gIH07XG5cbiAgZXhwb3J0cy5maXJzdENoYXJMb3dlckNhc2UgPSBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xuICB9O1xuXG4gIGV4cG9ydHMuc3RyaXBQcmVmaXggPSBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UocHJlZml4TWF0Y2gsICcnKTtcbiAgfTtcblxuICBleHBvcnRzLnBhcnNlTnVtYmVycyA9IGZ1bmN0aW9uKHN0cikge1xuICAgIGlmICghaXNOYU4oc3RyKSkge1xuICAgICAgc3RyID0gc3RyICUgMSA9PT0gMCA/IHBhcnNlSW50KHN0ciwgMTApIDogcGFyc2VGbG9hdChzdHIpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIGV4cG9ydHMucGFyc2VCb29sZWFucyA9IGZ1bmN0aW9uKHN0cikge1xuICAgIGlmICgvXig/OnRydWV8ZmFsc2UpJC9pLnRlc3Qoc3RyKSkge1xuICAgICAgc3RyID0gc3RyLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgdmFyIGJvbSwgZGVmYXVsdHMsIGV2ZW50cywgaXNFbXB0eSwgcHJvY2Vzc0l0ZW0sIHByb2Nlc3NvcnMsIHNheCwgc2V0SW1tZWRpYXRlLFxuICAgIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgc2F4ID0gcmVxdWlyZSgnc2F4Jyk7XG5cbiAgZXZlbnRzID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5cbiAgYm9tID0gcmVxdWlyZSgnLi9ib20nKTtcblxuICBwcm9jZXNzb3JzID0gcmVxdWlyZSgnLi9wcm9jZXNzb3JzJyk7XG5cbiAgc2V0SW1tZWRpYXRlID0gcmVxdWlyZSgndGltZXJzJykuc2V0SW1tZWRpYXRlO1xuXG4gIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpLmRlZmF1bHRzO1xuXG4gIGlzRW1wdHkgPSBmdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IFwib2JqZWN0XCIgJiYgKHRoaW5nICE9IG51bGwpICYmIE9iamVjdC5rZXlzKHRoaW5nKS5sZW5ndGggPT09IDA7XG4gIH07XG5cbiAgcHJvY2Vzc0l0ZW0gPSBmdW5jdGlvbihwcm9jZXNzb3JzLCBpdGVtLCBrZXkpIHtcbiAgICB2YXIgaSwgbGVuLCBwcm9jZXNzO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHByb2Nlc3NvcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHByb2Nlc3MgPSBwcm9jZXNzb3JzW2ldO1xuICAgICAgaXRlbSA9IHByb2Nlc3MoaXRlbSwga2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG4gIH07XG5cbiAgZXhwb3J0cy5QYXJzZXIgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChQYXJzZXIsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gUGFyc2VyKG9wdHMpIHtcbiAgICAgIHRoaXMucGFyc2VTdHJpbmdQcm9taXNlID0gYmluZCh0aGlzLnBhcnNlU3RyaW5nUHJvbWlzZSwgdGhpcyk7XG4gICAgICB0aGlzLnBhcnNlU3RyaW5nID0gYmluZCh0aGlzLnBhcnNlU3RyaW5nLCB0aGlzKTtcbiAgICAgIHRoaXMucmVzZXQgPSBiaW5kKHRoaXMucmVzZXQsIHRoaXMpO1xuICAgICAgdGhpcy5hc3NpZ25PclB1c2ggPSBiaW5kKHRoaXMuYXNzaWduT3JQdXNoLCB0aGlzKTtcbiAgICAgIHRoaXMucHJvY2Vzc0FzeW5jID0gYmluZCh0aGlzLnByb2Nlc3NBc3luYywgdGhpcyk7XG4gICAgICB2YXIga2V5LCByZWYsIHZhbHVlO1xuICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIGV4cG9ydHMuUGFyc2VyKSkge1xuICAgICAgICByZXR1cm4gbmV3IGV4cG9ydHMuUGFyc2VyKG9wdHMpO1xuICAgICAgfVxuICAgICAgdGhpcy5vcHRpb25zID0ge307XG4gICAgICByZWYgPSBkZWZhdWx0c1tcIjAuMlwiXTtcbiAgICAgIGZvciAoa2V5IGluIHJlZikge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICB2YWx1ZSA9IHJlZltrZXldO1xuICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgZm9yIChrZXkgaW4gb3B0cykge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChvcHRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgdmFsdWUgPSBvcHRzW2tleV07XG4gICAgICAgIHRoaXMub3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnhtbG5zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy54bWxuc2tleSA9IHRoaXMub3B0aW9ucy5hdHRya2V5ICsgXCJuc1wiO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub3JtYWxpemVUYWdzKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnRhZ05hbWVQcm9jZXNzb3JzKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLnRhZ05hbWVQcm9jZXNzb3JzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zLnRhZ05hbWVQcm9jZXNzb3JzLnVuc2hpZnQocHJvY2Vzc29ycy5ub3JtYWxpemUpO1xuICAgICAgfVxuICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIFBhcnNlci5wcm90b3R5cGUucHJvY2Vzc0FzeW5jID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY2h1bmssIGVycjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh0aGlzLnJlbWFpbmluZy5sZW5ndGggPD0gdGhpcy5vcHRpb25zLmNodW5rU2l6ZSkge1xuICAgICAgICAgIGNodW5rID0gdGhpcy5yZW1haW5pbmc7XG4gICAgICAgICAgdGhpcy5yZW1haW5pbmcgPSAnJztcbiAgICAgICAgICB0aGlzLnNheFBhcnNlciA9IHRoaXMuc2F4UGFyc2VyLndyaXRlKGNodW5rKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zYXhQYXJzZXIuY2xvc2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaHVuayA9IHRoaXMucmVtYWluaW5nLnN1YnN0cigwLCB0aGlzLm9wdGlvbnMuY2h1bmtTaXplKTtcbiAgICAgICAgICB0aGlzLnJlbWFpbmluZyA9IHRoaXMucmVtYWluaW5nLnN1YnN0cih0aGlzLm9wdGlvbnMuY2h1bmtTaXplLCB0aGlzLnJlbWFpbmluZy5sZW5ndGgpO1xuICAgICAgICAgIHRoaXMuc2F4UGFyc2VyID0gdGhpcy5zYXhQYXJzZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgIHJldHVybiBzZXRJbW1lZGlhdGUodGhpcy5wcm9jZXNzQXN5bmMpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgICAgZXJyID0gZXJyb3IxO1xuICAgICAgICBpZiAoIXRoaXMuc2F4UGFyc2VyLmVyclRocm93bikge1xuICAgICAgICAgIHRoaXMuc2F4UGFyc2VyLmVyclRocm93biA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdChlcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUuYXNzaWduT3JQdXNoID0gZnVuY3Rpb24ob2JqLCBrZXksIG5ld1ZhbHVlKSB7XG4gICAgICBpZiAoIShrZXkgaW4gb2JqKSkge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5leHBsaWNpdEFycmF5KSB7XG4gICAgICAgICAgcmV0dXJuIG9ialtrZXldID0gbmV3VmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG9ialtrZXldID0gW25ld1ZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCEob2JqW2tleV0gaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgICBvYmpba2V5XSA9IFtvYmpba2V5XV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9ialtrZXldLnB1c2gobmV3VmFsdWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBQYXJzZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXR0cmtleSwgY2hhcmtleSwgb250ZXh0LCBzdGFjaztcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICB0aGlzLnNheFBhcnNlciA9IHNheC5wYXJzZXIodGhpcy5vcHRpb25zLnN0cmljdCwge1xuICAgICAgICB0cmltOiBmYWxzZSxcbiAgICAgICAgbm9ybWFsaXplOiBmYWxzZSxcbiAgICAgICAgeG1sbnM6IHRoaXMub3B0aW9ucy54bWxuc1xuICAgICAgfSk7XG4gICAgICB0aGlzLnNheFBhcnNlci5lcnJUaHJvd24gPSBmYWxzZTtcbiAgICAgIHRoaXMuc2F4UGFyc2VyLm9uZXJyb3IgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgX3RoaXMuc2F4UGFyc2VyLnJlc3VtZSgpO1xuICAgICAgICAgIGlmICghX3RoaXMuc2F4UGFyc2VyLmVyclRocm93bikge1xuICAgICAgICAgICAgX3RoaXMuc2F4UGFyc2VyLmVyclRocm93biA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZW1pdChcImVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKTtcbiAgICAgIHRoaXMuc2F4UGFyc2VyLm9uZW5kID0gKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoIV90aGlzLnNheFBhcnNlci5lbmRlZCkge1xuICAgICAgICAgICAgX3RoaXMuc2F4UGFyc2VyLmVuZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5lbWl0KFwiZW5kXCIsIF90aGlzLnJlc3VsdE9iamVjdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSkodGhpcyk7XG4gICAgICB0aGlzLnNheFBhcnNlci5lbmRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5FWFBMSUNJVF9DSEFSS0VZID0gdGhpcy5vcHRpb25zLmV4cGxpY2l0Q2hhcmtleTtcbiAgICAgIHRoaXMucmVzdWx0T2JqZWN0ID0gbnVsbDtcbiAgICAgIHN0YWNrID0gW107XG4gICAgICBhdHRya2V5ID0gdGhpcy5vcHRpb25zLmF0dHJrZXk7XG4gICAgICBjaGFya2V5ID0gdGhpcy5vcHRpb25zLmNoYXJrZXk7XG4gICAgICB0aGlzLnNheFBhcnNlci5vbm9wZW50YWcgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICB2YXIga2V5LCBuZXdWYWx1ZSwgb2JqLCBwcm9jZXNzZWRLZXksIHJlZjtcbiAgICAgICAgICBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIG9ialtjaGFya2V5XSA9IFwiXCI7XG4gICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLmlnbm9yZUF0dHJzKSB7XG4gICAgICAgICAgICByZWYgPSBub2RlLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiByZWYpIHtcbiAgICAgICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgaWYgKCEoYXR0cmtleSBpbiBvYmopICYmICFfdGhpcy5vcHRpb25zLm1lcmdlQXR0cnMpIHtcbiAgICAgICAgICAgICAgICBvYmpbYXR0cmtleV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG5ld1ZhbHVlID0gX3RoaXMub3B0aW9ucy5hdHRyVmFsdWVQcm9jZXNzb3JzID8gcHJvY2Vzc0l0ZW0oX3RoaXMub3B0aW9ucy5hdHRyVmFsdWVQcm9jZXNzb3JzLCBub2RlLmF0dHJpYnV0ZXNba2V5XSwga2V5KSA6IG5vZGUuYXR0cmlidXRlc1trZXldO1xuICAgICAgICAgICAgICBwcm9jZXNzZWRLZXkgPSBfdGhpcy5vcHRpb25zLmF0dHJOYW1lUHJvY2Vzc29ycyA/IHByb2Nlc3NJdGVtKF90aGlzLm9wdGlvbnMuYXR0ck5hbWVQcm9jZXNzb3JzLCBrZXkpIDoga2V5O1xuICAgICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5tZXJnZUF0dHJzKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYXNzaWduT3JQdXNoKG9iaiwgcHJvY2Vzc2VkS2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqW2F0dHJrZXldW3Byb2Nlc3NlZEtleV0gPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBvYmpbXCIjbmFtZVwiXSA9IF90aGlzLm9wdGlvbnMudGFnTmFtZVByb2Nlc3NvcnMgPyBwcm9jZXNzSXRlbShfdGhpcy5vcHRpb25zLnRhZ05hbWVQcm9jZXNzb3JzLCBub2RlLm5hbWUpIDogbm9kZS5uYW1lO1xuICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnhtbG5zKSB7XG4gICAgICAgICAgICBvYmpbX3RoaXMub3B0aW9ucy54bWxuc2tleV0gPSB7XG4gICAgICAgICAgICAgIHVyaTogbm9kZS51cmksXG4gICAgICAgICAgICAgIGxvY2FsOiBub2RlLmxvY2FsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc3RhY2sucHVzaChvYmopO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcyk7XG4gICAgICB0aGlzLnNheFBhcnNlci5vbmNsb3NldGFnID0gKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgY2RhdGEsIGVtcHR5U3RyLCBrZXksIG5vZGUsIG5vZGVOYW1lLCBvYmosIG9iakNsb25lLCBvbGQsIHMsIHhwYXRoO1xuICAgICAgICAgIG9iaiA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgIG5vZGVOYW1lID0gb2JqW1wiI25hbWVcIl07XG4gICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLmV4cGxpY2l0Q2hpbGRyZW4gfHwgIV90aGlzLm9wdGlvbnMucHJlc2VydmVDaGlsZHJlbk9yZGVyKSB7XG4gICAgICAgICAgICBkZWxldGUgb2JqW1wiI25hbWVcIl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvYmouY2RhdGEgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNkYXRhID0gb2JqLmNkYXRhO1xuICAgICAgICAgICAgZGVsZXRlIG9iai5jZGF0YTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcyA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChvYmpbY2hhcmtleV0ubWF0Y2goL15cXHMqJC8pICYmICFjZGF0YSkge1xuICAgICAgICAgICAgZW1wdHlTdHIgPSBvYmpbY2hhcmtleV07XG4gICAgICAgICAgICBkZWxldGUgb2JqW2NoYXJrZXldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy50cmltKSB7XG4gICAgICAgICAgICAgIG9ialtjaGFya2V5XSA9IG9ialtjaGFya2V5XS50cmltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5ub3JtYWxpemUpIHtcbiAgICAgICAgICAgICAgb2JqW2NoYXJrZXldID0gb2JqW2NoYXJrZXldLnJlcGxhY2UoL1xcc3syLH0vZywgXCIgXCIpLnRyaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9ialtjaGFya2V5XSA9IF90aGlzLm9wdGlvbnMudmFsdWVQcm9jZXNzb3JzID8gcHJvY2Vzc0l0ZW0oX3RoaXMub3B0aW9ucy52YWx1ZVByb2Nlc3NvcnMsIG9ialtjaGFya2V5XSwgbm9kZU5hbWUpIDogb2JqW2NoYXJrZXldO1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAxICYmIGNoYXJrZXkgaW4gb2JqICYmICFfdGhpcy5FWFBMSUNJVF9DSEFSS0VZKSB7XG4gICAgICAgICAgICAgIG9iaiA9IG9ialtjaGFya2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzRW1wdHkob2JqKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBfdGhpcy5vcHRpb25zLmVtcHR5VGFnID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIG9iaiA9IF90aGlzLm9wdGlvbnMuZW1wdHlUYWcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG9iaiA9IF90aGlzLm9wdGlvbnMuZW1wdHlUYWcgIT09ICcnID8gX3RoaXMub3B0aW9ucy5lbXB0eVRhZyA6IGVtcHR5U3RyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy52YWxpZGF0b3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgeHBhdGggPSBcIi9cIiArICgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciBpLCBsZW4sIHJlc3VsdHM7XG4gICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gc3RhY2subGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBub2RlID0gc3RhY2tbaV07XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKG5vZGVbXCIjbmFtZVwiXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICB9KSgpKS5jb25jYXQobm9kZU5hbWUpLmpvaW4oXCIvXCIpO1xuICAgICAgICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgZXJyO1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmogPSBfdGhpcy5vcHRpb25zLnZhbGlkYXRvcih4cGF0aCwgcyAmJiBzW25vZGVOYW1lXSwgb2JqKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICAgICAgICAgICAgZXJyID0gZXJyb3IxO1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuZXhwbGljaXRDaGlsZHJlbiAmJiAhX3RoaXMub3B0aW9ucy5tZXJnZUF0dHJzICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLm9wdGlvbnMucHJlc2VydmVDaGlsZHJlbk9yZGVyKSB7XG4gICAgICAgICAgICAgIG5vZGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5hdHRya2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgIG5vZGVbX3RoaXMub3B0aW9ucy5hdHRya2V5XSA9IG9ialtfdGhpcy5vcHRpb25zLmF0dHJrZXldO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmpbX3RoaXMub3B0aW9ucy5hdHRya2V5XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoIV90aGlzLm9wdGlvbnMuY2hhcnNBc0NoaWxkcmVuICYmIF90aGlzLm9wdGlvbnMuY2hhcmtleSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBub2RlW190aGlzLm9wdGlvbnMuY2hhcmtleV0gPSBvYmpbX3RoaXMub3B0aW9ucy5jaGFya2V5XTtcbiAgICAgICAgICAgICAgICBkZWxldGUgb2JqW190aGlzLm9wdGlvbnMuY2hhcmtleV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG5vZGVbX3RoaXMub3B0aW9ucy5jaGlsZGtleV0gPSBvYmo7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb2JqID0gbm9kZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocykge1xuICAgICAgICAgICAgICBzW190aGlzLm9wdGlvbnMuY2hpbGRrZXldID0gc1tfdGhpcy5vcHRpb25zLmNoaWxka2V5XSB8fCBbXTtcbiAgICAgICAgICAgICAgb2JqQ2xvbmUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChvYmosIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIG9iakNsb25lW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzW190aGlzLm9wdGlvbnMuY2hpbGRrZXldLnB1c2gob2JqQ2xvbmUpO1xuICAgICAgICAgICAgICBkZWxldGUgb2JqW1wiI25hbWVcIl07XG4gICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMSAmJiBjaGFya2V5IGluIG9iaiAmJiAhX3RoaXMuRVhQTElDSVRfQ0hBUktFWSkge1xuICAgICAgICAgICAgICAgIG9iaiA9IG9ialtjaGFya2V5XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmFzc2lnbk9yUHVzaChzLCBub2RlTmFtZSwgb2JqKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuZXhwbGljaXRSb290KSB7XG4gICAgICAgICAgICAgIG9sZCA9IG9iajtcbiAgICAgICAgICAgICAgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgICAgb2JqW25vZGVOYW1lXSA9IG9sZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLnJlc3VsdE9iamVjdCA9IG9iajtcbiAgICAgICAgICAgIF90aGlzLnNheFBhcnNlci5lbmRlZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZW1pdChcImVuZFwiLCBfdGhpcy5yZXN1bHRPYmplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgICAgb250ZXh0ID0gKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICAgICAgdmFyIGNoYXJDaGlsZCwgcztcbiAgICAgICAgICBzID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKHMpIHtcbiAgICAgICAgICAgIHNbY2hhcmtleV0gKz0gdGV4dDtcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmV4cGxpY2l0Q2hpbGRyZW4gJiYgX3RoaXMub3B0aW9ucy5wcmVzZXJ2ZUNoaWxkcmVuT3JkZXIgJiYgX3RoaXMub3B0aW9ucy5jaGFyc0FzQ2hpbGRyZW4gJiYgKF90aGlzLm9wdGlvbnMuaW5jbHVkZVdoaXRlQ2hhcnMgfHwgdGV4dC5yZXBsYWNlKC9cXFxcbi9nLCAnJykudHJpbSgpICE9PSAnJykpIHtcbiAgICAgICAgICAgICAgc1tfdGhpcy5vcHRpb25zLmNoaWxka2V5XSA9IHNbX3RoaXMub3B0aW9ucy5jaGlsZGtleV0gfHwgW107XG4gICAgICAgICAgICAgIGNoYXJDaGlsZCA9IHtcbiAgICAgICAgICAgICAgICAnI25hbWUnOiAnX190ZXh0X18nXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGNoYXJDaGlsZFtjaGFya2V5XSA9IHRleHQ7XG4gICAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLm5vcm1hbGl6ZSkge1xuICAgICAgICAgICAgICAgIGNoYXJDaGlsZFtjaGFya2V5XSA9IGNoYXJDaGlsZFtjaGFya2V5XS5yZXBsYWNlKC9cXHN7Mix9L2csIFwiIFwiKS50cmltKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc1tfdGhpcy5vcHRpb25zLmNoaWxka2V5XS5wdXNoKGNoYXJDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKTtcbiAgICAgIHRoaXMuc2F4UGFyc2VyLm9udGV4dCA9IG9udGV4dDtcbiAgICAgIHJldHVybiB0aGlzLnNheFBhcnNlci5vbmNkYXRhID0gKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICAgICAgdmFyIHM7XG4gICAgICAgICAgcyA9IG9udGV4dCh0ZXh0KTtcbiAgICAgICAgICBpZiAocykge1xuICAgICAgICAgICAgcmV0dXJuIHMuY2RhdGEgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgIH07XG5cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlU3RyaW5nID0gZnVuY3Rpb24oc3RyLCBjYikge1xuICAgICAgdmFyIGVycjtcbiAgICAgIGlmICgoY2IgIT0gbnVsbCkgJiYgdHlwZW9mIGNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhpcy5vbihcImVuZFwiLCBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgcmV0dXJuIGNiKG51bGwsIHJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgIHJldHVybiBjYihlcnIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ciA9IHN0ci50b1N0cmluZygpO1xuICAgICAgICBpZiAoc3RyLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJlbmRcIiwgbnVsbCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgc3RyID0gYm9tLnN0cmlwQk9NKHN0cik7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXN5bmMpIHtcbiAgICAgICAgICB0aGlzLnJlbWFpbmluZyA9IHN0cjtcbiAgICAgICAgICBzZXRJbW1lZGlhdGUodGhpcy5wcm9jZXNzQXN5bmMpO1xuICAgICAgICAgIHJldHVybiB0aGlzLnNheFBhcnNlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zYXhQYXJzZXIud3JpdGUoc3RyKS5jbG9zZSgpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICAgIGVyciA9IGVycm9yMTtcbiAgICAgICAgaWYgKCEodGhpcy5zYXhQYXJzZXIuZXJyVGhyb3duIHx8IHRoaXMuc2F4UGFyc2VyLmVuZGVkKSkge1xuICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICAgIHJldHVybiB0aGlzLnNheFBhcnNlci5lcnJUaHJvd24gPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2F4UGFyc2VyLmVuZGVkKSB7XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VTdHJpbmdQcm9taXNlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMucGFyc2VTdHJpbmcoc3RyLCBmdW5jdGlvbihlcnIsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFBhcnNlcjtcblxuICB9KShldmVudHMpO1xuXG4gIGV4cG9ydHMucGFyc2VTdHJpbmcgPSBmdW5jdGlvbihzdHIsIGEsIGIpIHtcbiAgICB2YXIgY2IsIG9wdGlvbnMsIHBhcnNlcjtcbiAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2IgPSBiO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0Jykge1xuICAgICAgICBvcHRpb25zID0gYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiBhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNiID0gYTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgcGFyc2VyID0gbmV3IGV4cG9ydHMuUGFyc2VyKG9wdGlvbnMpO1xuICAgIHJldHVybiBwYXJzZXIucGFyc2VTdHJpbmcoc3RyLCBjYik7XG4gIH07XG5cbiAgZXhwb3J0cy5wYXJzZVN0cmluZ1Byb21pc2UgPSBmdW5jdGlvbihzdHIsIGEpIHtcbiAgICB2YXIgb3B0aW9ucywgcGFyc2VyO1xuICAgIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG9wdGlvbnMgPSBhO1xuICAgIH1cbiAgICBwYXJzZXIgPSBuZXcgZXhwb3J0cy5QYXJzZXIob3B0aW9ucyk7XG4gICAgcmV0dXJuIHBhcnNlci5wYXJzZVN0cmluZ1Byb21pc2Uoc3RyKTtcbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgdmFyIGJ1aWxkZXIsIGRlZmF1bHRzLCBwYXJzZXIsIHByb2Nlc3NvcnMsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuICBidWlsZGVyID0gcmVxdWlyZSgnLi9idWlsZGVyJyk7XG5cbiAgcGFyc2VyID0gcmVxdWlyZSgnLi9wYXJzZXInKTtcblxuICBwcm9jZXNzb3JzID0gcmVxdWlyZSgnLi9wcm9jZXNzb3JzJyk7XG5cbiAgZXhwb3J0cy5kZWZhdWx0cyA9IGRlZmF1bHRzLmRlZmF1bHRzO1xuXG4gIGV4cG9ydHMucHJvY2Vzc29ycyA9IHByb2Nlc3NvcnM7XG5cbiAgZXhwb3J0cy5WYWxpZGF0aW9uRXJyb3IgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChWYWxpZGF0aW9uRXJyb3IsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gVmFsaWRhdGlvbkVycm9yKG1lc3NhZ2UpIHtcbiAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIFZhbGlkYXRpb25FcnJvcjtcblxuICB9KShFcnJvcik7XG5cbiAgZXhwb3J0cy5CdWlsZGVyID0gYnVpbGRlci5CdWlsZGVyO1xuXG4gIGV4cG9ydHMuUGFyc2VyID0gcGFyc2VyLlBhcnNlcjtcblxuICBleHBvcnRzLnBhcnNlU3RyaW5nID0gcGFyc2VyLnBhcnNlU3RyaW5nO1xuXG4gIGV4cG9ydHMucGFyc2VTdHJpbmdQcm9taXNlID0gcGFyc2VyLnBhcnNlU3RyaW5nUHJvbWlzZTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICJpbXBvcnQgeyBQbHVnaW4sIEVkaXRvciwgTm90aWNlLCBUQWJzdHJhY3RGaWxlLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IEJpYmxlRGF0YWJhc2UgfSBmcm9tICcuL2RhdGFiYXNlJztcbmltcG9ydCB7IEJpYmxlU2VsZWN0b3JNb2RhbCB9IGZyb20gJy4vc2VsZWN0b3InO1xuaW1wb3J0IHsgQmlibGVMaW5rU2V0dGluZ1RhYiwgQmlibGVMaW5rU2V0dGluZ3MsIERFRkFVTFRfU0VUVElOR1MgfSBmcm9tICcuL3NldHRpbmdzJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbi8vIEJvb2sgYWJicmV2aWF0aW9ucyBtYXBwaW5nXG5jb25zdCBCT09LX0FCQlJFVklBVElPTlM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgJ0dlbmVzaXMnOiAnR2VuJywgJ0V4b2R1cyc6ICdFeG8nLCAnTGV2aXRpY3VzJzogJ0xldicsICdOdW1iZXJzJzogJ051bScsICdEZXV0ZXJvbm9teSc6ICdEZXUnLFxuICAgICdKb3NodWEnOiAnSm9zJywgJ0p1ZGdlcyc6ICdKZGcnLCAnUnV0aCc6ICdSdXQnLCAnMSBTYW11ZWwnOiAnMVNhJywgJzIgU2FtdWVsJzogJzJTYScsXG4gICAgJzEgS2luZ3MnOiAnMUtpJywgJzIgS2luZ3MnOiAnMktpJywgJzEgQ2hyb25pY2xlcyc6ICcxQ2gnLCAnMiBDaHJvbmljbGVzJzogJzJDaCcsXG4gICAgJ0V6cmEnOiAnRXpyJywgJ05laGVtaWFoJzogJ05laCcsICdFc3RoZXInOiAnRXN0JywgJ0pvYic6ICdKb2InLCAnUHNhbG1zJzogJ1BzYScsXG4gICAgJ1Byb3ZlcmJzJzogJ1BybycsICdFY2NsZXNpYXN0ZXMnOiAnRWNjJywgJ1Nvbmcgb2YgU29sb21vbic6ICdTbmcnLCAnSXNhaWFoJzogJ0lzYScsXG4gICAgJ0plcmVtaWFoJzogJ0plcicsICdMYW1lbnRhdGlvbnMnOiAnTGFtJywgJ0V6ZWtpZWwnOiAnRXprJywgJ0RhbmllbCc6ICdEYW4nLFxuICAgICdIb3NlYSc6ICdIb3MnLCAnSm9lbCc6ICdKb2wnLCAnQW1vcyc6ICdBbW8nLCAnT2JhZGlhaCc6ICdPYmEnLCAnSm9uYWgnOiAnSm9uJyxcbiAgICAnTWljYWgnOiAnTWljJywgJ05haHVtJzogJ05haCcsICdIYWJha2t1ayc6ICdIYWInLCAnWmVwaGFuaWFoJzogJ1plcCcsICdIYWdnYWknOiAnSGFnJyxcbiAgICAnWmVjaGFyaWFoJzogJ1plYycsICdNYWxhY2hpJzogJ01hbCcsICdNYXR0aGV3JzogJ01hdCcsICdNYXJrJzogJ01yaycsICdMdWtlJzogJ0x1aycsXG4gICAgJ0pvaG4nOiAnSmhuJywgJ0FjdHMnOiAnQWN0JywgJ1JvbWFucyc6ICdSb20nLCAnMSBDb3JpbnRoaWFucyc6ICcxQ28nLCAnMiBDb3JpbnRoaWFucyc6ICcyQ28nLFxuICAgICdHYWxhdGlhbnMnOiAnR2FsJywgJ0VwaGVzaWFucyc6ICdFcGgnLCAnUGhpbGlwcGlhbnMnOiAnUGhwJywgJ0NvbG9zc2lhbnMnOiAnQ29sJyxcbiAgICAnMSBUaGVzc2Fsb25pYW5zJzogJzFUaCcsICcyIFRoZXNzYWxvbmlhbnMnOiAnMlRoJywgJzEgVGltb3RoeSc6ICcxVGknLCAnMiBUaW1vdGh5JzogJzJUaScsXG4gICAgJ1RpdHVzJzogJ1RpdCcsICdQaGlsZW1vbic6ICdQaG0nLCAnSGVicmV3cyc6ICdIZWInLCAnSmFtZXMnOiAnSmFzJywgJzEgUGV0ZXInOiAnMVBlJyxcbiAgICAnMiBQZXRlcic6ICcyUGUnLCAnMSBKb2huJzogJzFKbicsICcyIEpvaG4nOiAnMkpuJywgJzMgSm9obic6ICczSm4nLCAnSnVkZSc6ICdKdWQnLFxuICAgICdSZXZlbGF0aW9uJzogJ1Jldidcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJpYmxlTGlua1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gICAgc2V0dGluZ3M6IEJpYmxlTGlua1NldHRpbmdzO1xuICAgIGRiOiBCaWJsZURhdGFiYXNlO1xuICAgIHByaXZhdGUgaXNGaXJzdExvYWQgPSB0cnVlO1xuXG4gICAgYXN5bmMgb25sb2FkKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuICAgICAgICBcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBkYXRhYmFzZVxuICAgICAgICB0aGlzLmRiID0gbmV3IEJpYmxlRGF0YWJhc2UodGhpcyk7XG4gICAgICAgIFxuICAgICAgICAvLyBJbml0aWFsaXplIGRhdGFiYXNlIGFuZCBBU1YgZGF0YSBpZiBmaXJzdCBsb2FkXG4gICAgICAgIGlmICh0aGlzLmlzRmlyc3RMb2FkKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmRiLmluaXRpYWxpemUoKTtcbiAgICAgICAgICAgIHRoaXMuaXNGaXJzdExvYWQgPSBmYWxzZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2hvdyB3ZWxjb21lIG5vdGljZVxuICAgICAgICAgICAgbmV3IE5vdGljZSgnV2VsY29tZSB0byBCaWJsZUxpbmshIEFTViBCaWJsZSBpcyByZWFkeS4gVXNlIFwiSW5zZXJ0IEJpYmxlIFJlZmVyZW5jZVwiIGNvbW1hbmQgdG8gZ2V0IHN0YXJ0ZWQuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmRiLmluaXRpYWxpemUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEV4cG9zZSBwbHVnaW4gaW5zdGFuY2UgZ2xvYmFsbHkgZm9yIERhdGF2aWV3SlMgYWNjZXNzXG4gICAgICAgICh3aW5kb3cgYXMgYW55KS5CaWJsZUxpbmtQbHVnaW4gPSB0aGlzO1xuICAgICAgICBcbiAgICAgICAgLy8gQWxzbyBleHBvc2UgYSBjb252ZW5pZW50IEFQSSBvYmplY3RcbiAgICAgICAgKHdpbmRvdyBhcyBhbnkpLkJpYmxlTGlua0FQSSA9IHtcbiAgICAgICAgICAgIGdldEFsbFZlcnNlczogKCkgPT4gdGhpcy5nZXRBbGxWZXJzZXNXaXRoTWV0YWRhdGEoKSxcbiAgICAgICAgICAgIHF1ZXJ5VmVyc2VzOiAoYm9vaz86IHN0cmluZywgY2hhcHRlcj86IG51bWJlciwgdHJhbnNsYXRpb24/OiBzdHJpbmcpID0+IHRoaXMucXVlcnlWZXJzZXMoYm9vaywgY2hhcHRlciwgdHJhbnNsYXRpb24pLFxuICAgICAgICAgICAgZ2V0VHJhbnNsYXRpb25zOiAoKSA9PiB0aGlzLmRiLmdldFRyYW5zbGF0aW9ucygpLFxuICAgICAgICAgICAgZ2V0Qm9va3M6ICgpID0+IHRoaXMuZGIuZ2V0Qm9va3MoKSxcbiAgICAgICAgICAgIGdldENoYXB0ZXJzRm9yQm9vazogKGJvb2s6IHN0cmluZywgdHJhbnNsYXRpb246IHN0cmluZykgPT4gdGhpcy5kYi5nZXRDaGFwdGVyc0ZvckJvb2soYm9vaywgdHJhbnNsYXRpb24pLFxuICAgICAgICAgICAgZ2V0VmVyc2VzRm9yQ2hhcHRlcjogKGJvb2s6IHN0cmluZywgY2hhcHRlcjogbnVtYmVyLCB0cmFuc2xhdGlvbjogc3RyaW5nKSA9PiB0aGlzLmRiLmdldFZlcnNlc0ZvckNoYXB0ZXIoYm9vaywgY2hhcHRlciwgdHJhbnNsYXRpb24pLFxuICAgICAgICAgICAgZ2V0VmVyc2U6IChib29rOiBzdHJpbmcsIGNoYXB0ZXI6IG51bWJlciwgdmVyc2U6IG51bWJlciwgdHJhbnNsYXRpb246IHN0cmluZykgPT4gdGhpcy5kYi5nZXRWZXJzZShib29rLCBjaGFwdGVyLCB2ZXJzZSwgdHJhbnNsYXRpb24pLFxuICAgICAgICAgICAgLy8gRXhwb3NlIHRoZSBwbHVnaW4gaW5zdGFuY2UgZm9yIGRpcmVjdCBhY2Nlc3NcbiAgICAgICAgICAgIHBsdWdpbjogdGhpc1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFBhcnNlIHJlZmVyZW5jZSAoc3VwcG9ydHMgXCJCb29rIENoYXB0ZXI6VmVyc2VcIiwgXCJCb29rIENoYXB0ZXI6VmVyc2UtVmVyc2VcIiwgXCJCb29rIENoYXB0ZXJcIiwgYW5kIFwiQm9vayBDaGFwdGVyOlZlcnNlLUJvb2sgQ2hhcHRlcjpWZXJzZVwiKVxuICAgICAgICBjb25zdCBwYXJzZVJlZmVyZW5jZSA9IChyZWY6IHN0cmluZyk6IHsgYm9vazogc3RyaW5nOyBjaGFwdGVyOiBudW1iZXI7IHZlcnNlPzogbnVtYmVyOyB9IHwgbnVsbCA9PiB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9IHJlZi5tYXRjaCgvXiguKz8pXFxzKyhcXGQrKSg/OjooXFxkKykpPyQvKTtcbiAgICAgICAgICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBbLCBib29rLCBjaGFwdGVyLCB2ZXJzZV0gPSBtYXRjaDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9vazogYm9vay50cmltKCksXG4gICAgICAgICAgICAgICAgY2hhcHRlcjogcGFyc2VJbnQoY2hhcHRlciksXG4gICAgICAgICAgICAgICAgdmVyc2U6IHZlcnNlID8gcGFyc2VJbnQodmVyc2UpIDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFJlZ2lzdGVyIGNvZGUgYmxvY2sgcHJvY2Vzc29yIHdpdGggY3VycmVudCBzZXR0aW5nc1xuICAgICAgICB0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IodGhpcy5zZXR0aW5ncy5jb2RlQmxvY2tMYW5ndWFnZSwgKHNvdXJjZSwgZWwsIGN0eCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzQ29kZUJsb2NrKHNvdXJjZSwgZWwsIGN0eCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFJlZ2lzdGVyIGNvbW1hbmRcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnaW5zZXJ0LWJpYmxlLXJlZmVyZW5jZScsXG4gICAgICAgICAgICBuYW1lOiAnSW5zZXJ0IEJpYmxlIFJlZmVyZW5jZScsXG4gICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgbmV3IEJpYmxlU2VsZWN0b3JNb2RhbChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIChyZWZlcmVuY2U6IHN0cmluZywgdHJhbnNsYXRpb246IHN0cmluZywgb3V0cHV0VHlwZTogJ3RleHQnIHwgJ2xpbmsnIHwgJ2NvZGVibG9jaycsIG9wdGlvbnM6IHN0cmluZ1tdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc2VydEJpYmxlUmVmZXJlbmNlKGVkaXRvciwgcmVmZXJlbmNlLCB0cmFuc2xhdGlvbiwgb3V0cHV0VHlwZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApLm9wZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gUmVnaXN0ZXIgc2hvcnRjdXQgY29tbWFuZHNcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlU2hvcnRjdXRzKSB7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyU2hvcnRjdXRDb21tYW5kcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIHNldHRpbmdzIHRhYlxuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IEJpYmxlTGlua1NldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcblxuICAgICAgICAvLyBSZWdpc3RlciBEYXRhdmlldyBzb3VyY2UgaWYgYXZhaWxhYmxlXG4gICAgICAgIHRoaXMucmVnaXN0ZXJEYXRhdmlld1NvdXJjZSgpO1xuXG4gICAgICAgIC8vIEFkZCBDU1MgZm9yIHN0eWxpbmdcbiAgICAgICAgdGhpcy5hZGRTdHlsZXMoKTtcblxuICAgICAgICAvLyBVcGRhdGUgc3R5bGVzIHRvIGVuc3VyZSB0aGV5J3JlIGN1cnJlbnRcbiAgICAgICAgdGhpcy51cGRhdGVTdHlsZXMoKTtcblxuICAgICAgICAvLyBUZXN0IHNldHRpbmdzIHBlcnNpc3RlbmNlXG4gICAgICAgIHRoaXMudGVzdFNldHRpbmdzUGVyc2lzdGVuY2UoKTtcblxuICAgICAgICBjb25zb2xlLmxvZygnQmlibGVMaW5rIHBsdWdpbiBsb2FkZWQnKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHRlc3RTZXR0aW5nc1BlcnNpc3RlbmNlKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnW0JpYmxlTGlua10gW3Rlc3RTZXR0aW5nc1BlcnNpc3RlbmNlXSBDdXJyZW50IHNldHRpbmdzOicsIHtcbiAgICAgICAgICAgIGRlZmF1bHRUcmFuc2xhdGlvbjogdGhpcy5zZXR0aW5ncy5kZWZhdWx0VHJhbnNsYXRpb24sXG4gICAgICAgICAgICBvdXRwdXRUeXBlOiB0aGlzLnNldHRpbmdzLm91dHB1dFR5cGUsXG4gICAgICAgICAgICBtb2RhbE91dHB1dFR5cGU6IHRoaXMuc2V0dGluZ3MubW9kYWxPdXRwdXRUeXBlLFxuICAgICAgICAgICAgbW9kYWxPcHRpb25zOiB0aGlzLnNldHRpbmdzLm1vZGFsT3B0aW9ucyxcbiAgICAgICAgICAgIGNvZGVCbG9ja0JhY2tncm91bmRDb2xvcjogdGhpcy5zZXR0aW5ncy5jb2RlQmxvY2tCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICBjb2RlQmxvY2tUZXh0Q29sb3I6IHRoaXMuc2V0dGluZ3MuY29kZUJsb2NrVGV4dENvbG9yXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFZlcmlmeSBzZXR0aW5ncyBmaWxlIGV4aXN0c1xuICAgICAgICBjb25zdCBzZXR0aW5nc1BhdGggPSBwYXRoLmpvaW4odGhpcy5hcHAudmF1bHQuYWRhcHRlci5iYXNlUGF0aCwgJy5vYnNpZGlhbicsICdwbHVnaW5zJywgJ29ic2lkaWFuLWJpYmxlbGluaycsICdkYXRhJywgJ3NldHRpbmdzLmpzb24nKTtcbiAgICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoc2V0dGluZ3NQYXRoKSkge1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhzZXR0aW5nc1BhdGgsICd1dGY4Jyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW0JpYmxlTGlua10gW3Rlc3RTZXR0aW5nc1BlcnNpc3RlbmNlXSBTZXR0aW5ncyBmaWxlIGV4aXN0cyBhbmQgY29udGFpbnM6JywgY29udGVudC5zbGljZSgwLCA1MDApKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbQmlibGVMaW5rXSBbdGVzdFNldHRpbmdzUGVyc2lzdGVuY2VdIFNldHRpbmdzIGZpbGUgZG9lcyBub3QgZXhpc3QgeWV0Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBvbnVubG9hZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGIpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZGIuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ2xlYW4gdXAgZ2xvYmFsIEFQSVxuICAgICAgICBpZiAoKHdpbmRvdyBhcyBhbnkpLkJpYmxlTGlua0FQSSkge1xuICAgICAgICAgICAgZGVsZXRlICh3aW5kb3cgYXMgYW55KS5CaWJsZUxpbmtBUEk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh3aW5kb3cgYXMgYW55KS5CaWJsZUxpbmtQbHVnaW4pIHtcbiAgICAgICAgICAgIGRlbGV0ZSAod2luZG93IGFzIGFueSkuQmlibGVMaW5rUGx1Z2luO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZygnQmlibGVMaW5rIHBsdWdpbiB1bmxvYWRlZCcpO1xuICAgIH1cblxuICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHNldHRpbmdzUGF0aCA9IHBhdGguam9pbih0aGlzLmFwcC52YXVsdC5hZGFwdGVyLmJhc2VQYXRoLCAnLm9ic2lkaWFuJywgJ3BsdWdpbnMnLCAnb2JzaWRpYW4tYmlibGVsaW5rJywgJ2RhdGEnLCAnc2V0dGluZ3MuanNvbicpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFtCaWJsZUxpbmtdIFtsb2FkU2V0dGluZ3NdIExvYWRpbmcgc2V0dGluZ3MgZnJvbTogJHtzZXR0aW5nc1BhdGh9YCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChmcy5leGlzdHNTeW5jKHNldHRpbmdzUGF0aCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKHNldHRpbmdzUGF0aCwgJ3V0ZjgnKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW0JpYmxlTGlua10gW2xvYWRTZXR0aW5nc10gU2V0dGluZ3MgZmlsZSBmb3VuZC4gRmlyc3QgMjAwIGNoYXJzOmAsIGNvbnRlbnQuc2xpY2UoMCwgMjAwKSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2F2ZWRTZXR0aW5ncyA9IEpTT04ucGFyc2UoY29udGVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIHNhdmVkU2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbQmlibGVMaW5rXSBbbG9hZFNldHRpbmdzXSBMb2FkZWQgc2V0dGluZ3Mgc3VjY2Vzc2Z1bGx5YCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbQmlibGVMaW5rXSBbbG9hZFNldHRpbmdzXSBObyBzZXR0aW5ncyBmaWxlIGZvdW5kLCB1c2luZyBkZWZhdWx0cycpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBTYXZlIGRlZmF1bHQgc2V0dGluZ3MgdG8gY3JlYXRlIHRoZSBmaWxlXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW0JpYmxlTGlua10gW2xvYWRTZXR0aW5nc10gQ3JlYXRlZCBkZWZhdWx0IHNldHRpbmdzIGZpbGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tCaWJsZUxpbmtdIFtsb2FkU2V0dGluZ3NdIEVycm9yIGxvYWRpbmcgc2V0dGluZ3M6JywgZXJyb3IpO1xuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gRW5zdXJlIGRhdGEgZGlyZWN0b3J5IGV4aXN0c1xuICAgICAgICAgICAgY29uc3QgZGF0YURpciA9IHBhdGguam9pbih0aGlzLmFwcC52YXVsdC5hZGFwdGVyLmJhc2VQYXRoLCAnLm9ic2lkaWFuJywgJ3BsdWdpbnMnLCAnb2JzaWRpYW4tYmlibGVsaW5rJywgJ2RhdGEnKTtcbiAgICAgICAgICAgIGlmICghZnMuZXhpc3RzU3luYyhkYXRhRGlyKSkge1xuICAgICAgICAgICAgICAgIGZzLm1rZGlyU3luYyhkYXRhRGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3NQYXRoID0gcGF0aC5qb2luKGRhdGFEaXIsICdzZXR0aW5ncy5qc29uJyk7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gSlNPTi5zdHJpbmdpZnkodGhpcy5zZXR0aW5ncywgbnVsbCwgMik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgW0JpYmxlTGlua10gW3NhdmVTZXR0aW5nc10gU2F2aW5nIHNldHRpbmdzIHRvOiAke3NldHRpbmdzUGF0aH1gKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbQmlibGVMaW5rXSBbc2F2ZVNldHRpbmdzXSBTZXR0aW5ncyAoZmlyc3QgMjAwIGNoYXJzKTpgLCBjb250ZW50LnNsaWNlKDAsIDIwMCkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmcy53cml0ZUZpbGVTeW5jKHNldHRpbmdzUGF0aCwgY29udGVudCwgJ3V0ZjgnKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbQmlibGVMaW5rXSBbc2F2ZVNldHRpbmdzXSBTZXR0aW5ncyBzYXZlZCBzdWNjZXNzZnVsbHlgKTtcblxuICAgICAgICAgICAgLy8gTm90ZTogQ29kZSBibG9jayBwcm9jZXNzb3IgaXMgcmVnaXN0ZXJlZCBpbiBvbmxvYWQoKSBhbmQgd2lsbCBiZSByZS1yZWdpc3RlcmVkIG9uIHBsdWdpbiByZWxvYWRcbiAgICAgICAgICAgIC8vIE5vIG5lZWQgdG8gdW5yZWdpc3Rlci9yZWdpc3RlciBoZXJlIHNpbmNlIHdlJ3JlIHVzaW5nIG91ciBvd24gc2V0dGluZ3Mgc3lzdGVtXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBzdHlsZXMgd2hlbiBzZXR0aW5ncyBjaGFuZ2VcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3R5bGVzKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbQmlibGVMaW5rXSBbc2F2ZVNldHRpbmdzXSBFcnJvciBzYXZpbmcgc2V0dGluZ3M6JywgZXJyb3IpO1xuICAgICAgICAgICAgbmV3IE5vdGljZSgnRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3MnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYWRkU3R5bGVzKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVN0eWxlcygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlU3R5bGVzKCkge1xuICAgICAgICAvLyBSZW1vdmUgZXhpc3Rpbmcgc3R5bGVzIGlmIHRoZXkgZXhpc3RcbiAgICAgICAgY29uc3QgZXhpc3RpbmdTdHlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiaWJsZWxpbmstc3R5bGVzJyk7XG4gICAgICAgIGlmIChleGlzdGluZ1N0eWxlKSB7XG4gICAgICAgICAgICBleGlzdGluZ1N0eWxlLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICBzdHlsZS5pZCA9ICdiaWJsZWxpbmstc3R5bGVzJztcbiAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSBgXG4gICAgICAgICAgICAuYmlibGUtcmVmZXJlbmNlIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHt0aGlzLnNldHRpbmdzLmNvZGVCbG9ja1RleHRDb2xvcn07XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0aGlzLnNldHRpbmdzLmNvZGVCbG9ja0JhY2tncm91bmRDb2xvcn07XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMnB4IDZweDtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgICAgIG1hcmdpbjogMCAycHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC5iaWJsZS1yZWZlcmVuY2Uuc2ltcGxlIHtcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IG5vbmU7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgICAgICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLmJpYmxlLXJlZmVyZW5jZS5kZXRhaWxlZCB7XG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLmJpYmxlLXJlZmVyZW5jZS5jdXN0b20ge1xuICAgICAgICAgICAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLmJpYmxlLXZlcnNlLWNvbnRhaW5lciB7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAxZW0gMDtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMS41O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuYmlibGUtdmVyc2UtcmVmZXJlbmNlIHtcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLmJpYmxlLXZlcnNlLXRleHQge1xuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDAuNWVtO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuYmlibGUtdmVyc2UtdGV4dCBzdXAge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke3RoaXMuc2V0dGluZ3MuY29kZUJsb2NrVmVyc2VOdW1iZXJDb2xvcn07XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBzdXBlcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLnJlZC1sZXR0ZXItdGV4dCB7XG4gICAgICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtcmVkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLmNoYXB0ZXItbnVtYmVyIHtcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMWVtO1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDAuNWVtO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuYmlibGUtdmVyc2UtbGluayB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMWVtO1xuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuYmlibGUtdmVyc2UtbGluayBhIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1hY2NlbnQpO1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMC45ZW07XG4gICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuYmlibGUtdmVyc2UtbGluayBhOmhvdmVyIHtcbiAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyogQmlibGVMaW5rIGNoYXB0ZXIvdmVyc2UgZ3JpZCBzdHlsZXMgKi9cbiAgICAgICAgICAgIC5iaWJsZWxpbmstY2hhcHRlci1ncmlkLCAuYmlibGVsaW5rLXZlcnNlLWdyaWQge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgICAgICAgICAgICAgIGdhcDogNnB4O1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDhweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5iaWJsZWxpbmstY2hhcHRlci1idG4sIC5iaWJsZWxpbmstdmVyc2UtYnRuIHtcbiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDMycHg7XG4gICAgICAgICAgICAgICAgbWluLWhlaWdodDogMzJweDtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KTtcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxZW07XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjJzLCBjb2xvciAwLjJzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmJpYmxlbGluay1jaGFwdGVyLWJ0bi5zZWxlY3RlZCwgLmJpYmxlbGluay12ZXJzZS1idG4uc2VsZWN0ZWQge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWludGVyYWN0aXZlLWFjY2VudCk7XG4gICAgICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtb24tYWNjZW50KTtcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcm9jZXNzQ29kZUJsb2NrKHNvdXJjZTogc3RyaW5nLCBlbDogSFRNTEVsZW1lbnQsIGN0eDogYW55KSB7XG4gICAgICAgIC8vIEFwcGx5IGNvZGUgYmxvY2sgc3R5bGluZyBiYXNlZCBvbiBzZXR0aW5nc1xuICAgICAgICBlbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLnNldHRpbmdzLmNvZGVCbG9ja0JhY2tncm91bmRDb2xvcjtcbiAgICAgICAgZWwuc3R5bGUuY29sb3IgPSB0aGlzLnNldHRpbmdzLmNvZGVCbG9ja1RleHRDb2xvcjtcbiAgICAgICAgXG4gICAgICAgIC8vIFBhcnNlIHRoZSBjb2RlIGJsb2NrIHBhcmFtZXRlcnNcbiAgICAgICAgY29uc3QgbGluZXMgPSBzb3VyY2UudHJpbSgpLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGZpcnN0TGluZSA9IGxpbmVzWzBdLnRyaW0oKTtcbiAgICAgICAgY29uc3QgcGFydHMgPSBmaXJzdExpbmUuc3BsaXQoJyAnKS5maWx0ZXIocCA9PiBwLmxlbmd0aCA+IDApOyAvLyBGaWx0ZXIgb3V0IGVtcHR5IHN0cmluZ3NcbiAgICAgICAgXG4gICAgICAgIC8vIFBhcnNlIG9wdGlvbnNcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHZlcnNlOiBmYWxzZSxcbiAgICAgICAgICAgIGNoYXB0ZXI6IGZhbHNlLFxuICAgICAgICAgICAgcmVkVGV4dDogZmFsc2UsXG4gICAgICAgICAgICBsaW5rOiBmYWxzZVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEZpbmQgd2hlcmUgdGhlIGFjdHVhbCByZWZlcmVuY2Ugc3RhcnRzXG4gICAgICAgIGxldCB0cmFuc2xhdGlvbkluZGV4ID0gMDtcbiAgICAgICAgbGV0IHJlZmVyZW5jZVN0YXJ0SW5kZXggPSAxO1xuXG4gICAgICAgIC8vIENoZWNrIGZvciBvcHRpb25zIGFzIGRpcmVjdCBhcmd1bWVudHMgYWZ0ZXIgJ2JpYmxlJ1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlmIChbJ3ZlcnNlJywgJ2NoYXB0ZXInLCAncmVkLXRleHQnLCAnbGluayddLmluY2x1ZGVzKHBhcnQpKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChwYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZlcnNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMudmVyc2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NoYXB0ZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5jaGFwdGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdyZWQtdGV4dCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnJlZFRleHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5saW5rID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbkluZGV4ID0gaSArIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWxzbyBjaGVjayBmb3Igb3B0aW9ucyBpbiBzcXVhcmUgYnJhY2tldHMgYXQgdGhlIGVuZFxuICAgICAgICBjb25zdCBsYXN0UGFydCA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBsZXQgcmVmZXJlbmNlRW5kSW5kZXggPSBwYXJ0cy5sZW5ndGg7XG4gICAgICAgIGlmIChsYXN0UGFydC5zdGFydHNXaXRoKCdbJykgJiYgbGFzdFBhcnQuZW5kc1dpdGgoJ10nKSkge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9uc1N0ciA9IGxhc3RQYXJ0LnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgIC8vIFN1cHBvcnQgYm90aCBjb21tYSBhbmQgcGlwZSBzZXBhcmF0b3JzXG4gICAgICAgICAgICBjb25zdCBvcHRpb25zTGlzdCA9IG9wdGlvbnNTdHIuc3BsaXQoL1ssfF0vKS5tYXAobyA9PiBvLnRyaW0oKSkuZmlsdGVyKG8gPT4gby5sZW5ndGggPiAwKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgb3B0aW9ucy52ZXJzZSA9IG9wdGlvbnMudmVyc2UgfHwgb3B0aW9uc0xpc3QuaW5jbHVkZXMoJ3ZlcnNlJyk7XG4gICAgICAgICAgICBvcHRpb25zLmNoYXB0ZXIgPSBvcHRpb25zLmNoYXB0ZXIgfHwgb3B0aW9uc0xpc3QuaW5jbHVkZXMoJ2NoYXB0ZXInKTtcbiAgICAgICAgICAgIG9wdGlvbnMucmVkVGV4dCA9IG9wdGlvbnMucmVkVGV4dCB8fCBvcHRpb25zTGlzdC5pbmNsdWRlcygncmVkLXRleHQnKTtcbiAgICAgICAgICAgIG9wdGlvbnMubGluayA9IG9wdGlvbnMubGluayB8fCBvcHRpb25zTGlzdC5pbmNsdWRlcygnbGluaycpO1xuICAgICAgICAgICAgcmVmZXJlbmNlRW5kSW5kZXgtLTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFuc2xhdGlvbkluZGV4ID49IHJlZmVyZW5jZUVuZEluZGV4KSB7XG4gICAgICAgICAgICBlbC5jcmVhdGVTcGFuKHsgdGV4dDogJ0ludmFsaWQgZm9ybWF0LiBVc2U6IGBgYGJpYmxlIFtvcHRpb24xLG9wdGlvbjJdIFRSQU5TTEFUSU9OIFJFRkVSRU5DRWBgYCBvciBgYGBiaWJsZSBUUkFOU0xBVElPTiBSRUZFUkVOQ0UgW29wdGlvbjEsb3B0aW9uMl1gYGAnIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRXh0cmFjdCB0cmFuc2xhdGlvbiBhbmQgcmVmZXJlbmNlXG4gICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uID0gcGFydHNbdHJhbnNsYXRpb25JbmRleF07XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZVRleHQgPSBwYXJ0cy5zbGljZSh0cmFuc2xhdGlvbkluZGV4ICsgMSwgcmVmZXJlbmNlRW5kSW5kZXgpLmpvaW4oJyAnKTtcblxuICAgICAgICAvLyBDaGVjayBpZiBpdCdzIGEgY3Jvc3MtY2hhcHRlci9ib29rIHJlZmVyZW5jZVxuICAgICAgICBjb25zdCBjcm9zc1JlZk1hdGNoID0gcmVmZXJlbmNlVGV4dC5tYXRjaCgvXiguKz8pXFxzKyhcXGQrKTooXFxkKyktKC4rPylcXHMrKFxcZCspOihcXGQrKSQvKTtcbiAgICAgICAgbGV0IHZlcnNlczogeyBjaGFwdGVyOiBudW1iZXI7IHZlcnNlOiBudW1iZXI7IHRleHQ6IHN0cmluZzsgfVtdID0gW107XG5cbiAgICAgICAgaWYgKGNyb3NzUmVmTWF0Y2gpIHtcbiAgICAgICAgICAgIC8vIENyb3NzIHJlZmVyZW5jZSAoZS5nLiwgXCIxIENvcmludGhpYW5zIDE6Mi0xIENvcmludGhpYW5zIDM6NFwiKVxuICAgICAgICAgICAgY29uc3QgWywgc3RhcnRCb29rLCBzdGFydENoYXB0ZXIsIHN0YXJ0VmVyc2UsIGVuZEJvb2ssIGVuZENoYXB0ZXIsIGVuZFZlcnNlXSA9IGNyb3NzUmVmTWF0Y2g7XG4gICAgICAgICAgICBjb25zdCBzdGFydENoYXB0ZXJOdW0gPSBwYXJzZUludChzdGFydENoYXB0ZXIpO1xuICAgICAgICAgICAgY29uc3Qgc3RhcnRWZXJzZU51bSA9IHBhcnNlSW50KHN0YXJ0VmVyc2UpO1xuICAgICAgICAgICAgY29uc3QgZW5kQ2hhcHRlck51bSA9IHBhcnNlSW50KGVuZENoYXB0ZXIpO1xuICAgICAgICAgICAgY29uc3QgZW5kVmVyc2VOdW0gPSBwYXJzZUludChlbmRWZXJzZSk7XG5cbiAgICAgICAgICAgIC8vIElmIGJvb2tzIGFyZSBkaWZmZXJlbnQsIHNob3cgZXJyb3IgKGZvciBub3cgd2Ugb25seSBzdXBwb3J0IGNyb3NzLWNoYXB0ZXIgaW4gc2FtZSBib29rKVxuICAgICAgICAgICAgaWYgKHN0YXJ0Qm9vayAhPT0gZW5kQm9vaykge1xuICAgICAgICAgICAgICAgIGVsLmNyZWF0ZVNwYW4oeyB0ZXh0OiAnQ3Jvc3MtYm9vayByZWZlcmVuY2VzIGFyZSBub3Qgc3VwcG9ydGVkIHlldC4nIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ29sbGVjdCB2ZXJzZXMgZnJvbSBhbGwgY2hhcHRlcnNcbiAgICAgICAgICAgIGZvciAobGV0IGNoYXB0ZXIgPSBzdGFydENoYXB0ZXJOdW07IGNoYXB0ZXIgPD0gZW5kQ2hhcHRlck51bTsgY2hhcHRlcisrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBjaGFwdGVyID09PSBzdGFydENoYXB0ZXJOdW0gPyBzdGFydFZlcnNlTnVtIDogMTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSBjaGFwdGVyID09PSBlbmRDaGFwdGVyTnVtID8gZW5kVmVyc2VOdW0gOiA5OTk7IC8vIFVzZSBoaWdoIG51bWJlciB0byBnZXQgYWxsIHZlcnNlc1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdmVyc2UgPSBzdGFydDsgdmVyc2UgPD0gZW5kOyB2ZXJzZSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZlcnNlRGF0YSA9IHRoaXMuZGIuZ2V0VmVyc2Uoc3RhcnRCb29rLCBjaGFwdGVyLCB2ZXJzZSwgdHJhbnNsYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmVyc2VEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJzZXMucHVzaCh7IGNoYXB0ZXIsIHZlcnNlLCB0ZXh0OiB2ZXJzZURhdGEudGV4dCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZlcnNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBlbC5jcmVhdGVTcGFuKHsgdGV4dDogYEludmFsaWQgcmVmZXJlbmNlOiAke3JlZmVyZW5jZVRleHR9IGluICR7dHJhbnNsYXRpb259YCB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBjb250YWluZXIgd2l0aCBhcHByb3ByaWF0ZSBjbGFzc2VzXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBlbC5jcmVhdGVEaXYoeyBcbiAgICAgICAgICAgICAgICBjbHM6IGBiaWJsZS12ZXJzZS1jb250YWluZXIke29wdGlvbnMucmVkVGV4dCA/ICcgcmVkLWxldHRlcicgOiAnJ30ke29wdGlvbnMuY2hhcHRlciA/ICcgc2hvdy1jaGFwdGVyJyA6ICcnfSR7b3B0aW9ucy52ZXJzZSA/ICcgc2hvdy12ZXJzZScgOiAnJ31gXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQWRkIHJlZmVyZW5jZSBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IHJlZiA9IGAke3N0YXJ0Qm9va30gJHtzdGFydENoYXB0ZXJOdW19OiR7c3RhcnRWZXJzZU51bX0tJHtlbmRDaGFwdGVyTnVtfToke2VuZFZlcnNlTnVtfSAoJHt0cmFuc2xhdGlvbn0pYDtcbiAgICAgICAgICAgIGNvbnRhaW5lci5jcmVhdGVTcGFuKHsgdGV4dDogcmVmICsgJzogJywgY2xzOiAnYmlibGUtdmVyc2UtcmVmZXJlbmNlJyB9KTtcblxuICAgICAgICAgICAgLy8gQWRkIHZlcnNlc1xuICAgICAgICAgICAgY29uc3QgdmVyc2VDb250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnYmlibGUtdmVyc2UtdGV4dCcgfSk7XG4gICAgICAgICAgICBsZXQgbGFzdENoYXB0ZXIgPSAtMTtcblxuICAgICAgICAgICAgdmVyc2VzLmZvckVhY2goKHZlcnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2hhcHRlciAmJiB2ZXJzZS5jaGFwdGVyICE9PSBsYXN0Q2hhcHRlcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgY2hhcHRlciBudW1iZXIgd2hlbiBjaGFwdGVyIGNoYW5nZXNcbiAgICAgICAgICAgICAgICAgICAgdmVyc2VDb250YWluZXIuY3JlYXRlRWwoJ2g0JywgeyBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGBDaGFwdGVyICR7dmVyc2UuY2hhcHRlcn1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xzOiAnY2hhcHRlci1udW1iZXInXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBsYXN0Q2hhcHRlciA9IHZlcnNlLmNoYXB0ZXI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudmVyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHZlcnNlIG51bWJlclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdXAgPSB2ZXJzZUNvbnRhaW5lci5jcmVhdGVFbCgnc3VwJywgeyB0ZXh0OiB2ZXJzZS52ZXJzZS50b1N0cmluZygpIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdXAuc3R5bGUubWFyZ2luUmlnaHQgPSAnMC4zZW0nO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEFwcGx5IHByb2Nlc3NpbmcgcnVsZXMgZmlyc3RcbiAgICAgICAgICAgICAgICBsZXQgcHJvY2Vzc2VkVGV4dCA9IHRoaXMuZGIuYXBwbHlQcm9jZXNzaW5nUnVsZXModmVyc2UudGV4dCwgdHJhbnNsYXRpb24pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgdGV4dCBmb3IgcmVkIGxldHRlciBpZiBlbmFibGVkXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucmVkVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IHByb2Nlc3NlZFRleHQuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgICAgICAgICAgd29yZHMuZm9yRWFjaCgod29yZCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNKZXN1c1dvcmQgPSB0aGlzLmlzSmVzdXNXb3JkKHdvcmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2VDb250YWluZXIuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogd29yZCArIChpIDwgd29yZHMubGVuZ3RoIC0gMSA/ICcgJyA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHM6IGlzSmVzdXNXb3JkID8gJ3JlZC1sZXR0ZXItdGV4dCcgOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIHNwYW4gdGhhdCBjYW4gY29udGFpbiBIVE1MIGZyb20gcHJvY2Vzc2luZyBydWxlc1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0U3BhbiA9IHZlcnNlQ29udGFpbmVyLmNyZWF0ZVNwYW4oKTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dFNwYW4uaW5uZXJIVE1MID0gcHJvY2Vzc2VkVGV4dCArICcgJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQWRkIGxpbmsgdG8gQmlibGUgR2F0ZXdheSBpZiByZXF1ZXN0ZWRcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmxpbmspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5rQ29udGFpbmVyID0gY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ2JpYmxlLXZlcnNlLWxpbmsnIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtUZXh0ID0gYCR7c3RhcnRCb29rfSAke3N0YXJ0Q2hhcHRlck51bX06JHtzdGFydFZlcnNlTnVtfSR7ZW5kVmVyc2VOdW0gIT09IHN0YXJ0VmVyc2VOdW0gPyAnLScgKyBlbmRWZXJzZU51bSA6ICcnfWA7XG4gICAgICAgICAgICAgICAgY29uc3QgbGlua1VybCA9IHRoaXMuZ2VuZXJhdGVCaWJsZUdhdGV3YXlVcmwobGlua1RleHQsIHRyYW5zbGF0aW9uKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5rID0gbGlua0NvbnRhaW5lci5jcmVhdGVFbCgnYScsIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogYFtAJHtsaW5rVXJsfV1gLFxuICAgICAgICAgICAgICAgICAgICBocmVmOiBsaW5rVXJsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbGluay5hZGRDbGFzcygnZXh0ZXJuYWwtbGluaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gUmVndWxhciByZWZlcmVuY2UgKGUuZy4sIFwiSm9obiAzOjE2XCIgb3IgXCJQc2FsbSAyM1wiKVxuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSByZWZlcmVuY2VUZXh0Lm1hdGNoKC9eKC4rPylcXHMrKFxcZCspKD86OihcXGQrKSg/Oi0oXFxkKykpPyk/JC8pO1xuICAgICAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgICAgIGVsLmNyZWF0ZVNwYW4oeyB0ZXh0OiBgSW52YWxpZCByZWZlcmVuY2UgZm9ybWF0OiAke3JlZmVyZW5jZVRleHR9YCB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IFssIGJvb2ssIGNoYXB0ZXIsIHN0YXJ0VmVyc2UsIGVuZFZlcnNlXSA9IG1hdGNoO1xuICAgICAgICAgICAgY29uc3Qgc3RhcnRDaGFwdGVyTnVtID0gcGFyc2VJbnQoY2hhcHRlcik7XG4gICAgICAgICAgICBjb25zdCBzdGFydFZlcnNlTnVtID0gc3RhcnRWZXJzZSA/IHBhcnNlSW50KHN0YXJ0VmVyc2UpIDogMTtcbiAgICAgICAgICAgIGNvbnN0IGVuZFZlcnNlTnVtID0gZW5kVmVyc2UgPyBwYXJzZUludChlbmRWZXJzZSkgOiBzdGFydFZlcnNlTnVtO1xuXG4gICAgICAgICAgICAvLyBHZXQgdmVyc2UgZGF0YVxuICAgICAgICAgICAgZm9yIChsZXQgdiA9IHN0YXJ0VmVyc2VOdW07IHYgPD0gZW5kVmVyc2VOdW07IHYrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlcnNlRGF0YSA9IHRoaXMuZGIuZ2V0VmVyc2UoYm9vaywgc3RhcnRDaGFwdGVyTnVtLCB2LCB0cmFuc2xhdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKHZlcnNlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2ZXJzZXMucHVzaCh7IGNoYXB0ZXI6IHN0YXJ0Q2hhcHRlck51bSwgdmVyc2U6IHYsIHRleHQ6IHZlcnNlRGF0YS50ZXh0IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZlcnNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBlbC5jcmVhdGVTcGFuKHsgdGV4dDogYEludmFsaWQgcmVmZXJlbmNlOiAke2Jvb2t9ICR7c3RhcnRDaGFwdGVyTnVtfToke3N0YXJ0VmVyc2VOdW19JHtlbmRWZXJzZU51bSAhPT0gc3RhcnRWZXJzZU51bSA/ICctJyArIGVuZFZlcnNlTnVtIDogJyd9IGluICR7dHJhbnNsYXRpb259YCB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBjb250YWluZXIgd2l0aCBhcHByb3ByaWF0ZSBjbGFzc2VzXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBlbC5jcmVhdGVEaXYoeyBcbiAgICAgICAgICAgICAgICBjbHM6IGBiaWJsZS12ZXJzZS1jb250YWluZXIke29wdGlvbnMucmVkVGV4dCA/ICcgcmVkLWxldHRlcicgOiAnJ30ke29wdGlvbnMuY2hhcHRlciA/ICcgc2hvdy1jaGFwdGVyJyA6ICcnfSR7b3B0aW9ucy52ZXJzZSA/ICcgc2hvdy12ZXJzZScgOiAnJ31gXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQWRkIHJlZmVyZW5jZSBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IHJlZiA9IGAke2Jvb2t9ICR7c3RhcnRDaGFwdGVyTnVtfToke3N0YXJ0VmVyc2VOdW19JHtlbmRWZXJzZU51bSAhPT0gc3RhcnRWZXJzZU51bSA/ICctJyArIGVuZFZlcnNlTnVtIDogJyd9ICgke3RyYW5zbGF0aW9ufSlgO1xuICAgICAgICAgICAgY29udGFpbmVyLmNyZWF0ZVNwYW4oeyB0ZXh0OiByZWYgKyAnOiAnLCBjbHM6ICdiaWJsZS12ZXJzZS1yZWZlcmVuY2UnIH0pO1xuXG4gICAgICAgICAgICAvLyBBZGQgdmVyc2VzXG4gICAgICAgICAgICBjb25zdCB2ZXJzZUNvbnRhaW5lciA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdiaWJsZS12ZXJzZS10ZXh0JyB9KTtcbiAgICAgICAgICAgIGxldCBsYXN0Q2hhcHRlciA9IC0xO1xuXG4gICAgICAgICAgICB2ZXJzZXMuZm9yRWFjaCgodmVyc2UpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5jaGFwdGVyICYmIHZlcnNlLmNoYXB0ZXIgIT09IGxhc3RDaGFwdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBjaGFwdGVyIG51bWJlciB3aGVuIGNoYXB0ZXIgY2hhbmdlc1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFwdGVyTnVtID0gdmVyc2VDb250YWluZXIuY3JlYXRlRWwoJ3N0cm9uZycsIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB2ZXJzZS5jaGFwdGVyLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjbHM6ICdjaGFwdGVyLW51bWJlcidcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNoYXB0ZXJOdW0uc3R5bGUubWFyZ2luUmlnaHQgPSAnMC41ZW0nO1xuICAgICAgICAgICAgICAgICAgICBsYXN0Q2hhcHRlciA9IHZlcnNlLmNoYXB0ZXI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudmVyc2UgfHwgdmVyc2VzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHZlcnNlIG51bWJlclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdXAgPSB2ZXJzZUNvbnRhaW5lci5jcmVhdGVFbCgnc3VwJywgeyB0ZXh0OiB2ZXJzZS52ZXJzZS50b1N0cmluZygpIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdXAuc3R5bGUubWFyZ2luUmlnaHQgPSAnMC4zZW0nO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEFwcGx5IHByb2Nlc3NpbmcgcnVsZXMgZmlyc3RcbiAgICAgICAgICAgICAgICBsZXQgcHJvY2Vzc2VkVGV4dCA9IHRoaXMuZGIuYXBwbHlQcm9jZXNzaW5nUnVsZXModmVyc2UudGV4dCwgdHJhbnNsYXRpb24pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgdGV4dCBmb3IgcmVkIGxldHRlciBpZiBlbmFibGVkXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucmVkVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IHByb2Nlc3NlZFRleHQuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgICAgICAgICAgd29yZHMuZm9yRWFjaCgod29yZCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNKZXN1c1dvcmQgPSB0aGlzLmlzSmVzdXNXb3JkKHdvcmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2VDb250YWluZXIuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogd29yZCArIChpIDwgd29yZHMubGVuZ3RoIC0gMSA/ICcgJyA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHM6IGlzSmVzdXNXb3JkID8gJ3JlZC1sZXR0ZXItdGV4dCcgOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIHNwYW4gdGhhdCBjYW4gY29udGFpbiBIVE1MIGZyb20gcHJvY2Vzc2luZyBydWxlc1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0U3BhbiA9IHZlcnNlQ29udGFpbmVyLmNyZWF0ZVNwYW4oKTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dFNwYW4uaW5uZXJIVE1MID0gcHJvY2Vzc2VkVGV4dCArICcgJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQWRkIGxpbmsgdG8gQmlibGUgR2F0ZXdheSBpZiByZXF1ZXN0ZWQgKGF0IHRoZSBib3R0b20pXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5saW5rKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGlua0NvbnRhaW5lciA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdiaWJsZS12ZXJzZS1saW5rJyB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5rVGV4dCA9IGAke2Jvb2t9ICR7c3RhcnRDaGFwdGVyTnVtfToke3N0YXJ0VmVyc2VOdW19JHtlbmRWZXJzZU51bSAhPT0gc3RhcnRWZXJzZU51bSA/ICctJyArIGVuZFZlcnNlTnVtIDogJyd9YDtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5rVXJsID0gdGhpcy5nZW5lcmF0ZUJpYmxlR2F0ZXdheVVybChsaW5rVGV4dCwgdHJhbnNsYXRpb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBsaW5rQ29udGFpbmVyLmNyZWF0ZUVsKCdhJywge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBgW0Ake2xpbmtVcmx9XWAsXG4gICAgICAgICAgICAgICAgICAgIGhyZWY6IGxpbmtVcmxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsaW5rLmFkZENsYXNzKCdleHRlcm5hbC1saW5rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgcHJpdmF0ZSByZWdpc3RlclNob3J0Y3V0Q29tbWFuZHMoKSB7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuc2V0dGluZ3Muc2hvcnRjdXRzKS5mb3JFYWNoKChbc2hvcnRjdXQsIHJlZmVyZW5jZV0pID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICAgICAgaWQ6IGBiaWJsZS1zaG9ydGN1dC0ke3Nob3J0Y3V0fWAsXG4gICAgICAgICAgICAgICAgbmFtZTogYEluc2VydCAke3JlZmVyZW5jZX0gKCR7c2hvcnRjdXR9KWAsXG4gICAgICAgICAgICAgICAgZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluc2VydFNob3J0Y3V0UmVmZXJlbmNlKGVkaXRvciwgcmVmZXJlbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbnNlcnRTaG9ydGN1dFJlZmVyZW5jZShlZGl0b3I6IEVkaXRvciwgcmVmZXJlbmNlOiBzdHJpbmcpIHtcbiAgICAgICAgLy8gUGFyc2UgdGhlIHJlZmVyZW5jZSAoZS5nLiwgXCJKb2huIDM6MTZcIilcbiAgICAgICAgY29uc3QgbWF0Y2ggPSByZWZlcmVuY2UubWF0Y2goL14oXFx3KylcXHMrKFxcZCspOihcXGQrKSQvKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShgSW52YWxpZCByZWZlcmVuY2UgZm9ybWF0OiAke3JlZmVyZW5jZX1gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IFssIGJvb2ssIGNoYXB0ZXIsIHZlcnNlXSA9IG1hdGNoO1xuICAgICAgICBjb25zdCBjaGFwdGVyTnVtID0gcGFyc2VJbnQoY2hhcHRlcik7XG4gICAgICAgIGNvbnN0IHZlcnNlTnVtID0gcGFyc2VJbnQodmVyc2UpO1xuXG4gICAgICAgIC8vIEdldCB2ZXJzZSBkYXRhXG4gICAgICAgIGNvbnN0IHZlcnNlRGF0YSA9IHRoaXMuZGIuZ2V0VmVyc2UoYm9vaywgY2hhcHRlck51bSwgdmVyc2VOdW0sIHRoaXMuc2V0dGluZ3MuZGVmYXVsdFRyYW5zbGF0aW9uKTtcbiAgICAgICAgaWYgKCF2ZXJzZURhdGEpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYFZlcnNlIG5vdCBmb3VuZDogJHtyZWZlcmVuY2V9IGluICR7dGhpcy5zZXR0aW5ncy5kZWZhdWx0VHJhbnNsYXRpb259YCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmluc2VydEJpYmxlUmVmZXJlbmNlKGVkaXRvciwgcmVmZXJlbmNlLCB0aGlzLnNldHRpbmdzLmRlZmF1bHRUcmFuc2xhdGlvbiwgdGhpcy5zZXR0aW5ncy5vdXRwdXRUeXBlLCBbXSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbnNlcnRCaWJsZVJlZmVyZW5jZShcbiAgICAgICAgZWRpdG9yOiBFZGl0b3IsXG4gICAgICAgIHJlZmVyZW5jZTogc3RyaW5nLFxuICAgICAgICB0cmFuc2xhdGlvbjogc3RyaW5nLFxuICAgICAgICBvdXRwdXRUeXBlOiAndGV4dCcgfCAnbGluaycgfCAnY29kZWJsb2NrJyxcbiAgICAgICAgb3B0aW9uczogc3RyaW5nW11cbiAgICApIHtcbiAgICAgICAgLy8gUGFyc2UgdGhlIHJlZmVyZW5jZVxuICAgICAgICAvLyBTdXBwb3J0IGZvcm1hdHM6IEJvb2sgQ2hhcHRlcjpWZXJzZSwgQm9vayBDaGFwdGVyOlZlcnNlLVZlcnNlLCBCb29rIENoYXB0ZXI6VmVyc2UsVmVyc2UsVmVyc2VcbiAgICAgICAgbGV0IG11bHRpVmVyc2VNYXRjaCA9IHJlZmVyZW5jZS5tYXRjaCgvXiguKz8pXFxzKyhcXGQrKTooW1xcZCxcXC1dKykkLyk7IC8vIEJvb2sgQ2hhcHRlcjp2ZXJzZSx2ZXJzZSx2ZXJzZSBvciByYW5nZVxuICAgICAgICBsZXQgY3Jvc3NDaGFwdGVyTWF0Y2ggPSByZWZlcmVuY2UubWF0Y2goL14oLis/KVxccysoXFxkKyk6KFxcZCspLSguKz8pXFxzKyhcXGQrKTooXFxkKykkLyk7IC8vIEJvb2sgQ2hhcHRlcjpTdGFydFZlcnNlLUJvb2sgQ2hhcHRlcjpFbmRWZXJzZVxuICAgICAgICBsZXQgbWF0Y2ggPSByZWZlcmVuY2UubWF0Y2goL14oLis/KVxccysoXFxkKykoPzo6KFxcZCspKT8kLyk7IC8vIEJvb2sgQ2hhcHRlciBvciBCb29rIENoYXB0ZXI6VmVyc2VcbiAgICAgICAgbGV0IHZlcnNlczogeyB2ZXJzZTogbnVtYmVyOyB0ZXh0OiBzdHJpbmc7IH1bXSA9IFtdO1xuICAgICAgICBsZXQgYm9vazogc3RyaW5nLCBjaGFwdGVyTnVtOiBudW1iZXIsIHN0YXJ0VmVyc2VOdW06IG51bWJlciwgZW5kVmVyc2VOdW06IG51bWJlciB8IG51bGw7XG5cbiAgICAgICAgaWYgKGNyb3NzQ2hhcHRlck1hdGNoKSB7XG4gICAgICAgICAgICAvLyBOb3QgeWV0IHN1cHBvcnRlZCwgZmFsbGJhY2sgdG8gb2xkIGxvZ2ljXG4gICAgICAgICAgICBuZXcgTm90aWNlKCdDcm9zcy1jaGFwdGVyIHJlZmVyZW5jZXMgYXJlIG5vdCBzdXBwb3J0ZWQgeWV0LicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKG11bHRpVmVyc2VNYXRjaCkge1xuICAgICAgICAgICAgbGV0IHZlcnNlUGFydDtcbiAgICAgICAgICAgIFssIGJvb2ssIGNoYXB0ZXJOdW0sIHZlcnNlUGFydF0gPSBtdWx0aVZlcnNlTWF0Y2g7XG4gICAgICAgICAgICBib29rID0gYm9vay50cmltKCk7XG4gICAgICAgICAgICBjaGFwdGVyTnVtID0gcGFyc2VJbnQoY2hhcHRlck51bSk7XG4gICAgICAgICAgICAvLyBTcGxpdCBieSBjb21tYSwgaGFuZGxlIHJhbmdlc1xuICAgICAgICAgICAgbGV0IHZlcnNlTnVtYmVyczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgICAgIHZlcnNlUGFydC5zcGxpdCgnLCcpLmZvckVhY2gocGFydCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnQuaW5jbHVkZXMoJy0nKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBbc3RhcnQsIGVuZF0gPSBwYXJ0LnNwbGl0KCctJykubWFwKE51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHYgPSBzdGFydDsgdiA8PSBlbmQ7IHYrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2VOdW1iZXJzLnB1c2godik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2ZXJzZU51bWJlcnMucHVzaChOdW1iZXIocGFydCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yIChjb25zdCB2IG9mIHZlcnNlTnVtYmVycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlcnNlRGF0YSA9IHRoaXMuZGIuZ2V0VmVyc2UoYm9vaywgY2hhcHRlck51bSwgdiwgdHJhbnNsYXRpb24pO1xuICAgICAgICAgICAgICAgIGlmICh2ZXJzZURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyc2VzLnB1c2goeyB2ZXJzZTogdiwgdGV4dDogdmVyc2VEYXRhLnRleHQgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBbLCBib29rLCBjaGFwdGVyTnVtLCBzdGFydFZlcnNlTnVtXSA9IG1hdGNoO1xuICAgICAgICAgICAgYm9vayA9IGJvb2sudHJpbSgpO1xuICAgICAgICAgICAgY2hhcHRlck51bSA9IHBhcnNlSW50KGNoYXB0ZXJOdW0pO1xuICAgICAgICAgICAgc3RhcnRWZXJzZU51bSA9IHN0YXJ0VmVyc2VOdW0gPyBwYXJzZUludChzdGFydFZlcnNlTnVtKSA6IDE7XG4gICAgICAgICAgICBlbmRWZXJzZU51bSA9IHN0YXJ0VmVyc2VOdW07XG4gICAgICAgICAgICBjb25zdCB2ZXJzZURhdGEgPSB0aGlzLmRiLmdldFZlcnNlKGJvb2ssIGNoYXB0ZXJOdW0sIHN0YXJ0VmVyc2VOdW0sIHRyYW5zbGF0aW9uKTtcbiAgICAgICAgICAgIGlmICh2ZXJzZURhdGEpIHtcbiAgICAgICAgICAgICAgICB2ZXJzZXMucHVzaCh7IHZlcnNlOiBzdGFydFZlcnNlTnVtLCB0ZXh0OiB2ZXJzZURhdGEudGV4dCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYEludmFsaWQgcmVmZXJlbmNlIGZvcm1hdDogJHtyZWZlcmVuY2V9YCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmVyc2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShgSW52YWxpZCByZWZlcmVuY2U6ICR7cmVmZXJlbmNlfSBpbiAke3RyYW5zbGF0aW9ufWApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRleHQ6IHN0cmluZztcbiAgICAgICAgaWYgKG91dHB1dFR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgY29uc3QgdmVyc2VUZXh0cyA9IHZlcnNlcy5tYXAodiA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZlcnNlcy5sZW5ndGggPiAxID8gYCR7di52ZXJzZX0gJHt2LnRleHR9YCA6IHYudGV4dDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGV4dCA9IGAke3JlZmVyZW5jZX0gKCR7dHJhbnNsYXRpb259KTogJHt2ZXJzZVRleHRzLmpvaW4oJyAnKX1gO1xuICAgICAgICB9IGVsc2UgaWYgKG91dHB1dFR5cGUgPT09ICdsaW5rJykge1xuICAgICAgICAgICAgdGV4dCA9IGBbJHtyZWZlcmVuY2V9ICgke3RyYW5zbGF0aW9ufSldKCR7dGhpcy5nZW5lcmF0ZUJpYmxlR2F0ZXdheVVybChyZWZlcmVuY2UsIHRyYW5zbGF0aW9uKX0pYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIENvZGUgYmxvY2sgb3V0cHV0XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zU3RyID0gb3B0aW9ucy5sZW5ndGggPiAwID8gYCBbJHtvcHRpb25zLmpvaW4oJ3wnKX1dYCA6ICcnO1xuICAgICAgICAgICAgdGV4dCA9IGBcXGBcXGBcXGAke3RoaXMuc2V0dGluZ3MuY29kZUJsb2NrTGFuZ3VhZ2V9XFxuJHt0cmFuc2xhdGlvbn0gJHtyZWZlcmVuY2V9JHtvcHRpb25zU3RyfVxcbiR7dmVyc2VzLm1hcCh2ID0+IHYudGV4dCkuam9pbignICcpfVxcblxcYFxcYFxcYGA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbnNlcnQgdGhlIHRleHRcbiAgICAgICAgZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24odGV4dCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHZpcnR1YWwgbm90ZSBmb3IgRGF0YXZpZXdcbiAgICAgICAgLy8gdGhpcy5jcmVhdGVWZXJzZU5vdGUoYm9vaywgY2hhcHRlck51bSwgc3RhcnRWZXJzZU51bSwgdHJhbnNsYXRpb24pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZm9ybWF0UmVmZXJlbmNlKGJvb2s6IHN0cmluZywgY2hhcHRlcjogbnVtYmVyLCB2ZXJzZTogbnVtYmVyLCB0cmFuc2xhdGlvbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGZvcm1hdHRlZEJvb2sgPSBib29rO1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zaG93Qm9va0FiYnIgJiYgQk9PS19BQkJSRVZJQVRJT05TW2Jvb2tdKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRCb29rID0gQk9PS19BQkJSRVZJQVRJT05TW2Jvb2tdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3Muc2hvd1RyYW5zbGF0aW9uQWJiciBcbiAgICAgICAgICAgID8gYCR7Zm9ybWF0dGVkQm9va30gJHtjaGFwdGVyfToke3ZlcnNlfSAke3RyYW5zbGF0aW9ufWBcbiAgICAgICAgICAgIDogYCR7Zm9ybWF0dGVkQm9va30gJHtjaGFwdGVyfToke3ZlcnNlfWA7XG4gICAgfVxuXG5cblxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlVmVyc2VOb3RlKGJvb2s6IHN0cmluZywgY2hhcHRlcjogbnVtYmVyLCB2ZXJzZTogbnVtYmVyLCB0cmFuc2xhdGlvbjogc3RyaW5nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB2ZXJzZURhdGEgPSB0aGlzLmRiLmdldFZlcnNlKGJvb2ssIGNoYXB0ZXIsIHZlcnNlLCB0cmFuc2xhdGlvbik7XG4gICAgICAgICAgICBpZiAoIXZlcnNlRGF0YSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAvLyBDcmVhdGUgdmlydHVhbCBub3RlIHBhdGhcbiAgICAgICAgICAgIGNvbnN0IG5vdGVQYXRoID0gYEJpYmxlLyR7Ym9va30vJHtjaGFwdGVyfS8ke3ZlcnNlfS5tZGA7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIG5vdGUgYWxyZWFkeSBleGlzdHNcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nRmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChub3RlUGF0aCk7XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdGaWxlKSByZXR1cm47XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgZGlyZWN0b3J5IHN0cnVjdHVyZSBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gICAgICAgICAgICBjb25zdCBkaXJQYXRoID0gYEJpYmxlLyR7Ym9va30vJHtjaGFwdGVyfWA7XG4gICAgICAgICAgICBjb25zdCBkaXJFeGlzdHMgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZGlyUGF0aCk7XG4gICAgICAgICAgICBpZiAoIWRpckV4aXN0cykge1xuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgZGlyZWN0b3J5IHN0cnVjdHVyZVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlRGlyZWN0b3J5UmVjdXJzaXZlKGRpclBhdGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgdHJhbnNsYXRpb24gbWV0YWRhdGFcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uSW5mbyA9IHRoaXMuZ2V0VHJhbnNsYXRpb25JbmZvKHRyYW5zbGF0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9IHRoaXMuZm9ybWF0UmVmZXJlbmNlKGJvb2ssIGNoYXB0ZXIsIHZlcnNlLCB0cmFuc2xhdGlvbik7XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBub3RlIGNvbnRlbnQgd2l0aCByaWNoIFlBTUwgZnJvbnRtYXR0ZXJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBgLS0tXG5ib29rOiAke2Jvb2t9XG5jaGFwdGVyOiAke2NoYXB0ZXJ9XG52ZXJzZTogJHt2ZXJzZX1cbnRyYW5zbGF0aW9uOiAke3RyYW5zbGF0aW9ufVxudGV4dDogXCIke3ZlcnNlRGF0YS50ZXh0LnJlcGxhY2UoL1wiL2csICdcXFxcXCInKX1cIlxucmVmZXJlbmNlOiBcIiR7cmVmZXJlbmNlfVwiXG5sYW5ndWFnZTogXCIke3RyYW5zbGF0aW9uSW5mby5sYW5ndWFnZX1cIlxuY2F0ZWdvcnk6IFwiJHt0cmFuc2xhdGlvbkluZm8uY2F0ZWdvcnl9XCJcbnRyYW5zbGF0aW9uX25hbWU6IFwiJHt0cmFuc2xhdGlvbkluZm8ubmFtZX1cIlxuY3JlYXRlZDogJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9XG4tLS1cblxuIyAke3JlZmVyZW5jZX1cblxuJHt2ZXJzZURhdGEudGV4dH1cblxuKlRyYW5zbGF0aW9uOiAke3RyYW5zbGF0aW9uSW5mby5uYW1lfSAoJHt0cmFuc2xhdGlvbn0pKlxuXG4jIyBNZXRhZGF0YVxuXG4tICoqQm9vayoqOiAke2Jvb2t9XG4tICoqQ2hhcHRlcioqOiAke2NoYXB0ZXJ9XG4tICoqVmVyc2UqKjogJHt2ZXJzZX1cbi0gKipUcmFuc2xhdGlvbioqOiAke3RyYW5zbGF0aW9ufVxuLSAqKkxhbmd1YWdlKio6ICR7dHJhbnNsYXRpb25JbmZvLmxhbmd1YWdlfVxuLSAqKkNhdGVnb3J5Kio6ICR7dHJhbnNsYXRpb25JbmZvLmNhdGVnb3J5fVxuLSAqKlJlZmVyZW5jZSoqOiAke3JlZmVyZW5jZX1cblxuIyMgUmVsYXRlZCBWZXJzZXNcblxuXFxgXFxgXFxgZGF0YXZpZXdcbkxJU1QgcmVmZXJlbmNlLCB0ZXh0XG5GUk9NIFwiQmlibGVcIlxuV0hFUkUgYm9vayA9IFwiJHtib29rfVwiIEFORCBjaGFwdGVyID0gJHtjaGFwdGVyfVxuU09SVCB2ZXJzZVxuXFxgXFxgXFxgXG5cbiMjIENyb3NzLVJlZmVyZW5jZXNcblxuXFxgXFxgXFxgZGF0YXZpZXdcbkxJU1QgcmVmZXJlbmNlLCB0ZXh0XG5GUk9NIFwiQmlibGVcIlxuV0hFUkUgY29udGFpbnModGV4dCwgXCIke3ZlcnNlRGF0YS50ZXh0LnNwbGl0KCcgJykuc2xpY2UoMCwgMykuam9pbignICcpfVwiKVxuQU5EIGZpbGUubmFtZSAhPSB0aGlzLmZpbGUubmFtZVxuTElNSVQgNVxuXFxgXFxgXFxgXG5gO1xuXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIGZpbGVcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZShub3RlUGF0aCwgY29udGVudCk7XG4gICAgICAgICAgICBcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIHZlcnNlIG5vdGU6JywgZXJyb3IpO1xuICAgICAgICAgICAgLy8gRG9uJ3Qgc2hvdyBub3RpY2UgdG8gdXNlciBhcyB0aGlzIGlzIGEgYmFja2dyb3VuZCBvcGVyYXRpb25cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VHJhbnNsYXRpb25JbmZvKGFiYnJldmlhdGlvbjogc3RyaW5nKTogeyBuYW1lOiBzdHJpbmc7IGxhbmd1YWdlOiBzdHJpbmc7IGNhdGVnb3J5OiBzdHJpbmcgfSB7XG4gICAgICAgIC8vIEdldCBmcm9tIGRhdGFiYXNlIGZpcnN0XG4gICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uID0gdGhpcy5kYi5nZXRUcmFuc2xhdGlvbnMoKS5maW5kKHQgPT4gdC5hYmJyZXZpYXRpb24gPT09IGFiYnJldmlhdGlvbik7XG4gICAgICAgIGlmICh0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgLy8gVHJ5IHRvIGdldCBhZGRpdGlvbmFsIGluZm8gZnJvbSBvdXIga25vd24gdHJhbnNsYXRpb25zXG4gICAgICAgICAgICBjb25zdCBrbm93blRyYW5zbGF0aW9uID0gdGhpcy5nZXRLbm93blRyYW5zbGF0aW9uKGFiYnJldmlhdGlvbik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHRyYW5zbGF0aW9uLm5hbWUsXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2U6IGtub3duVHJhbnNsYXRpb24/Lmxhbmd1YWdlIHx8ICd1bmtub3duJyxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeToga25vd25UcmFuc2xhdGlvbj8uY2F0ZWdvcnkgfHwgJ1Vua25vd24nXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogYWJicmV2aWF0aW9uLFxuICAgICAgICAgICAgbGFuZ3VhZ2U6ICd1bmtub3duJyxcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnVW5rbm93bidcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEtub3duVHJhbnNsYXRpb24oYWJicmV2aWF0aW9uOiBzdHJpbmcpOiB7IG5hbWU6IHN0cmluZzsgbGFuZ3VhZ2U6IHN0cmluZzsgY2F0ZWdvcnk6IHN0cmluZyB9IHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IGtub3duVHJhbnNsYXRpb25zID0ge1xuICAgICAgICAgICAgJ0FTVic6IHsgbmFtZTogJ0FtZXJpY2FuIFN0YW5kYXJkIFZlcnNpb24gKDE5MDEpJywgbGFuZ3VhZ2U6ICdlbicsIGNhdGVnb3J5OiAnRW5nbGlzaCcgfSxcbiAgICAgICAgICAgICdLSlYnOiB7IG5hbWU6ICdLaW5nIEphbWVzIFZlcnNpb24nLCBsYW5ndWFnZTogJ2VuJywgY2F0ZWdvcnk6ICdFbmdsaXNoJyB9LFxuICAgICAgICAgICAgJ1dFQic6IHsgbmFtZTogJ1dvcmxkIEVuZ2xpc2ggQmlibGUnLCBsYW5ndWFnZTogJ2VuJywgY2F0ZWdvcnk6ICdFbmdsaXNoJyB9LFxuICAgICAgICAgICAgJ1lMVCc6IHsgbmFtZTogJ1lvdW5nXFwncyBMaXRlcmFsIFRyYW5zbGF0aW9uICgxODk4KScsIGxhbmd1YWdlOiAnZW4nLCBjYXRlZ29yeTogJ0VuZ2xpc2gnIH0sXG4gICAgICAgICAgICAnQkJFJzogeyBuYW1lOiAnQmlibGUgaW4gQmFzaWMgRW5nbGlzaCAoMTk0OS8xOTY0KScsIGxhbmd1YWdlOiAnZW4nLCBjYXRlZ29yeTogJ0VuZ2xpc2gnIH0sXG4gICAgICAgICAgICAnQlNCJzogeyBuYW1lOiAnQmVyZWFuIFN0YW5kYXJkIEJpYmxlJywgbGFuZ3VhZ2U6ICdlbicsIGNhdGVnb3J5OiAnRW5nbGlzaCcgfSxcbiAgICAgICAgICAgICdDUERWJzogeyBuYW1lOiAnQ2F0aG9saWMgUHVibGljIERvbWFpbiBWZXJzaW9uJywgbGFuZ3VhZ2U6ICdlbicsIGNhdGVnb3J5OiAnRW5nbGlzaCcgfSxcbiAgICAgICAgICAgICdTcGFSVic6IHsgbmFtZTogJ0xhIFNhbnRhIEJpYmxpYSBSZWluYS1WYWxlcmEgKDE5MDkpJywgbGFuZ3VhZ2U6ICdlcycsIGNhdGVnb3J5OiAnU3BhbmlzaCcgfSxcbiAgICAgICAgICAgICdWdWxnYXRlJzogeyBuYW1lOiAnTGF0aW4gVnVsZ2F0ZScsIGxhbmd1YWdlOiAnbGEnLCBjYXRlZ29yeTogJ0xhdGluJyB9LFxuICAgICAgICAgICAgJ0J5eic6IHsgbmFtZTogJ0J5emFudGluZSBUZXh0Zm9ybSAoR3JlZWspJywgbGFuZ3VhZ2U6ICdncmMnLCBjYXRlZ29yeTogJ0dyZWVrJyB9LFxuICAgICAgICAgICAgJ1dMQyc6IHsgbmFtZTogJ1dlc3RtaW5zdGVyIExlbmluZ3JhZCBDb2RleCcsIGxhbmd1YWdlOiAnaGJvJywgY2F0ZWdvcnk6ICdIZWJyZXcnIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBrbm93blRyYW5zbGF0aW9uc1thYmJyZXZpYXRpb25dIHx8IG51bGw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBjcmVhdGVEaXJlY3RvcnlSZWN1cnNpdmUoZGlyUGF0aDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gZGlyUGF0aC5zcGxpdCgnLycpO1xuICAgICAgICBsZXQgY3VycmVudFBhdGggPSAnJztcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykge1xuICAgICAgICAgICAgY3VycmVudFBhdGggPSBjdXJyZW50UGF0aCA/IGAke2N1cnJlbnRQYXRofS8ke3BhcnR9YCA6IHBhcnQ7XG4gICAgICAgICAgICBjb25zdCBleGlzdHMgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoY3VycmVudFBhdGgpO1xuICAgICAgICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGVGb2xkZXIoY3VycmVudFBhdGgpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvbGRlciBtaWdodCBhbHJlYWR5IGV4aXN0LCBjb250aW51ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVnaXN0ZXJEYXRhdmlld1NvdXJjZSgpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgRGF0YXZpZXcgcGx1Z2luIGlzIGF2YWlsYWJsZVxuICAgICAgICBjb25zdCBkYXRhdmlld1BsdWdpbiA9IHRoaXMuYXBwLnBsdWdpbnMucGx1Z2luc1snZGF0YXZpZXcnXTtcbiAgICAgICAgaWYgKCFkYXRhdmlld1BsdWdpbikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tCaWJsZUxpbmtdIERhdGF2aWV3IHBsdWdpbiBub3QgZm91bmQsIHNraXBwaW5nIERhdGF2aWV3IGludGVncmF0aW9uJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gRGF0YXZpZXcgZG9lc24ndCBzdXBwb3J0IGN1c3RvbSBzb3VyY2VzIGluIERRTCwgc28gd2UnbGwgZm9jdXMgb24gRGF0YXZpZXdKU1xuICAgICAgICAgICAgLy8gVGhlIHBsdWdpbiBpbnN0YW5jZSBpcyBleHBvc2VkIGdsb2JhbGx5IGZvciBEYXRhdmlld0pTIGFjY2Vzc1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tCaWJsZUxpbmtdIERhdGF2aWV3IHBsdWdpbiBmb3VuZCwgZXhwb3NpbmcgQVBJIGZvciBEYXRhdmlld0pTIGFjY2VzcycpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tCaWJsZUxpbmtdIFVzZSBCaWJsZUxpbmtBUEkgb3IgQmlibGVMaW5rUGx1Z2luIGluIERhdGF2aWV3SlMgcXVlcmllcycpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0JpYmxlTGlua10gRmFpbGVkIHRvIGluaXRpYWxpemUgRGF0YXZpZXcgaW50ZWdyYXRpb246JywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVEYXRhdmlld1F1ZXJ5KHF1ZXJ5OiBzdHJpbmcpOiBhbnlbXSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW0JpYmxlTGlua10gUHJvY2Vzc2luZyBEYXRhdmlldyBxdWVyeTonLCBxdWVyeSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBxdWVyeSB0byBleHRyYWN0IGNvbXBvbmVudHNcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZFF1ZXJ5ID0gdGhpcy5wYXJzZURhdGF2aWV3UXVlcnkocXVlcnkpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tCaWJsZUxpbmtdIFBhcnNlZCBxdWVyeTonLCBwYXJzZWRRdWVyeSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEdldCBhbGwgdmVyc2VzIHRoYXQgbWF0Y2ggdGhlIGNyaXRlcmlhXG4gICAgICAgICAgICBsZXQgcmVzdWx0cyA9IHRoaXMuZ2V0QWxsVmVyc2VzV2l0aE1ldGFkYXRhKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFwcGx5IFdIRVJFIGNvbmRpdGlvbnNcbiAgICAgICAgICAgIGlmIChwYXJzZWRRdWVyeS53aGVyZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdHMgPSB0aGlzLmFwcGx5V2hlcmVDb25kaXRpb25zKHJlc3VsdHMsIHBhcnNlZFF1ZXJ5LndoZXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQXBwbHkgU09SVFxuICAgICAgICAgICAgaWYgKHBhcnNlZFF1ZXJ5LnNvcnQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzID0gdGhpcy5hcHBseVNvcnQocmVzdWx0cywgcGFyc2VkUXVlcnkuc29ydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFwcGx5IExJTUlUXG4gICAgICAgICAgICBpZiAocGFyc2VkUXVlcnkubGltaXQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5zbGljZSgwLCBwYXJzZWRRdWVyeS5saW1pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbQmlibGVMaW5rXSBRdWVyeSByZXR1cm5lZCAke3Jlc3VsdHMubGVuZ3RofSByZXN1bHRzYCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0JpYmxlTGlua10gRGF0YXZpZXcgcXVlcnkgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXJzZURhdGF2aWV3UXVlcnkocXVlcnk6IHN0cmluZyk6IHtcbiAgICAgICAgd2hlcmU/OiBhbnlbXTtcbiAgICAgICAgc29ydD86IHsgZmllbGQ6IHN0cmluZzsgZGlyZWN0aW9uOiAnYXNjJyB8ICdkZXNjJyB9W107XG4gICAgICAgIGxpbWl0PzogbnVtYmVyO1xuICAgIH0ge1xuICAgICAgICBjb25zdCByZXN1bHQ6IGFueSA9IHt9O1xuICAgICAgICBcbiAgICAgICAgLy8gUGFyc2UgV0hFUkUgY2xhdXNlXG4gICAgICAgIGNvbnN0IHdoZXJlTWF0Y2ggPSBxdWVyeS5tYXRjaCgvV0hFUkVcXHMrKC4rPykoPzpcXHMrU09SVHxcXHMrTElNSVR8JCkvaSk7XG4gICAgICAgIGlmICh3aGVyZU1hdGNoKSB7XG4gICAgICAgICAgICByZXN1bHQud2hlcmUgPSB0aGlzLnBhcnNlV2hlcmVDb25kaXRpb25zKHdoZXJlTWF0Y2hbMV0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBQYXJzZSBTT1JUIGNsYXVzZVxuICAgICAgICBjb25zdCBzb3J0TWF0Y2ggPSBxdWVyeS5tYXRjaCgvU09SVFxccysoLis/KSg/OlxccytMSU1JVHwkKS9pKTtcbiAgICAgICAgaWYgKHNvcnRNYXRjaCkge1xuICAgICAgICAgICAgcmVzdWx0LnNvcnQgPSB0aGlzLnBhcnNlU29ydENvbmRpdGlvbnMoc29ydE1hdGNoWzFdKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gUGFyc2UgTElNSVQgY2xhdXNlXG4gICAgICAgIGNvbnN0IGxpbWl0TWF0Y2ggPSBxdWVyeS5tYXRjaCgvTElNSVRcXHMrKFxcZCspL2kpO1xuICAgICAgICBpZiAobGltaXRNYXRjaCkge1xuICAgICAgICAgICAgcmVzdWx0LmxpbWl0ID0gcGFyc2VJbnQobGltaXRNYXRjaFsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXJzZVdoZXJlQ29uZGl0aW9ucyhjb25kaXRpb25zOiBzdHJpbmcpOiBhbnlbXSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZENvbmRpdGlvbnM6IGFueVtdID0gW107XG4gICAgICAgIFxuICAgICAgICAvLyBTcGxpdCBieSBBTkQvT1IgKHNpbXBsaWZpZWQgLSBhc3N1bWVzIEFORCBmb3Igbm93KVxuICAgICAgICBjb25zdCBhbmRQYXJ0cyA9IGNvbmRpdGlvbnMuc3BsaXQoL1xccytBTkRcXHMrL2kpO1xuICAgICAgICBcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIGFuZFBhcnRzKSB7XG4gICAgICAgICAgICAvLyBQYXJzZSBmaWVsZCA9IHZhbHVlXG4gICAgICAgICAgICBjb25zdCBlcU1hdGNoID0gcGFydC5tYXRjaCgvKFxcdyspXFxzKj1cXHMqXCIoW15cIl0rKVwiL2kpO1xuICAgICAgICAgICAgaWYgKGVxTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWRDb25kaXRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXF1YWxzJyxcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IGVxTWF0Y2hbMV0udG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGVxTWF0Y2hbMl1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUGFyc2UgZmllbGQgPSBudW1iZXJcbiAgICAgICAgICAgIGNvbnN0IG51bU1hdGNoID0gcGFydC5tYXRjaCgvKFxcdyspXFxzKj1cXHMqKFxcZCspL2kpO1xuICAgICAgICAgICAgaWYgKG51bU1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkQ29uZGl0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2VxdWFscycsXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiBudW1NYXRjaFsxXS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcGFyc2VJbnQobnVtTWF0Y2hbMl0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFBhcnNlIGNvbnRhaW5zKGZpZWxkLCBcInZhbHVlXCIpXG4gICAgICAgICAgICBjb25zdCBjb250YWluc01hdGNoID0gcGFydC5tYXRjaCgvY29udGFpbnNcXCgoXFx3KyksXFxzKlwiKFteXCJdKylcIlxcKS9pKTtcbiAgICAgICAgICAgIGlmIChjb250YWluc01hdGNoKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkQ29uZGl0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NvbnRhaW5zJyxcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IGNvbnRhaW5zTWF0Y2hbMV0udG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNvbnRhaW5zTWF0Y2hbMl1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUGFyc2UgZmllbGQgPiBudW1iZXJcbiAgICAgICAgICAgIGNvbnN0IGd0TWF0Y2ggPSBwYXJ0Lm1hdGNoKC8oXFx3KylcXHMqPlxccyooXFxkKykvaSk7XG4gICAgICAgICAgICBpZiAoZ3RNYXRjaCkge1xuICAgICAgICAgICAgICAgIHBhcnNlZENvbmRpdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdncmVhdGVyX3RoYW4nLFxuICAgICAgICAgICAgICAgICAgICBmaWVsZDogZ3RNYXRjaFsxXS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcGFyc2VJbnQoZ3RNYXRjaFsyXSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUGFyc2UgZmllbGQgPCBudW1iZXJcbiAgICAgICAgICAgIGNvbnN0IGx0TWF0Y2ggPSBwYXJ0Lm1hdGNoKC8oXFx3KylcXHMqPFxccyooXFxkKykvaSk7XG4gICAgICAgICAgICBpZiAobHRNYXRjaCkge1xuICAgICAgICAgICAgICAgIHBhcnNlZENvbmRpdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsZXNzX3RoYW4nLFxuICAgICAgICAgICAgICAgICAgICBmaWVsZDogbHRNYXRjaFsxXS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcGFyc2VJbnQobHRNYXRjaFsyXSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHBhcnNlZENvbmRpdGlvbnM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXJzZVNvcnRDb25kaXRpb25zKHNvcnRDbGF1c2U6IHN0cmluZyk6IHsgZmllbGQ6IHN0cmluZzsgZGlyZWN0aW9uOiAnYXNjJyB8ICdkZXNjJyB9W10ge1xuICAgICAgICBjb25zdCBzb3J0czogeyBmaWVsZDogc3RyaW5nOyBkaXJlY3Rpb246ICdhc2MnIHwgJ2Rlc2MnIH1bXSA9IFtdO1xuICAgICAgICBcbiAgICAgICAgLy8gU3BsaXQgYnkgY29tbWFcbiAgICAgICAgY29uc3QgcGFydHMgPSBzb3J0Q2xhdXNlLnNwbGl0KCcsJykubWFwKHAgPT4gcC50cmltKCkpO1xuICAgICAgICBcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIHBhcnRzKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgREVTQy9BU0NcbiAgICAgICAgICAgIGNvbnN0IGRlc2NNYXRjaCA9IHBhcnQubWF0Y2goLyhcXHcrKVxccytERVNDL2kpO1xuICAgICAgICAgICAgaWYgKGRlc2NNYXRjaCkge1xuICAgICAgICAgICAgICAgIHNvcnRzLnB1c2goeyBmaWVsZDogZGVzY01hdGNoWzFdLnRvTG93ZXJDYXNlKCksIGRpcmVjdGlvbjogJ2Rlc2MnIH0pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBhc2NNYXRjaCA9IHBhcnQubWF0Y2goLyhcXHcrKVxccytBU0MvaSk7XG4gICAgICAgICAgICBpZiAoYXNjTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBzb3J0cy5wdXNoKHsgZmllbGQ6IGFzY01hdGNoWzFdLnRvTG93ZXJDYXNlKCksIGRpcmVjdGlvbjogJ2FzYycgfSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gQVNDXG4gICAgICAgICAgICBjb25zdCBmaWVsZE1hdGNoID0gcGFydC5tYXRjaCgvKFxcdyspL2kpO1xuICAgICAgICAgICAgaWYgKGZpZWxkTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBzb3J0cy5wdXNoKHsgZmllbGQ6IGZpZWxkTWF0Y2hbMV0udG9Mb3dlckNhc2UoKSwgZGlyZWN0aW9uOiAnYXNjJyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHNvcnRzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBbGxWZXJzZXNXaXRoTWV0YWRhdGEoKTogYW55W10ge1xuICAgICAgICBjb25zdCByZXN1bHRzOiBhbnlbXSA9IFtdO1xuICAgICAgICBcbiAgICAgICAgZm9yIChjb25zdCB0cmFuc2xhdGlvbiBvZiB0aGlzLmRiLmdldFRyYW5zbGF0aW9ucygpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGJvb2sgb2YgdGhpcy5kYi5nZXRCb29rcygpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhcHRlcnMgPSB0aGlzLmRiLmdldENoYXB0ZXJzRm9yQm9vayhib29rLCB0cmFuc2xhdGlvbi5hYmJyZXZpYXRpb24pO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2hhcHRlciBvZiBjaGFwdGVycykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2ZXJzZXMgPSB0aGlzLmRiLmdldFZlcnNlc0ZvckNoYXB0ZXIoYm9vaywgY2hhcHRlciwgdHJhbnNsYXRpb24uYWJicmV2aWF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB2ZXJzZU51bSBvZiB2ZXJzZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZlcnNlRGF0YSA9IHRoaXMuZGIuZ2V0VmVyc2UoYm9vaywgY2hhcHRlciwgdmVyc2VOdW0sIHRyYW5zbGF0aW9uLmFiYnJldmlhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVyc2VEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHZlcnNlRGF0YS50ZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRDb3VudCA9IHRleHQuc3BsaXQoL1xccysvKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhckNvdW50ID0gdGV4dC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9vazogdmVyc2VEYXRhLmJvb2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXB0ZXI6IHZlcnNlRGF0YS5jaGFwdGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJzZTogdmVyc2VEYXRhLnZlcnNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbjogdHJhbnNsYXRpb24uYWJicmV2aWF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbl9uYW1lOiB0cmFuc2xhdGlvbi5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2U6IGAke3ZlcnNlRGF0YS5ib29rfSAke3ZlcnNlRGF0YS5jaGFwdGVyfToke3ZlcnNlRGF0YS52ZXJzZX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JkX2NvdW50OiB3b3JkQ291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJfY291bnQ6IGNoYXJDb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIGNvbXB1dGVkIGZpZWxkcyBmb3IgZWFzaWVyIHF1ZXJ5aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzX2plc3VzX3dvcmQ6IHRoaXMuaXNKZXN1c1dvcmQodGV4dCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc19yZWRfbGV0dGVyOiB0aGlzLmhhc1JlZExldHRlcldvcmRzKHRleHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgYm9vayBjYXRlZ29yaWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RhbWVudDogdGhpcy5nZXRUZXN0YW1lbnQodmVyc2VEYXRhLmJvb2spLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29rX2NhdGVnb3J5OiB0aGlzLmdldEJvb2tDYXRlZ29yeSh2ZXJzZURhdGEuYm9vaylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhcHBseVdoZXJlQ29uZGl0aW9ucyh2ZXJzZXM6IGFueVtdLCBjb25kaXRpb25zOiBhbnlbXSk6IGFueVtdIHtcbiAgICAgICAgcmV0dXJuIHZlcnNlcy5maWx0ZXIodmVyc2UgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmRpdGlvbnMuZXZlcnkoY29uZGl0aW9uID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZFZhbHVlID0gdmVyc2VbY29uZGl0aW9uLmZpZWxkXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGNvbmRpdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VxdWFscyc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA9PT0gY29uZGl0aW9uLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjb250YWlucyc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIGZpZWxkVmFsdWUgPT09ICdzdHJpbmcnICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkVmFsdWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhjb25kaXRpb24udmFsdWUudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2dyZWF0ZXJfdGhhbic6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIGZpZWxkVmFsdWUgPT09ICdudW1iZXInICYmIGZpZWxkVmFsdWUgPiBjb25kaXRpb24udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xlc3NfdGhhbic6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIGZpZWxkVmFsdWUgPT09ICdudW1iZXInICYmIGZpZWxkVmFsdWUgPCBjb25kaXRpb24udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhcHBseVNvcnQodmVyc2VzOiBhbnlbXSwgc29ydHM6IHsgZmllbGQ6IHN0cmluZzsgZGlyZWN0aW9uOiAnYXNjJyB8ICdkZXNjJyB9W10pOiBhbnlbXSB7XG4gICAgICAgIHJldHVybiBbLi4udmVyc2VzXS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNvcnQgb2Ygc29ydHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhVmFsID0gYVtzb3J0LmZpZWxkXTtcbiAgICAgICAgICAgICAgICBjb25zdCBiVmFsID0gYltzb3J0LmZpZWxkXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgY29tcGFyaXNvbiA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhVmFsID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgYlZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFyaXNvbiA9IGFWYWwubG9jYWxlQ29tcGFyZShiVmFsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhVmFsID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgYlZhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFyaXNvbiA9IGFWYWwgLSBiVmFsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBhcmlzb24gPSBTdHJpbmcoYVZhbCkubG9jYWxlQ29tcGFyZShTdHJpbmcoYlZhbCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoY29tcGFyaXNvbiAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc29ydC5kaXJlY3Rpb24gPT09ICdkZXNjJyA/IC1jb21wYXJpc29uIDogY29tcGFyaXNvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRUZXN0YW1lbnQoYm9vazogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3Qgb2xkVGVzdGFtZW50Qm9va3MgPSBbXG4gICAgICAgICAgICAnR2VuZXNpcycsICdFeG9kdXMnLCAnTGV2aXRpY3VzJywgJ051bWJlcnMnLCAnRGV1dGVyb25vbXknLFxuICAgICAgICAgICAgJ0pvc2h1YScsICdKdWRnZXMnLCAnUnV0aCcsICcxIFNhbXVlbCcsICcyIFNhbXVlbCcsXG4gICAgICAgICAgICAnMSBLaW5ncycsICcyIEtpbmdzJywgJzEgQ2hyb25pY2xlcycsICcyIENocm9uaWNsZXMnLFxuICAgICAgICAgICAgJ0V6cmEnLCAnTmVoZW1pYWgnLCAnRXN0aGVyJywgJ0pvYicsICdQc2FsbXMnLFxuICAgICAgICAgICAgJ1Byb3ZlcmJzJywgJ0VjY2xlc2lhc3RlcycsICdTb25nIG9mIFNvbG9tb24nLCAnSXNhaWFoJyxcbiAgICAgICAgICAgICdKZXJlbWlhaCcsICdMYW1lbnRhdGlvbnMnLCAnRXpla2llbCcsICdEYW5pZWwnLFxuICAgICAgICAgICAgJ0hvc2VhJywgJ0pvZWwnLCAnQW1vcycsICdPYmFkaWFoJywgJ0pvbmFoJyxcbiAgICAgICAgICAgICdNaWNhaCcsICdOYWh1bScsICdIYWJha2t1aycsICdaZXBoYW5pYWgnLCAnSGFnZ2FpJyxcbiAgICAgICAgICAgICdaZWNoYXJpYWgnLCAnTWFsYWNoaSdcbiAgICAgICAgXTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBvbGRUZXN0YW1lbnRCb29rcy5pbmNsdWRlcyhib29rKSA/ICdPbGQgVGVzdGFtZW50JyA6ICdOZXcgVGVzdGFtZW50JztcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEJvb2tDYXRlZ29yeShib29rOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBjYXRlZ29yaWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICAgICAgICAgLy8gT2xkIFRlc3RhbWVudFxuICAgICAgICAgICAgJ0dlbmVzaXMnOiAnTGF3JywgJ0V4b2R1cyc6ICdMYXcnLCAnTGV2aXRpY3VzJzogJ0xhdycsICdOdW1iZXJzJzogJ0xhdycsICdEZXV0ZXJvbm9teSc6ICdMYXcnLFxuICAgICAgICAgICAgJ0pvc2h1YSc6ICdIaXN0b3JpY2FsJywgJ0p1ZGdlcyc6ICdIaXN0b3JpY2FsJywgJ1J1dGgnOiAnSGlzdG9yaWNhbCcsICcxIFNhbXVlbCc6ICdIaXN0b3JpY2FsJywgJzIgU2FtdWVsJzogJ0hpc3RvcmljYWwnLFxuICAgICAgICAgICAgJzEgS2luZ3MnOiAnSGlzdG9yaWNhbCcsICcyIEtpbmdzJzogJ0hpc3RvcmljYWwnLCAnMSBDaHJvbmljbGVzJzogJ0hpc3RvcmljYWwnLCAnMiBDaHJvbmljbGVzJzogJ0hpc3RvcmljYWwnLFxuICAgICAgICAgICAgJ0V6cmEnOiAnSGlzdG9yaWNhbCcsICdOZWhlbWlhaCc6ICdIaXN0b3JpY2FsJywgJ0VzdGhlcic6ICdIaXN0b3JpY2FsJyxcbiAgICAgICAgICAgICdKb2InOiAnV2lzZG9tJywgJ1BzYWxtcyc6ICdXaXNkb20nLCAnUHJvdmVyYnMnOiAnV2lzZG9tJywgJ0VjY2xlc2lhc3Rlcyc6ICdXaXNkb20nLCAnU29uZyBvZiBTb2xvbW9uJzogJ1dpc2RvbScsXG4gICAgICAgICAgICAnSXNhaWFoJzogJ1Byb3BoZXRpYycsICdKZXJlbWlhaCc6ICdQcm9waGV0aWMnLCAnTGFtZW50YXRpb25zJzogJ1Byb3BoZXRpYycsICdFemVraWVsJzogJ1Byb3BoZXRpYycsICdEYW5pZWwnOiAnUHJvcGhldGljJyxcbiAgICAgICAgICAgICdIb3NlYSc6ICdQcm9waGV0aWMnLCAnSm9lbCc6ICdQcm9waGV0aWMnLCAnQW1vcyc6ICdQcm9waGV0aWMnLCAnT2JhZGlhaCc6ICdQcm9waGV0aWMnLCAnSm9uYWgnOiAnUHJvcGhldGljJyxcbiAgICAgICAgICAgICdNaWNhaCc6ICdQcm9waGV0aWMnLCAnTmFodW0nOiAnUHJvcGhldGljJywgJ0hhYmFra3VrJzogJ1Byb3BoZXRpYycsICdaZXBoYW5pYWgnOiAnUHJvcGhldGljJywgJ0hhZ2dhaSc6ICdQcm9waGV0aWMnLFxuICAgICAgICAgICAgJ1plY2hhcmlhaCc6ICdQcm9waGV0aWMnLCAnTWFsYWNoaSc6ICdQcm9waGV0aWMnLFxuICAgICAgICAgICAgLy8gTmV3IFRlc3RhbWVudFxuICAgICAgICAgICAgJ01hdHRoZXcnOiAnR29zcGVsJywgJ01hcmsnOiAnR29zcGVsJywgJ0x1a2UnOiAnR29zcGVsJywgJ0pvaG4nOiAnR29zcGVsJyxcbiAgICAgICAgICAgICdBY3RzJzogJ0hpc3RvcmljYWwnLFxuICAgICAgICAgICAgJ1JvbWFucyc6ICdFcGlzdGxlJywgJzEgQ29yaW50aGlhbnMnOiAnRXBpc3RsZScsICcyIENvcmludGhpYW5zJzogJ0VwaXN0bGUnLCAnR2FsYXRpYW5zJzogJ0VwaXN0bGUnLCAnRXBoZXNpYW5zJzogJ0VwaXN0bGUnLFxuICAgICAgICAgICAgJ1BoaWxpcHBpYW5zJzogJ0VwaXN0bGUnLCAnQ29sb3NzaWFucyc6ICdFcGlzdGxlJywgJzEgVGhlc3NhbG9uaWFucyc6ICdFcGlzdGxlJywgJzIgVGhlc3NhbG9uaWFucyc6ICdFcGlzdGxlJyxcbiAgICAgICAgICAgICcxIFRpbW90aHknOiAnRXBpc3RsZScsICcyIFRpbW90aHknOiAnRXBpc3RsZScsICdUaXR1cyc6ICdFcGlzdGxlJywgJ1BoaWxlbW9uJzogJ0VwaXN0bGUnLFxuICAgICAgICAgICAgJ0hlYnJld3MnOiAnRXBpc3RsZScsICdKYW1lcyc6ICdFcGlzdGxlJywgJzEgUGV0ZXInOiAnRXBpc3RsZScsICcyIFBldGVyJzogJ0VwaXN0bGUnLFxuICAgICAgICAgICAgJzEgSm9obic6ICdFcGlzdGxlJywgJzIgSm9obic6ICdFcGlzdGxlJywgJzMgSm9obic6ICdFcGlzdGxlJywgJ0p1ZGUnOiAnRXBpc3RsZScsXG4gICAgICAgICAgICAnUmV2ZWxhdGlvbic6ICdBcG9jYWx5cHRpYydcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBjYXRlZ29yaWVzW2Jvb2tdIHx8ICdVbmtub3duJztcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhc1JlZExldHRlcldvcmRzKHRleHQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICAvLyBDaGVjayBpZiB0ZXh0IGNvbnRhaW5zIHdvcmRzIHRoYXQgbWlnaHQgYmUgc3Bva2VuIGJ5IEplc3VzXG4gICAgICAgIGNvbnN0IGplc3VzSW5kaWNhdG9ycyA9IFtcbiAgICAgICAgICAgICdJIGFtJywgJ3ZlcmlseScsICd0cnVseScsICdhbWVuJywgJ2ZhdGhlcicsICdraW5nZG9tJywgJ2hlYXZlbicsXG4gICAgICAgICAgICAncGFyYWJsZScsICdkaXNjaXBsZScsICdmb2xsb3cgbWUnLCAnY29tZSB1bnRvIG1lJywgJ215IGZhdGhlcidcbiAgICAgICAgXTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGxvd2VyVGV4dCA9IHRleHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIGplc3VzSW5kaWNhdG9ycy5zb21lKGluZGljYXRvciA9PiBsb3dlclRleHQuaW5jbHVkZXMoaW5kaWNhdG9yLnRvTG93ZXJDYXNlKCkpKTtcbiAgICB9XG5cbiAgICAvLyBVdGlsaXR5IG1ldGhvZCB0byBnZXQgYWxsIHZlcnNlcyBmb3IgYSBzcGVjaWZpYyBxdWVyeVxuICAgIHB1YmxpYyBxdWVyeVZlcnNlcyhib29rPzogc3RyaW5nLCBjaGFwdGVyPzogbnVtYmVyLCB0cmFuc2xhdGlvbj86IHN0cmluZyk6IGFueVtdIHtcbiAgICAgICAgbGV0IHJlc3VsdHMgPSB0aGlzLmdldEFsbFZlcnNlc1dpdGhNZXRhZGF0YSgpO1xuICAgICAgICBcbiAgICAgICAgLy8gQXBwbHkgZmlsdGVycyBpZiBwcm92aWRlZFxuICAgICAgICBpZiAoYm9vaykge1xuICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuZmlsdGVyKHYgPT4gdi5ib29rID09PSBib29rKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhcHRlcikge1xuICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuZmlsdGVyKHYgPT4gdi5jaGFwdGVyID09PSBjaGFwdGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcih2ID0+IHYudHJhbnNsYXRpb24gPT09IHRyYW5zbGF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHRzLnNsaWNlKDAsIDEwMDApOyAvLyBMaW1pdCByZXN1bHRzXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0plc3VzV29yZCh3b3JkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgLy8gQWRkIGxvZ2ljIHRvIGlkZW50aWZ5IHdvcmRzIG9mIEplc3VzXG4gICAgICAgIGNvbnN0IGplc3VzV29yZHMgPSBbJ0plc3VzJywgJ0NocmlzdCcsICdMb3JkJywgJ01hc3RlcicsICdSYWJiaScsICdUZWFjaGVyJ107XG4gICAgICAgIHJldHVybiBqZXN1c1dvcmRzLnNvbWUodyA9PiB3b3JkLmluY2x1ZGVzKHcpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlQmlibGVHYXRld2F5VXJsKHJlZmVyZW5jZTogc3RyaW5nLCB0cmFuc2xhdGlvbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgLy8gTWFwIHRyYW5zbGF0aW9uIGFiYnJldmlhdGlvbnMgdG8gQmlibGUgR2F0ZXdheSB0cmFuc2xhdGlvbiBjb2Rlc1xuICAgICAgICBjb25zdCB0cmFuc2xhdGlvbk1hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgICAgICAgICdLSlYnOiAnS0pWJyxcbiAgICAgICAgICAgICdBU1YnOiAnQVNWJyxcbiAgICAgICAgICAgICdXRUInOiAnV0VCJyxcbiAgICAgICAgICAgICdZTFQnOiAnWUxUJyxcbiAgICAgICAgICAgICdCQkUnOiAnQkJFJyxcbiAgICAgICAgICAgICdCU0InOiAnQlNCJyxcbiAgICAgICAgICAgICdDUERWJzogJ0NQRFYnLFxuICAgICAgICAgICAgJ1NwYVJWJzogJ1JWUjE5MDknLFxuICAgICAgICAgICAgJ1Z1bGdhdGUnOiAnVlVMR0FURScsXG4gICAgICAgICAgICAnQnl6JzogJ0JZWicsXG4gICAgICAgICAgICAnV0xDJzogJ1dMQydcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGJpYmxlR2F0ZXdheVRyYW5zbGF0aW9uID0gdHJhbnNsYXRpb25NYXBbdHJhbnNsYXRpb25dIHx8IHRyYW5zbGF0aW9uO1xuICAgICAgICBjb25zdCBlbmNvZGVkUmVmZXJlbmNlID0gZW5jb2RlVVJJQ29tcG9uZW50KHJlZmVyZW5jZSk7XG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly93d3cuYmlibGVnYXRld2F5LmNvbS9wYXNzYWdlLz9zZWFyY2g9JHtlbmNvZGVkUmVmZXJlbmNlfSZ2ZXJzaW9uPSR7YmlibGVHYXRld2F5VHJhbnNsYXRpb259YDtcbiAgICB9XG59ICIsICJpbXBvcnQgeyBOb3RpY2UsIFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvY2Vzc2luZ1J1bGUge1xuICAgIHJlZ2V4OiBzdHJpbmc7XG4gICAgZm9ybWF0dGluZzogc3RyaW5nO1xuICAgIGVzY2FwZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNsYXRpb24ge1xuICAgIGlkOiBudW1iZXI7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGFiYnJldmlhdGlvbjogc3RyaW5nO1xuICAgIGxhbmd1YWdlOiBzdHJpbmc7XG4gICAgY2F0ZWdvcnk6IHN0cmluZztcbiAgICBwcm9jZXNzaW5nUnVsZXM6IFByb2Nlc3NpbmdSdWxlW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVyc2Uge1xuICAgIGlkOiBudW1iZXI7XG4gICAgdHJhbnNsYXRpb25faWQ6IG51bWJlcjtcbiAgICBib29rOiBzdHJpbmc7XG4gICAgY2hhcHRlcjogbnVtYmVyO1xuICAgIHZlcnNlOiBudW1iZXI7XG4gICAgdGV4dDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFiYXNlRGF0YSB7XG4gICAgdHJhbnNsYXRpb25zOiBUcmFuc2xhdGlvbltdO1xuICAgIHZlcnNlczogVmVyc2VbXTtcbiAgICBuZXh0VHJhbnNsYXRpb25JZDogbnVtYmVyO1xuICAgIG5leHRWZXJzZUlkOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBCaWJsZURhdGFiYXNlIHtcbiAgICBwcml2YXRlIHBsdWdpbjogUGx1Z2luO1xuICAgIHByaXZhdGUgZGF0YVBhdGg6IHN0cmluZztcbiAgICBwcml2YXRlIGRhdGE6IERhdGFiYXNlRGF0YTtcbiAgICBwcml2YXRlIGlzSW5pdGlhbGl6ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIGlzVW5sb2FkaW5nOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvLyBDaHJvbm9sb2dpY2FsIG9yZGVyIG9mIEJpYmxlIGJvb2tzXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0hST05PTE9HSUNBTF9CT09LX09SREVSID0gW1xuICAgICAgICAnR2VuZXNpcycsICdFeG9kdXMnLCAnTGV2aXRpY3VzJywgJ051bWJlcnMnLCAnRGV1dGVyb25vbXknLFxuICAgICAgICAnSm9zaHVhJywgJ0p1ZGdlcycsICdSdXRoJywgJzEgU2FtdWVsJywgJzIgU2FtdWVsJyxcbiAgICAgICAgJzEgS2luZ3MnLCAnMiBLaW5ncycsICcxIENocm9uaWNsZXMnLCAnMiBDaHJvbmljbGVzJyxcbiAgICAgICAgJ0V6cmEnLCAnTmVoZW1pYWgnLCAnRXN0aGVyJywgJ0pvYicsICdQc2FsbXMnLFxuICAgICAgICAnUHJvdmVyYnMnLCAnRWNjbGVzaWFzdGVzJywgJ1Nvbmcgb2YgU29sb21vbicsICdJc2FpYWgnLFxuICAgICAgICAnSmVyZW1pYWgnLCAnTGFtZW50YXRpb25zJywgJ0V6ZWtpZWwnLCAnRGFuaWVsJyxcbiAgICAgICAgJ0hvc2VhJywgJ0pvZWwnLCAnQW1vcycsICdPYmFkaWFoJywgJ0pvbmFoJyxcbiAgICAgICAgJ01pY2FoJywgJ05haHVtJywgJ0hhYmFra3VrJywgJ1plcGhhbmlhaCcsICdIYWdnYWknLFxuICAgICAgICAnWmVjaGFyaWFoJywgJ01hbGFjaGknLCAnTWF0dGhldycsICdNYXJrJywgJ0x1a2UnLFxuICAgICAgICAnSm9obicsICdBY3RzJywgJ1JvbWFucycsICcxIENvcmludGhpYW5zJywgJzIgQ29yaW50aGlhbnMnLFxuICAgICAgICAnR2FsYXRpYW5zJywgJ0VwaGVzaWFucycsICdQaGlsaXBwaWFucycsICdDb2xvc3NpYW5zJyxcbiAgICAgICAgJzEgVGhlc3NhbG9uaWFucycsICcyIFRoZXNzYWxvbmlhbnMnLCAnMSBUaW1vdGh5JywgJzIgVGltb3RoeScsXG4gICAgICAgICdUaXR1cycsICdQaGlsZW1vbicsICdIZWJyZXdzJywgJ0phbWVzJywgJzEgUGV0ZXInLFxuICAgICAgICAnMiBQZXRlcicsICcxIEpvaG4nLCAnMiBKb2huJywgJzMgSm9obicsICdKdWRlJyxcbiAgICAgICAgJ1JldmVsYXRpb24nXG4gICAgXTtcblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luLCBkYXRhUGF0aDogc3RyaW5nID0gJ2RhdGEnKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLmRhdGFQYXRoID0gZGF0YVBhdGg7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbQmlibGVMaW5rXSBVc2luZyBwbHVnaW4gZGF0YSBwYXRoOiAke3RoaXMuZGF0YVBhdGh9YCk7XG4gICAgICAgIHRoaXMuZGF0YSA9IHtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uczogW10sXG4gICAgICAgICAgICB2ZXJzZXM6IFtdLFxuICAgICAgICAgICAgbmV4dFRyYW5zbGF0aW9uSWQ6IDEsXG4gICAgICAgICAgICBuZXh0VmVyc2VJZDogMVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5pc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBpbml0aWFsaXplIEJpYmxlIGRhdGFiYXNlOicsIGVycm9yKTtcbiAgICAgICAgICAgIC8vIEV2ZW4gaWYgaW5pdGlhbGl6YXRpb24gZmFpbHMsIG1hcmsgYXMgaW5pdGlhbGl6ZWQgdG8gcHJldmVudCBpbmZpbml0ZSBsb29wc1xuICAgICAgICAgICAgdGhpcy5pc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBsb2FkRGF0YSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKHRoaXMucGx1Z2luLmFwcC52YXVsdC5hZGFwdGVyLmJhc2VQYXRoLCAnLm9ic2lkaWFuJywgJ3BsdWdpbnMnLCAnb2JzaWRpYW4tYmlibGVsaW5rJywgdGhpcy5kYXRhUGF0aCwgJ2JpYmxlX2RhdGEuanNvbicpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFtCaWJsZUxpbmtdIFtsb2FkRGF0YV0gQ2hlY2tpbmcgZm9yIGRhdGEgZmlsZSBhdDogJHtmaWxlUGF0aH1gKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoZmlsZVBhdGgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCwgJ3V0ZjgnKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW0JpYmxlTGlua10gW2xvYWREYXRhXSBGaWxlIGZvdW5kLiBGaXJzdCAyMDAgY2hhcnM6YCwgY29udGVudC5zbGljZSgwLCAyMDApKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBKU09OLnBhcnNlKGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbQmlibGVMaW5rXSBbbG9hZERhdGFdIExvYWRlZDogJHt0aGlzLmRhdGEudHJhbnNsYXRpb25zLmxlbmd0aH0gdHJhbnNsYXRpb25zLCAke3RoaXMuZGF0YS52ZXJzZXMubGVuZ3RofSB2ZXJzZXNgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tCaWJsZUxpbmtdIFtsb2FkRGF0YV0gTm8gZXhpc3RpbmcgQmlibGUgZGF0YSBmaWxlIGZvdW5kLCBzdGFydGluZyBmcmVzaCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gSWYgZmlsZSBkb2Vzbid0IGV4aXN0IG9yIGlzIGNvcnJ1cHRlZCwgc3RhcnQgd2l0aCBlbXB0eSBkYXRhXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW0JpYmxlTGlua10gW2xvYWREYXRhXSBTdGFydGluZyB3aXRoIGZyZXNoIEJpYmxlIGRhdGFiYXNlIGR1ZSB0byBlcnJvcjonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHNhdmVEYXRhKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gRW5zdXJlIGRpcmVjdG9yeSBleGlzdHNcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZW5zdXJlRGlyZWN0b3J5RXhpc3RzKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKHRoaXMucGx1Z2luLmFwcC52YXVsdC5hZGFwdGVyLmJhc2VQYXRoLCAnLm9ic2lkaWFuJywgJ3BsdWdpbnMnLCAnb2JzaWRpYW4tYmlibGVsaW5rJywgdGhpcy5kYXRhUGF0aCwgJ2JpYmxlX2RhdGEuanNvbicpO1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSwgbnVsbCwgMik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgW0JpYmxlTGlua10gW3NhdmVEYXRhXSBTYXZpbmcgdG86ICR7ZmlsZVBhdGh9YCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgW0JpYmxlTGlua10gW3NhdmVEYXRhXSBEYXRhIChmaXJzdCAyMDAgY2hhcnMpOmAsIGNvbnRlbnQuc2xpY2UoMCwgMjAwKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFdyaXRlIHRvIGZpbGUgdXNpbmcgTm9kZS5qcyBmc1xuICAgICAgICAgICAgZnMud3JpdGVGaWxlU3luYyhmaWxlUGF0aCwgY29udGVudCwgJ3V0ZjgnKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbQmlibGVMaW5rXSBbc2F2ZURhdGFdIEJpYmxlIGRhdGEgc2F2ZWQgc3VjY2Vzc2Z1bGx5OiAke3RoaXMuZGF0YS50cmFuc2xhdGlvbnMubGVuZ3RofSB0cmFuc2xhdGlvbnMsICR7dGhpcy5kYXRhLnZlcnNlcy5sZW5ndGh9IHZlcnNlc2ApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0JpYmxlTGlua10gW3NhdmVEYXRhXSBGYWlsZWQgdG8gc2F2ZSBCaWJsZSBkYXRhOicsIGVycm9yKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1VubG9hZGluZykge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0ZhaWxlZCB0byBzYXZlIEJpYmxlIGRhdGEnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5pc1VubG9hZGluZykge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBlbnN1cmVEaXJlY3RvcnlFeGlzdHMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBkaXJQYXRoID0gcGF0aC5qb2luKHRoaXMucGx1Z2luLmFwcC52YXVsdC5hZGFwdGVyLmJhc2VQYXRoLCAnLm9ic2lkaWFuJywgJ3BsdWdpbnMnLCAnb2JzaWRpYW4tYmlibGVsaW5rJywgdGhpcy5kYXRhUGF0aCk7XG4gICAgICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZGlyUGF0aCkpIHtcbiAgICAgICAgICAgICAgICBmcy5ta2RpclN5bmMoZGlyUGF0aCwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtCaWJsZUxpbmtdIENyZWF0ZWQgZGlyZWN0b3J5OiAke2RpclBhdGh9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbQmlibGVMaW5rXSBEaXJlY3RvcnkgY3JlYXRpb24gZXJyb3IgKG1heSBhbHJlYWR5IGV4aXN0KTonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VHJhbnNsYXRpb25zKCk6IFRyYW5zbGF0aW9uW10ge1xuICAgICAgICByZXR1cm4gWy4uLnRoaXMuZGF0YS50cmFuc2xhdGlvbnNdLnNvcnQoKGEsIGIpID0+IGEuYWJicmV2aWF0aW9uLmxvY2FsZUNvbXBhcmUoYi5hYmJyZXZpYXRpb24pKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Qm9va3MoKTogc3RyaW5nW10ge1xuICAgICAgICBjb25zdCBib29rcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAgICAgICBmb3IgKGNvbnN0IHZlcnNlIG9mIHRoaXMuZGF0YS52ZXJzZXMpIHtcbiAgICAgICAgICAgIGJvb2tzLmFkZCh2ZXJzZS5ib29rKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gU29ydCBib29rcyBpbiBjaHJvbm9sb2dpY2FsIG9yZGVyXG4gICAgICAgIGNvbnN0IGJvb2tBcnJheSA9IEFycmF5LmZyb20oYm9va3MpO1xuICAgICAgICByZXR1cm4gYm9va0FycmF5LnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFJbmRleCA9IEJpYmxlRGF0YWJhc2UuQ0hST05PTE9HSUNBTF9CT09LX09SREVSLmluZGV4T2YoYSk7XG4gICAgICAgICAgICBjb25zdCBiSW5kZXggPSBCaWJsZURhdGFiYXNlLkNIUk9OT0xPR0lDQUxfQk9PS19PUkRFUi5pbmRleE9mKGIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBJZiBib3RoIGJvb2tzIGFyZSBpbiB0aGUgY2hyb25vbG9naWNhbCBvcmRlciwgc29ydCBieSB0aGVpciBwb3NpdGlvblxuICAgICAgICAgICAgaWYgKGFJbmRleCAhPT0gLTEgJiYgYkluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhSW5kZXggLSBiSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIElmIG9ubHkgb25lIGJvb2sgaXMgaW4gdGhlIGNocm9ub2xvZ2ljYWwgb3JkZXIsIHByaW9yaXRpemUgaXRcbiAgICAgICAgICAgIGlmIChhSW5kZXggIT09IC0xKSByZXR1cm4gLTE7XG4gICAgICAgICAgICBpZiAoYkluZGV4ICE9PSAtMSkgcmV0dXJuIDE7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIElmIG5laXRoZXIgYm9vayBpcyBpbiB0aGUgY2hyb25vbG9naWNhbCBvcmRlciwgc29ydCBhbHBoYWJldGljYWxseVxuICAgICAgICAgICAgcmV0dXJuIGEubG9jYWxlQ29tcGFyZShiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENoYXB0ZXJzRm9yQm9vayhib29rOiBzdHJpbmcsIHRyYW5zbGF0aW9uQWJicjogc3RyaW5nKTogbnVtYmVyW10ge1xuICAgICAgICBjb25zdCB0cmFuc2xhdGlvbiA9IHRoaXMuZGF0YS50cmFuc2xhdGlvbnMuZmluZCh0ID0+IHQuYWJicmV2aWF0aW9uID09PSB0cmFuc2xhdGlvbkFiYnIpO1xuICAgICAgICBpZiAoIXRyYW5zbGF0aW9uKSByZXR1cm4gW107XG5cbiAgICAgICAgY29uc3QgY2hhcHRlcnMgPSBuZXcgU2V0PG51bWJlcj4oKTtcbiAgICAgICAgZm9yIChjb25zdCB2ZXJzZSBvZiB0aGlzLmRhdGEudmVyc2VzKSB7XG4gICAgICAgICAgICBpZiAodmVyc2UudHJhbnNsYXRpb25faWQgPT09IHRyYW5zbGF0aW9uLmlkICYmIHZlcnNlLmJvb2sgPT09IGJvb2spIHtcbiAgICAgICAgICAgICAgICBjaGFwdGVycy5hZGQodmVyc2UuY2hhcHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oY2hhcHRlcnMpLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VmVyc2VzRm9yQ2hhcHRlcihib29rOiBzdHJpbmcsIGNoYXB0ZXI6IG51bWJlciwgdHJhbnNsYXRpb25BYmJyOiBzdHJpbmcpOiBudW1iZXJbXSB7XG4gICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uID0gdGhpcy5kYXRhLnRyYW5zbGF0aW9ucy5maW5kKHQgPT4gdC5hYmJyZXZpYXRpb24gPT09IHRyYW5zbGF0aW9uQWJicik7XG4gICAgICAgIGlmICghdHJhbnNsYXRpb24pIHJldHVybiBbXTtcblxuICAgICAgICBjb25zdCB2ZXJzZXMgPSBuZXcgU2V0PG51bWJlcj4oKTtcbiAgICAgICAgZm9yIChjb25zdCB2ZXJzZSBvZiB0aGlzLmRhdGEudmVyc2VzKSB7XG4gICAgICAgICAgICBpZiAodmVyc2UudHJhbnNsYXRpb25faWQgPT09IHRyYW5zbGF0aW9uLmlkICYmIFxuICAgICAgICAgICAgICAgIHZlcnNlLmJvb2sgPT09IGJvb2sgJiYgXG4gICAgICAgICAgICAgICAgdmVyc2UuY2hhcHRlciA9PT0gY2hhcHRlcikge1xuICAgICAgICAgICAgICAgIHZlcnNlcy5hZGQodmVyc2UudmVyc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHZlcnNlcykuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRWZXJzZShib29rOiBzdHJpbmcsIGNoYXB0ZXI6IG51bWJlciwgdmVyc2U6IG51bWJlciwgdHJhbnNsYXRpb25BYmJyOiBzdHJpbmcpOiBWZXJzZSB8IG51bGwge1xuICAgICAgICBjb25zdCB0cmFuc2xhdGlvbiA9IHRoaXMuZGF0YS50cmFuc2xhdGlvbnMuZmluZCh0ID0+IHQuYWJicmV2aWF0aW9uID09PSB0cmFuc2xhdGlvbkFiYnIpO1xuICAgICAgICBpZiAoIXRyYW5zbGF0aW9uKSByZXR1cm4gbnVsbDtcblxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLnZlcnNlcy5maW5kKHYgPT4gXG4gICAgICAgICAgICB2LnRyYW5zbGF0aW9uX2lkID09PSB0cmFuc2xhdGlvbi5pZCAmJiBcbiAgICAgICAgICAgIHYuYm9vayA9PT0gYm9vayAmJiBcbiAgICAgICAgICAgIHYuY2hhcHRlciA9PT0gY2hhcHRlciAmJiBcbiAgICAgICAgICAgIHYudmVyc2UgPT09IHZlcnNlXG4gICAgICAgICkgfHwgbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgYWRkVHJhbnNsYXRpb24obmFtZTogc3RyaW5nLCBhYmJyZXZpYXRpb246IHN0cmluZywgbGFuZ3VhZ2U6IHN0cmluZyA9ICdFbmdsaXNoJywgY2F0ZWdvcnk6IHN0cmluZyA9ICdTdGFuZGFyZCcsIHByb2Nlc3NpbmdSdWxlczogUHJvY2Vzc2luZ1J1bGVbXSA9IFtdKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdHJhbnNsYXRpb24gYWxyZWFkeSBleGlzdHNcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLmRhdGEudHJhbnNsYXRpb25zLmZpbmQodCA9PiB0LmFiYnJldmlhdGlvbiA9PT0gYWJicmV2aWF0aW9uKTtcbiAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyYW5zbGF0aW9uIHdpdGggYWJicmV2aWF0aW9uICcke2FiYnJldmlhdGlvbn0nIGFscmVhZHkgZXhpc3RzYCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5kYXRhLm5leHRUcmFuc2xhdGlvbklkKys7XG4gICAgICAgIHRoaXMuZGF0YS50cmFuc2xhdGlvbnMucHVzaCh7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBhYmJyZXZpYXRpb24sXG4gICAgICAgICAgICBsYW5ndWFnZSxcbiAgICAgICAgICAgIGNhdGVnb3J5LFxuICAgICAgICAgICAgcHJvY2Vzc2luZ1J1bGVzXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYEFkZGVkIHRyYW5zbGF0aW9uOiAke25hbWV9ICgke2FiYnJldmlhdGlvbn0pIHdpdGggSUQgJHtpZH1gKTtcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSgpO1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHVwZGF0ZVRyYW5zbGF0aW9uKGlkOiBudW1iZXIsIG5hbWU6IHN0cmluZywgYWJicmV2aWF0aW9uOiBzdHJpbmcsIGxhbmd1YWdlOiBzdHJpbmcsIGNhdGVnb3J5OiBzdHJpbmcsIHByb2Nlc3NpbmdSdWxlczogUHJvY2Vzc2luZ1J1bGVbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB0cmFuc2xhdGlvbiA9IHRoaXMuZGF0YS50cmFuc2xhdGlvbnMuZmluZCh0ID0+IHQuaWQgPT09IGlkKTtcbiAgICAgICAgaWYgKCF0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc2xhdGlvbiBub3QgZm91bmQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGFiYnJldmlhdGlvbiBpcyBjaGFuZ2luZywgY2hlY2sgaWYgbmV3IG9uZSBleGlzdHNcbiAgICAgICAgaWYgKHRyYW5zbGF0aW9uLmFiYnJldmlhdGlvbiAhPT0gYWJicmV2aWF0aW9uICYmIFxuICAgICAgICAgICAgdGhpcy5kYXRhLnRyYW5zbGF0aW9ucy5zb21lKHQgPT4gdC5hYmJyZXZpYXRpb24gPT09IGFiYnJldmlhdGlvbikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNsYXRpb24gYWJicmV2aWF0aW9uIGFscmVhZHkgZXhpc3RzJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgdHJhbnNsYXRpb25cbiAgICAgICAgdHJhbnNsYXRpb24ubmFtZSA9IG5hbWU7XG4gICAgICAgIHRyYW5zbGF0aW9uLmFiYnJldmlhdGlvbiA9IGFiYnJldmlhdGlvbjtcbiAgICAgICAgdHJhbnNsYXRpb24ubGFuZ3VhZ2UgPSBsYW5ndWFnZTtcbiAgICAgICAgdHJhbnNsYXRpb24uY2F0ZWdvcnkgPSBjYXRlZ29yeTtcbiAgICAgICAgdHJhbnNsYXRpb24ucHJvY2Vzc2luZ1J1bGVzID0gcHJvY2Vzc2luZ1J1bGVzO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgYWRkVmVyc2UodHJhbnNsYXRpb25JZDogbnVtYmVyLCBib29rOiBzdHJpbmcsIGNoYXB0ZXI6IG51bWJlciwgdmVyc2U6IG51bWJlciwgdGV4dDogc3RyaW5nLCBzYXZlSW1tZWRpYXRlbHk6IGJvb2xlYW4gPSB0cnVlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMuZGF0YS52ZXJzZXMucHVzaCh7XG4gICAgICAgICAgICBpZDogdGhpcy5kYXRhLm5leHRWZXJzZUlkKyssXG4gICAgICAgICAgICB0cmFuc2xhdGlvbl9pZDogdHJhbnNsYXRpb25JZCxcbiAgICAgICAgICAgIGJvb2ssXG4gICAgICAgICAgICBjaGFwdGVyLFxuICAgICAgICAgICAgdmVyc2UsXG4gICAgICAgICAgICB0ZXh0XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc2F2ZUltbWVkaWF0ZWx5KSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgYWRkVmVyc2VzQmF0Y2godmVyc2VzOiBBcnJheTx7dHJhbnNsYXRpb25JZDogbnVtYmVyLCBib29rOiBzdHJpbmcsIGNoYXB0ZXI6IG51bWJlciwgdmVyc2U6IG51bWJlciwgdGV4dDogc3RyaW5nfT4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKHZlcnNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbQmlibGVMaW5rXSBObyB2ZXJzZXMgdG8gYWRkJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHN0YXJ0SWQgPSB0aGlzLmRhdGEubmV4dFZlcnNlSWQ7XG4gICAgICAgIGZvciAoY29uc3QgdmVyc2Ugb2YgdmVyc2VzKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEudmVyc2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIGlkOiB0aGlzLmRhdGEubmV4dFZlcnNlSWQrKyxcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbl9pZDogdmVyc2UudHJhbnNsYXRpb25JZCxcbiAgICAgICAgICAgICAgICBib29rOiB2ZXJzZS5ib29rLFxuICAgICAgICAgICAgICAgIGNoYXB0ZXI6IHZlcnNlLmNoYXB0ZXIsXG4gICAgICAgICAgICAgICAgdmVyc2U6IHZlcnNlLnZlcnNlLFxuICAgICAgICAgICAgICAgIHRleHQ6IHZlcnNlLnRleHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhgW0JpYmxlTGlua10gQWRkZWQgJHt2ZXJzZXMubGVuZ3RofSB2ZXJzZXMgKElEcyAke3N0YXJ0SWR9LSR7dGhpcy5kYXRhLm5leHRWZXJzZUlkIC0gMX0pYCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbQmlibGVMaW5rXSBUb3RhbCB2ZXJzZXMgaW4gbWVtb3J5OiAke3RoaXMuZGF0YS52ZXJzZXMubGVuZ3RofWApO1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbQmlibGVMaW5rXSBBZnRlciBzYXZlIC0gVG90YWwgdmVyc2VzIGluIG1lbW9yeTogJHt0aGlzLmRhdGEudmVyc2VzLmxlbmd0aH1gKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgcmVtb3ZlVHJhbnNsYXRpb24oYWJicmV2aWF0aW9uOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgY29uc3QgdHJhbnNsYXRpb25JbmRleCA9IHRoaXMuZGF0YS50cmFuc2xhdGlvbnMuZmluZEluZGV4KHQgPT4gdC5hYmJyZXZpYXRpb24gPT09IGFiYnJldmlhdGlvbik7XG4gICAgICAgIGlmICh0cmFuc2xhdGlvbkluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHJhbnNsYXRpb24gPSB0aGlzLmRhdGEudHJhbnNsYXRpb25zW3RyYW5zbGF0aW9uSW5kZXhdO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVtb3ZlIGFsbCB2ZXJzZXMgZm9yIHRoaXMgdHJhbnNsYXRpb25cbiAgICAgICAgdGhpcy5kYXRhLnZlcnNlcyA9IHRoaXMuZGF0YS52ZXJzZXMuZmlsdGVyKHYgPT4gdi50cmFuc2xhdGlvbl9pZCAhPT0gdHJhbnNsYXRpb24uaWQpO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVtb3ZlIHRyYW5zbGF0aW9uXG4gICAgICAgIHRoaXMuZGF0YS50cmFuc2xhdGlvbnMuc3BsaWNlKHRyYW5zbGF0aW9uSW5kZXgsIDEpO1xuICAgICAgICBcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaW1wb3J0RnJvbVNRTGl0ZShzcWxpdGVEYXRhOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8gVGhpcyB3b3VsZCBwYXJzZSBTUUxpdGUgZGF0YSBhbmQgY29udmVydCB0byBvdXIgZm9ybWF0XG4gICAgICAgIC8vIEZvciBub3csIHdlJ2xsIGltcGxlbWVudCBhIGJhc2ljIHN0cnVjdHVyZVxuICAgICAgICBpZiAoc3FsaXRlRGF0YS50cmFuc2xhdGlvbnMgJiYgc3FsaXRlRGF0YS52ZXJzZXMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdHJhbnNsYXRpb24gb2Ygc3FsaXRlRGF0YS50cmFuc2xhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZFRyYW5zbGF0aW9uKHRyYW5zbGF0aW9uLm5hbWUsIHRyYW5zbGF0aW9uLmFiYnJldmlhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHZlcnNlc1RvQWRkOiBBcnJheTx7dHJhbnNsYXRpb25JZDogbnVtYmVyLCBib29rOiBzdHJpbmcsIGNoYXB0ZXI6IG51bWJlciwgdmVyc2U6IG51bWJlciwgdGV4dDogc3RyaW5nfT4gPSBbXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yIChjb25zdCB2ZXJzZSBvZiBzcWxpdGVEYXRhLnZlcnNlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uID0gdGhpcy5kYXRhLnRyYW5zbGF0aW9ucy5maW5kKHQgPT4gdC5pZCA9PT0gdmVyc2UudHJhbnNsYXRpb25faWQpO1xuICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB2ZXJzZXNUb0FkZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uSWQ6IHRyYW5zbGF0aW9uLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9vazogdmVyc2UuYm9vayxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXB0ZXI6IHZlcnNlLmNoYXB0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJzZTogdmVyc2UudmVyc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB2ZXJzZS50ZXh0XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHZlcnNlc1RvQWRkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZFZlcnNlc0JhdGNoKHZlcnNlc1RvQWRkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBpbXBvcnRGcm9tWE1MKHhtbERhdGE6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAvLyBUaGlzIHdvdWxkIHBhcnNlIFhNTCBCaWJsZSBkYXRhIGFuZCBjb252ZXJ0IHRvIG91ciBmb3JtYXRcbiAgICAgICAgLy8gSW1wbGVtZW50YXRpb24gd291bGQgZGVwZW5kIG9uIHRoZSBYTUwgc3RydWN0dXJlXG4gICAgICAgIGNvbnNvbGUubG9nKCdYTUwgaW1wb3J0IG5vdCB5ZXQgaW1wbGVtZW50ZWQnKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RGF0YWJhc2VTdGF0cygpOiB7IHRyYW5zbGF0aW9uczogbnVtYmVyOyB2ZXJzZXM6IG51bWJlciB9IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uczogdGhpcy5kYXRhLnRyYW5zbGF0aW9ucy5sZW5ndGgsXG4gICAgICAgICAgICB2ZXJzZXM6IHRoaXMuZGF0YS52ZXJzZXMubGVuZ3RoXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHZlcmlmeVRyYW5zbGF0aW9uRXhpc3RzKGFiYnJldmlhdGlvbjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEudHJhbnNsYXRpb25zLnNvbWUodCA9PiB0LmFiYnJldmlhdGlvbiA9PT0gYWJicmV2aWF0aW9uKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VHJhbnNsYXRpb25TdGF0cyhhYmJyZXZpYXRpb246IHN0cmluZyk6IHsgbmFtZTogc3RyaW5nOyB2ZXJzZUNvdW50OiBudW1iZXI7IGJvb2tzOiBzdHJpbmdbXSB9IHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uID0gdGhpcy5kYXRhLnRyYW5zbGF0aW9ucy5maW5kKHQgPT4gdC5hYmJyZXZpYXRpb24gPT09IGFiYnJldmlhdGlvbik7XG4gICAgICAgIGlmICghdHJhbnNsYXRpb24pIHJldHVybiBudWxsO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdHJhbnNsYXRpb25WZXJzZXMgPSB0aGlzLmRhdGEudmVyc2VzLmZpbHRlcih2ID0+IHYudHJhbnNsYXRpb25faWQgPT09IHRyYW5zbGF0aW9uLmlkKTtcbiAgICAgICAgY29uc3QgYm9va3MgPSBbLi4ubmV3IFNldCh0cmFuc2xhdGlvblZlcnNlcy5tYXAodiA9PiB2LmJvb2spKV0uc29ydCgpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IHRyYW5zbGF0aW9uLm5hbWUsXG4gICAgICAgICAgICB2ZXJzZUNvdW50OiB0cmFuc2xhdGlvblZlcnNlcy5sZW5ndGgsXG4gICAgICAgICAgICBib29rc1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBhcHBseVByb2Nlc3NpbmdSdWxlcyh0ZXh0OiBzdHJpbmcsIHRyYW5zbGF0aW9uQWJicjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgdHJhbnNsYXRpb24gPSB0aGlzLmRhdGEudHJhbnNsYXRpb25zLmZpbmQodCA9PiB0LmFiYnJldmlhdGlvbiA9PT0gdHJhbnNsYXRpb25BYmJyKTtcbiAgICAgICAgaWYgKCF0cmFuc2xhdGlvbiB8fCAhdHJhbnNsYXRpb24ucHJvY2Vzc2luZ1J1bGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwcm9jZXNzZWRUZXh0ID0gdGV4dDtcbiAgICAgICAgZm9yIChjb25zdCBydWxlIG9mIHRyYW5zbGF0aW9uLnByb2Nlc3NpbmdSdWxlcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAocnVsZS5yZWdleCwgJ2cnKTtcbiAgICAgICAgICAgICAgICBpZiAocnVsZS5lc2NhcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc2VkVGV4dCA9IHByb2Nlc3NlZFRleHQucmVwbGFjZShyZWdleCwgKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFyZ3M6IFttYXRjaCwgZ3JvdXAxLCBncm91cDIsIC4uLiwgb2Zmc2V0LCBzdHJpbmddXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gcnVsZS5mb3JtYXR0aW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gYXJnc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlc2NhcGVkID0gdGhpcy5lc2NhcGVIdG1sKGdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShuZXcgUmVnRXhwKGBcXFxcJCR7aX1gLCAnZycpLCBlc2NhcGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICQmIGZvciB0aGUgd2hvbGUgbWF0Y2hcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKC9cXCQmL2csIHRoaXMuZXNjYXBlSHRtbChhcmdzWzBdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzZWRUZXh0ID0gcHJvY2Vzc2VkVGV4dC5yZXBsYWNlKHJlZ2V4LCBydWxlLmZvcm1hdHRpbmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBJbnZhbGlkIHJlZ2V4IGluIHByb2Nlc3NpbmcgcnVsZSBmb3IgJHt0cmFuc2xhdGlvbkFiYnJ9OiAke3J1bGUucmVnZXh9YCwgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9jZXNzZWRUZXh0O1xuICAgIH1cblxuICAgIHByaXZhdGUgZXNjYXBlSHRtbChzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvWyY8PlxcW1xcXV0vZywgKGMpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgICAgICAgIGNhc2UgJyYnOiByZXR1cm4gJyZhbXA7JztcbiAgICAgICAgICAgICAgICBjYXNlICc8JzogcmV0dXJuICcmbHQ7JztcbiAgICAgICAgICAgICAgICBjYXNlICc+JzogcmV0dXJuICcmZ3Q7JztcbiAgICAgICAgICAgICAgICBjYXNlICdbJzogcmV0dXJuICcmIzkxOyc7XG4gICAgICAgICAgICAgICAgY2FzZSAnXSc6IHJldHVybiAnJiM5MzsnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RGF0YUZpbGVQYXRoKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBwYXRoLmpvaW4odGhpcy5wbHVnaW4uYXBwLnZhdWx0LmFkYXB0ZXIuYmFzZVBhdGgsICcub2JzaWRpYW4nLCAncGx1Z2lucycsICdvYnNpZGlhbi1iaWJsZWxpbmsnLCB0aGlzLmRhdGFQYXRoLCAnYmlibGVfZGF0YS5qc29uJyk7XG4gICAgfVxuXG4gICAgcHVibGljIGRhdGFGaWxlRXhpc3RzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZnMuZXhpc3RzU3luYyh0aGlzLmdldERhdGFGaWxlUGF0aCgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgY2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMuaXNVbmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZHVyaW5nIGRhdGFiYXNlIGNsb3NlOicsIGVycm9yKTtcbiAgICAgICAgICAgIC8vIERvbid0IHJlLXRocm93IGR1cmluZyBjbG9zZSB0byBwcmV2ZW50IHBsdWdpbiB1bmxvYWQgZmFpbHVyZXNcbiAgICAgICAgfVxuICAgIH1cbn0gIiwgImltcG9ydCB7IEFwcCwgTW9kYWwsIFNldHRpbmcsIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IEJpYmxlRGF0YWJhc2UgfSBmcm9tICcuL2RhdGFiYXNlJztcbmltcG9ydCBCaWJsZUxpbmtQbHVnaW4gZnJvbSAnLi9tYWluJztcblxuZXhwb3J0IGNsYXNzIEJpYmxlU2VsZWN0b3JNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBwcml2YXRlIHNlbGVjdGVkQm9vazogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBzZWxlY3RlZFN0YXJ0Q2hhcHRlcjogbnVtYmVyID0gMTtcbiAgICBwcml2YXRlIHNlbGVjdGVkRW5kQ2hhcHRlcjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBzZWxlY3RlZFN0YXJ0VmVyc2U6IG51bWJlciA9IDE7XG4gICAgcHJpdmF0ZSBzZWxlY3RlZEVuZFZlcnNlOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIHNlbGVjdGVkVHJhbnNsYXRpb246IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgc2VsZWN0ZWRPdXRwdXRUeXBlOiAndGV4dCcgfCAnbGluaycgfCAnY29kZWJsb2NrJyA9ICdjb2RlYmxvY2snO1xuICAgIHByaXZhdGUgc2VsZWN0ZWRPcHRpb25zOiBzdHJpbmdbXSA9IFtdO1xuICAgIHByaXZhdGUgZGI6IEJpYmxlRGF0YWJhc2U7XG5cbiAgICAvLyBBZGQgdGhlc2UgZmllbGRzIHRvIHRoZSBjbGFzc1xuICAgIHByaXZhdGUgcmVmZXJlbmNlSW5wdXQ6IGltcG9ydCgnb2JzaWRpYW4nKS5UZXh0Q29tcG9uZW50O1xuICAgIHByaXZhdGUgcmVmZXJlbmNlV2FybmluZzogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSB0cmFuc2xhdGlvbkRyb3Bkb3duOiBpbXBvcnQoJ29ic2lkaWFuJykuRHJvcGRvd25Db21wb25lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgYXBwOiBBcHAsXG4gICAgICAgIHByaXZhdGUgcGx1Z2luOiBCaWJsZUxpbmtQbHVnaW4sXG4gICAgICAgIHByaXZhdGUgb25TdWJtaXQ6IChyZWZlcmVuY2U6IHN0cmluZywgdHJhbnNsYXRpb246IHN0cmluZywgb3V0cHV0VHlwZTogJ3RleHQnIHwgJ2xpbmsnIHwgJ2NvZGVibG9jaycsIG9wdGlvbnM6IHN0cmluZ1tdKSA9PiB2b2lkXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMuZGIgPSBwbHVnaW4uZGI7XG4gICAgfVxuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB3aXRoIHBlcnNpc3RlbnQgc2V0dGluZ3NcbiAgICAgICAgdGhpcy5zZWxlY3RlZE91dHB1dFR5cGUgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5tb2RhbE91dHB1dFR5cGU7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb25zID0gWy4uLnRoaXMucGx1Z2luLnNldHRpbmdzLm1vZGFsT3B0aW9uc107XG5cbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ0luc2VydCBCaWJsZSBSZWZlcmVuY2UnIH0pO1xuXG4gICAgICAgIC8vIERpcmVjdCBSZWZlcmVuY2UgSW5wdXRcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlU2V0dGluZyA9IG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdSZWZlcmVuY2UnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0VudGVyIGEgcmVmZXJlbmNlIChlLmcuLCBKb2huIDE6MTMtMjUpIG9yIHVzZSB0aGUgc2VsZWN0b3JzIGJlbG93LicpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHtcbiAgICAgICAgICAgICAgICB0ZXh0LnNldFBsYWNlaG9sZGVyKCdlLmcuLCBKb2huIDE6MTMtMjUnKVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVJlZmVyZW5jZUlucHV0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZlcmVuY2VJbnB1dCA9IHRleHQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VXYXJuaW5nID0gY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ2JpYmxlbGluay1yZWYtd2FybmluZycgfSk7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlV2FybmluZy5zdHlsZS5jb2xvciA9ICd2YXIoLS10ZXh0LXdhcm5pbmcpJztcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VXYXJuaW5nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAgICAgLy8gVHJhbnNsYXRpb24gU2VsZWN0aW9uXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdUcmFuc2xhdGlvbicpXG4gICAgICAgICAgICAuc2V0RGVzYygnQ2hvb3NlIGEgQmlibGUgdHJhbnNsYXRpb24nKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uRHJvcGRvd24gPSBkcm9wZG93bjtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2xhdGlvbnMgPSB0aGlzLmRiLmdldFRyYW5zbGF0aW9ucygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uT3B0aW9uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9ucy5mb3JFYWNoKHRyYW5zID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb25PcHRpb25zW3RyYW5zLmFiYnJldmlhdGlvbl0gPSBgJHt0cmFucy5uYW1lfSAoJHt0cmFucy5hYmJyZXZpYXRpb259KWA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbnModHJhbnNsYXRpb25PcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdFRyYW5zbGF0aW9uKVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRyYW5zbGF0aW9uID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckJvb2tHcmlkKGJvb2tHcmlkQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyQ2hhcHRlckdyaWQoY2hhcHRlckdyaWRDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJWZXJzZUdyaWQodmVyc2VHcmlkQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBCb29rIFNlbGVjdGlvbiAoR3JpZClcbiAgICAgICAgY29uc3QgYm9va0dyaWRDb250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiAnYmlibGVsaW5rLWJvb2stZ3JpZC1jb250YWluZXInIH0pO1xuICAgICAgICB0aGlzLnJlbmRlckJvb2tHcmlkKGJvb2tHcmlkQ29udGFpbmVyKTtcblxuICAgICAgICAvLyBDaGFwdGVyIFNlbGVjdGlvbiAoR3JpZClcbiAgICAgICAgY29uc3QgY2hhcHRlckdyaWRDb250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiAnYmlibGVsaW5rLWNoYXB0ZXItZ3JpZC1jb250YWluZXInIH0pO1xuICAgICAgICB0aGlzLnJlbmRlckNoYXB0ZXJHcmlkKGNoYXB0ZXJHcmlkQ29udGFpbmVyKTtcblxuICAgICAgICAvLyBWZXJzZSBTZWxlY3Rpb24gKEdyaWQpXG4gICAgICAgIGNvbnN0IHZlcnNlR3JpZENvbnRhaW5lciA9IGNvbnRlbnRFbC5jcmVhdGVEaXYoeyBjbHM6ICdiaWJsZWxpbmstdmVyc2UtZ3JpZC1jb250YWluZXInIH0pO1xuICAgICAgICB0aGlzLnJlbmRlclZlcnNlR3JpZCh2ZXJzZUdyaWRDb250YWluZXIpO1xuXG4gICAgICAgIC8vIE91dHB1dCBUeXBlIFNlbGVjdGlvblxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnT3V0cHV0IFR5cGUnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0Nob29zZSBob3cgdG8gaW5zZXJ0IHRoZSByZWZlcmVuY2UnKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IGRyb3Bkb3duXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbigndGV4dCcsICdGdWxsIFZlcnNlIFRleHQnKVxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oJ2xpbmsnLCAnTGl0ZXJhbCBXb3JkIExpbmsnKVxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oJ2NvZGVibG9jaycsICdDb2RlIEJsb2NrJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5zZWxlY3RlZE91dHB1dFR5cGUpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE91dHB1dFR5cGUgPSB2YWx1ZSBhcyAndGV4dCcgfCAnbGluaycgfCAnY29kZWJsb2NrJztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubW9kYWxPdXRwdXRUeXBlID0gdGhpcy5zZWxlY3RlZE91dHB1dFR5cGU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU9wdGlvbnNTZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIE9wdGlvbnMgU2VjdGlvbiAob25seSBmb3IgY29kZSBibG9ja3MpXG4gICAgICAgIGNvbnN0IG9wdGlvbnNDb250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KCk7XG4gICAgICAgIHRoaXMudXBkYXRlT3B0aW9uc1NlY3Rpb24ob3B0aW9uc0NvbnRhaW5lcik7XG5cblxuXG4gICAgICAgIC8vIFN1Ym1pdCBCdXR0b25cbiAgICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgICAgICAgLmFkZEJ1dHRvbihidXR0b24gPT4gYnV0dG9uXG4gICAgICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoJ0luc2VydCcpXG4gICAgICAgICAgICAgICAgLnNldEN0YSgpXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluc2VydFJlZmVyZW5jZSgpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAvLyBBZGQgRW50ZXIga2V5IHN1cHBvcnQgZm9yIHN1Ym1pc3Npb25cbiAgICAgICAgaWYgKHRoaXMucmVmZXJlbmNlSW5wdXQgJiYgdGhpcy5yZWZlcmVuY2VJbnB1dC5pbnB1dEVsKSB7XG4gICAgICAgICAgICB0aGlzLnJlZmVyZW5jZUlucHV0LmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRSZWZlcmVuY2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluamVjdCBtb2Rlcm4gQ1NTIGZvciB0aGUgbW9kYWwgZ3JpZHMgYW5kIGJ1dHRvbnNcbiAgICAgICAgdGhpcy5pbmplY3RCaWJsZUdyaWRTdHlsZXMoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluamVjdEJpYmxlR3JpZFN0eWxlcygpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiaWJsZWxpbmstbW9kYWwtc3R5bGUnKSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIHN0eWxlLmlkID0gJ2JpYmxlbGluay1tb2RhbC1zdHlsZSc7XG4gICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gYFxuICAgICAgICAuYmlibGVsaW5rLWJvb2stZ3JpZC1jb250YWluZXIsXG4gICAgICAgIC5iaWJsZWxpbmstY2hhcHRlci1ncmlkLWNvbnRhaW5lcixcbiAgICAgICAgLmJpYmxlbGluay12ZXJzZS1ncmlkLWNvbnRhaW5lciB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxLjJlbTtcbiAgICAgICAgfVxuICAgICAgICAuYmlibGVsaW5rLWJvb2stZ3JpZCxcbiAgICAgICAgLmJpYmxlbGluay1jaGFwdGVyLWdyaWQsXG4gICAgICAgIC5iaWJsZWxpbmstdmVyc2UtZ3JpZCB7XG4gICAgICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIG1pbm1heCg5MHB4LCAxZnIpKTtcbiAgICAgICAgICAgIGdhcDogMC41ZW07XG4gICAgICAgICAgICBtYXgtaGVpZ2h0OiAyMDBweDtcbiAgICAgICAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgICAgICAgICBwYWRkaW5nOiAwLjVlbSAwO1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1zZWNvbmRhcnktYWx0LCAjMjMyNzJlKTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgICAgfVxuICAgICAgICAuYmlibGVsaW5rLWJvb2stYnRuLFxuICAgICAgICAuYmlibGVsaW5rLWNoYXB0ZXItYnRuLFxuICAgICAgICAuYmlibGVsaW5rLXZlcnNlLWJ0biB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnksICMxODFhMjApO1xuICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtbm9ybWFsLCAjZTBlMGUwKTtcbiAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgICAgICAgICAgIHBhZGRpbmc6IDAuNmVtIDAuOGVtO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxZW07XG4gICAgICAgICAgICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMXB4IDNweCByZ2JhKDAsMCwwLDAuMDgpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjE1cywgY29sb3IgMC4xNXMsIGJveC1zaGFkb3cgMC4xNXMsIGJvcmRlciAwLjE1cztcbiAgICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgICAgICB9XG4gICAgICAgIC5iaWJsZWxpbmstYm9vay1idG46aG92ZXIsXG4gICAgICAgIC5iaWJsZWxpbmstY2hhcHRlci1idG46aG92ZXIsXG4gICAgICAgIC5iaWJsZWxpbmstdmVyc2UtYnRuOmhvdmVyIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWludGVyYWN0aXZlLWFjY2VudCwgIzNhN2FmZSk7XG4gICAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgfVxuICAgICAgICAuYmlibGVsaW5rLWJvb2stYnRuLnNlbGVjdGVkLFxuICAgICAgICAuYmlibGVsaW5rLWNoYXB0ZXItYnRuLnNlbGVjdGVkLFxuICAgICAgICAuYmlibGVsaW5rLXZlcnNlLWJ0bi5zZWxlY3RlZCB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1jb2xvci1hY2NlbnQsICMzYTdhZmUpO1xuICAgICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgICAgICAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tY29sb3ItYWNjZW50LTIsICMxZTRmYTMpO1xuICAgICAgICAgICAgYm94LXNoYWRvdzogMCAycHggOHB4IHJnYmEoNTgsMTIyLDI1NCwwLjE1KTtcbiAgICAgICAgfVxuICAgICAgICAuYmlibGVsaW5rLXNlbGVjdGFsbC1idG4ge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ob3ZlciwgIzJhMmQzNCk7XG4gICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCwgI2IwYjBiMCk7XG4gICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAwLjRlbSAwLjhlbTtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDAuNWVtO1xuICAgICAgICAgICAgZm9udC1zaXplOiAwLjk1ZW07XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuMTVzLCBjb2xvciAwLjE1cztcbiAgICAgICAgfVxuICAgICAgICAuYmlibGVsaW5rLXNlbGVjdGFsbC1idG46aG92ZXIge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50LCAjM2E3YWZlKTtcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICB9XG4gICAgICAgIC5iaWJsZWxpbmstYm9vay1ncmlkOjotd2Via2l0LXNjcm9sbGJhcixcbiAgICAgICAgLmJpYmxlbGluay1jaGFwdGVyLWdyaWQ6Oi13ZWJraXQtc2Nyb2xsYmFyLFxuICAgICAgICAuYmlibGVsaW5rLXZlcnNlLWdyaWQ6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICAgICAgICAgIHdpZHRoOiA4cHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgfVxuICAgICAgICAuYmlibGVsaW5rLWJvb2stZ3JpZDo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIsXG4gICAgICAgIC5iaWJsZWxpbmstY2hhcHRlci1ncmlkOjotd2Via2l0LXNjcm9sbGJhci10aHVtYixcbiAgICAgICAgLmJpYmxlbGluay12ZXJzZS1ncmlkOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlciwgIzQ0NCk7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgIH1cbiAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICAgICAgICAuYmlibGVsaW5rLWJvb2stZ3JpZCxcbiAgICAgICAgICAgIC5iaWJsZWxpbmstY2hhcHRlci1ncmlkLFxuICAgICAgICAgICAgLmJpYmxlbGluay12ZXJzZS1ncmlkIHtcbiAgICAgICAgICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpdCwgbWlubWF4KDYwcHgsIDFmcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmJpYmxlbGluay1ib29rLWJ0bixcbiAgICAgICAgICAgIC5iaWJsZWxpbmstY2hhcHRlci1idG4sXG4gICAgICAgICAgICAuYmlibGVsaW5rLXZlcnNlLWJ0biB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAwLjk1ZW07XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMC41ZW0gMC41ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYDtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuXG4gICAgLy8gQm9vayBncmlkIHNlbGVjdGlvblxuICAgIHByaXZhdGUgc2VsZWN0ZWRCb29rczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG4gICAgcHJpdmF0ZSByZW5kZXJCb29rR3JpZChjb250YWluZXI6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGNvbnRhaW5lci5lbXB0eSgpO1xuICAgICAgICBjb25zdCBib29rcyA9IHRoaXMuZGIuZ2V0Qm9va3MoKTtcbiAgICAgICAgaWYgKCFib29rcyB8fCBib29rcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgICAgY29uc3QgZ3JpZCA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdiaWJsZWxpbmstYm9vay1ncmlkJyB9KTtcbiAgICAgICAgYm9va3MuZm9yRWFjaChib29rID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJ0biA9IGdyaWQuY3JlYXRlRWwoJ2J1dHRvbicsIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBib29rLFxuICAgICAgICAgICAgICAgIGNsczogJ2JpYmxlbGluay1ib29rLWJ0bidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnRuLnNldEF0dHIoJ3RpdGxlJywgYm9vayk7XG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZEJvb2sgPT09IGJvb2spIHtcbiAgICAgICAgICAgICAgICBidG4uYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidG4ub25jbGljayA9IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEJvb2sgPSBib29rO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRTdGFydENoYXB0ZXIgPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRFbmRDaGFwdGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkU3RhcnRWZXJzZSA9IDE7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEVuZFZlcnNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckJvb2tHcmlkKGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJDaGFwdGVyR3JpZChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYmlibGVsaW5rLWNoYXB0ZXItZ3JpZC1jb250YWluZXInKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJWZXJzZUdyaWQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJpYmxlbGluay12ZXJzZS1ncmlkLWNvbnRhaW5lcicpKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVJlZmVyZW5jZUlucHV0RnJvbVNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJldmlldygpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gTXVsdGktc2VsZWN0IGZvciBjaGFwdGVyc1xuICAgIHByaXZhdGUgc2VsZWN0ZWRDaGFwdGVyczogU2V0PG51bWJlcj4gPSBuZXcgU2V0KCk7XG4gICAgcHJpdmF0ZSByZW5kZXJDaGFwdGVyR3JpZChjb250YWluZXI6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGNvbnRhaW5lci5lbXB0eSgpO1xuICAgICAgICBpZiAoIXRoaXMuc2VsZWN0ZWRCb29rKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGNoYXB0ZXJzID0gdGhpcy5kYi5nZXRDaGFwdGVyc0ZvckJvb2sodGhpcy5zZWxlY3RlZEJvb2ssIHRoaXMuc2VsZWN0ZWRUcmFuc2xhdGlvbiB8fCB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0VHJhbnNsYXRpb24pO1xuICAgICAgICBpZiAoIWNoYXB0ZXJzIHx8IGNoYXB0ZXJzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBncmlkID0gY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ2JpYmxlbGluay1jaGFwdGVyLWdyaWQnIH0pO1xuICAgICAgICAvLyBTZWxlY3QgQWxsIGJ1dHRvblxuICAgICAgICBjb25zdCBzZWxlY3RBbGxCdG4gPSBjb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1NlbGVjdCBBbGwgQ2hhcHRlcnMnLCBjbHM6ICdiaWJsZWxpbmstc2VsZWN0YWxsLWJ0bicgfSk7XG4gICAgICAgIHNlbGVjdEFsbEJ0bi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENoYXB0ZXJzID0gbmV3IFNldChjaGFwdGVycyk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckNoYXB0ZXJHcmlkKGNvbnRhaW5lcik7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclZlcnNlR3JpZChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYmlibGVsaW5rLXZlcnNlLWdyaWQtY29udGFpbmVyJykpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVSZWZlcmVuY2VJbnB1dEZyb21TZWxlY3Rpb24oKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2hhcHRlcnMuZm9yRWFjaChjaGFwdGVyID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJ0biA9IGdyaWQuY3JlYXRlRWwoJ2J1dHRvbicsIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBjaGFwdGVyLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY2xzOiAnYmlibGVsaW5rLWNoYXB0ZXItYnRuJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZENoYXB0ZXJzLmhhcyhjaGFwdGVyKSB8fCB0aGlzLnNlbGVjdGVkU3RhcnRDaGFwdGVyID09PSBjaGFwdGVyIHx8ICh0aGlzLnNlbGVjdGVkRW5kQ2hhcHRlciAmJiBjaGFwdGVyID49IHRoaXMuc2VsZWN0ZWRTdGFydENoYXB0ZXIgJiYgY2hhcHRlciA8PSB0aGlzLnNlbGVjdGVkRW5kQ2hhcHRlcikpIHtcbiAgICAgICAgICAgICAgICBidG4uYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidG4ub25jbGljayA9IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRDaGFwdGVycy5oYXMoY2hhcHRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDaGFwdGVycy5kZWxldGUoY2hhcHRlcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkQ2hhcHRlcnMuYWRkKGNoYXB0ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLnNoaWZ0S2V5ICYmIHRoaXMuc2VsZWN0ZWRTdGFydENoYXB0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBNYXRoLm1pbih0aGlzLnNlbGVjdGVkU3RhcnRDaGFwdGVyLCBjaGFwdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kID0gTWF0aC5tYXgodGhpcy5zZWxlY3RlZFN0YXJ0Q2hhcHRlciwgY2hhcHRlcik7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSBzdGFydDsgYyA8PSBlbmQ7IGMrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENoYXB0ZXJzLmFkZChjKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDaGFwdGVycyA9IG5ldyBTZXQoW2NoYXB0ZXJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFN0YXJ0Q2hhcHRlciA9IGNoYXB0ZXI7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEVuZENoYXB0ZXIgPSBjaGFwdGVyO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRTdGFydFZlcnNlID0gMTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRW5kVmVyc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyQ2hhcHRlckdyaWQoY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclZlcnNlR3JpZChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYmlibGVsaW5rLXZlcnNlLWdyaWQtY29udGFpbmVyJykpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUmVmZXJlbmNlSW5wdXRGcm9tU2VsZWN0aW9uKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBNdWx0aS1zZWxlY3QgZm9yIHZlcnNlc1xuICAgIHByaXZhdGUgc2VsZWN0ZWRWZXJzZXM6IFNldDxudW1iZXI+ID0gbmV3IFNldCgpO1xuICAgIHByaXZhdGUgcmVuZGVyVmVyc2VHcmlkKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgY29udGFpbmVyLmVtcHR5KCk7XG4gICAgICAgIGlmICghdGhpcy5zZWxlY3RlZEJvb2sgfHwgIXRoaXMuc2VsZWN0ZWRTdGFydENoYXB0ZXIpIHJldHVybjtcbiAgICAgICAgY29uc3QgdmVyc2VzID0gdGhpcy5kYi5nZXRWZXJzZXNGb3JDaGFwdGVyKFxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEJvb2ssXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkU3RhcnRDaGFwdGVyLFxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRyYW5zbGF0aW9uIHx8IHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRUcmFuc2xhdGlvblxuICAgICAgICApO1xuICAgICAgICBpZiAoIXZlcnNlcyB8fCB2ZXJzZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGdyaWQgPSBjb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnYmlibGVsaW5rLXZlcnNlLWdyaWQnIH0pO1xuICAgICAgICAvLyBTZWxlY3QgQWxsIGJ1dHRvblxuICAgICAgICBjb25zdCBzZWxlY3RBbGxCdG4gPSBjb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1NlbGVjdCBBbGwgVmVyc2VzJywgY2xzOiAnYmlibGVsaW5rLXNlbGVjdGFsbC1idG4nIH0pO1xuICAgICAgICBzZWxlY3RBbGxCdG4ub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRWZXJzZXMgPSBuZXcgU2V0KHZlcnNlcyk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclZlcnNlR3JpZChjb250YWluZXIpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVSZWZlcmVuY2VJbnB1dEZyb21TZWxlY3Rpb24oKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmVyc2VzLmZvckVhY2godmVyc2UgPT4ge1xuICAgICAgICAgICAgY29uc3QgYnRuID0gZ3JpZC5jcmVhdGVFbCgnYnV0dG9uJywge1xuICAgICAgICAgICAgICAgIHRleHQ6IHZlcnNlLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY2xzOiAnYmlibGVsaW5rLXZlcnNlLWJ0bidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRWZXJzZXMuaGFzKHZlcnNlKSB8fCB0aGlzLnNlbGVjdGVkU3RhcnRWZXJzZSA9PT0gdmVyc2UgfHwgKHRoaXMuc2VsZWN0ZWRFbmRWZXJzZSAmJiB2ZXJzZSA+PSB0aGlzLnNlbGVjdGVkU3RhcnRWZXJzZSAmJiB2ZXJzZSA8PSB0aGlzLnNlbGVjdGVkRW5kVmVyc2UpKSB7XG4gICAgICAgICAgICAgICAgYnRuLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnRuLm9uY2xpY2sgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVmVyc2VzLmhhcyh2ZXJzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRWZXJzZXMuZGVsZXRlKHZlcnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRWZXJzZXMuYWRkKHZlcnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5zaGlmdEtleSAmJiB0aGlzLnNlbGVjdGVkU3RhcnRWZXJzZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IE1hdGgubWluKHRoaXMuc2VsZWN0ZWRTdGFydFZlcnNlLCB2ZXJzZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IE1hdGgubWF4KHRoaXMuc2VsZWN0ZWRTdGFydFZlcnNlLCB2ZXJzZSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHYgPSBzdGFydDsgdiA8PSBlbmQ7IHYrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFZlcnNlcy5hZGQodik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkVmVyc2VzID0gbmV3IFNldChbdmVyc2VdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFN0YXJ0VmVyc2UgPSB2ZXJzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRW5kVmVyc2UgPSB2ZXJzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclZlcnNlR3JpZChjb250YWluZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUmVmZXJlbmNlSW5wdXRGcm9tU2VsZWN0aW9uKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVJlZmVyZW5jZUlucHV0RnJvbVNlbGVjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMucmVmZXJlbmNlSW5wdXQpIHtcbiAgICAgICAgICAgIGxldCByZWYgPSAnJztcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkQm9vaykge1xuICAgICAgICAgICAgICAgIHJlZiArPSB0aGlzLnNlbGVjdGVkQm9vaztcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZENoYXB0ZXJzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXB0ZXJzID0gQXJyYXkuZnJvbSh0aGlzLnNlbGVjdGVkQ2hhcHRlcnMpLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICAgICAgICAgICAgICAgICAgcmVmICs9ICcgJyArIGNoYXB0ZXJzLmpvaW4oJywnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0ZWRTdGFydENoYXB0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmICs9ICcgJyArIHRoaXMuc2VsZWN0ZWRTdGFydENoYXB0ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVmVyc2VzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZlcnNlcyA9IEFycmF5LmZyb20odGhpcy5zZWxlY3RlZFZlcnNlcykuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgICAgICAgICAgICAgICAgICByZWYgKz0gJzonICsgdmVyc2VzLmpvaW4oJywnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0ZWRTdGFydFZlcnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZiArPSAnOicgKyB0aGlzLnNlbGVjdGVkU3RhcnRWZXJzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlZmVyZW5jZUlucHV0LnNldFZhbHVlKHJlZik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZUNoYXB0ZXJEcm9wZG93bihjb250YWluZXI/OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBpZiAoIXRoaXMuc2VsZWN0ZWRCb29rKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgY2hhcHRlcnMgPSB0aGlzLmRiLmdldENoYXB0ZXJzRm9yQm9vayh0aGlzLnNlbGVjdGVkQm9vaywgdGhpcy5zZWxlY3RlZFRyYW5zbGF0aW9uIHx8IHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRUcmFuc2xhdGlvbik7XG4gICAgICAgIGlmICghY2hhcHRlcnMgfHwgY2hhcHRlcnMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gY29udGFpbmVyIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaGFwdGVyLWNvbnRhaW5lcicpO1xuICAgICAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuICAgICAgICB0YXJnZXQuZW1wdHkoKTtcbiAgICAgICAgdGFyZ2V0LmFkZENsYXNzKCdjaGFwdGVyLWNvbnRhaW5lcicpO1xuXG4gICAgICAgIC8vIFN0YXJ0IGNoYXB0ZXJcbiAgICAgICAgbmV3IFNldHRpbmcodGFyZ2V0KVxuICAgICAgICAgICAgLnNldE5hbWUoJ1N0YXJ0IENoYXB0ZXInKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFwdGVyT3B0aW9uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICAgICAgICAgICAgICAgIGNoYXB0ZXJzLmZvckVhY2goY2hhcHRlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXB0ZXJPcHRpb25zW2NoYXB0ZXIudG9TdHJpbmcoKV0gPSBjaGFwdGVyLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbnMoY2hhcHRlck9wdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnNlbGVjdGVkU3RhcnRDaGFwdGVyLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkU3RhcnRDaGFwdGVyID0gcGFyc2VJbnQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkRW5kQ2hhcHRlciB8fCB0aGlzLnNlbGVjdGVkRW5kQ2hhcHRlciA8IHRoaXMuc2VsZWN0ZWRTdGFydENoYXB0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRW5kQ2hhcHRlciA9IHRoaXMuc2VsZWN0ZWRTdGFydENoYXB0ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVuZENoYXB0ZXJEcm9wZG93bih0YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWZXJzZURyb3Bkb3duKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRW5kIGNoYXB0ZXJcbiAgICAgICAgdGhpcy51cGRhdGVFbmRDaGFwdGVyRHJvcGRvd24odGFyZ2V0KTtcblxuICAgICAgICAvLyBJbiB1cGRhdGVDaGFwdGVyRHJvcGRvd24gYW5kIHVwZGF0ZVZlcnNlRHJvcGRvd24sIGFmdGVyIGNoYW5naW5nIGRyb3Bkb3ducywgdXBkYXRlIHRoZSB0ZXh0IGlucHV0XG4gICAgICAgIGlmICh0aGlzLnJlZmVyZW5jZUlucHV0KSB7XG4gICAgICAgICAgICBsZXQgcmVmID0gdGhpcy5zZWxlY3RlZEJvb2sgPyB0aGlzLnNlbGVjdGVkQm9vayArICcgJyArIHRoaXMuc2VsZWN0ZWRTdGFydENoYXB0ZXIgOiAnJztcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkU3RhcnRWZXJzZSAmJiB0aGlzLnNlbGVjdGVkU3RhcnRWZXJzZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHJlZiArPSAnOicgKyB0aGlzLnNlbGVjdGVkU3RhcnRWZXJzZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZEVuZFZlcnNlICYmIHRoaXMuc2VsZWN0ZWRFbmRWZXJzZSAhPT0gdGhpcy5zZWxlY3RlZFN0YXJ0VmVyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmICs9ICctJyArIHRoaXMuc2VsZWN0ZWRFbmRWZXJzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlZmVyZW5jZUlucHV0LnNldFZhbHVlKHJlZik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZUVuZENoYXB0ZXJEcm9wZG93bihjb250YWluZXI6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5zZWxlY3RlZEJvb2spIHJldHVybjtcblxuICAgICAgICBjb25zdCBjaGFwdGVycyA9IHRoaXMuZGIuZ2V0Q2hhcHRlcnNGb3JCb29rKHRoaXMuc2VsZWN0ZWRCb29rLCB0aGlzLnNlbGVjdGVkVHJhbnNsYXRpb24gfHwgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdFRyYW5zbGF0aW9uKTtcbiAgICAgICAgaWYgKCFjaGFwdGVycyB8fCBjaGFwdGVycy5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXIpXG4gICAgICAgICAgICAuc2V0TmFtZSgnRW5kIENoYXB0ZXInKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFwdGVyT3B0aW9uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICAgICAgICAgICAgICAgIGNoYXB0ZXJzXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoYyA9PiBjID49IHRoaXMuc2VsZWN0ZWRTdGFydENoYXB0ZXIpXG4gICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKGNoYXB0ZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcHRlck9wdGlvbnNbY2hhcHRlci50b1N0cmluZygpXSA9IGNoYXB0ZXIudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbnMoY2hhcHRlck9wdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSgodGhpcy5zZWxlY3RlZEVuZENoYXB0ZXIgfHwgdGhpcy5zZWxlY3RlZFN0YXJ0Q2hhcHRlcikudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRFbmRDaGFwdGVyID0gcGFyc2VJbnQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWZXJzZURyb3Bkb3duKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVWZXJzZURyb3Bkb3duKGNvbnRhaW5lcj86IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5zZWxlY3RlZEJvb2sgfHwgIXRoaXMuc2VsZWN0ZWRTdGFydENoYXB0ZXIpIHJldHVybjtcblxuICAgICAgICBjb25zdCB0YXJnZXQgPSBjb250YWluZXIgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZlcnNlLWNvbnRhaW5lcicpO1xuICAgICAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuICAgICAgICB0YXJnZXQuZW1wdHkoKTtcbiAgICAgICAgdGFyZ2V0LmFkZENsYXNzKCd2ZXJzZS1jb250YWluZXInKTtcblxuICAgICAgICAvLyBTdGFydCB2ZXJzZVxuICAgICAgICBjb25zdCBzdGFydFZlcnNlcyA9IHRoaXMuZGIuZ2V0VmVyc2VzRm9yQ2hhcHRlcihcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRCb29rLFxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFN0YXJ0Q2hhcHRlcixcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUcmFuc2xhdGlvbiB8fCB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0VHJhbnNsYXRpb25cbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoc3RhcnRWZXJzZXMgJiYgc3RhcnRWZXJzZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbmV3IFNldHRpbmcodGFyZ2V0KVxuICAgICAgICAgICAgICAgIC5zZXROYW1lKCdTdGFydCBWZXJzZScpXG4gICAgICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmVyc2VPcHRpb25zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJzAnOiAnRW50aXJlIENoYXB0ZXInXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0VmVyc2VzLmZvckVhY2godmVyc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2VPcHRpb25zW3ZlcnNlLnRvU3RyaW5nKCldID0gdmVyc2UudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9ucyh2ZXJzZU9wdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5zZWxlY3RlZFN0YXJ0VmVyc2UudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmVyc2VOdW0gPSBwYXJzZUludCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFN0YXJ0VmVyc2UgPSB2ZXJzZU51bTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVyc2VOdW0gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEVuZFZlcnNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEVuZENoYXB0ZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVuZFZlcnNlRHJvcGRvd24odGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW5kIHZlcnNlIChvbmx5IHNob3cgaWYgc3RhcnQgdmVyc2UgaXMgbm90IDApXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkU3RhcnRWZXJzZSAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbmRWZXJzZURyb3Bkb3duKHRhcmdldCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbiB1cGRhdGVDaGFwdGVyRHJvcGRvd24gYW5kIHVwZGF0ZVZlcnNlRHJvcGRvd24sIGFmdGVyIGNoYW5naW5nIGRyb3Bkb3ducywgdXBkYXRlIHRoZSB0ZXh0IGlucHV0XG4gICAgICAgIGlmICh0aGlzLnJlZmVyZW5jZUlucHV0KSB7XG4gICAgICAgICAgICBsZXQgcmVmID0gdGhpcy5zZWxlY3RlZEJvb2sgPyB0aGlzLnNlbGVjdGVkQm9vayArICcgJyArIHRoaXMuc2VsZWN0ZWRTdGFydENoYXB0ZXIgOiAnJztcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkU3RhcnRWZXJzZSAmJiB0aGlzLnNlbGVjdGVkU3RhcnRWZXJzZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHJlZiArPSAnOicgKyB0aGlzLnNlbGVjdGVkU3RhcnRWZXJzZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZEVuZFZlcnNlICYmIHRoaXMuc2VsZWN0ZWRFbmRWZXJzZSAhPT0gdGhpcy5zZWxlY3RlZFN0YXJ0VmVyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmICs9ICctJyArIHRoaXMuc2VsZWN0ZWRFbmRWZXJzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlZmVyZW5jZUlucHV0LnNldFZhbHVlKHJlZik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZUVuZFZlcnNlRHJvcGRvd24oY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFN0YXJ0VmVyc2UgPT09IDApIHJldHVybjtcblxuICAgICAgICBjb25zdCBlbmRWZXJzZXMgPSB0aGlzLmRiLmdldFZlcnNlc0ZvckNoYXB0ZXIoXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkQm9vayxcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRFbmRDaGFwdGVyIHx8IHRoaXMuc2VsZWN0ZWRTdGFydENoYXB0ZXIsXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVHJhbnNsYXRpb24gfHwgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdFRyYW5zbGF0aW9uXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKCFlbmRWZXJzZXMgfHwgZW5kVmVyc2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lcilcbiAgICAgICAgICAgIC5zZXROYW1lKCdFbmQgVmVyc2UnKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2ZXJzZU9wdGlvbnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgICAgICAgICAgICAgICBjb25zdCBtaW5WZXJzZSA9IHRoaXMuc2VsZWN0ZWRFbmRDaGFwdGVyID09PSB0aGlzLnNlbGVjdGVkU3RhcnRDaGFwdGVyID8gdGhpcy5zZWxlY3RlZFN0YXJ0VmVyc2UgOiAxO1xuICAgICAgICAgICAgICAgIGVuZFZlcnNlc1xuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKHYgPT4gdiA+PSBtaW5WZXJzZSlcbiAgICAgICAgICAgICAgICAgICAgLmZvckVhY2godmVyc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2VPcHRpb25zW3ZlcnNlLnRvU3RyaW5nKCldID0gdmVyc2UudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbnModmVyc2VPcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUoKHRoaXMuc2VsZWN0ZWRFbmRWZXJzZSB8fCB0aGlzLnNlbGVjdGVkU3RhcnRWZXJzZSkudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRFbmRWZXJzZSA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZU9wdGlvbnNTZWN0aW9uKGNvbnRhaW5lcj86IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkT3V0cHV0VHlwZSAhPT0gJ2NvZGVibG9jaycpIHJldHVybjtcblxuICAgICAgICBjb25zdCB0YXJnZXQgPSBjb250YWluZXIgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm9wdGlvbnMtY29udGFpbmVyJyk7XG4gICAgICAgIGlmICghdGFyZ2V0KSByZXR1cm47XG4gICAgICAgIHRhcmdldC5lbXB0eSgpO1xuICAgICAgICB0YXJnZXQuYWRkQ2xhc3MoJ29wdGlvbnMtY29udGFpbmVyJyk7XG5cbiAgICAgICAgdGFyZ2V0LmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ0NvZGUgQmxvY2sgT3B0aW9ucycgfSk7XG5cbiAgICAgICAgLy8gVmVyc2UgbnVtYmVyc1xuICAgICAgICBuZXcgU2V0dGluZyh0YXJnZXQpXG4gICAgICAgICAgICAuc2V0TmFtZSgnU2hvdyBWZXJzZSBOdW1iZXJzJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdJbmNsdWRlIHZlcnNlIG51bWJlcnMgaW4gdGhlIG91dHB1dC4nKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMuc2VsZWN0ZWRPcHRpb25zLmluY2x1ZGVzKCd2ZXJzZScpKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlT3B0aW9uKCd2ZXJzZScsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubW9kYWxPcHRpb25zID0gWy4uLnRoaXMuc2VsZWN0ZWRPcHRpb25zXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIENoYXB0ZXIgbnVtYmVyc1xuICAgICAgICBuZXcgU2V0dGluZyh0YXJnZXQpXG4gICAgICAgICAgICAuc2V0TmFtZSgnU2hvdyBDaGFwdGVyIE51bWJlcnMnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0luY2x1ZGUgY2hhcHRlciBudW1iZXJzIGluIHRoZSBvdXRwdXQuJylcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnNlbGVjdGVkT3B0aW9ucy5pbmNsdWRlcygnY2hhcHRlcicpKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlT3B0aW9uKCdjaGFwdGVyJywgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5tb2RhbE9wdGlvbnMgPSBbLi4udGhpcy5zZWxlY3RlZE9wdGlvbnNdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgLy8gUmVkIGxldHRlciB0ZXh0XG4gICAgICAgIG5ldyBTZXR0aW5nKHRhcmdldClcbiAgICAgICAgICAgIC5zZXROYW1lKCdSZWQgTGV0dGVyIFRleHQnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0hpZ2hsaWdodCB3b3JkcyBvZiBKZXN1cyBpbiByZWQuJylcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnNlbGVjdGVkT3B0aW9ucy5pbmNsdWRlcygncmVkLXRleHQnKSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU9wdGlvbigncmVkLXRleHQnLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm1vZGFsT3B0aW9ucyA9IFsuLi50aGlzLnNlbGVjdGVkT3B0aW9uc107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAvLyBMaW5rIHRvIEJpYmxlIEdhdGV3YXlcbiAgICAgICAgbmV3IFNldHRpbmcodGFyZ2V0KVxuICAgICAgICAgICAgLnNldE5hbWUoJ0FkZCBFeHRlcm5hbCBMaW5rJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdBZGQgYSBsaW5rIHRvIHZpZXcgdGhlIHZlcnNlIG9uIEJpYmxlIEdhdGV3YXkuJylcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnNlbGVjdGVkT3B0aW9ucy5pbmNsdWRlcygnbGluaycpKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlT3B0aW9uKCdsaW5rJywgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5tb2RhbE9wdGlvbnMgPSBbLi4udGhpcy5zZWxlY3RlZE9wdGlvbnNdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVPcHRpb24ob3B0aW9uOiBzdHJpbmcsIGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKGVuYWJsZWQgJiYgIXRoaXMuc2VsZWN0ZWRPcHRpb25zLmluY2x1ZGVzKG9wdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb25zLnB1c2gob3B0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmICghZW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbnMgPSB0aGlzLnNlbGVjdGVkT3B0aW9ucy5maWx0ZXIobyA9PiBvICE9PSBvcHRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxuICAgIHByaXZhdGUgaW5zZXJ0UmVmZXJlbmNlKCkge1xuICAgICAgICAvLyBBbHdheXMgdXNlIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSByZWZlcmVuY2UgaW5wdXRcbiAgICAgICAgY29uc3QgcmVmVmFsdWUgPSB0aGlzLnJlZmVyZW5jZUlucHV0Py5nZXRWYWx1ZSgpPy50cmltKCk7XG4gICAgICAgIGlmICghcmVmVmFsdWUpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1BsZWFzZSBlbnRlciBhIHJlZmVyZW5jZScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFVzZSBzZWxlY3RlZCB0cmFuc2xhdGlvbiBvciBkZWZhdWx0XG4gICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uID0gdGhpcy5zZWxlY3RlZFRyYW5zbGF0aW9uIHx8IHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRUcmFuc2xhdGlvbjtcbiAgICAgICAgaWYgKCF0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgbmV3IE5vdGljZSgnUGxlYXNlIHNlbGVjdCBhIHRyYW5zbGF0aW9uJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXNlIGN1cnJlbnQgb3V0cHV0IHR5cGUgYW5kIG9wdGlvbnNcbiAgICAgICAgdGhpcy5vblN1Ym1pdChyZWZWYWx1ZSwgdHJhbnNsYXRpb24sIHRoaXMuc2VsZWN0ZWRPdXRwdXRUeXBlLCB0aGlzLnNlbGVjdGVkT3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhpcyBtZXRob2QgdG8gaGFuZGxlIHJlZmVyZW5jZSBpbnB1dCBhbmQgc3luYyBkcm9wZG93bnNcbiAgICBwcml2YXRlIGhhbmRsZVJlZmVyZW5jZUlucHV0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZS50cmltKCkgPT09ICcnKSB7XG4gICAgICAgICAgICB0aGlzLnJlZmVyZW5jZVdhcm5pbmcuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIC8vIENsZWFyIHNlbGVjdGlvbnMgd2hlbiBpbnB1dCBpcyBlbXB0eVxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENoYXB0ZXJzLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVmVyc2VzLmNsZWFyKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gUGFyc2UgcmVmZXJlbmNlOiBCb29rIENoYXB0ZXI6VmVyc2VbLVZlcnNlXSBvciBCb29rIENoYXB0ZXJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB2YWx1ZS5tYXRjaCgvXihbMS0zXT8gP1tBLVphLXogXSspXFxzKyhcXGQrKSg/OjooXFxkKykoPzotKFxcZCspKT8pPyQvKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgdGhpcy5yZWZlcmVuY2VXYXJuaW5nLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgICAgIHRoaXMucmVmZXJlbmNlV2FybmluZy50ZXh0Q29udGVudCA9ICdVbnJlY29nbml6ZWQgcmVmZXJlbmNlIGZvcm1hdC4nO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVmZXJlbmNlV2FybmluZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBjb25zdCBbLCBib29rLCBjaGFwdGVyXSA9IG1hdGNoO1xuICAgICAgICBjb25zdCBib29rTmFtZSA9IGJvb2sudHJpbSgpO1xuICAgICAgICBjb25zdCBjaGFwdGVyTnVtID0gcGFyc2VJbnQoY2hhcHRlcik7XG4gICAgICAgIC8vIFRyeSB0byBtYXRjaCBib29rIHRvIGRyb3Bkb3duXG4gICAgICAgIGNvbnN0IGJvb2tzID0gdGhpcy5kYi5nZXRCb29rcygpO1xuICAgICAgICBjb25zdCBmb3VuZEJvb2sgPSBib29rcy5maW5kKGIgPT4gYi50b0xvd2VyQ2FzZSgpID09PSBib29rTmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgaWYgKCFmb3VuZEJvb2spIHtcbiAgICAgICAgICAgIHRoaXMucmVmZXJlbmNlV2FybmluZy5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICAgICAgICB0aGlzLnJlZmVyZW5jZVdhcm5pbmcudGV4dENvbnRlbnQgPSAnQm9vayBub3QgZm91bmQuJztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBPbmx5IHVwZGF0ZSBzZWxlY3RlZEJvb2sgYW5kIHNlbGVjdGVkU3RhcnRDaGFwdGVyLCBkbyBub3QgYXV0b2ZpbGwgdmVyc2VzXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRCb29rID0gZm91bmRCb29rO1xuICAgICAgICB0aGlzLnNlbGVjdGVkU3RhcnRDaGFwdGVyID0gY2hhcHRlck51bTtcbiAgICAgICAgLy8gRG8gbm90IHVwZGF0ZSBzZWxlY3RlZFN0YXJ0VmVyc2Ugb3Igc2VsZWN0ZWRFbmRWZXJzZSBoZXJlXG4gICAgICAgIC8vIERvIG5vdCB1cGRhdGUgZHJvcGRvd25zIG9yIGdyaWRzXG4gICAgfVxufSAiLCAiaW1wb3J0IHsgQXBwLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBOb3RpY2UsIHJlcXVlc3RVcmwsIE1vZGFsIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgcGFyc2VTdHJpbmdQcm9taXNlIH0gZnJvbSAneG1sMmpzJztcbmltcG9ydCBCaWJsZUxpbmtQbHVnaW4gZnJvbSAnLi9tYWluJztcbmltcG9ydCB7IFByb2Nlc3NpbmdSdWxlIH0gZnJvbSAnLi9kYXRhYmFzZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmlibGVMaW5rU2V0dGluZ3Mge1xuICAgIGRlZmF1bHRUcmFuc2xhdGlvbjogc3RyaW5nO1xuICAgIG91dHB1dFR5cGU6ICd0ZXh0JyB8ICdsaW5rJyB8ICdjb2RlYmxvY2snO1xuICAgIC8vIERpc3BsYXkgb3B0aW9uc1xuICAgIHNob3dUcmFuc2xhdGlvbkFiYnI6IGJvb2xlYW47XG4gICAgc2hvd0Jvb2tBYmJyOiBib29sZWFuO1xuICAgIC8vIFNob3J0Y3V0c1xuICAgIGVuYWJsZVNob3J0Y3V0czogYm9vbGVhbjtcbiAgICBzaG9ydGN1dHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4gICAgLy8gRGF0YXZpZXcgaW50ZWdyYXRpb25cbiAgICBlbmFibGVEYXRhdmlld01ldGFkYXRhOiBib29sZWFuO1xuICAgIGRhdGF2aWV3TWV0YWRhdGFGaWVsZHM6IHN0cmluZ1tdO1xuICAgIC8vIENvZGUgYmxvY2sgc3R5bGluZ1xuICAgIGNvZGVCbG9ja0JhY2tncm91bmRDb2xvcjogc3RyaW5nO1xuICAgIGNvZGVCbG9ja0hlYWRpbmdTdHlsZTogJ25vbmUnIHwgJ3NpbXBsZScgfCAnZGV0YWlsZWQnO1xuICAgIGNvZGVCbG9ja1RleHRDb2xvcjogc3RyaW5nO1xuICAgIGNvZGVCbG9ja1ZlcnNlTnVtYmVyQ29sb3I6IHN0cmluZztcbiAgICBjb2RlQmxvY2tMYW5ndWFnZTogc3RyaW5nO1xuICAgIC8vIE1vZGFsIHBlcnNpc3RlbmNlXG4gICAgbW9kYWxPdXRwdXRUeXBlOiAndGV4dCcgfCAnbGluaycgfCAnY29kZWJsb2NrJztcbiAgICBtb2RhbE9wdGlvbnM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogQmlibGVMaW5rU2V0dGluZ3MgPSB7XG4gICAgZGVmYXVsdFRyYW5zbGF0aW9uOiAnQVNWJyxcbiAgICBvdXRwdXRUeXBlOiAnY29kZWJsb2NrJyxcbiAgICBzaG93VHJhbnNsYXRpb25BYmJyOiB0cnVlLFxuICAgIHNob3dCb29rQWJicjogZmFsc2UsXG4gICAgZW5hYmxlU2hvcnRjdXRzOiB0cnVlLFxuICAgIHNob3J0Y3V0czoge1xuICAgICAgICAnam4zMTYnOiAnSm9obiAzOjE2JyxcbiAgICAgICAgJ2dlbjExJzogJ0dlbmVzaXMgMToxJyxcbiAgICAgICAgJ3BzMjMxJzogJ1BzYWxtIDIzOjEnLFxuICAgICAgICAncm9tODI4JzogJ1JvbWFucyA4OjI4JyxcbiAgICAgICAgJ2puMTEnOiAnSm9obiAxOjEnXG4gICAgfSxcbiAgICBlbmFibGVEYXRhdmlld01ldGFkYXRhOiB0cnVlLFxuICAgIGRhdGF2aWV3TWV0YWRhdGFGaWVsZHM6IFsnYm9vaycsICdjaGFwdGVyJywgJ3ZlcnNlJywgJ3RyYW5zbGF0aW9uJywgJ3RleHQnLCAncmVmZXJlbmNlJywgJ2xhbmd1YWdlJywgJ2NhdGVnb3J5J10sXG4gICAgY29kZUJsb2NrQmFja2dyb3VuZENvbG9yOiAnI2Y4ZjlmYScsXG4gICAgY29kZUJsb2NrSGVhZGluZ1N0eWxlOiAnZGV0YWlsZWQnLFxuICAgIGNvZGVCbG9ja1RleHRDb2xvcjogJyMyYzNlNTAnLFxuICAgIGNvZGVCbG9ja1ZlcnNlTnVtYmVyQ29sb3I6ICcjN2Y4YzhkJyxcbiAgICBjb2RlQmxvY2tMYW5ndWFnZTogJ2JpYmxlJyxcbiAgICBtb2RhbE91dHB1dFR5cGU6ICdjb2RlYmxvY2snLFxuICAgIG1vZGFsT3B0aW9uczogW11cbn07XG5cbi8vIEJpYmxlIHRyYW5zbGF0aW9ucyBhdmFpbGFibGUgZnJvbSBzY3JvbGxtYXBwZXIvYmlibGVfZGF0YWJhc2VzXG5jb25zdCBBVkFJTEFCTEVfVFJBTlNMQVRJT05TID0ge1xuICAgICdBU1YnOiB7IG5hbWU6ICdBbWVyaWNhbiBTdGFuZGFyZCBWZXJzaW9uICgxOTAxKScsIGxhbmd1YWdlOiAnZW4nLCBjYXRlZ29yeTogJ0VuZ2xpc2gnIH0sXG4gICAgJ0tKVic6IHsgbmFtZTogJ0tpbmcgSmFtZXMgVmVyc2lvbicsIGxhbmd1YWdlOiAnZW4nLCBjYXRlZ29yeTogJ0VuZ2xpc2gnIH0sXG4gICAgJ1dFQic6IHsgbmFtZTogJ1dvcmxkIEVuZ2xpc2ggQmlibGUnLCBsYW5ndWFnZTogJ2VuJywgY2F0ZWdvcnk6ICdFbmdsaXNoJyB9LFxuICAgICdZTFQnOiB7IG5hbWU6ICdZb3VuZ1xcJ3MgTGl0ZXJhbCBUcmFuc2xhdGlvbiAoMTg5OCknLCBsYW5ndWFnZTogJ2VuJywgY2F0ZWdvcnk6ICdFbmdsaXNoJyB9LFxuICAgICdCQkUnOiB7IG5hbWU6ICdCaWJsZSBpbiBCYXNpYyBFbmdsaXNoICgxOTQ5LzE5NjQpJywgbGFuZ3VhZ2U6ICdlbicsIGNhdGVnb3J5OiAnRW5nbGlzaCcgfSxcbiAgICAnQUtKVic6IHsgbmFtZTogJ0FtZXJpY2FuIEtpbmcgSmFtZXMgVmVyc2lvbicsIGxhbmd1YWdlOiAnZW4nLCBjYXRlZ29yeTogJ0VuZ2xpc2gnIH0sXG4gICAgJ1dlYnN0ZXInOiB7IG5hbWU6ICdXZWJzdGVyIEJpYmxlJywgbGFuZ3VhZ2U6ICdlbicsIGNhdGVnb3J5OiAnRW5nbGlzaCcgfSxcbiAgICAnVHluZGFsZSc6IHsgbmFtZTogJ1dpbGxpYW0gVHluZGFsZSBCaWJsZSAoMTUyNS8xNTMwKScsIGxhbmd1YWdlOiAnZW4nLCBjYXRlZ29yeTogJ0hpc3RvcmljYWwnIH0sXG4gICAgJ1d5Y2xpZmZlJzogeyBuYW1lOiAnSm9obiBXeWNsaWZmZSBCaWJsZSAoYy4xMzk1KScsIGxhbmd1YWdlOiAnZW5tJywgY2F0ZWdvcnk6ICdIaXN0b3JpY2FsJyB9LFxuICAgICdCU0InOiB7IG5hbWU6ICdCZXJlYW4gU3RhbmRhcmQgQmlibGUnLCBsYW5ndWFnZTogJ2VuJywgY2F0ZWdvcnk6ICdFbmdsaXNoJyB9LFxuICAgICdDUERWJzogeyBuYW1lOiAnQ2F0aG9saWMgUHVibGljIERvbWFpbiBWZXJzaW9uJywgbGFuZ3VhZ2U6ICdlbicsIGNhdGVnb3J5OiAnRW5nbGlzaCcgfSxcbiAgICAnVUtKVic6IHsgbmFtZTogJ1VwZGF0ZWQgS2luZyBKYW1lcyBWZXJzaW9uJywgbGFuZ3VhZ2U6ICdlbicsIGNhdGVnb3J5OiAnRW5nbGlzaCcgfSxcbiAgICAnVHdlbnR5JzogeyBuYW1lOiAnVHdlbnRpZXRoIENlbnR1cnkgTmV3IFRlc3RhbWVudCcsIGxhbmd1YWdlOiAnZW4nLCBjYXRlZ29yeTogJ0VuZ2xpc2gnIH0sXG4gICAgJ0FuZGVyc29uJzogeyBuYW1lOiAnSGVucnkgVG9tcGtpbnMgQW5kZXJzb25cXCdzIDE4NjQgTmV3IFRlc3RhbWVudCcsIGxhbmd1YWdlOiAnZW4nLCBjYXRlZ29yeTogJ0hpc3RvcmljYWwnIH0sXG4gICAgJ0FDVic6IHsgbmFtZTogJ0EgQ29uc2VydmF0aXZlIFZlcnNpb24nLCBsYW5ndWFnZTogJ2VuJywgY2F0ZWdvcnk6ICdFbmdsaXNoJyB9LFxuICAgICdTcGFSVic6IHsgbmFtZTogJ0xhIFNhbnRhIEJpYmxpYSBSZWluYS1WYWxlcmEgKDE5MDkpJywgbGFuZ3VhZ2U6ICdlcycsIGNhdGVnb3J5OiAnU3BhbmlzaCcgfSxcbiAgICAnU3BhUlYxODY1JzogeyBuYW1lOiAnTGEgU2FudGEgQmlibGlhIFJlaW5hLVZhbGVyYSAoMTg2NSknLCBsYW5ndWFnZTogJ2VzJywgY2F0ZWdvcnk6ICdTcGFuaXNoJyB9LFxuICAgICdTcGFSVkcnOiB7IG5hbWU6ICdSZWluYSBWYWxlcmEgR1x1MDBGM21leicsIGxhbmd1YWdlOiAnZXMnLCBjYXRlZ29yeTogJ1NwYW5pc2gnIH0sXG4gICAgJ1NwYVBsYXRlbnNlJzogeyBuYW1lOiAnQmlibGlhIFBsYXRlbnNlIChTdHJhdWJpbmdlciknLCBsYW5ndWFnZTogJ2VzJywgY2F0ZWdvcnk6ICdTcGFuaXNoJyB9LFxuICAgICdWdWxnYXRlJzogeyBuYW1lOiAnTGF0aW4gVnVsZ2F0ZScsIGxhbmd1YWdlOiAnbGEnLCBjYXRlZ29yeTogJ0xhdGluJyB9LFxuICAgICdWdWxnQ2xlbWVudGluZSc6IHsgbmFtZTogJ0NsZW1lbnRpbmUgVnVsZ2F0ZScsIGxhbmd1YWdlOiAnbGEnLCBjYXRlZ29yeTogJ0xhdGluJyB9LFxuICAgICdCeXonOiB7IG5hbWU6ICdUaGUgTmV3IFRlc3RhbWVudCBpbiB0aGUgT3JpZ2luYWwgR3JlZWs6IEJ5emFudGluZSBUZXh0Zm9ybSAyMDEzJywgbGFuZ3VhZ2U6ICdncmMnLCBjYXRlZ29yeTogJ0dyZWVrJyB9LFxuICAgICdUUic6IHsgbmFtZTogJ1RleHR1cyBSZWNlcHR1cyAoMTU1MC8xODk0KScsIGxhbmd1YWdlOiAnZ3JjJywgY2F0ZWdvcnk6ICdHcmVlaycgfSxcbiAgICAnV0xDJzogeyBuYW1lOiAnV2VzdG1pbnN0ZXIgTGVuaW5ncmFkIENvZGV4JywgbGFuZ3VhZ2U6ICdoYm8nLCBjYXRlZ29yeTogJ0hlYnJldycgfSxcbiAgICAnU3RhdFJlc0dOVCc6IHsgbmFtZTogJ1N0YXRpc3RpY2FsIFJlc3RvcmF0aW9uIEdyZWVrIE5ldyBUZXN0YW1lbnQnLCBsYW5ndWFnZTogJ2dyYycsIGNhdGVnb3J5OiAnR3JlZWsnIH0sXG4gICAgJ1Z1bGdTaXN0aW5lJzogeyBuYW1lOiAnVnVsZ2F0YSBTaXN0aW5hJywgbGFuZ3VhZ2U6ICdsYScsIGNhdGVnb3J5OiAnTGF0aW4nIH0sXG4gICAgJ1Z1bGdIZXR6ZW5hdWVyJzogeyBuYW1lOiAnVnVsZ2F0YSBDbGVtZW50aW5hLCBIZXR6ZW5hdWVyIGVkaXRvcmUnLCBsYW5ndWFnZTogJ2xhJywgY2F0ZWdvcnk6ICdMYXRpbicgfSxcbiAgICAnVnVsZ0NvbnRlJzogeyBuYW1lOiAnVnVsZ2F0YSBDbGVtZW50aW5hLCBDb250ZSBlZGl0b3JlJywgbGFuZ3VhZ2U6ICdsYScsIGNhdGVnb3J5OiAnTGF0aW4nIH0sXG4gICAgJ1N3ZTE5MTcnOiB7IG5hbWU6ICdTd2VkaXNoIEJpYmxlICgxOTE3KScsIGxhbmd1YWdlOiAnc3YnLCBjYXRlZ29yeTogJ1N3ZWRpc2gnIH0sXG4gICAgJ1N3ZUthcmxYSUknOiB7IG5hbWU6ICdTdmVuc2thIEthcmwgWElJOnMgQmliZWwgKDE3MDMpJywgbGFuZ3VhZ2U6ICdzdicsIGNhdGVnb3J5OiAnSGlzdG9yaWNhbCcgfSxcbiAgICAnU3dlS2FybFhJSTE4NzMnOiB7IG5hbWU6ICdTdmVuc2thIEthcmwgWElJOnMgQmliZWwgKDE4NzMpJywgbGFuZ3VhZ2U6ICdzdicsIGNhdGVnb3J5OiAnSGlzdG9yaWNhbCcgfSxcbiAgICAnVWtyT2dpZW5rbyc6IHsgbmFtZTogJ1x1MDQyM1x1MDQzQVx1MDQ0MFx1MDQzMFx1MDQ1N1x1MDQzRFx1MDQ0MVx1MDQ0Q1x1MDQzQVx1MDQzMCBcdTA0MTFcdTA0NTZcdTA0MzFcdTA0M0JcdTA0NTZcdTA0NEYuIFx1MDQxRlx1MDQzNVx1MDQ0MFx1MDQzNVx1MDQzQVx1MDQzQlx1MDQzMFx1MDQzNCBcdTA0MDZcdTA0MzJcdTA0MzBcdTA0M0RcdTA0MzAgXHUwNDFFXHUwNDMzXHUwNDU2XHUwNDU0XHUwNDNEXHUwNDNBXHUwNDMwLicsIGxhbmd1YWdlOiAndWsnLCBjYXRlZ29yeTogJ1VrcmFpbmlhbicgfSxcbiAgICAnVmlldCc6IHsgbmFtZTogJ0tpbmggVGhcdTAwRTFuaCBUaVx1MUVCRm5nIFZpXHUxRUM3dCAoMTkzNCknLCBsYW5ndWFnZTogJ3ZpJywgY2F0ZWdvcnk6ICdWaWV0bmFtZXNlJyB9LFxuICAgICdUaGFpS0pWJzogeyBuYW1lOiAnVGhhaSBLaW5nIEphbWVzIFZlcnNpb24nLCBsYW5ndWFnZTogJ3RoJywgY2F0ZWdvcnk6ICdUaGFpJyB9LFxuICAgICdUYWdBbmdCaWJsaWEnOiB7IG5hbWU6ICdQaGlsaXBwaW5lIEJpYmxlIFNvY2lldHkgKDE5MDUpJywgbGFuZ3VhZ2U6ICd0bCcsIGNhdGVnb3J5OiAnVGFnYWxvZycgfSxcbiAgICAnVGF1c3VnJzogeyBuYW1lOiAnVGF1c3VnIEtpdGFiIEluamlsJywgbGFuZ3VhZ2U6ICd0c2cnLCBjYXRlZ29yeTogJ1RhdXN1ZycgfSxcbiAgICAnVHBpS0pQQic6IHsgbmFtZTogJ0tpbmcgSmVtcyBQaXNpbiBCYWliZWwnLCBsYW5ndWFnZTogJ3RwaScsIGNhdGVnb3J5OiAnVG9rIFBpc2luJyB9LFxuICAgICdCdXJKdWRzb24nOiB7IG5hbWU6ICcxODM1IEp1ZHNvbiBCdXJtZXNlIEJpYmxlJywgbGFuZ3VhZ2U6ICdteScsIGNhdGVnb3J5OiAnQnVybWVzZScgfSxcbiAgICAnQWxiJzogeyBuYW1lOiAnQWxiYW5pYW4gQmlibGUnLCBsYW5ndWFnZTogJ3NxJywgY2F0ZWdvcnk6ICdBbGJhbmlhbicgfSxcbiAgICAnQXJtRWFzdGVybic6IHsgbmFtZTogJ0Vhc3Rlcm4gQXJtZW5pYW4gQmlibGUnLCBsYW5ndWFnZTogJ2h5JywgY2F0ZWdvcnk6ICdBcm1lbmlhbicgfSxcbiAgICAnQmVhTVJLJzogeyBuYW1lOiAnVGhlIEdvc3BlbCBvZiBNYXJrIGluIEJlYXZlciAoRGFuZXphYSknLCBsYW5ndWFnZTogJ2JlYScsIGNhdGVnb3J5OiAnSW5kaWdlbm91cycgfSxcbiAgICAnU3JLREVrYXZza2knOiB7IG5hbWU6ICdTZXJiaWFuIEJpYmxlIERhbmlcdTAxMERpXHUwMTA3LUthcmFkXHUwMTdFaVx1MDEwNyBFa2F2c2tpJywgbGFuZ3VhZ2U6ICdzcicsIGNhdGVnb3J5OiAnU2VyYmlhbicgfSxcbiAgICAnU3JLRElqZWthdic6IHsgbmFtZTogJ1NlcmJpYW4gQmlibGUgRGFuaVx1MDEwRGlcdTAxMDctS2FyYWRcdTAxN0VpXHUwMTA3IElqZWthdnNraScsIGxhbmd1YWdlOiAnc3InLCBjYXRlZ29yeTogJ1NlcmJpYW4nIH0sXG4gICAgJ1d1bGZpbGEnOiB7IG5hbWU6ICdCaXNob3AgV3VsZmlsYSBHb3RoaWMgQmlibGUnLCBsYW5ndWFnZTogJ2dvdCcsIGNhdGVnb3J5OiAnR290aGljJyB9LFxuICAgICdzbWxfQkxfMjAwOCc6IHsgbmFtZTogJ0tpdGFiIEF3YWwtSmFtYW4gbWFrYSBLaXRhYiBJbmppbCcsIGxhbmd1YWdlOiAnc21sJywgY2F0ZWdvcnk6ICdJbmRpZ2Vub3VzJyB9LFxuICAgICd2bHNKb05UJzogeyBuYW1lOiAnSGV0IE5pZXV3ZSBUZXN0YW1lbnQgYnkgTmljb2xhYXMgRGUgSm9uZ2UnLCBsYW5ndWFnZTogJ3ZscycsIGNhdGVnb3J5OiAnRHV0Y2gnIH1cbn07XG5cbmV4cG9ydCBjbGFzcyBCaWJsZUxpbmtTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgcGx1Z2luOiBCaWJsZUxpbmtQbHVnaW47XG4gICAgcHJpdmF0ZSBmaWx0ZXJUZXh0OiBzdHJpbmcgPSAnJztcbiAgICBwcml2YXRlIGVkaXRpbmdBYmJyOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIGVkaXRpbmdOYW1lOiBzdHJpbmcgPSAnJztcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IEJpYmxlTGlua1BsdWdpbikge1xuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnQmlibGVMaW5rIFNldHRpbmdzJyB9KTtcblxuICAgICAgICAvLyBCYXNpYyBTZXR0aW5ncyBTZWN0aW9uXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ0Jhc2ljIFNldHRpbmdzJyB9KTtcblxuICAgICAgICAvLyBEZWZhdWx0IFRyYW5zbGF0aW9uIFNldHRpbmdcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnRGVmYXVsdCBUcmFuc2xhdGlvbicpXG4gICAgICAgICAgICAuc2V0RGVzYygnQ2hvb3NlIHlvdXIgcHJlZmVycmVkIEJpYmxlIHRyYW5zbGF0aW9uLicpXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0aW9ucyA9IHRoaXMucGx1Z2luLmRiLmdldFRyYW5zbGF0aW9ucygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uT3B0aW9uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRpb25zLmZvckVhY2godHJhbnMgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbk9wdGlvbnNbdHJhbnMuYWJicmV2aWF0aW9uXSA9IGAke3RyYW5zLm5hbWV9ICgke3RyYW5zLmFiYnJldmlhdGlvbn0pYDtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGRyb3Bkb3duXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb25zKHRyYW5zbGF0aW9uT3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRUcmFuc2xhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdFRyYW5zbGF0aW9uID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBEZWZhdWx0IE91dHB1dCBUeXBlIFNldHRpbmdcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnRGVmYXVsdCBPdXRwdXQgVHlwZScpXG4gICAgICAgICAgICAuc2V0RGVzYygnQ2hvb3NlIGhvdyByZWZlcmVuY2VzIGFyZSBpbnNlcnRlZC4nKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IGRyb3Bkb3duXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbigndGV4dCcsICdGdWxsIFZlcnNlIFRleHQnKVxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oJ2xpbmsnLCAnTGl0ZXJhbCBXb3JkIExpbmsnKVxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oJ2NvZGVibG9jaycsICdDb2RlIEJsb2NrJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mub3V0cHV0VHlwZSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm91dHB1dFR5cGUgPSB2YWx1ZSBhcyAndGV4dCcgfCAnbGluaycgfCAnY29kZWJsb2NrJztcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIERpc3BsYXkgT3B0aW9uc1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdTaG93IFRyYW5zbGF0aW9uIEFiYnJldmlhdGlvbicpXG4gICAgICAgICAgICAuc2V0RGVzYygnSW5jbHVkZSB0cmFuc2xhdGlvbiBhYmJyZXZpYXRpb24gaW4gdGhlIG91dHB1dC4nKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dUcmFuc2xhdGlvbkFiYnIpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93VHJhbnNsYXRpb25BYmJyID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdTaG93IEJvb2sgQWJicmV2aWF0aW9ucycpXG4gICAgICAgICAgICAuc2V0RGVzYygnVXNlIGFiYnJldmlhdGVkIGJvb2sgbmFtZXMgKGUuZy4sIEpuIGluc3RlYWQgb2YgSm9obikuJylcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93Qm9va0FiYnIpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93Qm9va0FiYnIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIENvZGUgQmxvY2sgU3R5bGluZyBTZWN0aW9uXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ0NvZGUgQmxvY2sgU3R5bGluZycgfSk7XG5cbiAgICAgICAgLy8gQ29kZSBCbG9jayBCYWNrZ3JvdW5kIENvbG9yXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0JhY2tncm91bmQgQ29sb3InKVxuICAgICAgICAgICAgLnNldERlc2MoJ0JhY2tncm91bmQgY29sb3IgZm9yIEJpYmxlIHZlcnNlIGNvZGUgYmxvY2tzLicpXG4gICAgICAgICAgICAuYWRkQ29sb3JQaWNrZXIoY29sb3JQaWNrZXIgPT4gY29sb3JQaWNrZXJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY29kZUJsb2NrQmFja2dyb3VuZENvbG9yKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY29kZUJsb2NrQmFja2dyb3VuZENvbG9yID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAvLyBDb2RlIEJsb2NrIEhlYWRpbmcgU3R5bGVcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnSGVhZGluZyBTdHlsZScpXG4gICAgICAgICAgICAuc2V0RGVzYygnU3R5bGUgZm9yIHRoZSByZWZlcmVuY2UgaGVhZGluZyBpbiBjb2RlIGJsb2Nrcy4nKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IGRyb3Bkb3duXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbignbm9uZScsICdObyBIZWFkaW5nJylcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdzaW1wbGUnLCAnU2ltcGxlIChKb2huIDM6MTYpJylcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdkZXRhaWxlZCcsICdEZXRhaWxlZCAoSm9obiAzOjE2IEFTViknKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb2RlQmxvY2tIZWFkaW5nU3R5bGUpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb2RlQmxvY2tIZWFkaW5nU3R5bGUgPSB2YWx1ZSBhcyAnbm9uZScgfCAnc2ltcGxlJyB8ICdkZXRhaWxlZCc7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAvLyBDb2RlIEJsb2NrIFRleHQgQ29sb3JcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnVGV4dCBDb2xvcicpXG4gICAgICAgICAgICAuc2V0RGVzYygnQ29sb3IgZm9yIHRoZSB2ZXJzZSB0ZXh0IGluIGNvZGUgYmxvY2tzLicpXG4gICAgICAgICAgICAuYWRkQ29sb3JQaWNrZXIoY29sb3JQaWNrZXIgPT4gY29sb3JQaWNrZXJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY29kZUJsb2NrVGV4dENvbG9yKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY29kZUJsb2NrVGV4dENvbG9yID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAvLyBDb2RlIEJsb2NrIFZlcnNlIE51bWJlciBDb2xvclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdWZXJzZSBOdW1iZXIgQ29sb3InKVxuICAgICAgICAgICAgLnNldERlc2MoJ0NvbG9yIGZvciB2ZXJzZSBudW1iZXJzIGluIGNvZGUgYmxvY2tzLicpXG4gICAgICAgICAgICAuYWRkQ29sb3JQaWNrZXIoY29sb3JQaWNrZXIgPT4gY29sb3JQaWNrZXJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY29kZUJsb2NrVmVyc2VOdW1iZXJDb2xvcilcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmNvZGVCbG9ja1ZlcnNlTnVtYmVyQ29sb3IgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIENvZGUgQmxvY2sgTGFuZ3VhZ2VcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnQ29kZSBCbG9jayBMYW5ndWFnZScpXG4gICAgICAgICAgICAuc2V0RGVzYygnVGhlIGxhbmd1YWdlIGlkZW50aWZpZXIgZm9yIEJpYmxlIHZlcnNlIGNvZGUgYmxvY2tzLicpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ2JpYmxlJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY29kZUJsb2NrTGFuZ3VhZ2UpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb2RlQmxvY2tMYW5ndWFnZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgLy8gRXhhbXBsZSBDb2RlIEJsb2NrXG4gICAgICAgIGNvbnN0IGV4YW1wbGVDb250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoKTtcbiAgICAgICAgZXhhbXBsZUNvbnRhaW5lci5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdDb2RlIEJsb2NrIEV4YW1wbGVzJyB9KTtcbiAgICAgICAgZXhhbXBsZUNvbnRhaW5lci5jcmVhdGVFbCgncCcsIHtcbiAgICAgICAgICAgIHRleHQ6ICdVc2Ugb3B0aW9ucyBpbiBzcXVhcmUgYnJhY2tldHMgYWZ0ZXIgdGhlIGxhbmd1YWdlIGlkZW50aWZpZXIgdG8gY3VzdG9taXplIHRoZSBvdXRwdXQ6J1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFkZCBleHBsYW5hdGlvbiBvZiBzeW50YXhcbiAgICAgICAgY29uc3Qgc3ludGF4RXhhbXBsZSA9IGV4YW1wbGVDb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnYmlibGVsaW5rLXN5bnRheC1leGFtcGxlJyB9KTtcbiAgICAgICAgc3ludGF4RXhhbXBsZS5jcmVhdGVFbCgncCcsIHsgXG4gICAgICAgICAgICB0ZXh0OiAnU3ludGF4OiBgYGBiaWJsZSBbb3B0aW9uMSxvcHRpb24yLG9wdGlvbjNdJyxcbiAgICAgICAgICAgIGNsczogJ2JpYmxlbGluay1zeW50YXgtdGV4dCdcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBleGFtcGxlcyA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0Jhc2ljIHZlcnNlIChubyBvcHRpb25zKTonLFxuICAgICAgICAgICAgICAgIGNvZGU6IGBcXGBcXGBcXGAke3RoaXMucGx1Z2luLnNldHRpbmdzLmNvZGVCbG9ja0xhbmd1YWdlfVxcbk5BU0IgMSBKb2huIDM6MTdcXG5cXGBcXGBcXGBgXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnV2l0aCBsaW5rIG9wdGlvbiAoc2hvd3MgYSBsaW5rIHRvIHRoZSB2ZXJzZSk6JyxcbiAgICAgICAgICAgICAgICBjb2RlOiBgXFxgXFxgXFxgJHt0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb2RlQmxvY2tMYW5ndWFnZX1cXG5OQVNCIE1hdHRoZXcgODo4LTQwIFtsaW5rXVxcblxcYFxcYFxcYGBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdXaXRoIHZlcnNlIG9wdGlvbiAoZGlzcGxheXMgbnVtYmVycyBwZXIgdmVyc2UpOicsXG4gICAgICAgICAgICAgICAgY29kZTogYFxcYFxcYFxcYCR7dGhpcy5wbHVnaW4uc2V0dGluZ3MuY29kZUJsb2NrTGFuZ3VhZ2V9XFxuTkFTQiAxIENvcmludGhpYW5zIDE6Mi0zIFt2ZXJzZV1cXG5cXGBcXGBcXGBgXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnV2l0aCBjaGFwdGVyIG9wdGlvbiAoZGlzcGxheXMgZWFjaCBjaGFwdGVyIGFzIENoYXB0ZXIgWCk6JyxcbiAgICAgICAgICAgICAgICBjb2RlOiBgXFxgXFxgXFxgJHt0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb2RlQmxvY2tMYW5ndWFnZX1cXG5OQVNCIFBzYWxtIDIzIFtjaGFwdGVyXVxcblxcYFxcYFxcYGBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdNdWx0aXBsZSBvcHRpb25zIChjb21tYS1zZXBhcmF0ZWQpOicsXG4gICAgICAgICAgICAgICAgY29kZTogYFxcYFxcYFxcYCR7dGhpcy5wbHVnaW4uc2V0dGluZ3MuY29kZUJsb2NrTGFuZ3VhZ2V9XFxuTkFTQiBKb2huIDM6MTYtMTggW3ZlcnNlLGNoYXB0ZXIsbGlua11cXG5cXGBcXGBcXGBgXG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICAgIFxuICAgICAgICBmb3IgKGNvbnN0IGV4IG9mIGV4YW1wbGVzKSB7XG4gICAgICAgICAgICBjb25zdCBleGFtcGxlRGl2ID0gZXhhbXBsZUNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdiaWJsZWxpbmstZXhhbXBsZS1pdGVtJyB9KTtcbiAgICAgICAgICAgIGV4YW1wbGVEaXYuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogZXgubGFiZWwsIGNsczogJ2JpYmxlbGluay1leGFtcGxlLWxhYmVsJyB9KTtcbiAgICAgICAgICAgIGNvbnN0IGNvZGVCbG9jayA9IGV4YW1wbGVEaXYuY3JlYXRlRWwoJ3ByZScsIHsgY2xzOiAnYmlibGVsaW5rLWV4YW1wbGUtY29kZScgfSk7XG4gICAgICAgICAgICBjb2RlQmxvY2suY3JlYXRlRWwoJ2NvZGUnLCB7IHRleHQ6IGV4LmNvZGUgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG9ydGN1dHMgU2VjdGlvblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdCaWJsZSBSZWZlcmVuY2UgU2hvcnRjdXRzJyB9KTtcbiAgICAgICAgdGhpcy5yZW5kZXJTaG9ydGN1dHNTZWN0aW9uKGNvbnRhaW5lckVsKTtcblxuICAgICAgICAvLyBEYXRhdmlldyBJbnRlZ3JhdGlvbiBTZWN0aW9uXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ0RhdGF2aWV3IEludGVncmF0aW9uJyB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdFbmFibGUgRGF0YXZpZXcgTWV0YWRhdGEnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0FkZCByaWNoIG1ldGFkYXRhIHRvIEJpYmxlIHZlcnNlcyBmb3IgRGF0YXZpZXcgcXVlcmllcy4nKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZURhdGF2aWV3TWV0YWRhdGEpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVEYXRhdmlld01ldGFkYXRhID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlRGF0YXZpZXdNZXRhZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgbWV0YWRhdGFDb250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoKTtcbiAgICAgICAgICAgIG1ldGFkYXRhQ29udGFpbmVyLmNyZWF0ZUVsKCdwJywge1xuICAgICAgICAgICAgICAgIHRleHQ6ICdBdmFpbGFibGUgbWV0YWRhdGEgZmllbGRzOiBib29rLCBjaGFwdGVyLCB2ZXJzZSwgdHJhbnNsYXRpb24sIHRleHQsIHJlZmVyZW5jZSwgbGFuZ3VhZ2UsIGNhdGVnb3J5J1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFNob3cgRGF0YXZpZXcgcXVlcnkgZXhwbGFuYXRpb25cbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5Q29udGFpbmVyID0gbWV0YWRhdGFDb250YWluZXIuY3JlYXRlRGl2KCk7XG4gICAgICAgICAgICBxdWVyeUNvbnRhaW5lci5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdIb3cgdG8gUXVlcnkgQmlibGUgVmVyc2VzJyB9KTtcbiAgICAgICAgICAgIHF1ZXJ5Q29udGFpbmVyLmNyZWF0ZUVsKCdwJywge1xuICAgICAgICAgICAgICAgIHRleHQ6ICdVc2UgRGF0YXZpZXcgcXVlcmllcyB0byBzZWFyY2ggYW5kIGRpc3BsYXkgQmlibGUgdmVyc2VzLiBZb3UgY2FuIGZpbHRlciBieSB0cmFuc2xhdGlvbiwgYm9vaywgY2hhcHRlciwgdmVyc2UsIG9yIHNlYXJjaCB3aXRoaW4gdGhlIHRleHQgY29udGVudC4nXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgZXhhbXBsZVF1ZXJ5ID0gYFxcYFxcYFxcYGRhdGF2aWV3XG5UQUJMRSBib29rLCBjaGFwdGVyLCB2ZXJzZSwgdHJhbnNsYXRpb25cbkZST00gXCJCaWJsZVwiXG5XSEVSRSB0cmFuc2xhdGlvbiA9IFwiQVNWXCJcblNPUlQgYm9vaywgY2hhcHRlciwgdmVyc2VcblxcYFxcYFxcYGA7XG4gICAgICAgICAgICBjb25zdCBjb2RlQmxvY2sgPSBxdWVyeUNvbnRhaW5lci5jcmVhdGVFbCgncHJlJyk7XG4gICAgICAgICAgICBjb2RlQmxvY2suY3JlYXRlRWwoJ2NvZGUnLCB7IHRleHQ6IGV4YW1wbGVRdWVyeSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyYW5zbGF0aW9uIE1hbmFnZW1lbnQgU2VjdGlvblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdUcmFuc2xhdGlvbiBNYW5hZ2VtZW50JyB9KTtcblxuICAgICAgICAvLyBVcGxvYWQgQ3VzdG9tIFRyYW5zbGF0aW9uIFNlY3Rpb25cbiAgICAgICAgY29uc3QgdXBsb2FkU2VjdGlvbiA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdih7IGNsczogJ2JpYmxlbGluay11cGxvYWQtc2VjdGlvbicgfSk7XG4gICAgICAgIHVwbG9hZFNlY3Rpb24uY3JlYXRlRWwoJ2g0JywgeyB0ZXh0OiAnVXBsb2FkIEN1c3RvbSBUcmFuc2xhdGlvbicgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB1cGxvYWREZXNjID0gdXBsb2FkU2VjdGlvbi5jcmVhdGVFbCgncCcpO1xuICAgICAgICB1cGxvYWREZXNjLmlubmVySFRNTCA9ICdVcGxvYWQgeW91ciBvd24gQmlibGUgdHJhbnNsYXRpb24gZmlsZXMuIDxzdHJvbmc+WE1MIGZvcm1hdCBpcyByZWNvbW1lbmRlZDwvc3Ryb25nPiBhbmQgY2FuIGJlIGRvd25sb2FkZWQgZnJvbSA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL3Njcm9sbG1hcHBlci9iaWJsZV9kYXRhYmFzZXNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5zY3JvbGxtYXBwZXIvYmlibGVfZGF0YWJhc2VzPC9hPi4nO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKHVwbG9hZFNlY3Rpb24pXG4gICAgICAgICAgICAuc2V0TmFtZSgnVXBsb2FkIFRyYW5zbGF0aW9uJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdDaG9vc2UgYSBmaWxlIHRvIHVwbG9hZCAoU1FMaXRlIG9yIFhNTCBmb3JtYXQpLicpXG4gICAgICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cbiAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnVXBsb2FkIFhNTCcpXG4gICAgICAgICAgICAgICAgLnNldENsYXNzKCdtb2QtY3RhJylcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB0aGlzLnVwbG9hZFhNTEZpbGUoKSkpXG4gICAgICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cbiAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnVXBsb2FkIFNRTGl0ZScpXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4gdGhpcy51cGxvYWRTUUxpdGVGaWxlKCkpKTtcblxuICAgICAgICAvLyBDdXJyZW50IFRyYW5zbGF0aW9ucyBUYWJsZVxuICAgICAgICB0aGlzLmRpc3BsYXlDdXJyZW50VHJhbnNsYXRpb25zKGNvbnRhaW5lckVsKTtcblxuICAgICAgICAvLyBJbXBvcnQgU3RhdHVzIFNlY3Rpb25cbiAgICAgICAgLy8gdGhpcy5kaXNwbGF5SW1wb3J0U3RhdHVzKGNvbnRhaW5lckVsKTsgLy8gUmVtb3ZlZCBhcyBwZXIgZWRpdCBoaW50XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkaXNwbGF5Q3VycmVudFRyYW5zbGF0aW9ucyhjb250YWluZXJFbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgLy8gU2VjdGlvbiBoZWFkZXJcbiAgICAgICAgY29uc3Qgc2VjdGlvbkhlYWRlciA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdih7IGNsczogJ2JpYmxlbGluay10cmFuc2xhdGlvbnMtaGVhZGVyJyB9KTtcbiAgICAgICAgc2VjdGlvbkhlYWRlci5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdJbnN0YWxsZWQgVHJhbnNsYXRpb25zJyB9KTtcblxuICAgICAgICAvLyBGaWx0ZXIgaW5wdXRcbiAgICAgICAgY29uc3QgZmlsdGVyQ29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiAnYmlibGVsaW5rLWZpbHRlci1jb250YWluZXInIH0pO1xuICAgICAgICBjb25zdCBmaWx0ZXJJbnB1dCA9IGZpbHRlckNvbnRhaW5lci5jcmVhdGVFbCgnaW5wdXQnLCB7XG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlYXJjaCB0cmFuc2xhdGlvbnMuLi4nLFxuICAgICAgICAgICAgY2xzOiAnYmlibGVsaW5rLWZpbHRlci1pbnB1dCdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHRhYmxlIGNvbnRhaW5lclxuICAgICAgICBjb25zdCB0YWJsZUNvbnRhaW5lciA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdih7IGNsczogJ2JpYmxlbGluay10YWJsZS1jb250YWluZXInIH0pO1xuXG4gICAgICAgIC8vIFNvcnQgc3RhdGVcbiAgICAgICAgbGV0IHNvcnRGaWVsZDogJ25hbWUnIHwgJ2FiYnJldmlhdGlvbicgfCAnbGFuZ3VhZ2UnIHwgJ2NhdGVnb3J5JyA9ICduYW1lJztcbiAgICAgICAgbGV0IHNvcnRBc2MgPSB0cnVlO1xuXG4gICAgICAgIGNvbnN0IHJlbmRlclRhYmxlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGFibGVDb250YWluZXIuZW1wdHkoKTtcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlID0gdGFibGVDb250YWluZXIuY3JlYXRlRWwoJ3RhYmxlJywgeyBjbHM6ICdiaWJsZWxpbmstdHJhbnNsYXRpb24tdGFibGUnIH0pO1xuICAgICAgICAgICAgY29uc3QgdGhlYWQgPSB0YWJsZS5jcmVhdGVFbCgndGhlYWQnKTtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlclJvdyA9IHRoZWFkLmNyZWF0ZUVsKCd0cicpO1xuXG4gICAgICAgICAgICAvLyBDcmVhdGUgaGVhZGVycyB3aXRoIHNvcnQgZnVuY3Rpb25hbGl0eVxuICAgICAgICAgICAgY29uc3QgY3JlYXRlU29ydGFibGVIZWFkZXIgPSAodGV4dDogc3RyaW5nLCBmaWVsZDogdHlwZW9mIHNvcnRGaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRoID0gaGVhZGVyUm93LmNyZWF0ZUVsKCd0aCcpO1xuICAgICAgICAgICAgICAgIHRoLmNyZWF0ZVNwYW4oeyB0ZXh0IH0pO1xuICAgICAgICAgICAgICAgIGlmIChzb3J0RmllbGQgPT09IGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoLmNyZWF0ZVNwYW4oeyB0ZXh0OiBzb3J0QXNjID8gJyBcdTIxOTMnIDogJyBcdTIxOTEnIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aC5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc29ydEZpZWxkID09PSBmaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc29ydEFzYyA9ICFzb3J0QXNjO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc29ydEZpZWxkID0gZmllbGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3J0QXNjID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZW5kZXJUYWJsZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjcmVhdGVTb3J0YWJsZUhlYWRlcignVHJhbnNsYXRpb24gTmFtZScsICduYW1lJyk7XG4gICAgICAgICAgICBjcmVhdGVTb3J0YWJsZUhlYWRlcignQWJicmV2aWF0aW9uJywgJ2FiYnJldmlhdGlvbicpO1xuICAgICAgICAgICAgY3JlYXRlU29ydGFibGVIZWFkZXIoJ0xhbmd1YWdlJywgJ2xhbmd1YWdlJyk7XG4gICAgICAgICAgICBjcmVhdGVTb3J0YWJsZUhlYWRlcignQ2F0ZWdvcnknLCAnY2F0ZWdvcnknKTtcbiAgICAgICAgICAgIGhlYWRlclJvdy5jcmVhdGVFbCgndGgnLCB7IHRleHQ6ICdBY3Rpb25zJyB9KTtcblxuICAgICAgICAgICAgY29uc3QgdGJvZHkgPSB0YWJsZS5jcmVhdGVFbCgndGJvZHknKTtcblxuICAgICAgICAgICAgLy8gR2V0IGFuZCBmaWx0ZXIgdHJhbnNsYXRpb25zXG4gICAgICAgICAgICBsZXQgdHJhbnNsYXRpb25zID0gdGhpcy5wbHVnaW4uZGIuZ2V0VHJhbnNsYXRpb25zKClcbiAgICAgICAgICAgICAgICAubWFwKHQgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgLi4udCxcbiAgICAgICAgICAgICAgICAgICAgLi4uQVZBSUxBQkxFX1RSQU5TTEFUSU9OU1t0LmFiYnJldmlhdGlvbl0sXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbGxlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgLy8gQXBwbHkgZmlsdGVyXG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJUZXh0ID0gZmlsdGVySW5wdXQudmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlmIChmaWx0ZXJUZXh0KSB7XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRpb25zID0gdHJhbnNsYXRpb25zLmZpbHRlcih0ID0+XG4gICAgICAgICAgICAgICAgICAgIHQubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGZpbHRlclRleHQpIHx8XG4gICAgICAgICAgICAgICAgICAgIHQuYWJicmV2aWF0aW9uLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoZmlsdGVyVGV4dCkgfHxcbiAgICAgICAgICAgICAgICAgICAgdC5sYW5ndWFnZT8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhmaWx0ZXJUZXh0KSB8fFxuICAgICAgICAgICAgICAgICAgICB0LmNhdGVnb3J5Py50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGZpbHRlclRleHQpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQXBwbHkgc29ydFxuICAgICAgICAgICAgdHJhbnNsYXRpb25zLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhVmFsID0gYVtzb3J0RmllbGRdIHx8ICcnO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJWYWwgPSBiW3NvcnRGaWVsZF0gfHwgJyc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChzb3J0QXNjID8gMSA6IC0xKSAqIGFWYWwubG9jYWxlQ29tcGFyZShiVmFsKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAodHJhbnNsYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVtcHR5Um93ID0gdGJvZHkuY3JlYXRlRWwoJ3RyJyk7XG4gICAgICAgICAgICAgICAgZW1wdHlSb3cuY3JlYXRlRWwoJ3RkJywge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnTm8gdHJhbnNsYXRpb25zIGluc3RhbGxlZC4nLFxuICAgICAgICAgICAgICAgICAgICBhdHRyOiB7IGNvbHNwYW46ICc1JyB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cmFuc2xhdGlvbnMuZm9yRWFjaCh0cmFucyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm93ID0gdGJvZHkuY3JlYXRlRWwoJ3RyJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lZGl0aW5nQWJiciA9PT0gdHJhbnMuYWJicmV2aWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVkaXQgbW9kZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lQ2VsbCA9IHJvdy5jcmVhdGVFbCgndGQnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZUlucHV0ID0gbmFtZUNlbGwuY3JlYXRlRWwoJ2lucHV0Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRyYW5zLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbHM6ICdiaWJsZWxpbmstZWRpdC1pbnB1dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1RyYW5zbGF0aW9uIE5hbWUnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFiYnJDZWxsID0gcm93LmNyZWF0ZUVsKCd0ZCcpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhYmJySW5wdXQgPSBhYmJyQ2VsbC5jcmVhdGVFbCgnaW5wdXQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJhbnMuYWJicmV2aWF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xzOiAnYmlibGVsaW5rLWVkaXQtaW5wdXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdBYmJyZXZpYXRpb24gKGUuZy4sIEtKViknXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJvdy5jcmVhdGVFbCgndGQnLCB7IHRleHQ6IHRyYW5zLmxhbmd1YWdlIHx8ICcnIH0pO1xuICAgICAgICAgICAgICAgICAgICByb3cuY3JlYXRlRWwoJ3RkJywgeyB0ZXh0OiB0cmFucy5jYXRlZ29yeSB8fCAnJyB9KTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb25DZWxsID0gcm93LmNyZWF0ZUVsKCd0ZCcsIHsgY2xzOiAnYmlibGVsaW5rLXRyYW5zbGF0aW9uLWFjdGlvbnMnIH0pO1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb25DZWxsLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdTYXZlJywgY2xzOiAnbW9kLWN0YScgfSkub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld05hbWUgPSBuYW1lSW5wdXQudmFsdWUudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3QWJiciA9IGFiYnJJbnB1dC52YWx1ZS50cmltKCkudG9VcHBlckNhc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXdOYW1lIHx8ICFuZXdBYmJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnTmFtZSBhbmQgYWJicmV2aWF0aW9uIGFyZSByZXF1aXJlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgbmV3IGFiYnJldmlhdGlvbiBhbHJlYWR5IGV4aXN0cyAoZXhjZXB0IGZvciBjdXJyZW50IHRyYW5zbGF0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0FiYnIgIT09IHRyYW5zLmFiYnJldmlhdGlvbiAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYi5nZXRUcmFuc2xhdGlvbnMoKS5zb21lKHQgPT4gdC5hYmJyZXZpYXRpb24gPT09IG5ld0FiYnIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnQWJicmV2aWF0aW9uIGFscmVhZHkgZXhpc3RzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdHJhbnNsYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZEFiYnIgPSB0cmFucy5hYmJyZXZpYXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFucy5uYW1lID0gbmV3TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zLmFiYnJldmlhdGlvbiA9IG5ld0FiYnI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgd2FzIHRoZSBkZWZhdWx0IHRyYW5zbGF0aW9uLCB1cGRhdGUgdGhlIHNldHRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0VHJhbnNsYXRpb24gPT09IG9sZEFiYnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0VHJhbnNsYXRpb24gPSBuZXdBYmJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5kYi5zYXZlRGF0YT8uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVkaXRpbmdBYmJyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlclRhYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdUcmFuc2xhdGlvbiB1cGRhdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uQ2VsbC5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnQ2FuY2VsJyB9KS5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0aW5nQWJiciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJUYWJsZSgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFZpZXcgbW9kZVxuICAgICAgICAgICAgICAgICAgICByb3cuY3JlYXRlRWwoJ3RkJywgeyB0ZXh0OiB0cmFucy5uYW1lIH0pO1xuICAgICAgICAgICAgICAgICAgICByb3cuY3JlYXRlRWwoJ3RkJywgeyB0ZXh0OiB0cmFucy5hYmJyZXZpYXRpb24gfSk7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5jcmVhdGVFbCgndGQnLCB7IHRleHQ6IHRyYW5zLmxhbmd1YWdlIHx8ICcnIH0pO1xuICAgICAgICAgICAgICAgICAgICByb3cuY3JlYXRlRWwoJ3RkJywgeyB0ZXh0OiB0cmFucy5jYXRlZ29yeSB8fCAnJyB9KTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb25DZWxsID0gcm93LmNyZWF0ZUVsKCd0ZCcsIHsgY2xzOiAnYmlibGVsaW5rLXRyYW5zbGF0aW9uLWFjdGlvbnMnIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFucy5hYmJyZXZpYXRpb24gIT09ICdBU1YnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25DZWxsLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdFZGl0JyB9KS5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZW4gZWRpdCBtb2RhbCB3aXRoIGN1cnJlbnQgdHJhbnNsYXRpb24gZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uID0gdGhpcy5wbHVnaW4uZGIuZ2V0VHJhbnNsYXRpb25zKCkuZmluZCh0ID0+IHQuYWJicmV2aWF0aW9uID09PSB0cmFucy5hYmJyZXZpYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVHJhbnNsYXRpb25FZGl0TW9kYWwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5hYmJyZXZpYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5sYW5ndWFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmNhdGVnb3J5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24ucHJvY2Vzc2luZ1J1bGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmMgKG5hbWUsIGFiYnJldmlhdGlvbiwgbGFuZ3VhZ2UsIGNhdGVnb3J5LCBwcm9jZXNzaW5nUnVsZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5kYi51cGRhdGVUcmFuc2xhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFiYnJldmlhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzaW5nUnVsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnVHJhbnNsYXRpb24gdXBkYXRlZCBzdWNjZXNzZnVsbHknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyVGFibGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBFcnJvciB1cGRhdGluZyB0cmFuc2xhdGlvbjogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25DZWxsLmNyZWF0ZUVsKCdidXR0b24nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1JlbW92ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xzOiAnbW9kLXdhcm5pbmcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlybVJlbW92ZVRyYW5zbGF0aW9uKHRyYW5zLmFiYnJldmlhdGlvbiwgdHJhbnMubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uQ2VsbC5jcmVhdGVFbCgnc3BhbicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnKEJ1aWx0LWluKScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xzOiAnYmlibGVsaW5rLWJ1aWx0aW4tbGFiZWwnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEFkZCBmaWx0ZXIgbGlzdGVuZXJcbiAgICAgICAgZmlsdGVySW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCByZW5kZXJUYWJsZSk7XG5cbiAgICAgICAgLy8gSW5pdGlhbCByZW5kZXJcbiAgICAgICAgcmVuZGVyVGFibGUoKTtcblxuICAgICAgICAvLyBBZGQgbW9kZXJuIHRhYmxlIENTU1xuICAgICAgICBjb25zdCBjc3MgPSBgXG4gICAgICAgICAgICAuYmlibGVsaW5rLXRyYW5zbGF0aW9ucy1oZWFkZXIge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYmlibGVsaW5rLWZpbHRlci1jb250YWluZXIge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYmlibGVsaW5rLWZpbHRlci1pbnB1dCB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAzMDBweDtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiA4cHggMTJweDtcbiAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtcHJpbWFyeSk7XG4gICAgICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtbm9ybWFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5iaWJsZWxpbmstZmlsdGVyLWlucHV0OmZvY3VzIHtcbiAgICAgICAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KTtcbiAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAycHggdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50LWhvdmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5iaWJsZWxpbmstdGFibGUtY29udGFpbmVyIHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxNnB4O1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5iaWJsZWxpbmstdHJhbnNsYXRpb24tdGFibGUge1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5iaWJsZWxpbmstdHJhbnNsYXRpb24tdGFibGUgdGgge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KTtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMnB4IDE2cHg7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XG4gICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYmlibGVsaW5rLXRyYW5zbGF0aW9uLXRhYmxlIHRoOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5iaWJsZWxpbmstdHJhbnNsYXRpb24tdGFibGUgdGQge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEycHggMTZweDtcbiAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgICAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYmlibGVsaW5rLXRyYW5zbGF0aW9uLXRhYmxlIHRyOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5iaWJsZWxpbmstdHJhbnNsYXRpb24tdGFibGUgdHI6bGFzdC1jaGlsZCB0ZCB7XG4gICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5iaWJsZWxpbmstdHJhbnNsYXRpb24tYWN0aW9ucyB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBnYXA6IDhweDtcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmJpYmxlbGluay10cmFuc2xhdGlvbi1hY3Rpb25zIGJ1dHRvbiB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogNHB4IDhweDtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnkpO1xuICAgICAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XG4gICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmJpYmxlbGluay10cmFuc2xhdGlvbi1hY3Rpb25zIGJ1dHRvbjpob3ZlciB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ob3Zlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYmlibGVsaW5rLXRyYW5zbGF0aW9uLWFjdGlvbnMgYnV0dG9uLm1vZC1jdGEge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWludGVyYWN0aXZlLWFjY2VudCk7XG4gICAgICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtb24tYWNjZW50KTtcbiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6IHZhcigtLWludGVyYWN0aXZlLWFjY2VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYmlibGVsaW5rLXRyYW5zbGF0aW9uLWFjdGlvbnMgYnV0dG9uLm1vZC13YXJuaW5nIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS10ZXh0LWVycm9yKTtcbiAgICAgICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1vbi1hY2NlbnQpO1xuICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogdmFyKC0tdGV4dC1lcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYmlibGVsaW5rLWJ1aWx0aW4tbGFiZWwge1xuICAgICAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcbiAgICAgICAgICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmJpYmxlbGluay1lZGl0LWlucHV0IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggOHB4O1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5KTtcbiAgICAgICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1ub3JtYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmJpYmxlbGluay11cGxvYWQtc2VjdGlvbiB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjRweDtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxNnB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KTtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmJpYmxlbGluay11cGxvYWQtc2VjdGlvbiBoNCB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA4cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYmlibGVsaW5rLXVwbG9hZC1zZWN0aW9uIHAge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gICAgICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuXG4gICAgICAgIGNvbnN0IHN0eWxlRWwgPSBkb2N1bWVudC5oZWFkLnF1ZXJ5U2VsZWN0b3IoJyNiaWJsZWxpbmstdGFibGUtc3R5bGVzJykgfHwgZG9jdW1lbnQuaGVhZC5jcmVhdGVFbCgnc3R5bGUnLCB7IGF0dHI6IHsgaWQ6ICdiaWJsZWxpbmstdGFibGUtc3R5bGVzJyB9fSk7XG4gICAgICAgIHN0eWxlRWwudGV4dENvbnRlbnQgPSBjc3M7XG5cbiAgICAgICAgLy8gQWRkIGV4YW1wbGUtc3BlY2lmaWMgQ1NTXG4gICAgICAgIGNvbnN0IGV4YW1wbGVDc3MgPSBgXG4gICAgICAgICAgICAuYmlibGVsaW5rLXN5bnRheC1leGFtcGxlIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXNlY29uZGFyeSk7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTJweDtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgICAgICAgICAgICAgICBib3JkZXItbGVmdDogNHB4IHNvbGlkIHZhcigtLWludGVyYWN0aXZlLWFjY2VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYmlibGVsaW5rLXN5bnRheC10ZXh0IHtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYmlibGVsaW5rLWV4YW1wbGUtaXRlbSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMnB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KTtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmJpYmxlbGluay1leGFtcGxlLWxhYmVsIHtcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDhweDtcbiAgICAgICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1ub3JtYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmJpYmxlbGluay1leGFtcGxlLWNvZGUge1xuICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnkpO1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYmlibGVsaW5rLWV4YW1wbGUtY29kZSBjb2RlIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1ub3JtYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuXG4gICAgICAgIGNvbnN0IGV4YW1wbGVTdHlsZUVsID0gZG9jdW1lbnQuaGVhZC5xdWVyeVNlbGVjdG9yKCcjYmlibGVsaW5rLWV4YW1wbGUtc3R5bGVzJykgfHwgZG9jdW1lbnQuaGVhZC5jcmVhdGVFbCgnc3R5bGUnLCB7IGF0dHI6IHsgaWQ6ICdiaWJsZWxpbmstZXhhbXBsZS1zdHlsZXMnIH19KTtcbiAgICAgICAgZXhhbXBsZVN0eWxlRWwudGV4dENvbnRlbnQgPSBleGFtcGxlQ3NzO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdXBsb2FkU1FMaXRlRmlsZSgpIHtcbiAgICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICBpbnB1dC50eXBlID0gJ2ZpbGUnO1xuICAgICAgICBpbnB1dC5hY2NlcHQgPSAnLnNxbGl0ZSwuZGInO1xuICAgICAgICBpbnB1dC5vbmNoYW5nZSA9IGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IChldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkuZmlsZXM/LlswXTtcbiAgICAgICAgICAgIGlmIChmaWxlKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzU1FMaXRlRmlsZShmaWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaW5wdXQuY2xpY2soKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHByb2Nlc3NTUUxpdGVGaWxlKGZpbGU6IEZpbGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYFByb2Nlc3NpbmcgJHtmaWxlLm5hbWV9Li4uYCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uTmFtZSA9IGZpbGUubmFtZS5yZXBsYWNlKC9cXC4oc3FsaXRlfGRiKSQvaSwgJycpO1xuICAgICAgICAgICAgY29uc3QgYWJicmV2aWF0aW9uID0gdHJhbnNsYXRpb25OYW1lLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIC8vIFNob3cgbW9kYWwgZm9yIGN1c3RvbWl6aW5nIHRyYW5zbGF0aW9uIGRldGFpbHNcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IFRyYW5zbGF0aW9uRWRpdE1vZGFsKFxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLFxuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICBhYmJyZXZpYXRpb24sXG4gICAgICAgICAgICAgICAgJ0VuZ2xpc2gnLFxuICAgICAgICAgICAgICAgICdTdGFuZGFyZCcsXG4gICAgICAgICAgICAgICAgW10sXG4gICAgICAgICAgICAgICAgYXN5bmMgKG5hbWU6IHN0cmluZywgYWJicjogc3RyaW5nLCBsYW5ndWFnZTogc3RyaW5nLCBjYXRlZ29yeTogc3RyaW5nLCBwcm9jZXNzaW5nUnVsZXM6IFByb2Nlc3NpbmdSdWxlW10pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRyYW5zbGF0aW9uIGFscmVhZHkgZXhpc3RzXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZ1RyYW5zbGF0aW9ucyA9IHRoaXMucGx1Z2luLmRiLmdldFRyYW5zbGF0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nVHJhbnNsYXRpb25zLnNvbWUodCA9PiB0LmFiYnJldmlhdGlvbiA9PT0gYWJicikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyYW5zbGF0aW9uICR7YWJicn0gYWxyZWFkeSBleGlzdHNgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRyYW5zbGF0aW9uIHdpdGggYWxsIGRldGFpbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uSWQgPSBhd2FpdCB0aGlzLnBsdWdpbi5kYi5hZGRUcmFuc2xhdGlvbihuYW1lLCBhYmJyLCBsYW5ndWFnZSwgY2F0ZWdvcnksIHByb2Nlc3NpbmdSdWxlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBzYW1wbGUgdmVyc2VzIGZvciBkZW1vbnN0cmF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzYW1wbGVWZXJzZXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBib29rOiAnSm9obicsIGNoYXB0ZXI6IDMsIHZlcnNlOiAxNiwgdGV4dDogJ1NhbXBsZSB2ZXJzZSBmcm9tIHVwbG9hZGVkIGZpbGUnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBib29rOiAnR2VuZXNpcycsIGNoYXB0ZXI6IDEsIHZlcnNlOiAxLCB0ZXh0OiAnU2FtcGxlIHZlcnNlIGZyb20gdXBsb2FkZWQgZmlsZScgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmVyc2VzVG9BZGQgPSBzYW1wbGVWZXJzZXMubWFwKHZlcnNlID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29rOiB2ZXJzZS5ib29rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXB0ZXI6IHZlcnNlLmNoYXB0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2U6IHZlcnNlLnZlcnNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHZlcnNlLnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uZGIuYWRkVmVyc2VzQmF0Y2godmVyc2VzVG9BZGQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBTdWNjZXNzZnVsbHkgaW1wb3J0ZWQgc2FtcGxlIGRhdGEgZnJvbSAke2ZpbGUubmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpOyAvLyBSZWZyZXNoIHRoZSBzZXR0aW5ncyBkaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdTUUxpdGUgaW1wb3J0IGVycm9yOicsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYEZhaWxlZCB0byBpbXBvcnQgJHtmaWxlLm5hbWV9OiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignU1FMaXRlIGltcG9ydCBlcnJvcjonLCBlcnJvcik7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBGYWlsZWQgdG8gaW1wb3J0ICR7ZmlsZS5uYW1lfTogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGxvYWRYTUxGaWxlKCkge1xuICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGlucHV0LnR5cGUgPSAnZmlsZSc7XG4gICAgICAgIGlucHV0LmFjY2VwdCA9ICcueG1sJztcbiAgICAgICAgaW5wdXQub25jaGFuZ2UgPSBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSAoZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmZpbGVzPy5bMF07XG4gICAgICAgICAgICBpZiAoZmlsZSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucHJvY2Vzc1hNTEZpbGUoZmlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlucHV0LmNsaWNrKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBwcm9jZXNzWE1MRmlsZShmaWxlOiBGaWxlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBQcm9jZXNzaW5nICR7ZmlsZS5uYW1lfS4uLmApO1xuXG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgZmlsZS50ZXh0KCk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwYXJzZVN0cmluZ1Byb21pc2UodGV4dCk7XG5cbiAgICAgICAgICAgIGlmICghcmVzdWx0LlhNTEJJQkxFIHx8ICFyZXN1bHQuWE1MQklCTEUuQklCTEVCT09LKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFhNTCBmaWxlOiBtaXNzaW5nIFhNTEJJQkxFIG9yIEJJQkxFQk9PSyBlbGVtZW50cycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFeHRyYWN0IHRyYW5zbGF0aW9uIG5hbWUvYWJicmV2aWF0aW9uIGZyb20gYmlibGVuYW1lIGF0dHJpYnV0ZVxuICAgICAgICAgICAgY29uc3QgYmlibGVuYW1lID0gcmVzdWx0LlhNTEJJQkxFLiQ/LmJpYmxlbmFtZSB8fCBmaWxlLm5hbWUucmVwbGFjZSgnLnhtbCcsICcnKTtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uTmFtZSA9IGJpYmxlbmFtZTtcbiAgICAgICAgICAgIGNvbnN0IGFiYnJldmlhdGlvbiA9IGJpYmxlbmFtZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgICAgICAvLyBTaG93IG1vZGFsIGZvciBjdXN0b21pemluZyB0cmFuc2xhdGlvbiBkZXRhaWxzXG4gICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBUcmFuc2xhdGlvbkVkaXRNb2RhbChcbiAgICAgICAgICAgICAgICB0aGlzLmFwcCxcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAgYWJicmV2aWF0aW9uLFxuICAgICAgICAgICAgICAgICdFbmdsaXNoJyxcbiAgICAgICAgICAgICAgICAnU3RhbmRhcmQnLFxuICAgICAgICAgICAgICAgIFtdLFxuICAgICAgICAgICAgICAgIGFzeW5jIChuYW1lOiBzdHJpbmcsIGFiYnI6IHN0cmluZywgbGFuZ3VhZ2U6IHN0cmluZywgY2F0ZWdvcnk6IHN0cmluZywgcHJvY2Vzc2luZ1J1bGVzOiBQcm9jZXNzaW5nUnVsZVtdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0cmFuc2xhdGlvbiBhbHJlYWR5IGV4aXN0c1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdUcmFuc2xhdGlvbnMgPSB0aGlzLnBsdWdpbi5kYi5nZXRUcmFuc2xhdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1RyYW5zbGF0aW9ucy5zb21lKHQgPT4gdC5hYmJyZXZpYXRpb24gPT09IGFiYnIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29uZmlybU1vZGFsID0gbmV3IENvbmZpcm1Nb2RhbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBUcmFuc2xhdGlvbiAnJHthYmJyfScgYWxyZWFkeSBleGlzdHMuIE92ZXJ3cml0ZT9gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luYyAoY29uZmlybWVkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlybWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uZGIucmVtb3ZlVHJhbnNsYXRpb24oYWJicik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5pbXBvcnRYTUxCb29rcyhyZXN1bHQsIG5hbWUsIGFiYnIsIGZpbGUubmFtZSwgbGFuZ3VhZ2UsIGNhdGVnb3J5LCBwcm9jZXNzaW5nUnVsZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdJbXBvcnQgY2FuY2VsbGVkLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1Nb2RhbC5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmltcG9ydFhNTEJvb2tzKHJlc3VsdCwgbmFtZSwgYWJiciwgZmlsZS5uYW1lLCBsYW5ndWFnZSwgY2F0ZWdvcnksIHByb2Nlc3NpbmdSdWxlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1hNTCBpbXBvcnQgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgRmFpbGVkIHRvIGltcG9ydCAke2ZpbGUubmFtZX06ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdYTUwgaW1wb3J0IGVycm9yOicsIGVycm9yKTtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYEZhaWxlZCB0byBpbXBvcnQgJHtmaWxlLm5hbWV9OiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGltcG9ydFhNTEJvb2tzKHJlc3VsdDogYW55LCB0cmFuc2xhdGlvbk5hbWU6IHN0cmluZywgYWJicmV2aWF0aW9uOiBzdHJpbmcsIGZpbGVOYW1lOiBzdHJpbmcsIGxhbmd1YWdlOiBzdHJpbmcgPSAnRW5nbGlzaCcsIGNhdGVnb3J5OiBzdHJpbmcgPSAnU3RhbmRhcmQnLCBwcm9jZXNzaW5nUnVsZXM6IFByb2Nlc3NpbmdSdWxlW10gPSBbXSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYm9va3MgPSByZXN1bHQuWE1MQklCTEUuQklCTEVCT09LO1xuICAgICAgICAgICAgaWYgKCFib29rcyB8fCBib29rcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdObyBib29rcyBmb3VuZCBpbiBYTUwuIEltcG9ydCBhYm9ydGVkLicpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ05vIGJvb2tzIGZvdW5kIGluIFhNTDonLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNob3cgcHJvZ3Jlc3Mgbm90aWNlXG4gICAgICAgICAgICBuZXcgTm90aWNlKGBTdGFydGluZyBpbXBvcnQgb2YgJHt0cmFuc2xhdGlvbk5hbWV9Li4uYCk7XG4gICAgICAgICAgICAvLyBBZGQgdHJhbnNsYXRpb24gdG8gZGF0YWJhc2Ugd2l0aCBhbGwgZGV0YWlsc1xuICAgICAgICAgICAgY29uc3QgdHJhbnNsYXRpb25JZCA9IGF3YWl0IHRoaXMucGx1Z2luLmRiLmFkZFRyYW5zbGF0aW9uKHRyYW5zbGF0aW9uTmFtZSwgYWJicmV2aWF0aW9uLCBsYW5ndWFnZSwgY2F0ZWdvcnksIHByb2Nlc3NpbmdSdWxlcyk7XG4gICAgICAgICAgICBsZXQgaW1wb3J0ZWRDb3VudCA9IDA7XG4gICAgICAgICAgICBsZXQgYm9va0NvdW50ID0gMDtcbiAgICAgICAgICAgIGNvbnN0IHZlcnNlc1RvQWRkOiBBcnJheTx7dHJhbnNsYXRpb25JZDogbnVtYmVyLCBib29rOiBzdHJpbmcsIGNoYXB0ZXI6IG51bWJlciwgdmVyc2U6IG51bWJlciwgdGV4dDogc3RyaW5nfT4gPSBbXTtcbiAgICAgICAgICAgIC8vIFByb2Nlc3MgZWFjaCBib29rXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGJvb2sgb2YgYm9va3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWJvb2sgfHwgIWJvb2suJCkgY29udGludWU7XG4gICAgICAgICAgICAgICAgY29uc3QgYm9va05hbWUgPSBib29rLiQuYm5hbWUgfHwgYm9vay4kLnNuYW1lIHx8ICdVbmtub3duJztcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFwdGVycyA9IEFycmF5LmlzQXJyYXkoYm9vay5DSEFQVEVSKSA/IGJvb2suQ0hBUFRFUiA6IFtib29rLkNIQVBURVJdO1xuICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgZWFjaCBjaGFwdGVyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjaGFwdGVyIG9mIGNoYXB0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hhcHRlciB8fCAhY2hhcHRlci4kKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhcHRlck51bSA9IHBhcnNlSW50KGNoYXB0ZXIuJC5jbnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKGNoYXB0ZXJOdW0pKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmVyc2VzID0gQXJyYXkuaXNBcnJheShjaGFwdGVyLlZFUlMpID8gY2hhcHRlci5WRVJTIDogKGNoYXB0ZXIuVkVSUyA/IFtjaGFwdGVyLlZFUlNdIDogW10pO1xuICAgICAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIGVhY2ggdmVyc2VcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB2ZXJzZSBvZiB2ZXJzZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmVyc2UpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZlcnNlVGV4dCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZlcnNlTnVtID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgdmVyc2UgdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2ZXJzZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJzZVRleHQgPSB2ZXJzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmVyc2UuXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNlVGV4dCA9IHZlcnNlLl87XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmVyc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2VUZXh0ID0gdmVyc2Uuam9pbignJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IHZlcnNlIG51bWJlclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlcnNlLiQgJiYgdmVyc2UuJC52bnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2VOdW0gPSBwYXJzZUludCh2ZXJzZS4kLnZudW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHZlcnNlIGlmIGl0IGhhcyBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVyc2VUZXh0ICYmIHZlcnNlVGV4dC50cmltKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJzZXNUb0FkZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9vazogYm9va05hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXB0ZXI6IGNoYXB0ZXJOdW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNlOiB2ZXJzZU51bSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdmVyc2VUZXh0LnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydGVkQ291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBib29rQ291bnQrKztcbiAgICAgICAgICAgICAgICAvLyBTaG93IHByb2dyZXNzIGV2ZXJ5IDEwIGJvb2tzXG4gICAgICAgICAgICAgICAgaWYgKGJvb2tDb3VudCAlIDEwID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYFByb2Nlc3NlZCAke2Jvb2tDb3VudH0gYm9va3MsICR7aW1wb3J0ZWRDb3VudH0gdmVyc2VzLi4uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2coYFtCaWJsZUxpbmtdIFBhcnNlZCAke2ltcG9ydGVkQ291bnR9IHZlcnNlcyBmcm9tIFhNTCBmb3IgJHt0cmFuc2xhdGlvbk5hbWV9YCk7XG4gICAgICAgICAgICAvLyBTYXZlIGFsbCB2ZXJzZXMgaW4gYSBzaW5nbGUgYmF0Y2ggb3BlcmF0aW9uXG4gICAgICAgICAgICBpZiAodmVyc2VzVG9BZGQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYFNhdmluZyAke2ltcG9ydGVkQ291bnR9IHZlcnNlcyB0byBkYXRhYmFzZS4uLmApO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLmRiLmFkZFZlcnNlc0JhdGNoKHZlcnNlc1RvQWRkKTtcbiAgICAgICAgICAgICAgICAvLyBWZXJpZnkgdGhlIGltcG9ydCB3YXMgc3VjY2Vzc2Z1bFxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uRXhpc3RzID0gdGhpcy5wbHVnaW4uZGIudmVyaWZ5VHJhbnNsYXRpb25FeGlzdHMoYWJicmV2aWF0aW9uKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2xhdGlvblN0YXRzID0gdGhpcy5wbHVnaW4uZGIuZ2V0VHJhbnNsYXRpb25TdGF0cyhhYmJyZXZpYXRpb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFsbFZlcnNlcyA9IHRoaXMucGx1Z2luLmRiWydkYXRhJ10/LnZlcnNlcz8uZmlsdGVyKHYgPT4gdi50cmFuc2xhdGlvbl9pZCA9PT0gdHJhbnNsYXRpb25JZCkgfHwgW107XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtCaWJsZUxpbmtdIFNhdmVkICR7YWxsVmVyc2VzLmxlbmd0aH0gdmVyc2VzIGZvciAke3RyYW5zbGF0aW9uTmFtZX0gKHNob3VsZCBtYXRjaCAke2ltcG9ydGVkQ291bnR9KWApO1xuICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGlvbkV4aXN0cyAmJiB0cmFuc2xhdGlvblN0YXRzICYmIGFsbFZlcnNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYFx1MjcwNSBTdWNjZXNzZnVsbHkgaW1wb3J0ZWQgJHt0cmFuc2xhdGlvbk5hbWV9ICgke2FiYnJldmlhdGlvbn0pIHdpdGggJHt0cmFuc2xhdGlvblN0YXRzLnZlcnNlQ291bnR9IHZlcnNlcyBmcm9tICR7dHJhbnNsYXRpb25TdGF0cy5ib29rcy5sZW5ndGh9IGJvb2tzYCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBCaWJsZSBpbXBvcnQgY29tcGxldGVkOiAke3RyYW5zbGF0aW9uTmFtZX0gKCR7YWJicmV2aWF0aW9ufSkgLSAke3RyYW5zbGF0aW9uU3RhdHMudmVyc2VDb3VudH0gdmVyc2VzIGZyb20gJHt0cmFuc2xhdGlvblN0YXRzLmJvb2tzLmxlbmd0aH0gYm9va3NgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBcdTI3NEMgSW1wb3J0IGZhaWxlZDogTm8gdmVyc2VzIHNhdmVkIGZvciAke3RyYW5zbGF0aW9uTmFtZX0uIENoZWNrIHRoZSBYTUwgZm9ybWF0IGFuZCB0cnkgYWdhaW4uYCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtCaWJsZUxpbmtdIEltcG9ydCBmYWlsZWQ6IE5vIHZlcnNlcyBzYXZlZCBmb3IgJHt0cmFuc2xhdGlvbk5hbWV9LmApO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5kYi5yZW1vdmVUcmFuc2xhdGlvbihhYmJyZXZpYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHUyNzRDIE5vIHZlcnNlcyB3ZXJlIGZvdW5kIGluIHRoZSBYTUwgZmlsZS4gSW1wb3J0IGFib3J0ZWQuJyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0JpYmxlTGlua10gTm8gdmVyc2VzIGZvdW5kIGluIFhNTDonLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLmRiLnJlbW92ZVRyYW5zbGF0aW9uKGFiYnJldmlhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdYTUwgaW1wb3J0IGVycm9yOicsIGVycm9yKTtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYFx1Mjc0QyBGYWlsZWQgdG8gaW1wb3J0ICR7ZmlsZU5hbWV9OiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICAvLyBUcnkgdG8gY2xlYW4gdXAgaWYgdHJhbnNsYXRpb24gd2FzIHBhcnRpYWxseSBhZGRlZFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5kYi5yZW1vdmVUcmFuc2xhdGlvbihhYmJyZXZpYXRpb24pO1xuICAgICAgICAgICAgfSBjYXRjaCAoY2xlYW51cEVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNsZWFudXAgYWZ0ZXIgaW1wb3J0IGVycm9yOicsIGNsZWFudXBFcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHJlbW92ZVRyYW5zbGF0aW9uKGFiYnJldmlhdGlvbjogc3RyaW5nKSB7XG4gICAgICAgIGlmIChhYmJyZXZpYXRpb24gPT09ICdBU1YnKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKCdDYW5ub3QgcmVtb3ZlIEFTViB0cmFuc2xhdGlvbicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IHRoaXMucGx1Z2luLmRiLnJlbW92ZVRyYW5zbGF0aW9uKGFiYnJldmlhdGlvbik7XG4gICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGAke2FiYnJldmlhdGlvbn0gdHJhbnNsYXRpb24gcmVtb3ZlZGApO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgcmVtb3ZlZCB0cmFuc2xhdGlvbiB3YXMgdGhlIGRlZmF1bHQsIHJlc2V0IHRvIEFTVlxuICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRUcmFuc2xhdGlvbiA9PT0gYWJicmV2aWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdFRyYW5zbGF0aW9uID0gJ0FTVic7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpOyAvLyBSZWZyZXNoIHRoZSBzZXR0aW5ncyBkaXNwbGF5XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBGYWlsZWQgdG8gcmVtb3ZlICR7YWJicmV2aWF0aW9ufTogdHJhbnNsYXRpb24gbm90IGZvdW5kYCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbmZpcm1SZW1vdmVUcmFuc2xhdGlvbihhYmJyZXZpYXRpb246IHN0cmluZywgbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IENvbmZpcm1Nb2RhbCh0aGlzLmFwcCwgYFJlbW92ZSB0cmFuc2xhdGlvbiAnJHtuYW1lfScgKCR7YWJicmV2aWF0aW9ufSk/YCwgYXN5bmMgKGNvbmZpcm1lZCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbmZpcm1lZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVtb3ZlVHJhbnNsYXRpb24oYWJicmV2aWF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgbW9kYWwub3BlbigpO1xuICAgIH1cblxuICAgIC8vIC0tLSBTaG9ydGN1dCBNYW5hZ2VtZW50IEltcGxlbWVudGF0aW9uIC0tLVxuICAgIHByaXZhdGUgcmVuZGVyU2hvcnRjdXRzU2VjdGlvbihjb250YWluZXJFbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3Qgc2hvcnRjdXRzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvcnRjdXRzO1xuXG4gICAgICAgIC8vIEZpbHRlciBpbnB1dFxuICAgICAgICBjb25zdCBmaWx0ZXJDb250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6ICdiaWJsZWxpbmstZmlsdGVyLWNvbnRhaW5lcicgfSk7XG4gICAgICAgIGNvbnN0IGZpbHRlcklucHV0ID0gZmlsdGVyQ29udGFpbmVyLmNyZWF0ZUVsKCdpbnB1dCcsIHtcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnRmlsdGVyIHNob3J0Y3V0cy4uLicsXG4gICAgICAgICAgICBjbHM6ICdiaWJsZWxpbmstZmlsdGVyLWlucHV0J1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBDcmVhdGUgdGFibGVcbiAgICAgICAgY29uc3QgdGFibGUgPSBjb250YWluZXJFbC5jcmVhdGVFbCgndGFibGUnLCB7IGNsczogJ2JpYmxlbGluay1zaG9ydGN1dC10YWJsZScgfSk7XG4gICAgICAgIGNvbnN0IHRoZWFkID0gdGFibGUuY3JlYXRlRWwoJ3RoZWFkJyk7XG4gICAgICAgIGNvbnN0IGhlYWRlclJvdyA9IHRoZWFkLmNyZWF0ZUVsKCd0cicpO1xuXG4gICAgICAgIC8vIFNvcnQgc3RhdGVcbiAgICAgICAgbGV0IHNvcnRGaWVsZDogJ2tleScgfCAncmVmZXJlbmNlJyA9ICdrZXknO1xuICAgICAgICBsZXQgc29ydEFzYyA9IHRydWU7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGhlYWRlcnMgd2l0aCBzb3J0IGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgY29uc3QgY3JlYXRlU29ydGFibGVIZWFkZXIgPSAodGV4dDogc3RyaW5nLCBmaWVsZDogJ2tleScgfCAncmVmZXJlbmNlJykgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGggPSBoZWFkZXJSb3cuY3JlYXRlRWwoJ3RoJywgeyB0ZXh0IH0pO1xuICAgICAgICAgICAgdGguc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgdGgub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc29ydEZpZWxkID09PSBmaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICBzb3J0QXNjID0gIXNvcnRBc2M7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc29ydEZpZWxkID0gZmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIHNvcnRBc2MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZW5kZXJTaG9ydGN1dHMoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgY3JlYXRlU29ydGFibGVIZWFkZXIoJ1Nob3J0Y3V0JywgJ2tleScpO1xuICAgICAgICBjcmVhdGVTb3J0YWJsZUhlYWRlcignUmVmZXJlbmNlJywgJ3JlZmVyZW5jZScpO1xuICAgICAgICBoZWFkZXJSb3cuY3JlYXRlRWwoJ3RoJywgeyB0ZXh0OiAnQWN0aW9ucycgfSk7XG5cbiAgICAgICAgY29uc3QgdGJvZHkgPSB0YWJsZS5jcmVhdGVFbCgndGJvZHknKTtcblxuICAgICAgICBjb25zdCByZW5kZXJTaG9ydGN1dHMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0Ym9keS5lbXB0eSgpO1xuICAgICAgICAgICAgbGV0IHNob3J0Y3V0RW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHNob3J0Y3V0cyk7XG5cbiAgICAgICAgICAgIC8vIEFwcGx5IGZpbHRlclxuICAgICAgICAgICAgY29uc3QgZmlsdGVyVGV4dCA9IGZpbHRlcklucHV0LnZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAoZmlsdGVyVGV4dCkge1xuICAgICAgICAgICAgICAgIHNob3J0Y3V0RW50cmllcyA9IHNob3J0Y3V0RW50cmllcy5maWx0ZXIoKFtrZXksIHJlZl0pID0+XG4gICAgICAgICAgICAgICAgICAgIGtleS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGZpbHRlclRleHQpIHx8XG4gICAgICAgICAgICAgICAgICAgIHJlZi50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGZpbHRlclRleHQpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQXBwbHkgc29ydFxuICAgICAgICAgICAgc2hvcnRjdXRFbnRyaWVzLnNvcnQoKFtrZXlBLCByZWZBXSwgW2tleUIsIHJlZkJdKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYVZhbCA9IHNvcnRGaWVsZCA9PT0gJ2tleScgPyBrZXlBIDogcmVmQTtcbiAgICAgICAgICAgICAgICBjb25zdCBiVmFsID0gc29ydEZpZWxkID09PSAna2V5JyA/IGtleUIgOiByZWZCO1xuICAgICAgICAgICAgICAgIHJldHVybiAoc29ydEFzYyA/IDEgOiAtMSkgKiBhVmFsLmxvY2FsZUNvbXBhcmUoYlZhbCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2hvcnRjdXRFbnRyaWVzLmZvckVhY2goKFtrZXksIHJlZmVyZW5jZV0pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByb3cgPSB0Ym9keS5jcmVhdGVFbCgndHInKTtcblxuICAgICAgICAgICAgICAgIGlmICgodGhpcyBhcyBhbnkpLl9lZGl0aW5nS2V5ID09PSBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRWRpdCBtb2RlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleUNlbGwgPSByb3cuY3JlYXRlRWwoJ3RkJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleUlucHV0ID0ga2V5Q2VsbC5jcmVhdGVFbCgnaW5wdXQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xzOiAnYmlibGVsaW5rLWVkaXQtaW5wdXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdTaG9ydGN1dCAoZS5nLiwgam4zMTYpJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWZDZWxsID0gcm93LmNyZWF0ZUVsKCd0ZCcpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWZJbnB1dCA9IHJlZkNlbGwuY3JlYXRlRWwoJ2lucHV0Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJlZmVyZW5jZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsczogJ2JpYmxlbGluay1lZGl0LWlucHV0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnUmVmZXJlbmNlIChlLmcuLCBKb2huIDM6MTYpJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb25DZWxsID0gcm93LmNyZWF0ZUVsKCd0ZCcpO1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb25DZWxsLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdTYXZlJyB9KS5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3S2V5ID0ga2V5SW5wdXQudmFsdWUudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3UmVmID0gcmVmSW5wdXQudmFsdWUudHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5ld0tleSB8fCAhbmV3UmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnU2hvcnRjdXQgYW5kIHJlZmVyZW5jZSByZXF1aXJlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0tleSAhPT0ga2V5ICYmIHNob3J0Y3V0c1tuZXdLZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnU2hvcnRjdXQga2V5IGFscmVhZHkgZXhpc3RzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS9eXFx3K1xccytcXGQrOlxcZCskLy50ZXN0KG5ld1JlZikgJiYgIS9eXFx3K1xccytcXGQrOlxcZCsoLVxcZCspPyQvLnRlc3QobmV3UmVmKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1JlZmVyZW5jZSBtdXN0IGJlIGluIHRoZSBmb3JtYXQgQm9vayBDaGFwdGVyOlZlcnNlIG9yIEJvb2sgQ2hhcHRlcjpWZXJzZS1WZXJzZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHNob3J0Y3V0XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2hvcnRjdXRzW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG9ydGN1dHNbbmV3S2V5XSA9IG5ld1JlZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzIGFzIGFueSkuX2VkaXRpbmdLZXkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJTaG9ydGN1dHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1Nob3J0Y3V0IHVwZGF0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25DZWxsLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdDYW5jZWwnIH0pLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcyBhcyBhbnkpLl9lZGl0aW5nS2V5ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlclNob3J0Y3V0cygpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFZpZXcgbW9kZVxuICAgICAgICAgICAgICAgICAgICByb3cuY3JlYXRlRWwoJ3RkJywgeyB0ZXh0OiBrZXkgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5jcmVhdGVFbCgndGQnLCB7IHRleHQ6IHJlZmVyZW5jZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWN0aW9uQ2VsbCA9IHJvdy5jcmVhdGVFbCgndGQnKTtcblxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25DZWxsLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdFZGl0JyB9KS5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgYXMgYW55KS5fZWRpdGluZ0tleSA9IGtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlclNob3J0Y3V0cygpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb25DZWxsLmNyZWF0ZUVsKCdidXR0b24nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnUmVtb3ZlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsczogJ21vZC13YXJuaW5nJ1xuICAgICAgICAgICAgICAgICAgICB9KS5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgQ29uZmlybU1vZGFsKHRoaXMuYXBwLCBgUmVtb3ZlIHNob3J0Y3V0ICcke2tleX0nP2AsIGFzeW5jIChjb25maXJtZWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlybWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzaG9ydGN1dHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlclNob3J0Y3V0cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBBZGQgbmV3IHNob3J0Y3V0IHJvd1xuICAgICAgICAgICAgaWYgKCh0aGlzIGFzIGFueSkuX2FkZGluZ1Nob3J0Y3V0KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm93ID0gdGJvZHkuY3JlYXRlRWwoJ3RyJyk7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5SW5wdXQgPSByb3cuY3JlYXRlRWwoJ3RkJykuY3JlYXRlRWwoJ2lucHV0Jywge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnU2hvcnRjdXQgKGUuZy4sIGpuMzE2KScsXG4gICAgICAgICAgICAgICAgICAgIGNsczogJ2JpYmxlbGluay1lZGl0LWlucHV0J1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZklucHV0ID0gcm93LmNyZWF0ZUVsKCd0ZCcpLmNyZWF0ZUVsKCdpbnB1dCcsIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1JlZmVyZW5jZSAoZS5nLiwgSm9obiAzOjE2KScsXG4gICAgICAgICAgICAgICAgICAgIGNsczogJ2JpYmxlbGluay1lZGl0LWlucHV0J1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGlvbkNlbGwgPSByb3cuY3JlYXRlRWwoJ3RkJyk7XG4gICAgICAgICAgICAgICAgYWN0aW9uQ2VsbC5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnQWRkJyB9KS5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdLZXkgPSBrZXlJbnB1dC52YWx1ZS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1JlZiA9IHJlZklucHV0LnZhbHVlLnRyaW0oKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5ld0tleSB8fCAhbmV3UmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdTaG9ydGN1dCBhbmQgcmVmZXJlbmNlIHJlcXVpcmVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hvcnRjdXRzW25ld0tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1Nob3J0Y3V0IGtleSBhbHJlYWR5IGV4aXN0cycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEvXlxcdytcXHMrXFxkKzpcXGQrJC8udGVzdChuZXdSZWYpICYmICEvXlxcdytcXHMrXFxkKzpcXGQrKC1cXGQrKT8kLy50ZXN0KG5ld1JlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1JlZmVyZW5jZSBtdXN0IGJlIGluIHRoZSBmb3JtYXQgQm9vayBDaGFwdGVyOlZlcnNlIG9yIEJvb2sgQ2hhcHRlcjpWZXJzZS1WZXJzZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2hvcnRjdXRzW25ld0tleV0gPSBuZXdSZWY7XG4gICAgICAgICAgICAgICAgICAgICh0aGlzIGFzIGFueSkuX2FkZGluZ1Nob3J0Y3V0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJTaG9ydGN1dHMoKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnU2hvcnRjdXQgYWRkZWQnKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGFjdGlvbkNlbGwuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0NhbmNlbCcgfSkub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMgYXMgYW55KS5fYWRkaW5nU2hvcnRjdXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyU2hvcnRjdXRzKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWRkUm93ID0gdGJvZHkuY3JlYXRlRWwoJ3RyJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgYWRkQ2VsbCA9IGFkZFJvdy5jcmVhdGVFbCgndGQnLCB7IGF0dHI6IHsgY29sc3BhbjogJzMnIH0gfSk7XG4gICAgICAgICAgICAgICAgYWRkQ2VsbC5jcmVhdGVFbCgnYnV0dG9uJywge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnQWRkIFNob3J0Y3V0JyxcbiAgICAgICAgICAgICAgICAgICAgY2xzOiAnbW9kLWN0YSdcbiAgICAgICAgICAgICAgICB9KS5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAodGhpcyBhcyBhbnkpLl9hZGRpbmdTaG9ydGN1dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlclNob3J0Y3V0cygpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW5pdGlhbCByZW5kZXJcbiAgICAgICAgcmVuZGVyU2hvcnRjdXRzKCk7XG5cbiAgICAgICAgLy8gQWRkIGZpbHRlciBsaXN0ZW5lclxuICAgICAgICBmaWx0ZXJJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHJlbmRlclNob3J0Y3V0cyk7XG5cbiAgICAgICAgLy8gQWRkIENTU1xuICAgICAgICBjb25zdCBjc3MgPSBgXG4gICAgICAgICAgICAuYmlibGVsaW5rLXNob3J0Y3V0LXRhYmxlIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYmlibGVsaW5rLXNob3J0Y3V0LXRhYmxlIHRoLFxuICAgICAgICAgICAgLmJpYmxlbGluay1zaG9ydGN1dC10YWJsZSB0ZCB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogOHB4O1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmJpYmxlbGluay1zaG9ydGN1dC10YWJsZSB0aCB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1zZWNvbmRhcnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuXG4gICAgICAgIGNvbnN0IHN0eWxlRWwgPSBkb2N1bWVudC5oZWFkLmNyZWF0ZUVsKCdzdHlsZScpO1xuICAgICAgICBzdHlsZUVsLnRleHRDb250ZW50ID0gY3NzO1xuICAgIH1cbn1cblxuY2xhc3MgQ29uZmlybU1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICBvblJlc3VsdDogKGNvbmZpcm1lZDogYm9vbGVhbikgPT4gdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgbWVzc2FnZTogc3RyaW5nLCBvblJlc3VsdDogKGNvbmZpcm1lZDogYm9vbGVhbikgPT4gdm9pZCkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB0aGlzLm9uUmVzdWx0ID0gb25SZXN1bHQ7XG4gICAgfVxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnQ29uZmlybScgfSk7XG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgncCcsIHsgdGV4dDogdGhpcy5tZXNzYWdlIH0pO1xuICAgICAgICBjb25zdCBidG5Sb3cgPSBjb250ZW50RWwuY3JlYXRlRGl2KCk7XG4gICAgICAgIGJ0blJvdy5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICBidG5Sb3cuc3R5bGUuZ2FwID0gJzEwcHgnO1xuICAgICAgICBidG5Sb3cuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1JlbW92ZScsIGNsczogJ21vZC13YXJuaW5nJyB9KS5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5vblJlc3VsdCh0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgYnRuUm93LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdDYW5jZWwnIH0pLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLm9uUmVzdWx0KGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgb25DbG9zZSgpIHtcbiAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcbiAgICB9XG59XG5cbmNsYXNzIEltcG9ydFRyYW5zbGF0aW9uTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGFiYnJldmlhdGlvbjogc3RyaW5nO1xuICAgIG9uU3VibWl0OiAobmFtZTogc3RyaW5nLCBhYmJyZXZpYXRpb246IHN0cmluZykgPT4gdm9pZDtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgZGVmYXVsdE5hbWU6IHN0cmluZywgZGVmYXVsdEFiYnI6IHN0cmluZywgb25TdWJtaXQ6IChuYW1lOiBzdHJpbmcsIGFiYnJldmlhdGlvbjogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMubmFtZSA9IGRlZmF1bHROYW1lO1xuICAgICAgICB0aGlzLmFiYnJldmlhdGlvbiA9IGRlZmF1bHRBYmJyO1xuICAgICAgICB0aGlzLm9uU3VibWl0ID0gb25TdWJtaXQ7XG4gICAgfVxuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdJbXBvcnQgVHJhbnNsYXRpb24nIH0pO1xuXG4gICAgICAgIC8vIE5hbWUgaW5wdXRcbiAgICAgICAgY29uc3QgbmFtZUNvbnRhaW5lciA9IGNvbnRlbnRFbC5jcmVhdGVEaXYoKTtcbiAgICAgICAgbmFtZUNvbnRhaW5lci5jcmVhdGVFbCgnbGFiZWwnLCB7IHRleHQ6ICdUcmFuc2xhdGlvbiBOYW1lOicgfSk7XG4gICAgICAgIGNvbnN0IG5hbWVJbnB1dCA9IG5hbWVDb250YWluZXIuY3JlYXRlRWwoJ2lucHV0Jywge1xuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnVHJhbnNsYXRpb24gTmFtZSdcbiAgICAgICAgfSk7XG4gICAgICAgIG5hbWVJbnB1dC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgbmFtZUlucHV0LnN0eWxlLm1hcmdpbkJvdHRvbSA9ICcxMHB4JztcblxuICAgICAgICAvLyBBYmJyZXZpYXRpb24gaW5wdXRcbiAgICAgICAgY29uc3QgYWJickNvbnRhaW5lciA9IGNvbnRlbnRFbC5jcmVhdGVEaXYoKTtcbiAgICAgICAgYWJickNvbnRhaW5lci5jcmVhdGVFbCgnbGFiZWwnLCB7IHRleHQ6ICdBYmJyZXZpYXRpb246JyB9KTtcbiAgICAgICAgY29uc3QgYWJicklucHV0ID0gYWJickNvbnRhaW5lci5jcmVhdGVFbCgnaW5wdXQnLCB7XG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5hYmJyZXZpYXRpb24sXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0FiYnJldmlhdGlvbiAoZS5nLiwgS0pWKSdcbiAgICAgICAgfSk7XG4gICAgICAgIGFiYnJJbnB1dC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgYWJicklucHV0LnN0eWxlLm1hcmdpbkJvdHRvbSA9ICcyMHB4JztcblxuICAgICAgICAvLyBCdXR0b25zXG4gICAgICAgIGNvbnN0IGJ0bkNvbnRhaW5lciA9IGNvbnRlbnRFbC5jcmVhdGVEaXYoKTtcbiAgICAgICAgYnRuQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgIGJ0bkNvbnRhaW5lci5zdHlsZS5nYXAgPSAnMTBweCc7XG4gICAgICAgIGJ0bkNvbnRhaW5lci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9ICdmbGV4LWVuZCc7XG5cbiAgICAgICAgYnRuQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdJbXBvcnQnIH0pLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gbmFtZUlucHV0LnZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIGNvbnN0IGFiYnIgPSBhYmJySW5wdXQudmFsdWUudHJpbSgpLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIGlmICghbmFtZSB8fCAhYWJicikge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ05hbWUgYW5kIGFiYnJldmlhdGlvbiBhcmUgcmVxdWlyZWQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMub25TdWJtaXQobmFtZSwgYWJicik7XG4gICAgICAgIH07XG5cbiAgICAgICAgYnRuQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdDYW5jZWwnIH0pLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgb25DbG9zZSgpIHtcbiAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcbiAgICB9XG59IFxuXG5jbGFzcyBUcmFuc2xhdGlvbkVkaXRNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBwcml2YXRlIG5hbWU6IHN0cmluZztcbiAgICBwcml2YXRlIGFiYnJldmlhdGlvbjogc3RyaW5nO1xuICAgIHByaXZhdGUgbGFuZ3VhZ2U6IHN0cmluZztcbiAgICBwcml2YXRlIGNhdGVnb3J5OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBwcm9jZXNzaW5nUnVsZXM6IFByb2Nlc3NpbmdSdWxlW107XG4gICAgcHJpdmF0ZSBvblN1Ym1pdDogKG5hbWU6IHN0cmluZywgYWJicmV2aWF0aW9uOiBzdHJpbmcsIGxhbmd1YWdlOiBzdHJpbmcsIGNhdGVnb3J5OiBzdHJpbmcsIHByb2Nlc3NpbmdSdWxlczogUHJvY2Vzc2luZ1J1bGVbXSkgPT4gdm9pZDtcbiAgICBwcml2YXRlIGlzRWRpdDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBhcHA6IEFwcCwgXG4gICAgICAgIGRlZmF1bHROYW1lOiBzdHJpbmcsIFxuICAgICAgICBkZWZhdWx0QWJicjogc3RyaW5nLCBcbiAgICAgICAgZGVmYXVsdExhbmd1YWdlOiBzdHJpbmcgPSAnRW5nbGlzaCcsXG4gICAgICAgIGRlZmF1bHRDYXRlZ29yeTogc3RyaW5nID0gJ1N0YW5kYXJkJyxcbiAgICAgICAgZGVmYXVsdFByb2Nlc3NpbmdSdWxlczogUHJvY2Vzc2luZ1J1bGVbXSA9IFtdLFxuICAgICAgICBvblN1Ym1pdDogKG5hbWU6IHN0cmluZywgYWJicmV2aWF0aW9uOiBzdHJpbmcsIGxhbmd1YWdlOiBzdHJpbmcsIGNhdGVnb3J5OiBzdHJpbmcsIHByb2Nlc3NpbmdSdWxlczogUHJvY2Vzc2luZ1J1bGVbXSkgPT4gdm9pZCxcbiAgICAgICAgaXNFZGl0OiBib29sZWFuID0gZmFsc2VcbiAgICApIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5uYW1lID0gZGVmYXVsdE5hbWU7XG4gICAgICAgIHRoaXMuYWJicmV2aWF0aW9uID0gZGVmYXVsdEFiYnI7XG4gICAgICAgIHRoaXMubGFuZ3VhZ2UgPSBkZWZhdWx0TGFuZ3VhZ2U7XG4gICAgICAgIHRoaXMuY2F0ZWdvcnkgPSBkZWZhdWx0Q2F0ZWdvcnk7XG4gICAgICAgIHRoaXMucHJvY2Vzc2luZ1J1bGVzID0gWy4uLmRlZmF1bHRQcm9jZXNzaW5nUnVsZXNdO1xuICAgICAgICB0aGlzLm9uU3VibWl0ID0gb25TdWJtaXQ7XG4gICAgICAgIHRoaXMuaXNFZGl0ID0gaXNFZGl0O1xuICAgIH1cblxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuXG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6IHRoaXMuaXNFZGl0ID8gJ0VkaXQgVHJhbnNsYXRpb24nIDogJ0FkZCBUcmFuc2xhdGlvbicgfSk7XG5cbiAgICAgICAgLy8gVHJhbnNsYXRpb24gTmFtZVxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnVHJhbnNsYXRpb24gTmFtZScpXG4gICAgICAgICAgICAuc2V0RGVzYygnRnVsbCBuYW1lIG9mIHRoZSB0cmFuc2xhdGlvbicpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ2UuZy4sIEFtZXJpY2FuIFN0YW5kYXJkIFZlcnNpb24nKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLm5hbWUpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIEFiYnJldmlhdGlvblxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnQWJicmV2aWF0aW9uJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdTaG9ydCBhYmJyZXZpYXRpb24gZm9yIHRoZSB0cmFuc2xhdGlvbicpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ2UuZy4sIEFTVicpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMuYWJicmV2aWF0aW9uKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWJicmV2aWF0aW9uID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIExhbmd1YWdlXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdMYW5ndWFnZScpXG4gICAgICAgICAgICAuc2V0RGVzYygnTGFuZ3VhZ2Ugb2YgdGhlIHRyYW5zbGF0aW9uJylcbiAgICAgICAgICAgIC5hZGREcm9wZG93bihkcm9wZG93biA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFuZ3VhZ2VzID0gW1xuICAgICAgICAgICAgICAgICAgICAnRW5nbGlzaCcsICdTcGFuaXNoJywgJ0ZyZW5jaCcsICdHZXJtYW4nLCAnSXRhbGlhbicsICdQb3J0dWd1ZXNlJyxcbiAgICAgICAgICAgICAgICAgICAgJ1J1c3NpYW4nLCAnQ2hpbmVzZScsICdKYXBhbmVzZScsICdLb3JlYW4nLCAnQXJhYmljJywgJ0hlYnJldycsXG4gICAgICAgICAgICAgICAgICAgICdHcmVlaycsICdMYXRpbicsICdTd2VkaXNoJywgJ05vcndlZ2lhbicsICdEYW5pc2gnLCAnRHV0Y2gnLFxuICAgICAgICAgICAgICAgICAgICAnUG9saXNoJywgJ0N6ZWNoJywgJ1Nsb3ZhaycsICdIdW5nYXJpYW4nLCAnUm9tYW5pYW4nLCAnQnVsZ2FyaWFuJyxcbiAgICAgICAgICAgICAgICAgICAgJ1VrcmFpbmlhbicsICdCZWxhcnVzaWFuJywgJ1NlcmJpYW4nLCAnQ3JvYXRpYW4nLCAnU2xvdmVuaWFuJyxcbiAgICAgICAgICAgICAgICAgICAgJ0VzdG9uaWFuJywgJ0xhdHZpYW4nLCAnTGl0aHVhbmlhbicsICdGaW5uaXNoJywgJ0ljZWxhbmRpYycsXG4gICAgICAgICAgICAgICAgICAgICdUdXJraXNoJywgJ1BlcnNpYW4nLCAnSGluZGknLCAnQmVuZ2FsaScsICdUaGFpJywgJ1ZpZXRuYW1lc2UnLFxuICAgICAgICAgICAgICAgICAgICAnSW5kb25lc2lhbicsICdNYWxheScsICdGaWxpcGlubycsICdPdGhlcidcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxhbmd1YWdlcy5mb3JFYWNoKGxhbmcgPT4gZHJvcGRvd24uYWRkT3B0aW9uKGxhbmcsIGxhbmcpKTtcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5zZXRWYWx1ZSh0aGlzLmxhbmd1YWdlKTtcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2UgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIENhdGVnb3J5XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdDYXRlZ29yeScpXG4gICAgICAgICAgICAuc2V0RGVzYygnQ2F0ZWdvcnkgb2YgdGhlIHRyYW5zbGF0aW9uJylcbiAgICAgICAgICAgIC5hZGREcm9wZG93bihkcm9wZG93biA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2F0ZWdvcmllcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgJ1N0YW5kYXJkJywgJ1N0dWR5JywgJ1BhcmFwaHJhc2UnLCAnTGl0ZXJhbCcsICdEeW5hbWljJyxcbiAgICAgICAgICAgICAgICAgICAgJ0hpc3RvcmljYWwnLCAnQ2F0aG9saWMnLCAnT3J0aG9kb3gnLCAnUHJvdGVzdGFudCcsXG4gICAgICAgICAgICAgICAgICAgICdKZXdpc2gnLCAnQWNhZGVtaWMnLCAnQ2hpbGRyZW4nLCAnT3RoZXInXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzLmZvckVhY2goY2F0ID0+IGRyb3Bkb3duLmFkZE9wdGlvbihjYXQsIGNhdCkpO1xuICAgICAgICAgICAgICAgIGRyb3Bkb3duLnNldFZhbHVlKHRoaXMuY2F0ZWdvcnkpO1xuICAgICAgICAgICAgICAgIGRyb3Bkb3duLm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXRlZ29yeSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gUHJvY2Vzc2luZyBSdWxlcyBTZWN0aW9uXG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdQcm9jZXNzaW5nIFJ1bGVzJyB9KTtcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdwJywgeyBcbiAgICAgICAgICAgIHRleHQ6ICdBZGQgcmVnZXggcGF0dGVybnMgdG8gZm9ybWF0IHZlcnNlIHRleHQuIEV4YW1wbGU6IFxcXFxbXFxcXHcrXFxcXF0gPSA8ZW0+JCY8L2VtPiB0byBtYWtlIGJyYWNrZXRlZCB0ZXh0IGl0YWxpYy4nLFxuICAgICAgICAgICAgY2xzOiAnc2V0dGluZy1pdGVtLWRlc2NyaXB0aW9uJ1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBydWxlc0NvbnRhaW5lciA9IGNvbnRlbnRFbC5jcmVhdGVEaXYoeyBjbHM6ICdwcm9jZXNzaW5nLXJ1bGVzLWNvbnRhaW5lcicgfSk7XG4gICAgICAgIHRoaXMucmVuZGVyUHJvY2Vzc2luZ1J1bGVzKHJ1bGVzQ29udGFpbmVyKTtcblxuICAgICAgICAvLyBBZGQgUnVsZSBCdXR0b25cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgICAgICAgLmFkZEJ1dHRvbihidXR0b24gPT4gYnV0dG9uXG4gICAgICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoJ0FkZCBQcm9jZXNzaW5nIFJ1bGUnKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzaW5nUnVsZXMucHVzaCh7IHJlZ2V4OiAnJywgZm9ybWF0dGluZzogJycsIGVzY2FwZTogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUHJvY2Vzc2luZ1J1bGVzKHJ1bGVzQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgLy8gQnV0dG9uc1xuICAgICAgICBjb25zdCBidXR0b25Db250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiAnc2V0dGluZy1pdGVtLWNvbnRyb2wnIH0pO1xuICAgICAgICBcbiAgICAgICAgYnV0dG9uQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7XG4gICAgICAgICAgICB0ZXh0OiAnQ2FuY2VsJyxcbiAgICAgICAgICAgIGNsczogJ21vZC13YXJuaW5nJ1xuICAgICAgICB9KS5vbmNsaWNrID0gKCkgPT4gdGhpcy5jbG9zZSgpO1xuXG4gICAgICAgIGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywge1xuICAgICAgICAgICAgdGV4dDogdGhpcy5pc0VkaXQgPyAnVXBkYXRlJyA6ICdBZGQnLFxuICAgICAgICAgICAgY2xzOiAnbW9kLWN0YSdcbiAgICAgICAgfSkub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLm5hbWUudHJpbSgpICYmIHRoaXMuYWJicmV2aWF0aW9uLnRyaW0oKSkge1xuICAgICAgICAgICAgICAgIHRoaXMub25TdWJtaXQodGhpcy5uYW1lLnRyaW0oKSwgdGhpcy5hYmJyZXZpYXRpb24udHJpbSgpLCB0aGlzLmxhbmd1YWdlLCB0aGlzLmNhdGVnb3J5LCB0aGlzLnByb2Nlc3NpbmdSdWxlcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdQbGVhc2UgZmlsbCBpbiBhbGwgcmVxdWlyZWQgZmllbGRzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJQcm9jZXNzaW5nUnVsZXMoY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBjb250YWluZXIuZW1wdHkoKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMucHJvY2Vzc2luZ1J1bGVzLmZvckVhY2goKHJ1bGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBydWxlQ29udGFpbmVyID0gY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ3Byb2Nlc3NpbmctcnVsZS1pdGVtJyB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUmVnZXggUGF0dGVyblxuICAgICAgICAgICAgbmV3IFNldHRpbmcocnVsZUNvbnRhaW5lcilcbiAgICAgICAgICAgICAgICAuc2V0TmFtZSgnUmVnZXggUGF0dGVybicpXG4gICAgICAgICAgICAgICAgLnNldERlc2MoJ1JlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCcpXG4gICAgICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignZS5nLiwgXFxcXFtcXFxcdytcXFxcXScpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZShydWxlLnJlZ2V4KVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzaW5nUnVsZXNbaW5kZXhdLnJlZ2V4ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgLy8gRm9ybWF0dGluZ1xuICAgICAgICAgICAgbmV3IFNldHRpbmcocnVsZUNvbnRhaW5lcilcbiAgICAgICAgICAgICAgICAuc2V0TmFtZSgnRm9ybWF0dGluZycpXG4gICAgICAgICAgICAgICAgLnNldERlc2MoJ1JlcGxhY2VtZW50IHRleHQgKHVzZSAkJiBmb3IgbWF0Y2hlZCB0ZXh0KScpXG4gICAgICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignZS5nLiwgPGVtPiQmPC9lbT4nKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUocnVsZS5mb3JtYXR0aW5nKVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzaW5nUnVsZXNbaW5kZXhdLmZvcm1hdHRpbmcgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAvLyBFc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhydWxlQ29udGFpbmVyKVxuICAgICAgICAgICAgICAgIC5zZXROYW1lKCdFc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzJylcbiAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXNjYXBlIFssIF0sIDwsID4sICYgaW4gdGhlIG1hdGNoZWQgdGV4dCBmb3IgSFRNTCBvdXRwdXQuJylcbiAgICAgICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKCEhcnVsZS5lc2NhcGUpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NpbmdSdWxlc1tpbmRleF0uZXNjYXBlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgLy8gUmVtb3ZlIEJ1dHRvblxuICAgICAgICAgICAgbmV3IFNldHRpbmcocnVsZUNvbnRhaW5lcilcbiAgICAgICAgICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoJ1JlbW92ZScpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRXYXJuaW5nKClcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzaW5nUnVsZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUHJvY2Vzc2luZ1J1bGVzKGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25DbG9zZSgpIHtcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuICAgIH1cbn0gIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLGNBQVEsV0FBVztBQUFBLFFBQ2pCLE9BQU87QUFBQSxVQUNMLGlCQUFpQjtBQUFBLFVBQ2pCLE1BQU07QUFBQSxVQUNOLFdBQVc7QUFBQSxVQUNYLGVBQWU7QUFBQSxVQUNmLFNBQVM7QUFBQSxVQUNULFNBQVM7QUFBQSxVQUNULGVBQWU7QUFBQSxVQUNmLGFBQWE7QUFBQSxVQUNiLFlBQVk7QUFBQSxVQUNaLGNBQWM7QUFBQSxVQUNkLFdBQVc7QUFBQSxVQUNYLE9BQU87QUFBQSxVQUNQLGtCQUFrQjtBQUFBLFVBQ2xCLFVBQVU7QUFBQSxVQUNWLGlCQUFpQjtBQUFBLFVBQ2pCLG1CQUFtQjtBQUFBLFVBQ25CLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLG9CQUFvQjtBQUFBLFVBQ3BCLHFCQUFxQjtBQUFBLFVBQ3JCLG1CQUFtQjtBQUFBLFVBQ25CLGlCQUFpQjtBQUFBLFVBQ2pCLFVBQVU7QUFBQTtBQUFBLFFBRVosT0FBTztBQUFBLFVBQ0wsaUJBQWlCO0FBQUEsVUFDakIsTUFBTTtBQUFBLFVBQ04sV0FBVztBQUFBLFVBQ1gsZUFBZTtBQUFBLFVBQ2YsU0FBUztBQUFBLFVBQ1QsU0FBUztBQUFBLFVBQ1QsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsWUFBWTtBQUFBLFVBQ1osY0FBYztBQUFBLFVBQ2QsV0FBVztBQUFBLFVBQ1gsT0FBTztBQUFBLFVBQ1Asa0JBQWtCO0FBQUEsVUFDbEIsdUJBQXVCO0FBQUEsVUFDdkIsVUFBVTtBQUFBLFVBQ1YsaUJBQWlCO0FBQUEsVUFDakIsbUJBQW1CO0FBQUEsVUFDbkIsT0FBTztBQUFBLFVBQ1AsUUFBUTtBQUFBLFVBQ1Isb0JBQW9CO0FBQUEsVUFDcEIscUJBQXFCO0FBQUEsVUFDckIsbUJBQW1CO0FBQUEsVUFDbkIsaUJBQWlCO0FBQUEsVUFDakIsVUFBVTtBQUFBLFVBQ1YsUUFBUTtBQUFBLFlBQ04sV0FBVztBQUFBLFlBQ1gsWUFBWTtBQUFBLFlBQ1osY0FBYztBQUFBO0FBQUEsVUFFaEIsU0FBUztBQUFBLFVBQ1QsWUFBWTtBQUFBLFlBQ1YsVUFBVTtBQUFBLFlBQ1YsVUFBVTtBQUFBLFlBQ1YsV0FBVztBQUFBO0FBQUEsVUFFYixVQUFVO0FBQUEsVUFDVixXQUFXO0FBQUEsVUFDWCxVQUFVO0FBQUEsVUFDVixPQUFPO0FBQUE7QUFBQTtBQUFBLE9BSVYsS0FBSztBQUFBO0FBQUE7OztBQ3ZFUjtBQUFBO0FBQ0EsSUFBQyxZQUFXO0FBQ1YsVUFBSSxRQUFRLFVBQVUsU0FBUyxTQUFTLFlBQVksVUFBVSxlQUM1RCxRQUFRLEdBQUcsT0FDWCxVQUFVLEdBQUc7QUFFZixlQUFTLFdBQVc7QUFDbEIsWUFBSSxHQUFHLEtBQUssS0FBSyxRQUFRLFNBQVM7QUFDbEMsaUJBQVMsVUFBVSxJQUFJLFVBQVUsS0FBSyxVQUFVLFNBQVMsTUFBTSxLQUFLLFdBQVcsS0FBSztBQUNwRixZQUFJLFdBQVcsT0FBTyxTQUFTO0FBQzdCLGlCQUFPLE9BQU8sTUFBTSxNQUFNO0FBQUEsZUFDckI7QUFDTCxlQUFLLElBQUksR0FBRyxNQUFNLFFBQVEsUUFBUSxJQUFJLEtBQUssS0FBSztBQUM5QyxxQkFBUyxRQUFRO0FBQ2pCLGdCQUFJLFVBQVUsTUFBTTtBQUNsQixtQkFBSyxPQUFPLFFBQVE7QUFDbEIsb0JBQUksQ0FBQyxRQUFRLEtBQUssUUFBUTtBQUFNO0FBQ2hDLHVCQUFPLE9BQU8sT0FBTztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBSzdCLGVBQU87QUFBQTtBQUdULG1CQUFhLFNBQVMsS0FBSztBQUN6QixlQUFPLENBQUMsQ0FBQyxPQUFPLE9BQU8sVUFBVSxTQUFTLEtBQUssU0FBUztBQUFBO0FBRzFELGlCQUFXLFNBQVMsS0FBSztBQUN2QixZQUFJO0FBQ0osZUFBTyxDQUFDLENBQUMsT0FBUyxRQUFNLE9BQU8sU0FBUyxjQUFjLFFBQVE7QUFBQTtBQUdoRSxnQkFBVSxTQUFTLEtBQUs7QUFDdEIsWUFBSSxXQUFXLE1BQU0sVUFBVTtBQUM3QixpQkFBTyxNQUFNLFFBQVE7QUFBQSxlQUNoQjtBQUNMLGlCQUFPLE9BQU8sVUFBVSxTQUFTLEtBQUssU0FBUztBQUFBO0FBQUE7QUFJbkQsZ0JBQVUsU0FBUyxLQUFLO0FBQ3RCLFlBQUk7QUFDSixZQUFJLFFBQVEsTUFBTTtBQUNoQixpQkFBTyxDQUFDLElBQUk7QUFBQSxlQUNQO0FBQ0wsZUFBSyxPQUFPLEtBQUs7QUFDZixnQkFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLO0FBQU07QUFDN0IsbUJBQU87QUFBQTtBQUVULGlCQUFPO0FBQUE7QUFBQTtBQUlYLHNCQUFnQixTQUFTLEtBQUs7QUFDNUIsWUFBSSxNQUFNO0FBQ1YsZUFBTyxTQUFTLFFBQVMsU0FBUSxPQUFPLGVBQWUsU0FBVSxRQUFPLE1BQU0sZ0JBQWlCLE9BQU8sU0FBUyxjQUFnQixnQkFBZ0IsUUFBVSxTQUFTLFVBQVUsU0FBUyxLQUFLLFVBQVUsU0FBUyxVQUFVLFNBQVMsS0FBSztBQUFBO0FBR3ZPLGlCQUFXLFNBQVMsS0FBSztBQUN2QixZQUFJLFdBQVcsSUFBSSxVQUFVO0FBQzNCLGlCQUFPLElBQUk7QUFBQSxlQUNOO0FBQ0wsaUJBQU87QUFBQTtBQUFBO0FBSVgsY0FBTyxRQUFRLFNBQVM7QUFFeEIsY0FBTyxRQUFRLGFBQWE7QUFFNUIsY0FBTyxRQUFRLFdBQVc7QUFFMUIsY0FBTyxRQUFRLFVBQVU7QUFFekIsY0FBTyxRQUFRLFVBQVU7QUFFekIsY0FBTyxRQUFRLGdCQUFnQjtBQUUvQixjQUFPLFFBQVEsV0FBVztBQUFBLE9BRXpCLEtBQUs7QUFBQTtBQUFBOzs7QUNsRlI7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUk7QUFFSixjQUFPLFVBQVUsdUJBQXdCLFdBQVc7QUFDbEQseUNBQWdDO0FBQUE7QUFFaEMsOEJBQXFCLFVBQVUsYUFBYSxTQUFTLFNBQVMsU0FBUztBQUNyRSxpQkFBTztBQUFBO0FBR1QsOEJBQXFCLFVBQVUscUJBQXFCLFNBQVMsZUFBZSxVQUFVLFVBQVU7QUFDOUYsZ0JBQU0sSUFBSSxNQUFNO0FBQUE7QUFHbEIsOEJBQXFCLFVBQVUsaUJBQWlCLFNBQVMsY0FBYyxlQUFlLFNBQVM7QUFDN0YsZ0JBQU0sSUFBSSxNQUFNO0FBQUE7QUFHbEIsOEJBQXFCLFVBQVUscUJBQXFCLFNBQVMsT0FBTztBQUNsRSxnQkFBTSxJQUFJLE1BQU07QUFBQTtBQUdsQiw4QkFBcUIsVUFBVSxhQUFhLFNBQVMsU0FBUyxTQUFTO0FBQ3JFLGdCQUFNLElBQUksTUFBTTtBQUFBO0FBR2xCLGVBQU87QUFBQTtBQUFBLE9BSVIsS0FBSztBQUFBO0FBQUE7OztBQy9CUjtBQUFBO0FBQ0EsSUFBQyxZQUFXO0FBQ1YsVUFBSTtBQUVKLGNBQU8sVUFBVSxxQkFBc0IsV0FBVztBQUNoRCx1Q0FBOEI7QUFBQTtBQUU5Qiw0QkFBbUIsVUFBVSxjQUFjLFNBQVMsT0FBTztBQUN6RCxnQkFBTSxJQUFJLE1BQU07QUFBQTtBQUdsQixlQUFPO0FBQUE7QUFBQSxPQUlSLEtBQUs7QUFBQTtBQUFBOzs7QUNmUjtBQUFBO0FBQ0EsSUFBQyxZQUFXO0FBQ1YsVUFBSTtBQUVKLGNBQU8sVUFBVSxtQkFBb0IsV0FBVztBQUM5QyxtQ0FBMEIsS0FBSztBQUM3QixlQUFLLE1BQU0sT0FBTztBQUFBO0FBR3BCLGVBQU8sZUFBZSxrQkFBaUIsV0FBVyxVQUFVO0FBQUEsVUFDMUQsS0FBSyxXQUFXO0FBQ2QsbUJBQU8sS0FBSyxJQUFJO0FBQUE7QUFBQTtBQUlwQiwwQkFBaUIsVUFBVSxPQUFPLFNBQVMsT0FBTztBQUNoRCxpQkFBTyxLQUFLLElBQUksVUFBVTtBQUFBO0FBRzVCLDBCQUFpQixVQUFVLFdBQVcsU0FBUyxLQUFLO0FBQ2xELGlCQUFPLEtBQUssSUFBSSxRQUFRLFNBQVM7QUFBQTtBQUduQyxlQUFPO0FBQUE7QUFBQSxPQUlSLEtBQUs7QUFBQTtBQUFBOzs7QUMzQlI7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUkscUJBQXFCLG9CQUFvQjtBQUU3QywyQkFBcUI7QUFFckIseUJBQW1CO0FBRW5CLGNBQU8sVUFBVSxzQkFBdUIsV0FBVztBQUNqRCx3Q0FBK0I7QUFDN0IsY0FBSTtBQUNKLGVBQUssZ0JBQWdCO0FBQUEsWUFDbkIsa0JBQWtCO0FBQUEsWUFDbEIsa0JBQWtCO0FBQUEsWUFDbEIsWUFBWTtBQUFBLFlBQ1osMEJBQTBCO0FBQUEsWUFDMUIsOEJBQThCO0FBQUEsWUFDOUIsWUFBWTtBQUFBLFlBQ1osaUJBQWlCLElBQUk7QUFBQSxZQUNyQixXQUFXO0FBQUEsWUFDWCxzQkFBc0I7QUFBQSxZQUN0QixjQUFjO0FBQUEsWUFDZCwwQkFBMEI7QUFBQSxZQUMxQix3QkFBd0I7QUFBQSxZQUN4QixtQkFBbUI7QUFBQSxZQUNuQixlQUFlO0FBQUEsWUFDZix3QkFBd0I7QUFBQSxZQUN4QixZQUFZO0FBQUEsWUFDWixlQUFlO0FBQUE7QUFFakIsZUFBSyxTQUFTLGFBQWEsT0FBTyxPQUFPLEtBQUs7QUFBQTtBQUdoRCxlQUFPLGVBQWUscUJBQW9CLFdBQVcsa0JBQWtCO0FBQUEsVUFDckUsS0FBSyxXQUFXO0FBQ2QsbUJBQU8sSUFBSSxpQkFBaUIsT0FBTyxLQUFLLEtBQUs7QUFBQTtBQUFBO0FBSWpELDZCQUFvQixVQUFVLGVBQWUsU0FBUyxNQUFNO0FBQzFELGNBQUksS0FBSyxPQUFPLGVBQWUsT0FBTztBQUNwQyxtQkFBTyxLQUFLLE9BQU87QUFBQSxpQkFDZDtBQUNMLG1CQUFPO0FBQUE7QUFBQTtBQUlYLDZCQUFvQixVQUFVLGtCQUFrQixTQUFTLE1BQU0sT0FBTztBQUNwRSxpQkFBTztBQUFBO0FBR1QsNkJBQW9CLFVBQVUsZUFBZSxTQUFTLE1BQU0sT0FBTztBQUNqRSxjQUFJLFNBQVMsTUFBTTtBQUNqQixtQkFBTyxLQUFLLE9BQU8sUUFBUTtBQUFBLGlCQUN0QjtBQUNMLG1CQUFPLE9BQU8sS0FBSyxPQUFPO0FBQUE7QUFBQTtBQUk5QixlQUFPO0FBQUE7QUFBQSxPQUlSLEtBQUs7QUFBQTtBQUFBOzs7QUMvRFI7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLGNBQU8sVUFBVTtBQUFBLFFBQ2YsU0FBUztBQUFBLFFBQ1QsV0FBVztBQUFBLFFBQ1gsTUFBTTtBQUFBLFFBQ04sT0FBTztBQUFBLFFBQ1AsaUJBQWlCO0FBQUEsUUFDakIsbUJBQW1CO0FBQUEsUUFDbkIsdUJBQXVCO0FBQUEsUUFDdkIsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1Qsa0JBQWtCO0FBQUEsUUFDbEIscUJBQXFCO0FBQUEsUUFDckIsYUFBYTtBQUFBLFFBQ2IsS0FBSztBQUFBLFFBQ0wsc0JBQXNCO0FBQUEsUUFDdEIsb0JBQW9CO0FBQUEsUUFDcEIsT0FBTztBQUFBO0FBQUEsT0FHUixLQUFLO0FBQUE7QUFBQTs7O0FDdEJSO0FBQUE7QUFDQSxJQUFDLFlBQVc7QUFDVixVQUFJLFVBQVUsY0FBYztBQUU1QixpQkFBVztBQUVYLGdCQUFVO0FBRVYsY0FBTyxVQUFVLGVBQWdCLFdBQVc7QUFDMUMsK0JBQXNCLFFBQVEsTUFBTSxPQUFPO0FBQ3pDLGVBQUssU0FBUztBQUNkLGNBQUksS0FBSyxRQUFRO0FBQ2YsaUJBQUssVUFBVSxLQUFLLE9BQU87QUFDM0IsaUJBQUssWUFBWSxLQUFLLE9BQU87QUFBQTtBQUUvQixjQUFJLFFBQVEsTUFBTTtBQUNoQixrQkFBTSxJQUFJLE1BQU0sNkJBQTZCLEtBQUssVUFBVTtBQUFBO0FBRTlELGVBQUssT0FBTyxLQUFLLFVBQVUsS0FBSztBQUNoQyxlQUFLLFFBQVEsS0FBSyxVQUFVLFNBQVM7QUFDckMsZUFBSyxPQUFPLFNBQVM7QUFDckIsZUFBSyxPQUFPO0FBQ1osZUFBSyxpQkFBaUI7QUFBQTtBQUd4QixlQUFPLGVBQWUsY0FBYSxXQUFXLFlBQVk7QUFBQSxVQUN4RCxLQUFLLFdBQVc7QUFDZCxtQkFBTyxLQUFLO0FBQUE7QUFBQTtBQUloQixlQUFPLGVBQWUsY0FBYSxXQUFXLGdCQUFnQjtBQUFBLFVBQzVELEtBQUssV0FBVztBQUNkLG1CQUFPLEtBQUs7QUFBQTtBQUFBO0FBSWhCLGVBQU8sZUFBZSxjQUFhLFdBQVcsZUFBZTtBQUFBLFVBQzNELEtBQUssV0FBVztBQUNkLG1CQUFPLEtBQUs7QUFBQTtBQUFBLFVBRWQsS0FBSyxTQUFTLE9BQU87QUFDbkIsbUJBQU8sS0FBSyxRQUFRLFNBQVM7QUFBQTtBQUFBO0FBSWpDLGVBQU8sZUFBZSxjQUFhLFdBQVcsZ0JBQWdCO0FBQUEsVUFDNUQsS0FBSyxXQUFXO0FBQ2QsbUJBQU87QUFBQTtBQUFBO0FBSVgsZUFBTyxlQUFlLGNBQWEsV0FBVyxVQUFVO0FBQUEsVUFDdEQsS0FBSyxXQUFXO0FBQ2QsbUJBQU87QUFBQTtBQUFBO0FBSVgsZUFBTyxlQUFlLGNBQWEsV0FBVyxhQUFhO0FBQUEsVUFDekQsS0FBSyxXQUFXO0FBQ2QsbUJBQU8sS0FBSztBQUFBO0FBQUE7QUFJaEIsZUFBTyxlQUFlLGNBQWEsV0FBVyxhQUFhO0FBQUEsVUFDekQsS0FBSyxXQUFXO0FBQ2QsbUJBQU87QUFBQTtBQUFBO0FBSVgsc0JBQWEsVUFBVSxRQUFRLFdBQVc7QUFDeEMsaUJBQU8sT0FBTyxPQUFPO0FBQUE7QUFHdkIsc0JBQWEsVUFBVSxXQUFXLFNBQVMsU0FBUztBQUNsRCxpQkFBTyxLQUFLLFFBQVEsT0FBTyxVQUFVLE1BQU0sS0FBSyxRQUFRLE9BQU8sY0FBYztBQUFBO0FBRy9FLHNCQUFhLFVBQVUsWUFBWSxTQUFTLE1BQU07QUFDaEQsaUJBQU8sUUFBUSxLQUFLO0FBQ3BCLGNBQUksUUFBUSxNQUFNO0FBQ2hCLG1CQUFPLGNBQWMsS0FBSyxPQUFPLE9BQU87QUFBQSxpQkFDbkM7QUFDTCxtQkFBTyxpQkFBaUIsT0FBTyxpQkFBaUIsS0FBSyxPQUFPLE9BQU87QUFBQTtBQUFBO0FBSXZFLHNCQUFhLFVBQVUsY0FBYyxTQUFTLE1BQU07QUFDbEQsY0FBSSxLQUFLLGlCQUFpQixLQUFLLGNBQWM7QUFDM0MsbUJBQU87QUFBQTtBQUVULGNBQUksS0FBSyxXQUFXLEtBQUssUUFBUTtBQUMvQixtQkFBTztBQUFBO0FBRVQsY0FBSSxLQUFLLGNBQWMsS0FBSyxXQUFXO0FBQ3JDLG1CQUFPO0FBQUE7QUFFVCxjQUFJLEtBQUssVUFBVSxLQUFLLE9BQU87QUFDN0IsbUJBQU87QUFBQTtBQUVULGlCQUFPO0FBQUE7QUFHVCxlQUFPO0FBQUE7QUFBQSxPQUlSLEtBQUs7QUFBQTtBQUFBOzs7QUMzR1I7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUk7QUFFSixjQUFPLFVBQVUsa0JBQW1CLFdBQVc7QUFDN0Msa0NBQXlCLE9BQU87QUFDOUIsZUFBSyxRQUFRO0FBQUE7QUFHZixlQUFPLGVBQWUsaUJBQWdCLFdBQVcsVUFBVTtBQUFBLFVBQ3pELEtBQUssV0FBVztBQUNkLG1CQUFPLE9BQU8sS0FBSyxLQUFLLE9BQU8sVUFBVTtBQUFBO0FBQUE7QUFJN0MseUJBQWdCLFVBQVUsUUFBUSxXQUFXO0FBQzNDLGlCQUFPLEtBQUssUUFBUTtBQUFBO0FBR3RCLHlCQUFnQixVQUFVLGVBQWUsU0FBUyxNQUFNO0FBQ3RELGlCQUFPLEtBQUssTUFBTTtBQUFBO0FBR3BCLHlCQUFnQixVQUFVLGVBQWUsU0FBUyxNQUFNO0FBQ3RELGNBQUk7QUFDSixvQkFBVSxLQUFLLE1BQU0sS0FBSztBQUMxQixlQUFLLE1BQU0sS0FBSyxZQUFZO0FBQzVCLGlCQUFPLFdBQVc7QUFBQTtBQUdwQix5QkFBZ0IsVUFBVSxrQkFBa0IsU0FBUyxNQUFNO0FBQ3pELGNBQUk7QUFDSixvQkFBVSxLQUFLLE1BQU07QUFDckIsaUJBQU8sS0FBSyxNQUFNO0FBQ2xCLGlCQUFPLFdBQVc7QUFBQTtBQUdwQix5QkFBZ0IsVUFBVSxPQUFPLFNBQVMsT0FBTztBQUMvQyxpQkFBTyxLQUFLLE1BQU0sT0FBTyxLQUFLLEtBQUssT0FBTyxXQUFXO0FBQUE7QUFHdkQseUJBQWdCLFVBQVUsaUJBQWlCLFNBQVMsY0FBYyxXQUFXO0FBQzNFLGdCQUFNLElBQUksTUFBTTtBQUFBO0FBR2xCLHlCQUFnQixVQUFVLGlCQUFpQixTQUFTLE1BQU07QUFDeEQsZ0JBQU0sSUFBSSxNQUFNO0FBQUE7QUFHbEIseUJBQWdCLFVBQVUsb0JBQW9CLFNBQVMsY0FBYyxXQUFXO0FBQzlFLGdCQUFNLElBQUksTUFBTTtBQUFBO0FBR2xCLGVBQU87QUFBQTtBQUFBLE9BSVIsS0FBSztBQUFBO0FBQUE7OztBQ3pEUjtBQUFBO0FBQ0EsSUFBQyxZQUFXO0FBQ1YsVUFBSSxVQUFVLGNBQWMsWUFBWSxpQkFBaUIsU0FBUyxVQUFVLFlBQVksVUFBVSxLQUNoRyxTQUFTLFNBQVMsT0FBTyxRQUFRO0FBQUUsaUJBQVMsT0FBTyxRQUFRO0FBQUUsY0FBSSxRQUFRLEtBQUssUUFBUTtBQUFNLGtCQUFNLE9BQU8sT0FBTztBQUFBO0FBQVEsd0JBQWdCO0FBQUUsZUFBSyxjQUFjO0FBQUE7QUFBUyxhQUFLLFlBQVksT0FBTztBQUFXLGNBQU0sWUFBWSxJQUFJO0FBQVEsY0FBTSxZQUFZLE9BQU87QUFBVyxlQUFPO0FBQUEsU0FDbFIsVUFBVSxHQUFHO0FBRWYsWUFBTSxtQkFBc0IsV0FBVyxJQUFJLFVBQVUsYUFBYSxJQUFJLFlBQVksV0FBVyxJQUFJO0FBRWpHLGdCQUFVO0FBRVYsaUJBQVc7QUFFWCxxQkFBZTtBQUVmLHdCQUFrQjtBQUVsQixjQUFPLFVBQVUsYUFBYyxTQUFTLFlBQVk7QUFDbEQsZUFBTyxhQUFZO0FBRW5CLDZCQUFvQixRQUFRLE1BQU0sWUFBWTtBQUM1QyxjQUFJLE9BQU8sR0FBRyxLQUFLO0FBQ25CLHNCQUFXLFVBQVUsWUFBWSxLQUFLLE1BQU07QUFDNUMsY0FBSSxRQUFRLE1BQU07QUFDaEIsa0JBQU0sSUFBSSxNQUFNLDJCQUEyQixLQUFLO0FBQUE7QUFFbEQsZUFBSyxPQUFPLEtBQUssVUFBVSxLQUFLO0FBQ2hDLGVBQUssT0FBTyxTQUFTO0FBQ3JCLGVBQUssVUFBVTtBQUNmLGVBQUssaUJBQWlCO0FBQ3RCLGNBQUksY0FBYyxNQUFNO0FBQ3RCLGlCQUFLLFVBQVU7QUFBQTtBQUVqQixjQUFJLE9BQU8sU0FBUyxTQUFTLFVBQVU7QUFDckMsaUJBQUssU0FBUztBQUNkLGlCQUFLLGlCQUFpQjtBQUN0QixtQkFBTyxhQUFhO0FBQ3BCLGdCQUFJLE9BQU8sVUFBVTtBQUNuQixxQkFBTyxPQUFPO0FBQ2QsbUJBQUssSUFBSSxHQUFHLE1BQU0sS0FBSyxRQUFRLElBQUksS0FBSyxLQUFLO0FBQzNDLHdCQUFRLEtBQUs7QUFDYixvQkFBSSxNQUFNLFNBQVMsU0FBUyxTQUFTO0FBQ25DLHdCQUFNLE9BQU8sS0FBSztBQUNsQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFPVixlQUFPLGVBQWUsWUFBVyxXQUFXLFdBQVc7QUFBQSxVQUNyRCxLQUFLLFdBQVc7QUFDZCxtQkFBTyxLQUFLO0FBQUE7QUFBQTtBQUloQixlQUFPLGVBQWUsWUFBVyxXQUFXLGdCQUFnQjtBQUFBLFVBQzFELEtBQUssV0FBVztBQUNkLG1CQUFPO0FBQUE7QUFBQTtBQUlYLGVBQU8sZUFBZSxZQUFXLFdBQVcsVUFBVTtBQUFBLFVBQ3BELEtBQUssV0FBVztBQUNkLG1CQUFPO0FBQUE7QUFBQTtBQUlYLGVBQU8sZUFBZSxZQUFXLFdBQVcsYUFBYTtBQUFBLFVBQ3ZELEtBQUssV0FBVztBQUNkLG1CQUFPLEtBQUs7QUFBQTtBQUFBO0FBSWhCLGVBQU8sZUFBZSxZQUFXLFdBQVcsTUFBTTtBQUFBLFVBQ2hELEtBQUssV0FBVztBQUNkLGtCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBQUE7QUFJakUsZUFBTyxlQUFlLFlBQVcsV0FBVyxhQUFhO0FBQUEsVUFDdkQsS0FBSyxXQUFXO0FBQ2Qsa0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFBQTtBQUlqRSxlQUFPLGVBQWUsWUFBVyxXQUFXLGFBQWE7QUFBQSxVQUN2RCxLQUFLLFdBQVc7QUFDZCxrQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUFBO0FBSWpFLGVBQU8sZUFBZSxZQUFXLFdBQVcsY0FBYztBQUFBLFVBQ3hELEtBQUssV0FBVztBQUNkLGdCQUFJLENBQUMsS0FBSyxnQkFBZ0IsQ0FBQyxLQUFLLGFBQWEsT0FBTztBQUNsRCxtQkFBSyxlQUFlLElBQUksZ0JBQWdCLEtBQUs7QUFBQTtBQUUvQyxtQkFBTyxLQUFLO0FBQUE7QUFBQTtBQUloQixvQkFBVyxVQUFVLFFBQVEsV0FBVztBQUN0QyxjQUFJLEtBQUssU0FBUyxZQUFZO0FBQzlCLHVCQUFhLE9BQU8sT0FBTztBQUMzQixjQUFJLFdBQVcsUUFBUTtBQUNyQix1QkFBVyxpQkFBaUI7QUFBQTtBQUU5QixxQkFBVyxVQUFVO0FBQ3JCLGlCQUFPLEtBQUs7QUFDWixlQUFLLFdBQVcsTUFBTTtBQUNwQixnQkFBSSxDQUFDLFFBQVEsS0FBSyxNQUFNO0FBQVU7QUFDbEMsa0JBQU0sS0FBSztBQUNYLHVCQUFXLFFBQVEsV0FBVyxJQUFJO0FBQUE7QUFFcEMscUJBQVcsV0FBVztBQUN0QixlQUFLLFNBQVMsUUFBUSxTQUFTLE9BQU87QUFDcEMsZ0JBQUk7QUFDSiwwQkFBYyxNQUFNO0FBQ3BCLHdCQUFZLFNBQVM7QUFDckIsbUJBQU8sV0FBVyxTQUFTLEtBQUs7QUFBQTtBQUVsQyxpQkFBTztBQUFBO0FBR1Qsb0JBQVcsVUFBVSxZQUFZLFNBQVMsTUFBTSxPQUFPO0FBQ3JELGNBQUksU0FBUztBQUNiLGNBQUksUUFBUSxNQUFNO0FBQ2hCLG1CQUFPLFNBQVM7QUFBQTtBQUVsQixjQUFJLFNBQVMsT0FBTztBQUNsQixpQkFBSyxXQUFXLE1BQU07QUFDcEIsa0JBQUksQ0FBQyxRQUFRLEtBQUssTUFBTTtBQUFVO0FBQ2xDLHlCQUFXLEtBQUs7QUFDaEIsbUJBQUssVUFBVSxTQUFTO0FBQUE7QUFBQSxpQkFFckI7QUFDTCxnQkFBSSxXQUFXLFFBQVE7QUFDckIsc0JBQVEsTUFBTTtBQUFBO0FBRWhCLGdCQUFJLEtBQUssUUFBUSxzQkFBdUIsU0FBUyxNQUFPO0FBQ3RELG1CQUFLLFFBQVEsUUFBUSxJQUFJLGFBQWEsTUFBTSxNQUFNO0FBQUEsdUJBQ3pDLFNBQVMsTUFBTTtBQUN4QixtQkFBSyxRQUFRLFFBQVEsSUFBSSxhQUFhLE1BQU0sTUFBTTtBQUFBO0FBQUE7QUFHdEQsaUJBQU87QUFBQTtBQUdULG9CQUFXLFVBQVUsa0JBQWtCLFNBQVMsTUFBTTtBQUNwRCxjQUFJLFNBQVMsR0FBRztBQUNoQixjQUFJLFFBQVEsTUFBTTtBQUNoQixrQkFBTSxJQUFJLE1BQU0sNkJBQTZCLEtBQUs7QUFBQTtBQUVwRCxpQkFBTyxTQUFTO0FBQ2hCLGNBQUksTUFBTSxRQUFRLE9BQU87QUFDdkIsaUJBQUssSUFBSSxHQUFHLE1BQU0sS0FBSyxRQUFRLElBQUksS0FBSyxLQUFLO0FBQzNDLHdCQUFVLEtBQUs7QUFDZixxQkFBTyxLQUFLLFFBQVE7QUFBQTtBQUFBLGlCQUVqQjtBQUNMLG1CQUFPLEtBQUssUUFBUTtBQUFBO0FBRXRCLGlCQUFPO0FBQUE7QUFHVCxvQkFBVyxVQUFVLFdBQVcsU0FBUyxTQUFTO0FBQ2hELGlCQUFPLEtBQUssUUFBUSxPQUFPLFFBQVEsTUFBTSxLQUFLLFFBQVEsT0FBTyxjQUFjO0FBQUE7QUFHN0Usb0JBQVcsVUFBVSxNQUFNLFNBQVMsTUFBTSxPQUFPO0FBQy9DLGlCQUFPLEtBQUssVUFBVSxNQUFNO0FBQUE7QUFHOUIsb0JBQVcsVUFBVSxJQUFJLFNBQVMsTUFBTSxPQUFPO0FBQzdDLGlCQUFPLEtBQUssVUFBVSxNQUFNO0FBQUE7QUFHOUIsb0JBQVcsVUFBVSxlQUFlLFNBQVMsTUFBTTtBQUNqRCxjQUFJLEtBQUssUUFBUSxlQUFlLE9BQU87QUFDckMsbUJBQU8sS0FBSyxRQUFRLE1BQU07QUFBQSxpQkFDckI7QUFDTCxtQkFBTztBQUFBO0FBQUE7QUFJWCxvQkFBVyxVQUFVLGVBQWUsU0FBUyxNQUFNLE9BQU87QUFDeEQsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0Qsb0JBQVcsVUFBVSxtQkFBbUIsU0FBUyxNQUFNO0FBQ3JELGNBQUksS0FBSyxRQUFRLGVBQWUsT0FBTztBQUNyQyxtQkFBTyxLQUFLLFFBQVE7QUFBQSxpQkFDZjtBQUNMLG1CQUFPO0FBQUE7QUFBQTtBQUlYLG9CQUFXLFVBQVUsbUJBQW1CLFNBQVMsU0FBUztBQUN4RCxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCxvQkFBVyxVQUFVLHNCQUFzQixTQUFTLFNBQVM7QUFDM0QsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0Qsb0JBQVcsVUFBVSx1QkFBdUIsU0FBUyxNQUFNO0FBQ3pELGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELG9CQUFXLFVBQVUsaUJBQWlCLFNBQVMsY0FBYyxXQUFXO0FBQ3RFLGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELG9CQUFXLFVBQVUsaUJBQWlCLFNBQVMsY0FBYyxlQUFlLE9BQU87QUFDakYsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0Qsb0JBQVcsVUFBVSxvQkFBb0IsU0FBUyxjQUFjLFdBQVc7QUFDekUsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0Qsb0JBQVcsVUFBVSxxQkFBcUIsU0FBUyxjQUFjLFdBQVc7QUFDMUUsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0Qsb0JBQVcsVUFBVSxxQkFBcUIsU0FBUyxTQUFTO0FBQzFELGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELG9CQUFXLFVBQVUseUJBQXlCLFNBQVMsY0FBYyxXQUFXO0FBQzlFLGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELG9CQUFXLFVBQVUsZUFBZSxTQUFTLE1BQU07QUFDakQsaUJBQU8sS0FBSyxRQUFRLGVBQWU7QUFBQTtBQUdyQyxvQkFBVyxVQUFVLGlCQUFpQixTQUFTLGNBQWMsV0FBVztBQUN0RSxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCxvQkFBVyxVQUFVLGlCQUFpQixTQUFTLE1BQU0sTUFBTTtBQUN6RCxjQUFJLEtBQUssUUFBUSxlQUFlLE9BQU87QUFDckMsbUJBQU8sS0FBSyxRQUFRLE1BQU07QUFBQSxpQkFDckI7QUFDTCxtQkFBTztBQUFBO0FBQUE7QUFJWCxvQkFBVyxVQUFVLG1CQUFtQixTQUFTLGNBQWMsV0FBVyxNQUFNO0FBQzlFLGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELG9CQUFXLFVBQVUscUJBQXFCLFNBQVMsUUFBUSxNQUFNO0FBQy9ELGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELG9CQUFXLFVBQVUsdUJBQXVCLFNBQVMsU0FBUztBQUM1RCxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCxvQkFBVyxVQUFVLHlCQUF5QixTQUFTLGNBQWMsV0FBVztBQUM5RSxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCxvQkFBVyxVQUFVLHlCQUF5QixTQUFTLFlBQVk7QUFDakUsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0Qsb0JBQVcsVUFBVSxjQUFjLFNBQVMsTUFBTTtBQUNoRCxjQUFJLEdBQUcsR0FBRztBQUNWLGNBQUksQ0FBQyxZQUFXLFVBQVUsWUFBWSxNQUFNLE1BQU0sV0FBVyxZQUFZLE9BQU87QUFDOUUsbUJBQU87QUFBQTtBQUVULGNBQUksS0FBSyxpQkFBaUIsS0FBSyxjQUFjO0FBQzNDLG1CQUFPO0FBQUE7QUFFVCxjQUFJLEtBQUssV0FBVyxLQUFLLFFBQVE7QUFDL0IsbUJBQU87QUFBQTtBQUVULGNBQUksS0FBSyxjQUFjLEtBQUssV0FBVztBQUNyQyxtQkFBTztBQUFBO0FBRVQsY0FBSSxLQUFLLFFBQVEsV0FBVyxLQUFLLFFBQVEsUUFBUTtBQUMvQyxtQkFBTztBQUFBO0FBRVQsZUFBSyxJQUFJLElBQUksR0FBRyxPQUFPLEtBQUssUUFBUSxTQUFTLEdBQUcsS0FBSyxPQUFPLEtBQUssT0FBTyxLQUFLLE1BQU0sSUFBSSxLQUFLLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRztBQUM1RyxnQkFBSSxDQUFDLEtBQUssUUFBUSxHQUFHLFlBQVksS0FBSyxRQUFRLEtBQUs7QUFDakQscUJBQU87QUFBQTtBQUFBO0FBR1gsaUJBQU87QUFBQTtBQUdULGVBQU87QUFBQSxRQUVOO0FBQUEsT0FFRixLQUFLO0FBQUE7QUFBQTs7O0FDelNSO0FBQUE7QUFDQSxJQUFDLFlBQVc7QUFDVixVQUFJLGtCQUFrQixTQUNwQixTQUFTLFNBQVMsT0FBTyxRQUFRO0FBQUUsaUJBQVMsT0FBTyxRQUFRO0FBQUUsY0FBSSxRQUFRLEtBQUssUUFBUTtBQUFNLGtCQUFNLE9BQU8sT0FBTztBQUFBO0FBQVEsd0JBQWdCO0FBQUUsZUFBSyxjQUFjO0FBQUE7QUFBUyxhQUFLLFlBQVksT0FBTztBQUFXLGNBQU0sWUFBWSxJQUFJO0FBQVEsY0FBTSxZQUFZLE9BQU87QUFBVyxlQUFPO0FBQUEsU0FDbFIsVUFBVSxHQUFHO0FBRWYsZ0JBQVU7QUFFVixjQUFPLFVBQVUsbUJBQW9CLFNBQVMsWUFBWTtBQUN4RCxlQUFPLG1CQUFrQjtBQUV6QixtQ0FBMEIsUUFBUTtBQUNoQyw0QkFBaUIsVUFBVSxZQUFZLEtBQUssTUFBTTtBQUNsRCxlQUFLLFFBQVE7QUFBQTtBQUdmLGVBQU8sZUFBZSxrQkFBaUIsV0FBVyxRQUFRO0FBQUEsVUFDeEQsS0FBSyxXQUFXO0FBQ2QsbUJBQU8sS0FBSztBQUFBO0FBQUEsVUFFZCxLQUFLLFNBQVMsT0FBTztBQUNuQixtQkFBTyxLQUFLLFFBQVEsU0FBUztBQUFBO0FBQUE7QUFJakMsZUFBTyxlQUFlLGtCQUFpQixXQUFXLFVBQVU7QUFBQSxVQUMxRCxLQUFLLFdBQVc7QUFDZCxtQkFBTyxLQUFLLE1BQU07QUFBQTtBQUFBO0FBSXRCLGVBQU8sZUFBZSxrQkFBaUIsV0FBVyxlQUFlO0FBQUEsVUFDL0QsS0FBSyxXQUFXO0FBQ2QsbUJBQU8sS0FBSztBQUFBO0FBQUEsVUFFZCxLQUFLLFNBQVMsT0FBTztBQUNuQixtQkFBTyxLQUFLLFFBQVEsU0FBUztBQUFBO0FBQUE7QUFJakMsMEJBQWlCLFVBQVUsUUFBUSxXQUFXO0FBQzVDLGlCQUFPLE9BQU8sT0FBTztBQUFBO0FBR3ZCLDBCQUFpQixVQUFVLGdCQUFnQixTQUFTLFFBQVEsT0FBTztBQUNqRSxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCwwQkFBaUIsVUFBVSxhQUFhLFNBQVMsS0FBSztBQUNwRCxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCwwQkFBaUIsVUFBVSxhQUFhLFNBQVMsUUFBUSxLQUFLO0FBQzVELGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELDBCQUFpQixVQUFVLGFBQWEsU0FBUyxRQUFRLE9BQU87QUFDOUQsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0QsMEJBQWlCLFVBQVUsY0FBYyxTQUFTLFFBQVEsT0FBTyxLQUFLO0FBQ3BFLGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELDBCQUFpQixVQUFVLGNBQWMsU0FBUyxNQUFNO0FBQ3RELGNBQUksQ0FBQyxrQkFBaUIsVUFBVSxZQUFZLE1BQU0sTUFBTSxXQUFXLFlBQVksT0FBTztBQUNwRixtQkFBTztBQUFBO0FBRVQsY0FBSSxLQUFLLFNBQVMsS0FBSyxNQUFNO0FBQzNCLG1CQUFPO0FBQUE7QUFFVCxpQkFBTztBQUFBO0FBR1QsZUFBTztBQUFBLFFBRU47QUFBQSxPQUVGLEtBQUs7QUFBQTtBQUFBOzs7QUM5RVI7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUksVUFBVSxVQUFVLGtCQUN0QixTQUFTLFNBQVMsT0FBTyxRQUFRO0FBQUUsaUJBQVMsT0FBTyxRQUFRO0FBQUUsY0FBSSxRQUFRLEtBQUssUUFBUTtBQUFNLGtCQUFNLE9BQU8sT0FBTztBQUFBO0FBQVEsd0JBQWdCO0FBQUUsZUFBSyxjQUFjO0FBQUE7QUFBUyxhQUFLLFlBQVksT0FBTztBQUFXLGNBQU0sWUFBWSxJQUFJO0FBQVEsY0FBTSxZQUFZLE9BQU87QUFBVyxlQUFPO0FBQUEsU0FDbFIsVUFBVSxHQUFHO0FBRWYsaUJBQVc7QUFFWCx5QkFBbUI7QUFFbkIsY0FBTyxVQUFVLFdBQVksU0FBUyxZQUFZO0FBQ2hELGVBQU8sV0FBVTtBQUVqQiwyQkFBa0IsUUFBUSxNQUFNO0FBQzlCLG9CQUFTLFVBQVUsWUFBWSxLQUFLLE1BQU07QUFDMUMsY0FBSSxRQUFRLE1BQU07QUFDaEIsa0JBQU0sSUFBSSxNQUFNLHlCQUF5QixLQUFLO0FBQUE7QUFFaEQsZUFBSyxPQUFPO0FBQ1osZUFBSyxPQUFPLFNBQVM7QUFDckIsZUFBSyxRQUFRLEtBQUssVUFBVSxNQUFNO0FBQUE7QUFHcEMsa0JBQVMsVUFBVSxRQUFRLFdBQVc7QUFDcEMsaUJBQU8sT0FBTyxPQUFPO0FBQUE7QUFHdkIsa0JBQVMsVUFBVSxXQUFXLFNBQVMsU0FBUztBQUM5QyxpQkFBTyxLQUFLLFFBQVEsT0FBTyxNQUFNLE1BQU0sS0FBSyxRQUFRLE9BQU8sY0FBYztBQUFBO0FBRzNFLGVBQU87QUFBQSxRQUVOO0FBQUEsT0FFRixLQUFLO0FBQUE7QUFBQTs7O0FDbkNSO0FBQUE7QUFDQSxJQUFDLFlBQVc7QUFDVixVQUFJLFVBQVUsa0JBQWtCLFlBQzlCLFNBQVMsU0FBUyxPQUFPLFFBQVE7QUFBRSxpQkFBUyxPQUFPLFFBQVE7QUFBRSxjQUFJLFFBQVEsS0FBSyxRQUFRO0FBQU0sa0JBQU0sT0FBTyxPQUFPO0FBQUE7QUFBUSx3QkFBZ0I7QUFBRSxlQUFLLGNBQWM7QUFBQTtBQUFTLGFBQUssWUFBWSxPQUFPO0FBQVcsY0FBTSxZQUFZLElBQUk7QUFBUSxjQUFNLFlBQVksT0FBTztBQUFXLGVBQU87QUFBQSxTQUNsUixVQUFVLEdBQUc7QUFFZixpQkFBVztBQUVYLHlCQUFtQjtBQUVuQixjQUFPLFVBQVUsYUFBYyxTQUFTLFlBQVk7QUFDbEQsZUFBTyxhQUFZO0FBRW5CLDZCQUFvQixRQUFRLE1BQU07QUFDaEMsc0JBQVcsVUFBVSxZQUFZLEtBQUssTUFBTTtBQUM1QyxjQUFJLFFBQVEsTUFBTTtBQUNoQixrQkFBTSxJQUFJLE1BQU0sMkJBQTJCLEtBQUs7QUFBQTtBQUVsRCxlQUFLLE9BQU87QUFDWixlQUFLLE9BQU8sU0FBUztBQUNyQixlQUFLLFFBQVEsS0FBSyxVQUFVLFFBQVE7QUFBQTtBQUd0QyxvQkFBVyxVQUFVLFFBQVEsV0FBVztBQUN0QyxpQkFBTyxPQUFPLE9BQU87QUFBQTtBQUd2QixvQkFBVyxVQUFVLFdBQVcsU0FBUyxTQUFTO0FBQ2hELGlCQUFPLEtBQUssUUFBUSxPQUFPLFFBQVEsTUFBTSxLQUFLLFFBQVEsT0FBTyxjQUFjO0FBQUE7QUFHN0UsZUFBTztBQUFBLFFBRU47QUFBQSxPQUVGLEtBQUs7QUFBQTtBQUFBOzs7QUNuQ1I7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUksVUFBVSxnQkFBZ0IsU0FBUyxVQUNyQyxTQUFTLFNBQVMsT0FBTyxRQUFRO0FBQUUsaUJBQVMsT0FBTyxRQUFRO0FBQUUsY0FBSSxRQUFRLEtBQUssUUFBUTtBQUFNLGtCQUFNLE9BQU8sT0FBTztBQUFBO0FBQVEsd0JBQWdCO0FBQUUsZUFBSyxjQUFjO0FBQUE7QUFBUyxhQUFLLFlBQVksT0FBTztBQUFXLGNBQU0sWUFBWSxJQUFJO0FBQVEsY0FBTSxZQUFZLE9BQU87QUFBVyxlQUFPO0FBQUEsU0FDbFIsVUFBVSxHQUFHO0FBRWYsaUJBQVcsa0JBQXFCO0FBRWhDLGdCQUFVO0FBRVYsaUJBQVc7QUFFWCxjQUFPLFVBQVUsaUJBQWtCLFNBQVMsWUFBWTtBQUN0RCxlQUFPLGlCQUFnQjtBQUV2QixpQ0FBd0IsUUFBUSxTQUFTLFVBQVUsWUFBWTtBQUM3RCxjQUFJO0FBQ0osMEJBQWUsVUFBVSxZQUFZLEtBQUssTUFBTTtBQUNoRCxjQUFJLFNBQVMsVUFBVTtBQUNyQixrQkFBTSxTQUFTLFVBQVUsSUFBSSxTQUFTLFdBQVcsSUFBSSxVQUFVLGFBQWEsSUFBSTtBQUFBO0FBRWxGLGNBQUksQ0FBQyxTQUFTO0FBQ1osc0JBQVU7QUFBQTtBQUVaLGVBQUssT0FBTyxTQUFTO0FBQ3JCLGVBQUssVUFBVSxLQUFLLFVBQVUsV0FBVztBQUN6QyxjQUFJLFlBQVksTUFBTTtBQUNwQixpQkFBSyxXQUFXLEtBQUssVUFBVSxZQUFZO0FBQUE7QUFFN0MsY0FBSSxjQUFjLE1BQU07QUFDdEIsaUJBQUssYUFBYSxLQUFLLFVBQVUsY0FBYztBQUFBO0FBQUE7QUFJbkQsd0JBQWUsVUFBVSxXQUFXLFNBQVMsU0FBUztBQUNwRCxpQkFBTyxLQUFLLFFBQVEsT0FBTyxZQUFZLE1BQU0sS0FBSyxRQUFRLE9BQU8sY0FBYztBQUFBO0FBR2pGLGVBQU87QUFBQSxRQUVOO0FBQUEsT0FFRixLQUFLO0FBQUE7QUFBQTs7O0FDMUNSO0FBQUE7QUFDQSxJQUFDLFlBQVc7QUFDVixVQUFJLFVBQVUsZUFBZSxTQUMzQixTQUFTLFNBQVMsT0FBTyxRQUFRO0FBQUUsaUJBQVMsT0FBTyxRQUFRO0FBQUUsY0FBSSxRQUFRLEtBQUssUUFBUTtBQUFNLGtCQUFNLE9BQU8sT0FBTztBQUFBO0FBQVEsd0JBQWdCO0FBQUUsZUFBSyxjQUFjO0FBQUE7QUFBUyxhQUFLLFlBQVksT0FBTztBQUFXLGNBQU0sWUFBWSxJQUFJO0FBQVEsY0FBTSxZQUFZLE9BQU87QUFBVyxlQUFPO0FBQUEsU0FDbFIsVUFBVSxHQUFHO0FBRWYsZ0JBQVU7QUFFVixpQkFBVztBQUVYLGNBQU8sVUFBVSxnQkFBaUIsU0FBUyxZQUFZO0FBQ3JELGVBQU8sZ0JBQWU7QUFFdEIsZ0NBQXVCLFFBQVEsYUFBYSxlQUFlLGVBQWUsa0JBQWtCLGNBQWM7QUFDeEcseUJBQWMsVUFBVSxZQUFZLEtBQUssTUFBTTtBQUMvQyxjQUFJLGVBQWUsTUFBTTtBQUN2QixrQkFBTSxJQUFJLE1BQU0sK0JBQStCLEtBQUs7QUFBQTtBQUV0RCxjQUFJLGlCQUFpQixNQUFNO0FBQ3pCLGtCQUFNLElBQUksTUFBTSxpQ0FBaUMsS0FBSyxVQUFVO0FBQUE7QUFFbEUsY0FBSSxDQUFDLGVBQWU7QUFDbEIsa0JBQU0sSUFBSSxNQUFNLGlDQUFpQyxLQUFLLFVBQVU7QUFBQTtBQUVsRSxjQUFJLENBQUMsa0JBQWtCO0FBQ3JCLGtCQUFNLElBQUksTUFBTSxvQ0FBb0MsS0FBSyxVQUFVO0FBQUE7QUFFckUsY0FBSSxpQkFBaUIsUUFBUSxTQUFTLEdBQUc7QUFDdkMsK0JBQW1CLE1BQU07QUFBQTtBQUUzQixjQUFJLENBQUMsaUJBQWlCLE1BQU0sMkNBQTJDO0FBQ3JFLGtCQUFNLElBQUksTUFBTSxvRkFBb0YsS0FBSyxVQUFVO0FBQUE7QUFFckgsY0FBSSxnQkFBZ0IsQ0FBQyxpQkFBaUIsTUFBTSx3QkFBd0I7QUFDbEUsa0JBQU0sSUFBSSxNQUFNLHVEQUF1RCxLQUFLLFVBQVU7QUFBQTtBQUV4RixlQUFLLGNBQWMsS0FBSyxVQUFVLEtBQUs7QUFDdkMsZUFBSyxPQUFPLFNBQVM7QUFDckIsZUFBSyxnQkFBZ0IsS0FBSyxVQUFVLEtBQUs7QUFDekMsZUFBSyxnQkFBZ0IsS0FBSyxVQUFVLFdBQVc7QUFDL0MsY0FBSSxjQUFjO0FBQ2hCLGlCQUFLLGVBQWUsS0FBSyxVQUFVLGNBQWM7QUFBQTtBQUVuRCxlQUFLLG1CQUFtQjtBQUFBO0FBRzFCLHVCQUFjLFVBQVUsV0FBVyxTQUFTLFNBQVM7QUFDbkQsaUJBQU8sS0FBSyxRQUFRLE9BQU8sV0FBVyxNQUFNLEtBQUssUUFBUSxPQUFPLGNBQWM7QUFBQTtBQUdoRixlQUFPO0FBQUEsUUFFTjtBQUFBLE9BRUYsS0FBSztBQUFBO0FBQUE7OztBQ3REUjtBQUFBO0FBQ0EsSUFBQyxZQUFXO0FBQ1YsVUFBSSxVQUFVLGNBQWMsU0FBUyxVQUNuQyxTQUFTLFNBQVMsT0FBTyxRQUFRO0FBQUUsaUJBQVMsT0FBTyxRQUFRO0FBQUUsY0FBSSxRQUFRLEtBQUssUUFBUTtBQUFNLGtCQUFNLE9BQU8sT0FBTztBQUFBO0FBQVEsd0JBQWdCO0FBQUUsZUFBSyxjQUFjO0FBQUE7QUFBUyxhQUFLLFlBQVksT0FBTztBQUFXLGNBQU0sWUFBWSxJQUFJO0FBQVEsY0FBTSxZQUFZLE9BQU87QUFBVyxlQUFPO0FBQUEsU0FDbFIsVUFBVSxHQUFHO0FBRWYsaUJBQVcsa0JBQXFCO0FBRWhDLGdCQUFVO0FBRVYsaUJBQVc7QUFFWCxjQUFPLFVBQVUsZUFBZ0IsU0FBUyxZQUFZO0FBQ3BELGVBQU8sZUFBYztBQUVyQiwrQkFBc0IsUUFBUSxJQUFJLE1BQU0sT0FBTztBQUM3Qyx3QkFBYSxVQUFVLFlBQVksS0FBSyxNQUFNO0FBQzlDLGNBQUksUUFBUSxNQUFNO0FBQ2hCLGtCQUFNLElBQUksTUFBTSw4QkFBOEIsS0FBSyxVQUFVO0FBQUE7QUFFL0QsY0FBSSxTQUFTLE1BQU07QUFDakIsa0JBQU0sSUFBSSxNQUFNLCtCQUErQixLQUFLLFVBQVU7QUFBQTtBQUVoRSxlQUFLLEtBQUssQ0FBQyxDQUFDO0FBQ1osZUFBSyxPQUFPLEtBQUssVUFBVSxLQUFLO0FBQ2hDLGVBQUssT0FBTyxTQUFTO0FBQ3JCLGNBQUksQ0FBQyxTQUFTLFFBQVE7QUFDcEIsaUJBQUssUUFBUSxLQUFLLFVBQVUsZUFBZTtBQUMzQyxpQkFBSyxXQUFXO0FBQUEsaUJBQ1g7QUFDTCxnQkFBSSxDQUFDLE1BQU0sU0FBUyxDQUFDLE1BQU0sT0FBTztBQUNoQyxvQkFBTSxJQUFJLE1BQU0sMkVBQTJFLEtBQUssVUFBVTtBQUFBO0FBRTVHLGdCQUFJLE1BQU0sU0FBUyxDQUFDLE1BQU0sT0FBTztBQUMvQixvQkFBTSxJQUFJLE1BQU0saUVBQWlFLEtBQUssVUFBVTtBQUFBO0FBRWxHLGlCQUFLLFdBQVc7QUFDaEIsZ0JBQUksTUFBTSxTQUFTLE1BQU07QUFDdkIsbUJBQUssUUFBUSxLQUFLLFVBQVUsU0FBUyxNQUFNO0FBQUE7QUFFN0MsZ0JBQUksTUFBTSxTQUFTLE1BQU07QUFDdkIsbUJBQUssUUFBUSxLQUFLLFVBQVUsU0FBUyxNQUFNO0FBQUE7QUFFN0MsZ0JBQUksTUFBTSxTQUFTLE1BQU07QUFDdkIsbUJBQUssUUFBUSxLQUFLLFVBQVUsU0FBUyxNQUFNO0FBQUE7QUFFN0MsZ0JBQUksS0FBSyxNQUFNLEtBQUssT0FBTztBQUN6QixvQkFBTSxJQUFJLE1BQU0sZ0VBQWdFLEtBQUssVUFBVTtBQUFBO0FBQUE7QUFBQTtBQUtyRyxlQUFPLGVBQWUsY0FBYSxXQUFXLFlBQVk7QUFBQSxVQUN4RCxLQUFLLFdBQVc7QUFDZCxtQkFBTyxLQUFLO0FBQUE7QUFBQTtBQUloQixlQUFPLGVBQWUsY0FBYSxXQUFXLFlBQVk7QUFBQSxVQUN4RCxLQUFLLFdBQVc7QUFDZCxtQkFBTyxLQUFLO0FBQUE7QUFBQTtBQUloQixlQUFPLGVBQWUsY0FBYSxXQUFXLGdCQUFnQjtBQUFBLFVBQzVELEtBQUssV0FBVztBQUNkLG1CQUFPLEtBQUssU0FBUztBQUFBO0FBQUE7QUFJekIsZUFBTyxlQUFlLGNBQWEsV0FBVyxpQkFBaUI7QUFBQSxVQUM3RCxLQUFLLFdBQVc7QUFDZCxtQkFBTztBQUFBO0FBQUE7QUFJWCxlQUFPLGVBQWUsY0FBYSxXQUFXLGVBQWU7QUFBQSxVQUMzRCxLQUFLLFdBQVc7QUFDZCxtQkFBTztBQUFBO0FBQUE7QUFJWCxlQUFPLGVBQWUsY0FBYSxXQUFXLGNBQWM7QUFBQSxVQUMxRCxLQUFLLFdBQVc7QUFDZCxtQkFBTztBQUFBO0FBQUE7QUFJWCxzQkFBYSxVQUFVLFdBQVcsU0FBUyxTQUFTO0FBQ2xELGlCQUFPLEtBQUssUUFBUSxPQUFPLFVBQVUsTUFBTSxLQUFLLFFBQVEsT0FBTyxjQUFjO0FBQUE7QUFHL0UsZUFBTztBQUFBLFFBRU47QUFBQSxPQUVGLEtBQUs7QUFBQTtBQUFBOzs7QUNoR1I7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUksVUFBVSxlQUFlLFNBQzNCLFNBQVMsU0FBUyxPQUFPLFFBQVE7QUFBRSxpQkFBUyxPQUFPLFFBQVE7QUFBRSxjQUFJLFFBQVEsS0FBSyxRQUFRO0FBQU0sa0JBQU0sT0FBTyxPQUFPO0FBQUE7QUFBUSx3QkFBZ0I7QUFBRSxlQUFLLGNBQWM7QUFBQTtBQUFTLGFBQUssWUFBWSxPQUFPO0FBQVcsY0FBTSxZQUFZLElBQUk7QUFBUSxjQUFNLFlBQVksT0FBTztBQUFXLGVBQU87QUFBQSxTQUNsUixVQUFVLEdBQUc7QUFFZixnQkFBVTtBQUVWLGlCQUFXO0FBRVgsY0FBTyxVQUFVLGdCQUFpQixTQUFTLFlBQVk7QUFDckQsZUFBTyxnQkFBZTtBQUV0QixnQ0FBdUIsUUFBUSxNQUFNLE9BQU87QUFDMUMseUJBQWMsVUFBVSxZQUFZLEtBQUssTUFBTTtBQUMvQyxjQUFJLFFBQVEsTUFBTTtBQUNoQixrQkFBTSxJQUFJLE1BQU0sK0JBQStCLEtBQUs7QUFBQTtBQUV0RCxjQUFJLENBQUMsT0FBTztBQUNWLG9CQUFRO0FBQUE7QUFFVixjQUFJLE1BQU0sUUFBUSxRQUFRO0FBQ3hCLG9CQUFRLE1BQU0sTUFBTSxLQUFLLE9BQU87QUFBQTtBQUVsQyxlQUFLLE9BQU8sS0FBSyxVQUFVLEtBQUs7QUFDaEMsZUFBSyxPQUFPLFNBQVM7QUFDckIsZUFBSyxRQUFRLEtBQUssVUFBVSxnQkFBZ0I7QUFBQTtBQUc5Qyx1QkFBYyxVQUFVLFdBQVcsU0FBUyxTQUFTO0FBQ25ELGlCQUFPLEtBQUssUUFBUSxPQUFPLFdBQVcsTUFBTSxLQUFLLFFBQVEsT0FBTyxjQUFjO0FBQUE7QUFHaEYsZUFBTztBQUFBLFFBRU47QUFBQSxPQUVGLEtBQUs7QUFBQTtBQUFBOzs7QUNyQ1I7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUksVUFBVSxnQkFBZ0IsU0FDNUIsU0FBUyxTQUFTLE9BQU8sUUFBUTtBQUFFLGlCQUFTLE9BQU8sUUFBUTtBQUFFLGNBQUksUUFBUSxLQUFLLFFBQVE7QUFBTSxrQkFBTSxPQUFPLE9BQU87QUFBQTtBQUFRLHdCQUFnQjtBQUFFLGVBQUssY0FBYztBQUFBO0FBQVMsYUFBSyxZQUFZLE9BQU87QUFBVyxjQUFNLFlBQVksSUFBSTtBQUFRLGNBQU0sWUFBWSxPQUFPO0FBQVcsZUFBTztBQUFBLFNBQ2xSLFVBQVUsR0FBRztBQUVmLGdCQUFVO0FBRVYsaUJBQVc7QUFFWCxjQUFPLFVBQVUsaUJBQWtCLFNBQVMsWUFBWTtBQUN0RCxlQUFPLGlCQUFnQjtBQUV2QixpQ0FBd0IsUUFBUSxNQUFNLE9BQU87QUFDM0MsMEJBQWUsVUFBVSxZQUFZLEtBQUssTUFBTTtBQUNoRCxjQUFJLFFBQVEsTUFBTTtBQUNoQixrQkFBTSxJQUFJLE1BQU0sZ0NBQWdDLEtBQUssVUFBVTtBQUFBO0FBRWpFLGNBQUksQ0FBQyxNQUFNLFNBQVMsQ0FBQyxNQUFNLE9BQU87QUFDaEMsa0JBQU0sSUFBSSxNQUFNLHVFQUF1RSxLQUFLLFVBQVU7QUFBQTtBQUV4RyxlQUFLLE9BQU8sS0FBSyxVQUFVLEtBQUs7QUFDaEMsZUFBSyxPQUFPLFNBQVM7QUFDckIsY0FBSSxNQUFNLFNBQVMsTUFBTTtBQUN2QixpQkFBSyxRQUFRLEtBQUssVUFBVSxTQUFTLE1BQU07QUFBQTtBQUU3QyxjQUFJLE1BQU0sU0FBUyxNQUFNO0FBQ3ZCLGlCQUFLLFFBQVEsS0FBSyxVQUFVLFNBQVMsTUFBTTtBQUFBO0FBQUE7QUFJL0MsZUFBTyxlQUFlLGdCQUFlLFdBQVcsWUFBWTtBQUFBLFVBQzFELEtBQUssV0FBVztBQUNkLG1CQUFPLEtBQUs7QUFBQTtBQUFBO0FBSWhCLGVBQU8sZUFBZSxnQkFBZSxXQUFXLFlBQVk7QUFBQSxVQUMxRCxLQUFLLFdBQVc7QUFDZCxtQkFBTyxLQUFLO0FBQUE7QUFBQTtBQUloQix3QkFBZSxVQUFVLFdBQVcsU0FBUyxTQUFTO0FBQ3BELGlCQUFPLEtBQUssUUFBUSxPQUFPLFlBQVksTUFBTSxLQUFLLFFBQVEsT0FBTyxjQUFjO0FBQUE7QUFHakYsZUFBTztBQUFBLFFBRU47QUFBQSxPQUVGLEtBQUs7QUFBQTtBQUFBOzs7QUNuRFI7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUksVUFBVSxlQUFlLGVBQWUsY0FBYyxnQkFBZ0IsWUFBWSxpQkFBaUIsU0FBUyxVQUM5RyxTQUFTLFNBQVMsT0FBTyxRQUFRO0FBQUUsaUJBQVMsT0FBTyxRQUFRO0FBQUUsY0FBSSxRQUFRLEtBQUssUUFBUTtBQUFNLGtCQUFNLE9BQU8sT0FBTztBQUFBO0FBQVEsd0JBQWdCO0FBQUUsZUFBSyxjQUFjO0FBQUE7QUFBUyxhQUFLLFlBQVksT0FBTztBQUFXLGNBQU0sWUFBWSxJQUFJO0FBQVEsY0FBTSxZQUFZLE9BQU87QUFBVyxlQUFPO0FBQUEsU0FDbFIsVUFBVSxHQUFHO0FBRWYsaUJBQVcsa0JBQXFCO0FBRWhDLGdCQUFVO0FBRVYsaUJBQVc7QUFFWCxzQkFBZ0I7QUFFaEIscUJBQWU7QUFFZixzQkFBZ0I7QUFFaEIsdUJBQWlCO0FBRWpCLHdCQUFrQjtBQUVsQixjQUFPLFVBQVUsYUFBYyxTQUFTLFlBQVk7QUFDbEQsZUFBTyxhQUFZO0FBRW5CLDZCQUFvQixRQUFRLE9BQU8sT0FBTztBQUN4QyxjQUFJLE9BQU8sR0FBRyxLQUFLLEtBQUssTUFBTTtBQUM5QixzQkFBVyxVQUFVLFlBQVksS0FBSyxNQUFNO0FBQzVDLGVBQUssT0FBTyxTQUFTO0FBQ3JCLGNBQUksT0FBTyxVQUFVO0FBQ25CLGtCQUFNLE9BQU87QUFDYixpQkFBSyxJQUFJLEdBQUcsTUFBTSxJQUFJLFFBQVEsSUFBSSxLQUFLLEtBQUs7QUFDMUMsc0JBQVEsSUFBSTtBQUNaLGtCQUFJLE1BQU0sU0FBUyxTQUFTLFNBQVM7QUFDbkMscUJBQUssT0FBTyxNQUFNO0FBQ2xCO0FBQUE7QUFBQTtBQUFBO0FBSU4sZUFBSyxpQkFBaUI7QUFDdEIsY0FBSSxTQUFTLFFBQVE7QUFDbkIsbUJBQU8sT0FBTyxRQUFRLEtBQUssT0FBTyxRQUFRLEtBQUs7QUFBQTtBQUVqRCxjQUFJLFNBQVMsTUFBTTtBQUNqQixtQkFBTyxDQUFDLE9BQU8sUUFBUSxRQUFRLEtBQUssSUFBSSxRQUFRLEtBQUs7QUFBQTtBQUV2RCxjQUFJLFNBQVMsTUFBTTtBQUNqQixpQkFBSyxRQUFRLEtBQUssVUFBVSxTQUFTO0FBQUE7QUFFdkMsY0FBSSxTQUFTLE1BQU07QUFDakIsaUJBQUssUUFBUSxLQUFLLFVBQVUsU0FBUztBQUFBO0FBQUE7QUFJekMsZUFBTyxlQUFlLFlBQVcsV0FBVyxZQUFZO0FBQUEsVUFDdEQsS0FBSyxXQUFXO0FBQ2QsZ0JBQUksT0FBTyxHQUFHLEtBQUssT0FBTztBQUMxQixvQkFBUTtBQUNSLGtCQUFNLEtBQUs7QUFDWCxpQkFBSyxJQUFJLEdBQUcsTUFBTSxJQUFJLFFBQVEsSUFBSSxLQUFLLEtBQUs7QUFDMUMsc0JBQVEsSUFBSTtBQUNaLGtCQUFLLE1BQU0sU0FBUyxTQUFTLHFCQUFzQixDQUFDLE1BQU0sSUFBSTtBQUM1RCxzQkFBTSxNQUFNLFFBQVE7QUFBQTtBQUFBO0FBR3hCLG1CQUFPLElBQUksZ0JBQWdCO0FBQUE7QUFBQTtBQUkvQixlQUFPLGVBQWUsWUFBVyxXQUFXLGFBQWE7QUFBQSxVQUN2RCxLQUFLLFdBQVc7QUFDZCxnQkFBSSxPQUFPLEdBQUcsS0FBSyxPQUFPO0FBQzFCLG9CQUFRO0FBQ1Isa0JBQU0sS0FBSztBQUNYLGlCQUFLLElBQUksR0FBRyxNQUFNLElBQUksUUFBUSxJQUFJLEtBQUssS0FBSztBQUMxQyxzQkFBUSxJQUFJO0FBQ1osa0JBQUksTUFBTSxTQUFTLFNBQVMscUJBQXFCO0FBQy9DLHNCQUFNLE1BQU0sUUFBUTtBQUFBO0FBQUE7QUFHeEIsbUJBQU8sSUFBSSxnQkFBZ0I7QUFBQTtBQUFBO0FBSS9CLGVBQU8sZUFBZSxZQUFXLFdBQVcsWUFBWTtBQUFBLFVBQ3RELEtBQUssV0FBVztBQUNkLG1CQUFPLEtBQUs7QUFBQTtBQUFBO0FBSWhCLGVBQU8sZUFBZSxZQUFXLFdBQVcsWUFBWTtBQUFBLFVBQ3RELEtBQUssV0FBVztBQUNkLG1CQUFPLEtBQUs7QUFBQTtBQUFBO0FBSWhCLGVBQU8sZUFBZSxZQUFXLFdBQVcsa0JBQWtCO0FBQUEsVUFDNUQsS0FBSyxXQUFXO0FBQ2Qsa0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFBQTtBQUlqRSxvQkFBVyxVQUFVLFVBQVUsU0FBUyxNQUFNLE9BQU87QUFDbkQsY0FBSTtBQUNKLGtCQUFRLElBQUksY0FBYyxNQUFNLE1BQU07QUFDdEMsZUFBSyxTQUFTLEtBQUs7QUFDbkIsaUJBQU87QUFBQTtBQUdULG9CQUFXLFVBQVUsVUFBVSxTQUFTLGFBQWEsZUFBZSxlQUFlLGtCQUFrQixjQUFjO0FBQ2pILGNBQUk7QUFDSixrQkFBUSxJQUFJLGNBQWMsTUFBTSxhQUFhLGVBQWUsZUFBZSxrQkFBa0I7QUFDN0YsZUFBSyxTQUFTLEtBQUs7QUFDbkIsaUJBQU87QUFBQTtBQUdULG9CQUFXLFVBQVUsU0FBUyxTQUFTLE1BQU0sT0FBTztBQUNsRCxjQUFJO0FBQ0osa0JBQVEsSUFBSSxhQUFhLE1BQU0sT0FBTyxNQUFNO0FBQzVDLGVBQUssU0FBUyxLQUFLO0FBQ25CLGlCQUFPO0FBQUE7QUFHVCxvQkFBVyxVQUFVLFVBQVUsU0FBUyxNQUFNLE9BQU87QUFDbkQsY0FBSTtBQUNKLGtCQUFRLElBQUksYUFBYSxNQUFNLE1BQU0sTUFBTTtBQUMzQyxlQUFLLFNBQVMsS0FBSztBQUNuQixpQkFBTztBQUFBO0FBR1Qsb0JBQVcsVUFBVSxXQUFXLFNBQVMsTUFBTSxPQUFPO0FBQ3BELGNBQUk7QUFDSixrQkFBUSxJQUFJLGVBQWUsTUFBTSxNQUFNO0FBQ3ZDLGVBQUssU0FBUyxLQUFLO0FBQ25CLGlCQUFPO0FBQUE7QUFHVCxvQkFBVyxVQUFVLFdBQVcsU0FBUyxTQUFTO0FBQ2hELGlCQUFPLEtBQUssUUFBUSxPQUFPLFFBQVEsTUFBTSxLQUFLLFFBQVEsT0FBTyxjQUFjO0FBQUE7QUFHN0Usb0JBQVcsVUFBVSxNQUFNLFNBQVMsTUFBTSxPQUFPO0FBQy9DLGlCQUFPLEtBQUssUUFBUSxNQUFNO0FBQUE7QUFHNUIsb0JBQVcsVUFBVSxNQUFNLFNBQVMsYUFBYSxlQUFlLGVBQWUsa0JBQWtCLGNBQWM7QUFDN0csaUJBQU8sS0FBSyxRQUFRLGFBQWEsZUFBZSxlQUFlLGtCQUFrQjtBQUFBO0FBR25GLG9CQUFXLFVBQVUsTUFBTSxTQUFTLE1BQU0sT0FBTztBQUMvQyxpQkFBTyxLQUFLLE9BQU8sTUFBTTtBQUFBO0FBRzNCLG9CQUFXLFVBQVUsT0FBTyxTQUFTLE1BQU0sT0FBTztBQUNoRCxpQkFBTyxLQUFLLFFBQVEsTUFBTTtBQUFBO0FBRzVCLG9CQUFXLFVBQVUsTUFBTSxTQUFTLE1BQU0sT0FBTztBQUMvQyxpQkFBTyxLQUFLLFNBQVMsTUFBTTtBQUFBO0FBRzdCLG9CQUFXLFVBQVUsS0FBSyxXQUFXO0FBQ25DLGlCQUFPLEtBQUssVUFBVSxLQUFLO0FBQUE7QUFHN0Isb0JBQVcsVUFBVSxjQUFjLFNBQVMsTUFBTTtBQUNoRCxjQUFJLENBQUMsWUFBVyxVQUFVLFlBQVksTUFBTSxNQUFNLFdBQVcsWUFBWSxPQUFPO0FBQzlFLG1CQUFPO0FBQUE7QUFFVCxjQUFJLEtBQUssU0FBUyxLQUFLLE1BQU07QUFDM0IsbUJBQU87QUFBQTtBQUVULGNBQUksS0FBSyxhQUFhLEtBQUssVUFBVTtBQUNuQyxtQkFBTztBQUFBO0FBRVQsY0FBSSxLQUFLLGFBQWEsS0FBSyxVQUFVO0FBQ25DLG1CQUFPO0FBQUE7QUFFVCxpQkFBTztBQUFBO0FBR1QsZUFBTztBQUFBLFFBRU47QUFBQSxPQUVGLEtBQUs7QUFBQTtBQUFBOzs7QUN6TFI7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUksVUFBVSxTQUFTLFFBQ3JCLFNBQVMsU0FBUyxPQUFPLFFBQVE7QUFBRSxpQkFBUyxPQUFPLFFBQVE7QUFBRSxjQUFJLFFBQVEsS0FBSyxRQUFRO0FBQU0sa0JBQU0sT0FBTyxPQUFPO0FBQUE7QUFBUSx3QkFBZ0I7QUFBRSxlQUFLLGNBQWM7QUFBQTtBQUFTLGFBQUssWUFBWSxPQUFPO0FBQVcsY0FBTSxZQUFZLElBQUk7QUFBUSxjQUFNLFlBQVksT0FBTztBQUFXLGVBQU87QUFBQSxTQUNsUixVQUFVLEdBQUc7QUFFZixpQkFBVztBQUVYLGdCQUFVO0FBRVYsY0FBTyxVQUFVLFNBQVUsU0FBUyxZQUFZO0FBQzlDLGVBQU8sU0FBUTtBQUVmLHlCQUFnQixRQUFRLE1BQU07QUFDNUIsa0JBQU8sVUFBVSxZQUFZLEtBQUssTUFBTTtBQUN4QyxjQUFJLFFBQVEsTUFBTTtBQUNoQixrQkFBTSxJQUFJLE1BQU0sdUJBQXVCLEtBQUs7QUFBQTtBQUU5QyxlQUFLLE9BQU8sU0FBUztBQUNyQixlQUFLLFFBQVEsS0FBSyxVQUFVLElBQUk7QUFBQTtBQUdsQyxnQkFBTyxVQUFVLFFBQVEsV0FBVztBQUNsQyxpQkFBTyxPQUFPLE9BQU87QUFBQTtBQUd2QixnQkFBTyxVQUFVLFdBQVcsU0FBUyxTQUFTO0FBQzVDLGlCQUFPLEtBQUssUUFBUSxPQUFPLElBQUksTUFBTSxLQUFLLFFBQVEsT0FBTyxjQUFjO0FBQUE7QUFHekUsZUFBTztBQUFBLFFBRU47QUFBQSxPQUVGLEtBQUs7QUFBQTtBQUFBOzs7QUNsQ1I7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUksVUFBVSxrQkFBa0IsU0FDOUIsU0FBUyxTQUFTLE9BQU8sUUFBUTtBQUFFLGlCQUFTLE9BQU8sUUFBUTtBQUFFLGNBQUksUUFBUSxLQUFLLFFBQVE7QUFBTSxrQkFBTSxPQUFPLE9BQU87QUFBQTtBQUFRLHdCQUFnQjtBQUFFLGVBQUssY0FBYztBQUFBO0FBQVMsYUFBSyxZQUFZLE9BQU87QUFBVyxjQUFNLFlBQVksSUFBSTtBQUFRLGNBQU0sWUFBWSxPQUFPO0FBQVcsZUFBTztBQUFBLFNBQ2xSLFVBQVUsR0FBRztBQUVmLGlCQUFXO0FBRVgseUJBQW1CO0FBRW5CLGNBQU8sVUFBVSxVQUFXLFNBQVMsWUFBWTtBQUMvQyxlQUFPLFVBQVM7QUFFaEIsMEJBQWlCLFFBQVEsTUFBTTtBQUM3QixtQkFBUSxVQUFVLFlBQVksS0FBSyxNQUFNO0FBQ3pDLGNBQUksUUFBUSxNQUFNO0FBQ2hCLGtCQUFNLElBQUksTUFBTSwyQkFBMkIsS0FBSztBQUFBO0FBRWxELGVBQUssT0FBTztBQUNaLGVBQUssT0FBTyxTQUFTO0FBQ3JCLGVBQUssUUFBUSxLQUFLLFVBQVUsS0FBSztBQUFBO0FBR25DLGVBQU8sZUFBZSxTQUFRLFdBQVcsOEJBQThCO0FBQUEsVUFDckUsS0FBSyxXQUFXO0FBQ2Qsa0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFBQTtBQUlqRSxlQUFPLGVBQWUsU0FBUSxXQUFXLGFBQWE7QUFBQSxVQUNwRCxLQUFLLFdBQVc7QUFDZCxnQkFBSSxNQUFNLE1BQU07QUFDaEIsa0JBQU07QUFDTixtQkFBTyxLQUFLO0FBQ1osbUJBQU8sTUFBTTtBQUNYLG9CQUFNLEtBQUssT0FBTztBQUNsQixxQkFBTyxLQUFLO0FBQUE7QUFFZCxtQkFBTyxLQUFLO0FBQ1osbUJBQU8sS0FBSztBQUNaLG1CQUFPLE1BQU07QUFDWCxvQkFBTSxNQUFNLEtBQUs7QUFDakIscUJBQU8sS0FBSztBQUFBO0FBRWQsbUJBQU87QUFBQTtBQUFBO0FBSVgsaUJBQVEsVUFBVSxRQUFRLFdBQVc7QUFDbkMsaUJBQU8sT0FBTyxPQUFPO0FBQUE7QUFHdkIsaUJBQVEsVUFBVSxXQUFXLFNBQVMsU0FBUztBQUM3QyxpQkFBTyxLQUFLLFFBQVEsT0FBTyxLQUFLLE1BQU0sS0FBSyxRQUFRLE9BQU8sY0FBYztBQUFBO0FBRzFFLGlCQUFRLFVBQVUsWUFBWSxTQUFTLFFBQVE7QUFDN0MsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0QsaUJBQVEsVUFBVSxtQkFBbUIsU0FBUyxTQUFTO0FBQ3JELGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELGVBQU87QUFBQSxRQUVOO0FBQUEsT0FFRixLQUFLO0FBQUE7QUFBQTs7O0FDcEVSO0FBQUE7QUFDQSxJQUFDLFlBQVc7QUFDVixVQUFJLFVBQVUsa0JBQWtCLDBCQUM5QixTQUFTLFNBQVMsT0FBTyxRQUFRO0FBQUUsaUJBQVMsT0FBTyxRQUFRO0FBQUUsY0FBSSxRQUFRLEtBQUssUUFBUTtBQUFNLGtCQUFNLE9BQU8sT0FBTztBQUFBO0FBQVEsd0JBQWdCO0FBQUUsZUFBSyxjQUFjO0FBQUE7QUFBUyxhQUFLLFlBQVksT0FBTztBQUFXLGNBQU0sWUFBWSxJQUFJO0FBQVEsY0FBTSxZQUFZLE9BQU87QUFBVyxlQUFPO0FBQUEsU0FDbFIsVUFBVSxHQUFHO0FBRWYsaUJBQVc7QUFFWCx5QkFBbUI7QUFFbkIsY0FBTyxVQUFVLDJCQUE0QixTQUFTLFlBQVk7QUFDaEUsZUFBTywyQkFBMEI7QUFFakMsMkNBQWtDLFFBQVEsUUFBUSxPQUFPO0FBQ3ZELG9DQUF5QixVQUFVLFlBQVksS0FBSyxNQUFNO0FBQzFELGNBQUksVUFBVSxNQUFNO0FBQ2xCLGtCQUFNLElBQUksTUFBTSxpQ0FBaUMsS0FBSztBQUFBO0FBRXhELGVBQUssT0FBTyxTQUFTO0FBQ3JCLGVBQUssU0FBUyxLQUFLLFVBQVUsVUFBVTtBQUN2QyxlQUFLLE9BQU8sS0FBSztBQUNqQixjQUFJLE9BQU87QUFDVCxpQkFBSyxRQUFRLEtBQUssVUFBVSxTQUFTO0FBQUE7QUFBQTtBQUl6QyxrQ0FBeUIsVUFBVSxRQUFRLFdBQVc7QUFDcEQsaUJBQU8sT0FBTyxPQUFPO0FBQUE7QUFHdkIsa0NBQXlCLFVBQVUsV0FBVyxTQUFTLFNBQVM7QUFDOUQsaUJBQU8sS0FBSyxRQUFRLE9BQU8sc0JBQXNCLE1BQU0sS0FBSyxRQUFRLE9BQU8sY0FBYztBQUFBO0FBRzNGLGtDQUF5QixVQUFVLGNBQWMsU0FBUyxNQUFNO0FBQzlELGNBQUksQ0FBQywwQkFBeUIsVUFBVSxZQUFZLE1BQU0sTUFBTSxXQUFXLFlBQVksT0FBTztBQUM1RixtQkFBTztBQUFBO0FBRVQsY0FBSSxLQUFLLFdBQVcsS0FBSyxRQUFRO0FBQy9CLG1CQUFPO0FBQUE7QUFFVCxpQkFBTztBQUFBO0FBR1QsZUFBTztBQUFBLFFBRU47QUFBQSxPQUVGLEtBQUs7QUFBQTtBQUFBOzs7QUNoRFI7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUksVUFBVSxVQUFVLFNBQ3RCLFNBQVMsU0FBUyxPQUFPLFFBQVE7QUFBRSxpQkFBUyxPQUFPLFFBQVE7QUFBRSxjQUFJLFFBQVEsS0FBSyxRQUFRO0FBQU0sa0JBQU0sT0FBTyxPQUFPO0FBQUE7QUFBUSx3QkFBZ0I7QUFBRSxlQUFLLGNBQWM7QUFBQTtBQUFTLGFBQUssWUFBWSxPQUFPO0FBQVcsY0FBTSxZQUFZLElBQUk7QUFBUSxjQUFNLFlBQVksT0FBTztBQUFXLGVBQU87QUFBQSxTQUNsUixVQUFVLEdBQUc7QUFFZixnQkFBVTtBQUVWLGlCQUFXO0FBRVgsY0FBTyxVQUFVLFdBQVksU0FBUyxZQUFZO0FBQ2hELGVBQU8sV0FBVTtBQUVqQiwyQkFBa0IsUUFBUTtBQUN4QixvQkFBUyxVQUFVLFlBQVksS0FBSyxNQUFNO0FBQzFDLGVBQUssT0FBTyxTQUFTO0FBQUE7QUFHdkIsa0JBQVMsVUFBVSxRQUFRLFdBQVc7QUFDcEMsaUJBQU8sT0FBTyxPQUFPO0FBQUE7QUFHdkIsa0JBQVMsVUFBVSxXQUFXLFNBQVMsU0FBUztBQUM5QyxpQkFBTztBQUFBO0FBR1QsZUFBTztBQUFBLFFBRU47QUFBQSxPQUVGLEtBQUs7QUFBQTtBQUFBOzs7QUM5QlI7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUk7QUFFSixjQUFPLFVBQVUsY0FBZSxXQUFXO0FBQ3pDLDhCQUFxQixPQUFPO0FBQzFCLGVBQUssUUFBUTtBQUFBO0FBR2YsZUFBTyxlQUFlLGFBQVksV0FBVyxVQUFVO0FBQUEsVUFDckQsS0FBSyxXQUFXO0FBQ2QsbUJBQU8sS0FBSyxNQUFNLFVBQVU7QUFBQTtBQUFBO0FBSWhDLHFCQUFZLFVBQVUsUUFBUSxXQUFXO0FBQ3ZDLGlCQUFPLEtBQUssUUFBUTtBQUFBO0FBR3RCLHFCQUFZLFVBQVUsT0FBTyxTQUFTLE9BQU87QUFDM0MsaUJBQU8sS0FBSyxNQUFNLFVBQVU7QUFBQTtBQUc5QixlQUFPO0FBQUE7QUFBQSxPQUlSLEtBQUs7QUFBQTtBQUFBOzs7QUMzQlI7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLGNBQU8sVUFBVTtBQUFBLFFBQ2YsY0FBYztBQUFBLFFBQ2QsV0FBVztBQUFBLFFBQ1gsV0FBVztBQUFBLFFBQ1gsVUFBVTtBQUFBLFFBQ1YsYUFBYTtBQUFBLFFBQ2Isd0JBQXdCO0FBQUE7QUFBQSxPQUd6QixLQUFLO0FBQUE7QUFBQTs7O0FDWFI7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUksa0JBQWtCLFVBQVUsVUFBVSxZQUFZLGdCQUFnQixZQUFZLFVBQVUsWUFBWSxpQkFBaUIsU0FBUyxhQUFhLDBCQUEwQixRQUFRLFNBQVMsVUFBVSxTQUFTLFlBQVksVUFBVSxNQUNqTyxVQUFVLEdBQUc7QUFFZixhQUFPLG1CQUFzQixXQUFXLEtBQUssVUFBVSxhQUFhLEtBQUssWUFBWSxVQUFVLEtBQUssU0FBUyxXQUFXLEtBQUs7QUFFN0gsbUJBQWE7QUFFYixpQkFBVztBQUVYLG1CQUFhO0FBRWIsdUJBQWlCO0FBRWpCLG1CQUFhO0FBRWIsZUFBUztBQUVULGdCQUFVO0FBRVYsaUNBQTJCO0FBRTNCLGlCQUFXO0FBRVgsaUJBQVc7QUFFWCxvQkFBYztBQUVkLHdCQUFrQjtBQUVsQix5QkFBbUI7QUFFbkIsY0FBTyxVQUFVLFVBQVcsV0FBVztBQUNyQywwQkFBaUIsU0FBUztBQUN4QixlQUFLLFNBQVM7QUFDZCxjQUFJLEtBQUssUUFBUTtBQUNmLGlCQUFLLFVBQVUsS0FBSyxPQUFPO0FBQzNCLGlCQUFLLFlBQVksS0FBSyxPQUFPO0FBQUE7QUFFL0IsZUFBSyxRQUFRO0FBQ2IsZUFBSyxXQUFXO0FBQ2hCLGVBQUssVUFBVTtBQUNmLGNBQUksQ0FBQyxZQUFZO0FBQ2YseUJBQWE7QUFDYix1QkFBVztBQUNYLHlCQUFhO0FBQ2IsNkJBQWlCO0FBQ2pCLHlCQUFhO0FBQ2IscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHVDQUEyQjtBQUMzQix1QkFBVztBQUNYLHVCQUFXO0FBQ1gsMEJBQWM7QUFDZCw4QkFBa0I7QUFDbEIsK0JBQW1CO0FBQUE7QUFBQTtBQUl2QixlQUFPLGVBQWUsU0FBUSxXQUFXLFlBQVk7QUFBQSxVQUNuRCxLQUFLLFdBQVc7QUFDZCxtQkFBTyxLQUFLO0FBQUE7QUFBQTtBQUloQixlQUFPLGVBQWUsU0FBUSxXQUFXLFlBQVk7QUFBQSxVQUNuRCxLQUFLLFdBQVc7QUFDZCxtQkFBTyxLQUFLO0FBQUE7QUFBQTtBQUloQixlQUFPLGVBQWUsU0FBUSxXQUFXLGFBQWE7QUFBQSxVQUNwRCxLQUFLLFdBQVc7QUFDZCxtQkFBTyxLQUFLO0FBQUE7QUFBQTtBQUloQixlQUFPLGVBQWUsU0FBUSxXQUFXLGNBQWM7QUFBQSxVQUNyRCxLQUFLLFdBQVc7QUFDZCxtQkFBTyxLQUFLO0FBQUE7QUFBQTtBQUloQixlQUFPLGVBQWUsU0FBUSxXQUFXLGNBQWM7QUFBQSxVQUNyRCxLQUFLLFdBQVc7QUFDZCxnQkFBSSxDQUFDLEtBQUssaUJBQWlCLENBQUMsS0FBSyxjQUFjLE9BQU87QUFDcEQsbUJBQUssZ0JBQWdCLElBQUksWUFBWSxLQUFLO0FBQUE7QUFFNUMsbUJBQU8sS0FBSztBQUFBO0FBQUE7QUFJaEIsZUFBTyxlQUFlLFNBQVEsV0FBVyxjQUFjO0FBQUEsVUFDckQsS0FBSyxXQUFXO0FBQ2QsbUJBQU8sS0FBSyxTQUFTLE1BQU07QUFBQTtBQUFBO0FBSS9CLGVBQU8sZUFBZSxTQUFRLFdBQVcsYUFBYTtBQUFBLFVBQ3BELEtBQUssV0FBVztBQUNkLG1CQUFPLEtBQUssU0FBUyxLQUFLLFNBQVMsU0FBUyxNQUFNO0FBQUE7QUFBQTtBQUl0RCxlQUFPLGVBQWUsU0FBUSxXQUFXLG1CQUFtQjtBQUFBLFVBQzFELEtBQUssV0FBVztBQUNkLGdCQUFJO0FBQ0osZ0JBQUksS0FBSyxPQUFPLFNBQVMsUUFBUTtBQUNqQyxtQkFBTyxLQUFLLE9BQU8sU0FBUyxJQUFJLE1BQU07QUFBQTtBQUFBO0FBSTFDLGVBQU8sZUFBZSxTQUFRLFdBQVcsZUFBZTtBQUFBLFVBQ3RELEtBQUssV0FBVztBQUNkLGdCQUFJO0FBQ0osZ0JBQUksS0FBSyxPQUFPLFNBQVMsUUFBUTtBQUNqQyxtQkFBTyxLQUFLLE9BQU8sU0FBUyxJQUFJLE1BQU07QUFBQTtBQUFBO0FBSTFDLGVBQU8sZUFBZSxTQUFRLFdBQVcsaUJBQWlCO0FBQUEsVUFDeEQsS0FBSyxXQUFXO0FBQ2QsbUJBQU8sS0FBSyxjQUFjO0FBQUE7QUFBQTtBQUk5QixlQUFPLGVBQWUsU0FBUSxXQUFXLGVBQWU7QUFBQSxVQUN0RCxLQUFLLFdBQVc7QUFDZCxnQkFBSSxPQUFPLEdBQUcsS0FBSyxNQUFNO0FBQ3pCLGdCQUFJLEtBQUssYUFBYSxTQUFTLFdBQVcsS0FBSyxhQUFhLFNBQVMsa0JBQWtCO0FBQ3JGLG9CQUFNO0FBQ04scUJBQU8sS0FBSztBQUNaLG1CQUFLLElBQUksR0FBRyxNQUFNLEtBQUssUUFBUSxJQUFJLEtBQUssS0FBSztBQUMzQyx3QkFBUSxLQUFLO0FBQ2Isb0JBQUksTUFBTSxhQUFhO0FBQ3JCLHlCQUFPLE1BQU07QUFBQTtBQUFBO0FBR2pCLHFCQUFPO0FBQUEsbUJBQ0Y7QUFDTCxxQkFBTztBQUFBO0FBQUE7QUFBQSxVQUdYLEtBQUssU0FBUyxPQUFPO0FBQ25CLGtCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBQUE7QUFJakUsaUJBQVEsVUFBVSxZQUFZLFNBQVMsUUFBUTtBQUM3QyxjQUFJLE9BQU8sR0FBRyxLQUFLLE1BQU07QUFDekIsZUFBSyxTQUFTO0FBQ2QsY0FBSSxRQUFRO0FBQ1YsaUJBQUssVUFBVSxPQUFPO0FBQ3RCLGlCQUFLLFlBQVksT0FBTztBQUFBO0FBRTFCLGlCQUFPLEtBQUs7QUFDWixvQkFBVTtBQUNWLGVBQUssSUFBSSxHQUFHLE1BQU0sS0FBSyxRQUFRLElBQUksS0FBSyxLQUFLO0FBQzNDLG9CQUFRLEtBQUs7QUFDYixvQkFBUSxLQUFLLE1BQU0sVUFBVTtBQUFBO0FBRS9CLGlCQUFPO0FBQUE7QUFHVCxpQkFBUSxVQUFVLFVBQVUsU0FBUyxNQUFNLFlBQVksTUFBTTtBQUMzRCxjQUFJLFdBQVcsTUFBTSxHQUFHLEdBQUcsS0FBSyxXQUFXLEtBQUssTUFBTSxNQUFNLE1BQU07QUFDbEUsc0JBQVk7QUFDWixjQUFJLGVBQWUsUUFBUyxRQUFRLE1BQU87QUFDekMsbUJBQU8sQ0FBQyxJQUFJLE9BQU8sYUFBYSxLQUFLLElBQUksT0FBTyxLQUFLO0FBQUE7QUFFdkQsY0FBSSxjQUFjLE1BQU07QUFDdEIseUJBQWE7QUFBQTtBQUVmLHVCQUFhLFNBQVM7QUFDdEIsY0FBSSxDQUFDLFNBQVMsYUFBYTtBQUN6QixtQkFBTyxDQUFDLFlBQVksT0FBTyxPQUFPLEtBQUssSUFBSSxhQUFhLEtBQUs7QUFBQTtBQUUvRCxjQUFJLFFBQVEsTUFBTTtBQUNoQixtQkFBTyxTQUFTO0FBQUE7QUFFbEIsY0FBSSxNQUFNLFFBQVEsT0FBTztBQUN2QixpQkFBSyxJQUFJLEdBQUcsTUFBTSxLQUFLLFFBQVEsSUFBSSxLQUFLLEtBQUs7QUFDM0MscUJBQU8sS0FBSztBQUNaLDBCQUFZLEtBQUssUUFBUTtBQUFBO0FBQUEscUJBRWxCLFdBQVcsT0FBTztBQUMzQix3QkFBWSxLQUFLLFFBQVEsS0FBSztBQUFBLHFCQUNyQixTQUFTLE9BQU87QUFDekIsaUJBQUssT0FBTyxNQUFNO0FBQ2hCLGtCQUFJLENBQUMsUUFBUSxLQUFLLE1BQU07QUFBTTtBQUM5QixvQkFBTSxLQUFLO0FBQ1gsa0JBQUksV0FBVyxNQUFNO0FBQ25CLHNCQUFNLElBQUk7QUFBQTtBQUVaLGtCQUFJLENBQUMsS0FBSyxRQUFRLG9CQUFvQixLQUFLLFVBQVUsaUJBQWlCLElBQUksUUFBUSxLQUFLLFVBQVUsbUJBQW1CLEdBQUc7QUFDckgsNEJBQVksS0FBSyxVQUFVLElBQUksT0FBTyxLQUFLLFVBQVUsY0FBYyxTQUFTO0FBQUEseUJBQ25FLENBQUMsS0FBSyxRQUFRLHNCQUFzQixNQUFNLFFBQVEsUUFBUSxRQUFRLE1BQU07QUFDakYsNEJBQVksS0FBSztBQUFBLHlCQUNSLFNBQVMsUUFBUSxRQUFRLE1BQU07QUFDeEMsNEJBQVksS0FBSyxRQUFRO0FBQUEseUJBQ2hCLENBQUMsS0FBSyxRQUFRLGlCQUFrQixPQUFPLE1BQU87QUFDdkQsNEJBQVksS0FBSztBQUFBLHlCQUNSLENBQUMsS0FBSyxRQUFRLHNCQUFzQixNQUFNLFFBQVEsTUFBTTtBQUNqRSxxQkFBSyxJQUFJLEdBQUcsT0FBTyxJQUFJLFFBQVEsSUFBSSxNQUFNLEtBQUs7QUFDNUMseUJBQU8sSUFBSTtBQUNYLDhCQUFZO0FBQ1osNEJBQVUsT0FBTztBQUNqQiw4QkFBWSxLQUFLLFFBQVE7QUFBQTtBQUFBLHlCQUVsQixTQUFTLE1BQU07QUFDeEIsb0JBQUksQ0FBQyxLQUFLLFFBQVEsb0JBQW9CLEtBQUssVUFBVSxrQkFBa0IsSUFBSSxRQUFRLEtBQUssVUFBVSxvQkFBb0IsR0FBRztBQUN2SCw4QkFBWSxLQUFLLFFBQVE7QUFBQSx1QkFDcEI7QUFDTCw4QkFBWSxLQUFLLFFBQVE7QUFDekIsNEJBQVUsUUFBUTtBQUFBO0FBQUEscUJBRWY7QUFDTCw0QkFBWSxLQUFLLFFBQVEsS0FBSztBQUFBO0FBQUE7QUFBQSxxQkFHekIsQ0FBQyxLQUFLLFFBQVEsaUJBQWlCLFNBQVMsTUFBTTtBQUN2RCx3QkFBWSxLQUFLO0FBQUEsaUJBQ1o7QUFDTCxnQkFBSSxDQUFDLEtBQUssUUFBUSxvQkFBb0IsS0FBSyxVQUFVLGtCQUFrQixLQUFLLFFBQVEsS0FBSyxVQUFVLG9CQUFvQixHQUFHO0FBQ3hILDBCQUFZLEtBQUssS0FBSztBQUFBLHVCQUNiLENBQUMsS0FBSyxRQUFRLG9CQUFvQixLQUFLLFVBQVUsbUJBQW1CLEtBQUssUUFBUSxLQUFLLFVBQVUscUJBQXFCLEdBQUc7QUFDakksMEJBQVksS0FBSyxNQUFNO0FBQUEsdUJBQ2QsQ0FBQyxLQUFLLFFBQVEsb0JBQW9CLEtBQUssVUFBVSxxQkFBcUIsS0FBSyxRQUFRLEtBQUssVUFBVSx1QkFBdUIsR0FBRztBQUNySSwwQkFBWSxLQUFLLFFBQVE7QUFBQSx1QkFDaEIsQ0FBQyxLQUFLLFFBQVEsb0JBQW9CLEtBQUssVUFBVSxpQkFBaUIsS0FBSyxRQUFRLEtBQUssVUFBVSxtQkFBbUIsR0FBRztBQUM3SCwwQkFBWSxLQUFLLElBQUk7QUFBQSx1QkFDWixDQUFDLEtBQUssUUFBUSxvQkFBb0IsS0FBSyxVQUFVLGdCQUFnQixLQUFLLFFBQVEsS0FBSyxVQUFVLGtCQUFrQixHQUFHO0FBQzNILDBCQUFZLEtBQUssWUFBWSxLQUFLLE9BQU8sS0FBSyxVQUFVLGFBQWEsU0FBUztBQUFBLG1CQUN6RTtBQUNMLDBCQUFZLEtBQUssS0FBSyxNQUFNLFlBQVk7QUFBQTtBQUFBO0FBRzVDLGNBQUksYUFBYSxNQUFNO0FBQ3JCLGtCQUFNLElBQUksTUFBTSx5Q0FBeUMsT0FBTyxPQUFPLEtBQUs7QUFBQTtBQUU5RSxpQkFBTztBQUFBO0FBR1QsaUJBQVEsVUFBVSxlQUFlLFNBQVMsTUFBTSxZQUFZLE1BQU07QUFDaEUsY0FBSSxPQUFPLEdBQUcsVUFBVSxVQUFVO0FBQ2xDLGNBQUksUUFBUSxPQUFPLEtBQUssT0FBTyxRQUFRO0FBQ3JDLHVCQUFXO0FBQ1gsdUJBQVc7QUFDWCxxQkFBUyxVQUFVO0FBQ25CLGdCQUFJLFVBQVU7QUFDWixrQkFBSSxTQUFTLFFBQVE7QUFDckIsd0JBQVUsU0FBUyxPQUFPO0FBQzFCLHVCQUFTLEtBQUs7QUFDZCxvQkFBTSxVQUFVLEtBQUssTUFBTSxVQUFVO0FBQUEsbUJBQ2hDO0FBQ0wsdUJBQVMsS0FBSztBQUFBO0FBRWhCLG1CQUFPO0FBQUEsaUJBQ0Y7QUFDTCxnQkFBSSxLQUFLLFFBQVE7QUFDZixvQkFBTSxJQUFJLE1BQU0sMkNBQTJDLEtBQUssVUFBVTtBQUFBO0FBRTVFLGdCQUFJLEtBQUssT0FBTyxTQUFTLFFBQVE7QUFDakMsc0JBQVUsS0FBSyxPQUFPLFNBQVMsT0FBTztBQUN0QyxvQkFBUSxLQUFLLE9BQU8sUUFBUSxNQUFNLFlBQVk7QUFDOUMsa0JBQU0sVUFBVSxLQUFLLE1BQU0sS0FBSyxPQUFPLFVBQVU7QUFDakQsbUJBQU87QUFBQTtBQUFBO0FBSVgsaUJBQVEsVUFBVSxjQUFjLFNBQVMsTUFBTSxZQUFZLE1BQU07QUFDL0QsY0FBSSxPQUFPLEdBQUc7QUFDZCxjQUFJLEtBQUssUUFBUTtBQUNmLGtCQUFNLElBQUksTUFBTSwyQ0FBMkMsS0FBSyxVQUFVO0FBQUE7QUFFNUUsY0FBSSxLQUFLLE9BQU8sU0FBUyxRQUFRO0FBQ2pDLG9CQUFVLEtBQUssT0FBTyxTQUFTLE9BQU8sSUFBSTtBQUMxQyxrQkFBUSxLQUFLLE9BQU8sUUFBUSxNQUFNLFlBQVk7QUFDOUMsZ0JBQU0sVUFBVSxLQUFLLE1BQU0sS0FBSyxPQUFPLFVBQVU7QUFDakQsaUJBQU87QUFBQTtBQUdULGlCQUFRLFVBQVUsU0FBUyxXQUFXO0FBQ3BDLGNBQUksR0FBRztBQUNQLGNBQUksS0FBSyxRQUFRO0FBQ2Ysa0JBQU0sSUFBSSxNQUFNLHFDQUFxQyxLQUFLO0FBQUE7QUFFNUQsY0FBSSxLQUFLLE9BQU8sU0FBUyxRQUFRO0FBQ2pDLGFBQUcsT0FBTyxNQUFNLEtBQUssT0FBTyxVQUFVLENBQUMsR0FBRyxJQUFJLElBQUksR0FBRyxPQUFPLE9BQU8sTUFBTTtBQUN6RSxpQkFBTyxLQUFLO0FBQUE7QUFHZCxpQkFBUSxVQUFVLE9BQU8sU0FBUyxNQUFNLFlBQVksTUFBTTtBQUN4RCxjQUFJLE9BQU87QUFDWCxjQUFJLFFBQVEsTUFBTTtBQUNoQixtQkFBTyxTQUFTO0FBQUE7QUFFbEIsd0JBQWUsY0FBYTtBQUM1Qix1QkFBYSxTQUFTO0FBQ3RCLGNBQUksQ0FBQyxTQUFTLGFBQWE7QUFDekIsbUJBQU8sQ0FBQyxZQUFZLE9BQU8sT0FBTyxLQUFLLElBQUksYUFBYSxLQUFLO0FBQUE7QUFFL0Qsa0JBQVEsSUFBSSxXQUFXLE1BQU0sTUFBTTtBQUNuQyxjQUFJLFFBQVEsTUFBTTtBQUNoQixrQkFBTSxLQUFLO0FBQUE7QUFFYixlQUFLLFNBQVMsS0FBSztBQUNuQixpQkFBTztBQUFBO0FBR1QsaUJBQVEsVUFBVSxPQUFPLFNBQVMsT0FBTztBQUN2QyxjQUFJO0FBQ0osY0FBSSxTQUFTLFFBQVE7QUFDbkIsaUJBQUssUUFBUTtBQUFBO0FBRWYsa0JBQVEsSUFBSSxRQUFRLE1BQU07QUFDMUIsZUFBSyxTQUFTLEtBQUs7QUFDbkIsaUJBQU87QUFBQTtBQUdULGlCQUFRLFVBQVUsUUFBUSxTQUFTLE9BQU87QUFDeEMsY0FBSTtBQUNKLGtCQUFRLElBQUksU0FBUyxNQUFNO0FBQzNCLGVBQUssU0FBUyxLQUFLO0FBQ25CLGlCQUFPO0FBQUE7QUFHVCxpQkFBUSxVQUFVLFVBQVUsU0FBUyxPQUFPO0FBQzFDLGNBQUk7QUFDSixrQkFBUSxJQUFJLFdBQVcsTUFBTTtBQUM3QixlQUFLLFNBQVMsS0FBSztBQUNuQixpQkFBTztBQUFBO0FBR1QsaUJBQVEsVUFBVSxnQkFBZ0IsU0FBUyxPQUFPO0FBQ2hELGNBQUksT0FBTyxHQUFHO0FBQ2QsY0FBSSxLQUFLLE9BQU8sU0FBUyxRQUFRO0FBQ2pDLG9CQUFVLEtBQUssT0FBTyxTQUFTLE9BQU87QUFDdEMsa0JBQVEsS0FBSyxPQUFPLFFBQVE7QUFDNUIsZ0JBQU0sVUFBVSxLQUFLLE1BQU0sS0FBSyxPQUFPLFVBQVU7QUFDakQsaUJBQU87QUFBQTtBQUdULGlCQUFRLFVBQVUsZUFBZSxTQUFTLE9BQU87QUFDL0MsY0FBSSxPQUFPLEdBQUc7QUFDZCxjQUFJLEtBQUssT0FBTyxTQUFTLFFBQVE7QUFDakMsb0JBQVUsS0FBSyxPQUFPLFNBQVMsT0FBTyxJQUFJO0FBQzFDLGtCQUFRLEtBQUssT0FBTyxRQUFRO0FBQzVCLGdCQUFNLFVBQVUsS0FBSyxNQUFNLEtBQUssT0FBTyxVQUFVO0FBQ2pELGlCQUFPO0FBQUE7QUFHVCxpQkFBUSxVQUFVLE1BQU0sU0FBUyxPQUFPO0FBQ3RDLGNBQUk7QUFDSixrQkFBUSxJQUFJLE9BQU8sTUFBTTtBQUN6QixlQUFLLFNBQVMsS0FBSztBQUNuQixpQkFBTztBQUFBO0FBR1QsaUJBQVEsVUFBVSxRQUFRLFdBQVc7QUFDbkMsY0FBSTtBQUNKLGtCQUFRLElBQUksU0FBUztBQUNyQixpQkFBTztBQUFBO0FBR1QsaUJBQVEsVUFBVSxjQUFjLFNBQVMsUUFBUSxPQUFPO0FBQ3RELGNBQUksV0FBVyxVQUFVLGFBQWEsR0FBRztBQUN6QyxjQUFJLFVBQVUsTUFBTTtBQUNsQixxQkFBUyxTQUFTO0FBQUE7QUFFcEIsY0FBSSxTQUFTLE1BQU07QUFDakIsb0JBQVEsU0FBUztBQUFBO0FBRW5CLGNBQUksTUFBTSxRQUFRLFNBQVM7QUFDekIsaUJBQUssSUFBSSxHQUFHLE1BQU0sT0FBTyxRQUFRLElBQUksS0FBSyxLQUFLO0FBQzdDLDBCQUFZLE9BQU87QUFDbkIsbUJBQUssWUFBWTtBQUFBO0FBQUEscUJBRVYsU0FBUyxTQUFTO0FBQzNCLGlCQUFLLGFBQWEsUUFBUTtBQUN4QixrQkFBSSxDQUFDLFFBQVEsS0FBSyxRQUFRO0FBQVk7QUFDdEMseUJBQVcsT0FBTztBQUNsQixtQkFBSyxZQUFZLFdBQVc7QUFBQTtBQUFBLGlCQUV6QjtBQUNMLGdCQUFJLFdBQVcsUUFBUTtBQUNyQixzQkFBUSxNQUFNO0FBQUE7QUFFaEIsMEJBQWMsSUFBSSx5QkFBeUIsTUFBTSxRQUFRO0FBQ3pELGlCQUFLLFNBQVMsS0FBSztBQUFBO0FBRXJCLGlCQUFPO0FBQUE7QUFHVCxpQkFBUSxVQUFVLG9CQUFvQixTQUFTLFFBQVEsT0FBTztBQUM1RCxjQUFJLE9BQU8sR0FBRztBQUNkLGNBQUksS0FBSyxPQUFPLFNBQVMsUUFBUTtBQUNqQyxvQkFBVSxLQUFLLE9BQU8sU0FBUyxPQUFPO0FBQ3RDLGtCQUFRLEtBQUssT0FBTyxZQUFZLFFBQVE7QUFDeEMsZ0JBQU0sVUFBVSxLQUFLLE1BQU0sS0FBSyxPQUFPLFVBQVU7QUFDakQsaUJBQU87QUFBQTtBQUdULGlCQUFRLFVBQVUsbUJBQW1CLFNBQVMsUUFBUSxPQUFPO0FBQzNELGNBQUksT0FBTyxHQUFHO0FBQ2QsY0FBSSxLQUFLLE9BQU8sU0FBUyxRQUFRO0FBQ2pDLG9CQUFVLEtBQUssT0FBTyxTQUFTLE9BQU8sSUFBSTtBQUMxQyxrQkFBUSxLQUFLLE9BQU8sWUFBWSxRQUFRO0FBQ3hDLGdCQUFNLFVBQVUsS0FBSyxNQUFNLEtBQUssT0FBTyxVQUFVO0FBQ2pELGlCQUFPO0FBQUE7QUFHVCxpQkFBUSxVQUFVLGNBQWMsU0FBUyxTQUFTLFVBQVUsWUFBWTtBQUN0RSxjQUFJLEtBQUs7QUFDVCxnQkFBTSxLQUFLO0FBQ1gsbUJBQVMsSUFBSSxlQUFlLEtBQUssU0FBUyxVQUFVO0FBQ3BELGNBQUksSUFBSSxTQUFTLFdBQVcsR0FBRztBQUM3QixnQkFBSSxTQUFTLFFBQVE7QUFBQSxxQkFDWixJQUFJLFNBQVMsR0FBRyxTQUFTLFNBQVMsYUFBYTtBQUN4RCxnQkFBSSxTQUFTLEtBQUs7QUFBQSxpQkFDYjtBQUNMLGdCQUFJLFNBQVMsUUFBUTtBQUFBO0FBRXZCLGlCQUFPLElBQUksVUFBVTtBQUFBO0FBR3ZCLGlCQUFRLFVBQVUsTUFBTSxTQUFTLE9BQU8sT0FBTztBQUM3QyxjQUFJLE9BQU8sS0FBSyxTQUFTLEdBQUcsR0FBRyxHQUFHLEtBQUssTUFBTSxNQUFNO0FBQ25ELGdCQUFNLEtBQUs7QUFDWCxvQkFBVSxJQUFJLFdBQVcsS0FBSyxPQUFPO0FBQ3JDLGlCQUFPLElBQUk7QUFDWCxlQUFLLElBQUksSUFBSSxHQUFHLE1BQU0sS0FBSyxRQUFRLElBQUksS0FBSyxJQUFJLEVBQUUsR0FBRztBQUNuRCxvQkFBUSxLQUFLO0FBQ2IsZ0JBQUksTUFBTSxTQUFTLFNBQVMsU0FBUztBQUNuQyxrQkFBSSxTQUFTLEtBQUs7QUFDbEIscUJBQU87QUFBQTtBQUFBO0FBR1gsaUJBQU8sSUFBSTtBQUNYLGVBQUssSUFBSSxJQUFJLEdBQUcsT0FBTyxLQUFLLFFBQVEsSUFBSSxNQUFNLElBQUksRUFBRSxHQUFHO0FBQ3JELG9CQUFRLEtBQUs7QUFDYixnQkFBSSxNQUFNLFFBQVE7QUFDaEIsa0JBQUksU0FBUyxPQUFPLEdBQUcsR0FBRztBQUMxQixxQkFBTztBQUFBO0FBQUE7QUFHWCxjQUFJLFNBQVMsS0FBSztBQUNsQixpQkFBTztBQUFBO0FBR1QsaUJBQVEsVUFBVSxLQUFLLFdBQVc7QUFDaEMsY0FBSSxLQUFLLFFBQVE7QUFDZixrQkFBTSxJQUFJLE1BQU07QUFBQTtBQUVsQixpQkFBTyxLQUFLO0FBQUE7QUFHZCxpQkFBUSxVQUFVLE9BQU8sV0FBVztBQUNsQyxjQUFJO0FBQ0osaUJBQU87QUFDUCxpQkFBTyxNQUFNO0FBQ1gsZ0JBQUksS0FBSyxTQUFTLFNBQVMsVUFBVTtBQUNuQyxxQkFBTyxLQUFLO0FBQUEsdUJBQ0gsS0FBSyxRQUFRO0FBQ3RCLHFCQUFPO0FBQUEsbUJBQ0Y7QUFDTCxxQkFBTyxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBS2xCLGlCQUFRLFVBQVUsV0FBVyxXQUFXO0FBQ3RDLGNBQUk7QUFDSixpQkFBTztBQUNQLGlCQUFPLE1BQU07QUFDWCxnQkFBSSxLQUFLLFNBQVMsU0FBUyxVQUFVO0FBQ25DLHFCQUFPO0FBQUEsbUJBQ0Y7QUFDTCxxQkFBTyxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBS2xCLGlCQUFRLFVBQVUsTUFBTSxTQUFTLFNBQVM7QUFDeEMsaUJBQU8sS0FBSyxXQUFXLElBQUk7QUFBQTtBQUc3QixpQkFBUSxVQUFVLE9BQU8sV0FBVztBQUNsQyxjQUFJO0FBQ0osY0FBSSxLQUFLLE9BQU8sU0FBUyxRQUFRO0FBQ2pDLGNBQUksSUFBSSxHQUFHO0FBQ1Qsa0JBQU0sSUFBSSxNQUFNLGdDQUFnQyxLQUFLO0FBQUE7QUFFdkQsaUJBQU8sS0FBSyxPQUFPLFNBQVMsSUFBSTtBQUFBO0FBR2xDLGlCQUFRLFVBQVUsT0FBTyxXQUFXO0FBQ2xDLGNBQUk7QUFDSixjQUFJLEtBQUssT0FBTyxTQUFTLFFBQVE7QUFDakMsY0FBSSxNQUFNLE1BQU0sTUFBTSxLQUFLLE9BQU8sU0FBUyxTQUFTLEdBQUc7QUFDckQsa0JBQU0sSUFBSSxNQUFNLCtCQUErQixLQUFLO0FBQUE7QUFFdEQsaUJBQU8sS0FBSyxPQUFPLFNBQVMsSUFBSTtBQUFBO0FBR2xDLGlCQUFRLFVBQVUsaUJBQWlCLFNBQVMsS0FBSztBQUMvQyxjQUFJO0FBQ0osdUJBQWEsSUFBSSxPQUFPO0FBQ3hCLHFCQUFXLFNBQVM7QUFDcEIscUJBQVcsU0FBUztBQUNwQixlQUFLLFNBQVMsS0FBSztBQUNuQixpQkFBTztBQUFBO0FBR1QsaUJBQVEsVUFBVSxZQUFZLFNBQVMsTUFBTTtBQUMzQyxjQUFJLE1BQU07QUFDVixpQkFBTyxRQUFRLEtBQUs7QUFDcEIsY0FBSyxRQUFRLFFBQVMsQ0FBRyxTQUFPLEtBQUssV0FBVyxPQUFPLEtBQUssT0FBTyxTQUFTO0FBQzFFLG1CQUFPO0FBQUEscUJBQ0UsUUFBUSxNQUFNO0FBQ3ZCLG1CQUFPLGNBQWMsS0FBSyxPQUFPLE9BQU87QUFBQSxxQkFDL0IsQ0FBRyxTQUFPLEtBQUssV0FBVyxPQUFPLEtBQUssT0FBTyxTQUFTO0FBQy9ELG1CQUFPLFlBQVksT0FBTztBQUFBLGlCQUNyQjtBQUNMLG1CQUFPLFlBQVksT0FBTyxpQkFBaUIsS0FBSyxPQUFPLE9BQU87QUFBQTtBQUFBO0FBSWxFLGlCQUFRLFVBQVUsTUFBTSxTQUFTLE1BQU0sWUFBWSxNQUFNO0FBQ3ZELGlCQUFPLEtBQUssUUFBUSxNQUFNLFlBQVk7QUFBQTtBQUd4QyxpQkFBUSxVQUFVLE1BQU0sU0FBUyxNQUFNLFlBQVksTUFBTTtBQUN2RCxpQkFBTyxLQUFLLEtBQUssTUFBTSxZQUFZO0FBQUE7QUFHckMsaUJBQVEsVUFBVSxNQUFNLFNBQVMsT0FBTztBQUN0QyxpQkFBTyxLQUFLLEtBQUs7QUFBQTtBQUduQixpQkFBUSxVQUFVLE1BQU0sU0FBUyxPQUFPO0FBQ3RDLGlCQUFPLEtBQUssTUFBTTtBQUFBO0FBR3BCLGlCQUFRLFVBQVUsTUFBTSxTQUFTLE9BQU87QUFDdEMsaUJBQU8sS0FBSyxRQUFRO0FBQUE7QUFHdEIsaUJBQVEsVUFBVSxNQUFNLFNBQVMsUUFBUSxPQUFPO0FBQzlDLGlCQUFPLEtBQUssWUFBWSxRQUFRO0FBQUE7QUFHbEMsaUJBQVEsVUFBVSxNQUFNLFdBQVc7QUFDakMsaUJBQU8sS0FBSztBQUFBO0FBR2QsaUJBQVEsVUFBVSxNQUFNLFNBQVMsU0FBUyxVQUFVLFlBQVk7QUFDOUQsaUJBQU8sS0FBSyxZQUFZLFNBQVMsVUFBVTtBQUFBO0FBRzdDLGlCQUFRLFVBQVUsSUFBSSxTQUFTLE1BQU0sWUFBWSxNQUFNO0FBQ3JELGlCQUFPLEtBQUssUUFBUSxNQUFNLFlBQVk7QUFBQTtBQUd4QyxpQkFBUSxVQUFVLElBQUksU0FBUyxNQUFNLFlBQVksTUFBTTtBQUNyRCxpQkFBTyxLQUFLLEtBQUssTUFBTSxZQUFZO0FBQUE7QUFHckMsaUJBQVEsVUFBVSxJQUFJLFNBQVMsT0FBTztBQUNwQyxpQkFBTyxLQUFLLEtBQUs7QUFBQTtBQUduQixpQkFBUSxVQUFVLElBQUksU0FBUyxPQUFPO0FBQ3BDLGlCQUFPLEtBQUssTUFBTTtBQUFBO0FBR3BCLGlCQUFRLFVBQVUsSUFBSSxTQUFTLE9BQU87QUFDcEMsaUJBQU8sS0FBSyxRQUFRO0FBQUE7QUFHdEIsaUJBQVEsVUFBVSxJQUFJLFNBQVMsT0FBTztBQUNwQyxpQkFBTyxLQUFLLElBQUk7QUFBQTtBQUdsQixpQkFBUSxVQUFVLElBQUksU0FBUyxRQUFRLE9BQU87QUFDNUMsaUJBQU8sS0FBSyxZQUFZLFFBQVE7QUFBQTtBQUdsQyxpQkFBUSxVQUFVLElBQUksV0FBVztBQUMvQixpQkFBTyxLQUFLO0FBQUE7QUFHZCxpQkFBUSxVQUFVLG1CQUFtQixTQUFTLEtBQUs7QUFDakQsaUJBQU8sS0FBSyxlQUFlO0FBQUE7QUFHN0IsaUJBQVEsVUFBVSxlQUFlLFNBQVMsVUFBVSxVQUFVO0FBQzVELGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELGlCQUFRLFVBQVUsY0FBYyxTQUFTLFVBQVU7QUFDakQsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0QsaUJBQVEsVUFBVSxjQUFjLFNBQVMsVUFBVTtBQUNqRCxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCxpQkFBUSxVQUFVLGdCQUFnQixXQUFXO0FBQzNDLGlCQUFPLEtBQUssU0FBUyxXQUFXO0FBQUE7QUFHbEMsaUJBQVEsVUFBVSxZQUFZLFNBQVMsTUFBTTtBQUMzQyxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCxpQkFBUSxVQUFVLFlBQVksV0FBVztBQUN2QyxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCxpQkFBUSxVQUFVLGNBQWMsU0FBUyxTQUFTLFNBQVM7QUFDekQsaUJBQU87QUFBQTtBQUdULGlCQUFRLFVBQVUsZ0JBQWdCLFdBQVc7QUFDM0MsaUJBQU8sS0FBSyxRQUFRLFdBQVc7QUFBQTtBQUdqQyxpQkFBUSxVQUFVLDBCQUEwQixTQUFTLE9BQU87QUFDMUQsY0FBSSxLQUFLO0FBQ1QsZ0JBQU07QUFDTixjQUFJLFFBQVEsT0FBTztBQUNqQixtQkFBTztBQUFBLHFCQUNFLEtBQUssZUFBZSxNQUFNLFlBQVk7QUFDL0Msa0JBQU0saUJBQWlCLGVBQWUsaUJBQWlCO0FBQ3ZELGdCQUFJLEtBQUssV0FBVyxLQUFLO0FBQ3ZCLHFCQUFPLGlCQUFpQjtBQUFBLG1CQUNuQjtBQUNMLHFCQUFPLGlCQUFpQjtBQUFBO0FBRTFCLG1CQUFPO0FBQUEscUJBQ0UsSUFBSSxXQUFXLFFBQVE7QUFDaEMsbUJBQU8saUJBQWlCLFdBQVcsaUJBQWlCO0FBQUEscUJBQzNDLElBQUksYUFBYSxRQUFRO0FBQ2xDLG1CQUFPLGlCQUFpQixXQUFXLGlCQUFpQjtBQUFBLHFCQUMzQyxJQUFJLFlBQVksUUFBUTtBQUNqQyxtQkFBTyxpQkFBaUI7QUFBQSxpQkFDbkI7QUFDTCxtQkFBTyxpQkFBaUI7QUFBQTtBQUFBO0FBSTVCLGlCQUFRLFVBQVUsYUFBYSxTQUFTLE9BQU87QUFDN0MsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0QsaUJBQVEsVUFBVSxlQUFlLFNBQVMsY0FBYztBQUN0RCxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCxpQkFBUSxVQUFVLHFCQUFxQixTQUFTLGNBQWM7QUFDNUQsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0QsaUJBQVEsVUFBVSxxQkFBcUIsU0FBUyxRQUFRO0FBQ3RELGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELGlCQUFRLFVBQVUsY0FBYyxTQUFTLE1BQU07QUFDN0MsY0FBSSxHQUFHLEdBQUc7QUFDVixjQUFJLEtBQUssYUFBYSxLQUFLLFVBQVU7QUFDbkMsbUJBQU87QUFBQTtBQUVULGNBQUksS0FBSyxTQUFTLFdBQVcsS0FBSyxTQUFTLFFBQVE7QUFDakQsbUJBQU87QUFBQTtBQUVULGVBQUssSUFBSSxJQUFJLEdBQUcsT0FBTyxLQUFLLFNBQVMsU0FBUyxHQUFHLEtBQUssT0FBTyxLQUFLLE9BQU8sS0FBSyxNQUFNLElBQUksS0FBSyxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUc7QUFDN0csZ0JBQUksQ0FBQyxLQUFLLFNBQVMsR0FBRyxZQUFZLEtBQUssU0FBUyxLQUFLO0FBQ25ELHFCQUFPO0FBQUE7QUFBQTtBQUdYLGlCQUFPO0FBQUE7QUFHVCxpQkFBUSxVQUFVLGFBQWEsU0FBUyxTQUFTLFNBQVM7QUFDeEQsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0QsaUJBQVEsVUFBVSxjQUFjLFNBQVMsS0FBSyxNQUFNLFNBQVM7QUFDM0QsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0QsaUJBQVEsVUFBVSxjQUFjLFNBQVMsS0FBSztBQUM1QyxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCxpQkFBUSxVQUFVLFdBQVcsU0FBUyxPQUFPO0FBQzNDLGNBQUksQ0FBQyxPQUFPO0FBQ1YsbUJBQU87QUFBQTtBQUVULGlCQUFPLFVBQVUsUUFBUSxLQUFLLGFBQWE7QUFBQTtBQUc3QyxpQkFBUSxVQUFVLGVBQWUsU0FBUyxNQUFNO0FBQzlDLGNBQUksT0FBTyxtQkFBbUIsR0FBRyxLQUFLO0FBQ3RDLGlCQUFPLEtBQUs7QUFDWixlQUFLLElBQUksR0FBRyxNQUFNLEtBQUssUUFBUSxJQUFJLEtBQUssS0FBSztBQUMzQyxvQkFBUSxLQUFLO0FBQ2IsZ0JBQUksU0FBUyxPQUFPO0FBQ2xCLHFCQUFPO0FBQUE7QUFFVCxnQ0FBb0IsTUFBTSxhQUFhO0FBQ3ZDLGdCQUFJLG1CQUFtQjtBQUNyQixxQkFBTztBQUFBO0FBQUE7QUFHWCxpQkFBTztBQUFBO0FBR1QsaUJBQVEsVUFBVSxhQUFhLFNBQVMsTUFBTTtBQUM1QyxpQkFBTyxLQUFLLGFBQWE7QUFBQTtBQUczQixpQkFBUSxVQUFVLGNBQWMsU0FBUyxNQUFNO0FBQzdDLGNBQUksU0FBUztBQUNiLG9CQUFVLEtBQUssYUFBYTtBQUM1QixvQkFBVSxLQUFLLGFBQWE7QUFDNUIsY0FBSSxZQUFZLE1BQU0sWUFBWSxJQUFJO0FBQ3BDLG1CQUFPO0FBQUEsaUJBQ0Y7QUFDTCxtQkFBTyxVQUFVO0FBQUE7QUFBQTtBQUlyQixpQkFBUSxVQUFVLGNBQWMsU0FBUyxNQUFNO0FBQzdDLGNBQUksU0FBUztBQUNiLG9CQUFVLEtBQUssYUFBYTtBQUM1QixvQkFBVSxLQUFLLGFBQWE7QUFDNUIsY0FBSSxZQUFZLE1BQU0sWUFBWSxJQUFJO0FBQ3BDLG1CQUFPO0FBQUEsaUJBQ0Y7QUFDTCxtQkFBTyxVQUFVO0FBQUE7QUFBQTtBQUlyQixpQkFBUSxVQUFVLGVBQWUsU0FBUyxNQUFNO0FBQzlDLGNBQUksT0FBTztBQUNYLGdCQUFNO0FBQ04sa0JBQVE7QUFDUixlQUFLLGdCQUFnQixLQUFLLFlBQVksU0FBUyxXQUFXO0FBQ3hEO0FBQ0EsZ0JBQUksQ0FBQyxTQUFTLGNBQWMsTUFBTTtBQUNoQyxxQkFBTyxRQUFRO0FBQUE7QUFBQTtBQUduQixjQUFJLE9BQU87QUFDVCxtQkFBTztBQUFBLGlCQUNGO0FBQ0wsbUJBQU87QUFBQTtBQUFBO0FBSVgsaUJBQVEsVUFBVSxrQkFBa0IsU0FBUyxNQUFNLE1BQU07QUFDdkQsY0FBSSxPQUFPLEdBQUcsS0FBSyxNQUFNO0FBQ3pCLGtCQUFTLFFBQU8sS0FBSztBQUNyQixpQkFBTyxLQUFLO0FBQ1osZUFBSyxJQUFJLEdBQUcsTUFBTSxLQUFLLFFBQVEsSUFBSSxLQUFLLEtBQUs7QUFDM0Msb0JBQVEsS0FBSztBQUNiLGdCQUFJLE1BQU0sS0FBSyxRQUFRO0FBQ3JCLHFCQUFPO0FBQUEsbUJBQ0Y7QUFDTCxvQkFBTSxLQUFLLGdCQUFnQixPQUFPO0FBQ2xDLGtCQUFJLEtBQUs7QUFDUCx1QkFBTztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTWYsZUFBTztBQUFBO0FBQUEsT0FJUixLQUFLO0FBQUE7QUFBQTs7O0FDaHhCUjtBQUFBO0FBQ0EsSUFBQyxZQUFXO0FBQ1YsVUFBSSxnQkFDRixPQUFPLFNBQVMsSUFBSSxJQUFHO0FBQUUsZUFBTyxXQUFVO0FBQUUsaUJBQU8sR0FBRyxNQUFNLElBQUk7QUFBQTtBQUFBLFNBQ2hFLFVBQVUsR0FBRztBQUVmLGNBQU8sVUFBVSxpQkFBa0IsV0FBVztBQUM1QyxpQ0FBd0IsU0FBUztBQUMvQixlQUFLLGtCQUFrQixLQUFLLEtBQUssaUJBQWlCO0FBQ2xELGVBQUssa0JBQWtCLEtBQUssS0FBSyxpQkFBaUI7QUFDbEQsY0FBSSxLQUFLLEtBQUs7QUFDZCxxQkFBWSxXQUFVO0FBQ3RCLGVBQUssVUFBVTtBQUNmLGNBQUksQ0FBQyxLQUFLLFFBQVEsU0FBUztBQUN6QixpQkFBSyxRQUFRLFVBQVU7QUFBQTtBQUV6QixnQkFBTSxRQUFRLGFBQWE7QUFDM0IsZUFBSyxPQUFPLEtBQUs7QUFDZixnQkFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLO0FBQU07QUFDN0Isb0JBQVEsSUFBSTtBQUNaLGlCQUFLLE9BQU87QUFBQTtBQUFBO0FBSWhCLHdCQUFlLFVBQVUsT0FBTyxTQUFTLEtBQUs7QUFDNUMsY0FBSSxLQUFLLFFBQVEsY0FBYztBQUM3QixtQkFBTztBQUFBO0FBRVQsaUJBQU8sS0FBSyxnQkFBZ0IsS0FBSyxPQUFPO0FBQUE7QUFHMUMsd0JBQWUsVUFBVSxPQUFPLFNBQVMsS0FBSztBQUM1QyxjQUFJLEtBQUssUUFBUSxjQUFjO0FBQzdCLG1CQUFPO0FBQUE7QUFFVCxpQkFBTyxLQUFLLGdCQUFnQixLQUFLLFdBQVcsS0FBSyxPQUFPO0FBQUE7QUFHMUQsd0JBQWUsVUFBVSxRQUFRLFNBQVMsS0FBSztBQUM3QyxjQUFJLEtBQUssUUFBUSxjQUFjO0FBQzdCLG1CQUFPO0FBQUE7QUFFVCxnQkFBTSxLQUFLLE9BQU87QUFDbEIsZ0JBQU0sSUFBSSxRQUFRLE9BQU87QUFDekIsaUJBQU8sS0FBSyxnQkFBZ0I7QUFBQTtBQUc5Qix3QkFBZSxVQUFVLFVBQVUsU0FBUyxLQUFLO0FBQy9DLGNBQUksS0FBSyxRQUFRLGNBQWM7QUFDN0IsbUJBQU87QUFBQTtBQUVULGdCQUFNLEtBQUssT0FBTztBQUNsQixjQUFJLElBQUksTUFBTSxPQUFPO0FBQ25CLGtCQUFNLElBQUksTUFBTSwrQ0FBK0M7QUFBQTtBQUVqRSxpQkFBTyxLQUFLLGdCQUFnQjtBQUFBO0FBRzlCLHdCQUFlLFVBQVUsTUFBTSxTQUFTLEtBQUs7QUFDM0MsY0FBSSxLQUFLLFFBQVEsY0FBYztBQUM3QixtQkFBTztBQUFBO0FBRVQsaUJBQU8sS0FBSyxPQUFPO0FBQUE7QUFHckIsd0JBQWUsVUFBVSxXQUFXLFNBQVMsS0FBSztBQUNoRCxjQUFJLEtBQUssUUFBUSxjQUFjO0FBQzdCLG1CQUFPO0FBQUE7QUFFVCxpQkFBTyxLQUFLLGdCQUFnQixLQUFLLFVBQVUsTUFBTSxLQUFLLE9BQU87QUFBQTtBQUcvRCx3QkFBZSxVQUFVLFlBQVksU0FBUyxLQUFLO0FBQ2pELGNBQUksS0FBSyxRQUFRLGNBQWM7QUFDN0IsbUJBQU87QUFBQTtBQUVULGlCQUFPLEtBQUssZ0JBQWdCLEtBQUssT0FBTztBQUFBO0FBRzFDLHdCQUFlLFVBQVUsV0FBVyxTQUFTLEtBQUs7QUFDaEQsY0FBSSxLQUFLLFFBQVEsY0FBYztBQUM3QixtQkFBTztBQUFBO0FBRVQsZ0JBQU0sS0FBSyxPQUFPO0FBQ2xCLGNBQUksSUFBSSxNQUFNLFFBQVE7QUFDcEIsa0JBQU0sSUFBSSxNQUFNLDJDQUEyQztBQUFBO0FBRTdELGlCQUFPLEtBQUssZ0JBQWdCO0FBQUE7QUFHOUIsd0JBQWUsVUFBVSxhQUFhLFNBQVMsS0FBSztBQUNsRCxjQUFJLEtBQUssUUFBUSxjQUFjO0FBQzdCLG1CQUFPO0FBQUE7QUFFVCxnQkFBTSxLQUFLLE9BQU87QUFDbEIsY0FBSSxDQUFDLElBQUksTUFBTSxjQUFjO0FBQzNCLGtCQUFNLElBQUksTUFBTSw2QkFBNkI7QUFBQTtBQUUvQyxpQkFBTztBQUFBO0FBR1Qsd0JBQWUsVUFBVSxjQUFjLFNBQVMsS0FBSztBQUNuRCxjQUFJLEtBQUssUUFBUSxjQUFjO0FBQzdCLG1CQUFPO0FBQUE7QUFFVCxnQkFBTSxLQUFLLE9BQU87QUFDbEIsY0FBSSxDQUFDLElBQUksTUFBTSxrQ0FBa0M7QUFDL0Msa0JBQU0sSUFBSSxNQUFNLHVCQUF1QjtBQUFBO0FBRXpDLGlCQUFPLEtBQUssZ0JBQWdCO0FBQUE7QUFHOUIsd0JBQWUsVUFBVSxnQkFBZ0IsU0FBUyxLQUFLO0FBQ3JELGNBQUksS0FBSyxRQUFRLGNBQWM7QUFDN0IsbUJBQU87QUFBQTtBQUVULGNBQUksS0FBSztBQUNQLG1CQUFPO0FBQUEsaUJBQ0Y7QUFDTCxtQkFBTztBQUFBO0FBQUE7QUFJWCx3QkFBZSxVQUFVLFdBQVcsU0FBUyxLQUFLO0FBQ2hELGNBQUksS0FBSyxRQUFRLGNBQWM7QUFDN0IsbUJBQU87QUFBQTtBQUVULGlCQUFPLEtBQUssZ0JBQWdCLEtBQUssT0FBTztBQUFBO0FBRzFDLHdCQUFlLFVBQVUsV0FBVyxTQUFTLEtBQUs7QUFDaEQsY0FBSSxLQUFLLFFBQVEsY0FBYztBQUM3QixtQkFBTztBQUFBO0FBRVQsaUJBQU8sS0FBSyxnQkFBZ0IsS0FBSyxPQUFPO0FBQUE7QUFHMUMsd0JBQWUsVUFBVSxrQkFBa0IsU0FBUyxLQUFLO0FBQ3ZELGNBQUksS0FBSyxRQUFRLGNBQWM7QUFDN0IsbUJBQU87QUFBQTtBQUVULGlCQUFPLEtBQUssZ0JBQWdCLEtBQUssT0FBTztBQUFBO0FBRzFDLHdCQUFlLFVBQVUsYUFBYSxTQUFTLEtBQUs7QUFDbEQsY0FBSSxLQUFLLFFBQVEsY0FBYztBQUM3QixtQkFBTztBQUFBO0FBRVQsaUJBQU8sS0FBSyxnQkFBZ0IsS0FBSyxPQUFPO0FBQUE7QUFHMUMsd0JBQWUsVUFBVSxnQkFBZ0IsU0FBUyxLQUFLO0FBQ3JELGNBQUksS0FBSyxRQUFRLGNBQWM7QUFDN0IsbUJBQU87QUFBQTtBQUVULGlCQUFPLEtBQUssZ0JBQWdCLEtBQUssT0FBTztBQUFBO0FBRzFDLHdCQUFlLFVBQVUsaUJBQWlCLFNBQVMsS0FBSztBQUN0RCxjQUFJLEtBQUssUUFBUSxjQUFjO0FBQzdCLG1CQUFPO0FBQUE7QUFFVCxpQkFBTyxLQUFLLGdCQUFnQixLQUFLLE9BQU87QUFBQTtBQUcxQyx3QkFBZSxVQUFVLFdBQVcsU0FBUyxLQUFLO0FBQ2hELGNBQUksS0FBSyxRQUFRLGNBQWM7QUFDN0IsbUJBQU87QUFBQTtBQUVULGlCQUFPLEtBQUssZ0JBQWdCLEtBQUssT0FBTztBQUFBO0FBRzFDLHdCQUFlLFVBQVUsZ0JBQWdCO0FBRXpDLHdCQUFlLFVBQVUsZUFBZTtBQUV4Qyx3QkFBZSxVQUFVLGlCQUFpQjtBQUUxQyx3QkFBZSxVQUFVLGtCQUFrQjtBQUUzQyx3QkFBZSxVQUFVLG9CQUFvQjtBQUU3Qyx3QkFBZSxVQUFVLGdCQUFnQjtBQUV6Qyx3QkFBZSxVQUFVLGtCQUFrQixTQUFTLEtBQUs7QUFDdkQsY0FBSSxPQUFPO0FBQ1gsY0FBSSxLQUFLLFFBQVEsY0FBYztBQUM3QixtQkFBTztBQUFBO0FBRVQsa0JBQVE7QUFDUixjQUFJLEtBQUssUUFBUSxZQUFZLE9BQU87QUFDbEMsb0JBQVE7QUFDUixnQkFBSSxNQUFNLElBQUksTUFBTSxRQUFRO0FBQzFCLG9CQUFNLElBQUksTUFBTSxrQ0FBa0MsTUFBTSxlQUFlLElBQUk7QUFBQTtBQUFBLHFCQUVwRSxLQUFLLFFBQVEsWUFBWSxPQUFPO0FBQ3pDLG9CQUFRO0FBQ1IsZ0JBQUksTUFBTSxJQUFJLE1BQU0sUUFBUTtBQUMxQixvQkFBTSxJQUFJLE1BQU0sa0NBQWtDLE1BQU0sZUFBZSxJQUFJO0FBQUE7QUFBQTtBQUcvRSxpQkFBTztBQUFBO0FBR1Qsd0JBQWUsVUFBVSxrQkFBa0IsU0FBUyxLQUFLO0FBQ3ZELGNBQUk7QUFDSixjQUFJLEtBQUssUUFBUSxjQUFjO0FBQzdCLG1CQUFPO0FBQUE7QUFFVCxlQUFLLGdCQUFnQjtBQUNyQixrQkFBUTtBQUNSLGNBQUksQ0FBQyxJQUFJLE1BQU0sUUFBUTtBQUNyQixrQkFBTSxJQUFJLE1BQU07QUFBQTtBQUVsQixpQkFBTztBQUFBO0FBR1Qsd0JBQWUsVUFBVSxhQUFhLFNBQVMsS0FBSztBQUNsRCxjQUFJO0FBQ0osY0FBSSxLQUFLLFFBQVEsY0FBYztBQUM3QixtQkFBTztBQUFBO0FBRVQscUJBQVcsS0FBSyxRQUFRLG1CQUFtQixnQkFBZ0I7QUFDM0QsaUJBQU8sSUFBSSxRQUFRLFVBQVUsU0FBUyxRQUFRLE1BQU0sUUFBUSxRQUFRLE1BQU0sUUFBUSxRQUFRLE9BQU87QUFBQTtBQUduRyx3QkFBZSxVQUFVLFlBQVksU0FBUyxLQUFLO0FBQ2pELGNBQUk7QUFDSixjQUFJLEtBQUssUUFBUSxjQUFjO0FBQzdCLG1CQUFPO0FBQUE7QUFFVCxxQkFBVyxLQUFLLFFBQVEsbUJBQW1CLGdCQUFnQjtBQUMzRCxpQkFBTyxJQUFJLFFBQVEsVUFBVSxTQUFTLFFBQVEsTUFBTSxRQUFRLFFBQVEsTUFBTSxVQUFVLFFBQVEsT0FBTyxTQUFTLFFBQVEsT0FBTyxTQUFTLFFBQVEsT0FBTztBQUFBO0FBR3JKLGVBQU87QUFBQTtBQUFBLE9BSVIsS0FBSztBQUFBO0FBQUE7OztBQy9PUjtBQUFBO0FBQ0EsSUFBQyxZQUFXO0FBQ1YsY0FBTyxVQUFVO0FBQUEsUUFDZixNQUFNO0FBQUEsUUFDTixTQUFTO0FBQUEsUUFDVCxXQUFXO0FBQUEsUUFDWCxVQUFVO0FBQUE7QUFBQSxPQUdYLEtBQUs7QUFBQTtBQUFBOzs7QUNUUjtBQUFBO0FBQ0EsSUFBQyxZQUFXO0FBQ1YsVUFBSSxVQUFVLGFBQWEsVUFBVSxZQUFZLGVBQWUsZUFBZSxjQUFjLGdCQUFnQixnQkFBZ0IsWUFBWSxVQUFVLFlBQVksMEJBQTBCLFFBQVEsU0FBUyxlQUFlLFFBQ3ZOLFVBQVUsR0FBRztBQUVmLGVBQVMsa0JBQXFCO0FBRTlCLGlCQUFXO0FBRVgsdUJBQWlCO0FBRWpCLG1CQUFhO0FBRWIsaUJBQVc7QUFFWCxtQkFBYTtBQUViLG1CQUFhO0FBRWIsZUFBUztBQUVULGdCQUFVO0FBRVYsaUNBQTJCO0FBRTNCLGlCQUFXO0FBRVgsc0JBQWdCO0FBRWhCLHNCQUFnQjtBQUVoQixxQkFBZTtBQUVmLHVCQUFpQjtBQUVqQixvQkFBYztBQUVkLGNBQU8sVUFBVSxnQkFBaUIsV0FBVztBQUMzQyxnQ0FBdUIsU0FBUztBQUM5QixjQUFJLEtBQUssS0FBSztBQUNkLHFCQUFZLFdBQVU7QUFDdEIsZUFBSyxVQUFVO0FBQ2YsZ0JBQU0sUUFBUSxVQUFVO0FBQ3hCLGVBQUssT0FBTyxLQUFLO0FBQ2YsZ0JBQUksQ0FBQyxRQUFRLEtBQUssS0FBSztBQUFNO0FBQzdCLG9CQUFRLElBQUk7QUFDWixpQkFBSyxNQUFNLE9BQU8sS0FBSztBQUN2QixpQkFBSyxPQUFPO0FBQUE7QUFBQTtBQUloQix1QkFBYyxVQUFVLGdCQUFnQixTQUFTLFNBQVM7QUFDeEQsY0FBSSxpQkFBaUIsS0FBSyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDeEQscUJBQVksV0FBVTtBQUN0QixvQkFBVSxPQUFPLElBQUksS0FBSyxTQUFTO0FBQ25DLDRCQUFrQjtBQUFBLFlBQ2hCLFFBQVE7QUFBQTtBQUVWLDBCQUFnQixTQUFTLFFBQVEsVUFBVTtBQUMzQywwQkFBZ0IsYUFBYSxRQUFRLGNBQWM7QUFDbkQsMEJBQWdCLFNBQVUsT0FBTSxRQUFRLFdBQVcsT0FBTyxNQUFNO0FBQ2hFLDBCQUFnQixVQUFXLFFBQU8sUUFBUSxZQUFZLE9BQU8sT0FBTztBQUNwRSwwQkFBZ0IsU0FBVSxRQUFPLFFBQVEsV0FBVyxPQUFPLE9BQU87QUFDbEUsMEJBQWdCLHNCQUF1QixRQUFRLFFBQU8sUUFBUSx3QkFBd0IsT0FBTyxPQUFPLFFBQVEsd0JBQXdCLE9BQU8sT0FBTztBQUNsSiwwQkFBZ0IsbUJBQW9CLFFBQVEsUUFBTyxRQUFRLHFCQUFxQixPQUFPLE9BQU8sUUFBUSxxQkFBcUIsT0FBTyxPQUFPO0FBQ3pJLGNBQUksZ0JBQWdCLHFCQUFxQixNQUFNO0FBQzdDLDRCQUFnQixtQkFBbUI7QUFBQTtBQUVyQywwQkFBZ0Isc0JBQXNCO0FBQ3RDLDBCQUFnQixPQUFPO0FBQ3ZCLDBCQUFnQixRQUFRLFlBQVk7QUFDcEMsaUJBQU87QUFBQTtBQUdULHVCQUFjLFVBQVUsU0FBUyxTQUFTLE1BQU0sU0FBUyxPQUFPO0FBQzlELGNBQUk7QUFDSixjQUFJLENBQUMsUUFBUSxVQUFVLFFBQVEscUJBQXFCO0FBQ2xELG1CQUFPO0FBQUEscUJBQ0UsUUFBUSxRQUFRO0FBQ3pCLDBCQUFlLFVBQVMsS0FBSyxRQUFRLFNBQVM7QUFDOUMsZ0JBQUksY0FBYyxHQUFHO0FBQ25CLHFCQUFPLElBQUksTUFBTSxhQUFhLEtBQUssUUFBUTtBQUFBO0FBQUE7QUFHL0MsaUJBQU87QUFBQTtBQUdULHVCQUFjLFVBQVUsVUFBVSxTQUFTLE1BQU0sU0FBUyxPQUFPO0FBQy9ELGNBQUksQ0FBQyxRQUFRLFVBQVUsUUFBUSxxQkFBcUI7QUFDbEQsbUJBQU87QUFBQSxpQkFDRjtBQUNMLG1CQUFPLFFBQVE7QUFBQTtBQUFBO0FBSW5CLHVCQUFjLFVBQVUsWUFBWSxTQUFTLEtBQUssU0FBUyxPQUFPO0FBQ2hFLGNBQUk7QUFDSixlQUFLLGNBQWMsS0FBSyxTQUFTO0FBQ2pDLGNBQUksTUFBTSxJQUFJLE9BQU8sT0FBTyxJQUFJLFFBQVE7QUFDeEMsZUFBSyxlQUFlLEtBQUssU0FBUztBQUNsQyxpQkFBTztBQUFBO0FBR1QsdUJBQWMsVUFBVSxRQUFRLFNBQVMsTUFBTSxTQUFTLE9BQU87QUFDN0QsY0FBSTtBQUNKLGVBQUssU0FBUyxNQUFNLFNBQVM7QUFDN0Isa0JBQVEsUUFBUSxZQUFZO0FBQzVCLGNBQUksS0FBSyxPQUFPLE1BQU0sU0FBUyxTQUFTO0FBQ3hDLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixlQUFLLEtBQUs7QUFDVixrQkFBUSxRQUFRLFlBQVk7QUFDNUIsZUFBSyxRQUFRLEtBQUssUUFBUSxNQUFNLFNBQVM7QUFDekMsa0JBQVEsUUFBUSxZQUFZO0FBQzVCLGVBQUssVUFBVSxNQUFNLFNBQVM7QUFDOUIsaUJBQU87QUFBQTtBQUdULHVCQUFjLFVBQVUsVUFBVSxTQUFTLE1BQU0sU0FBUyxPQUFPO0FBQy9ELGNBQUk7QUFDSixlQUFLLFNBQVMsTUFBTSxTQUFTO0FBQzdCLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixjQUFJLEtBQUssT0FBTyxNQUFNLFNBQVMsU0FBUztBQUN4QyxrQkFBUSxRQUFRLFlBQVk7QUFDNUIsZUFBSyxLQUFLO0FBQ1Ysa0JBQVEsUUFBUSxZQUFZO0FBQzVCLGVBQUssU0FBUyxLQUFLLFFBQVEsTUFBTSxTQUFTO0FBQzFDLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixlQUFLLFVBQVUsTUFBTSxTQUFTO0FBQzlCLGlCQUFPO0FBQUE7QUFHVCx1QkFBYyxVQUFVLGNBQWMsU0FBUyxNQUFNLFNBQVMsT0FBTztBQUNuRSxjQUFJO0FBQ0osZUFBSyxTQUFTLE1BQU0sU0FBUztBQUM3QixrQkFBUSxRQUFRLFlBQVk7QUFDNUIsY0FBSSxLQUFLLE9BQU8sTUFBTSxTQUFTLFNBQVM7QUFDeEMsa0JBQVEsUUFBUSxZQUFZO0FBQzVCLGVBQUssZUFBZSxLQUFLLFVBQVU7QUFDbkMsY0FBSSxLQUFLLFlBQVksTUFBTTtBQUN6QixpQkFBSyxnQkFBZ0IsS0FBSyxXQUFXO0FBQUE7QUFFdkMsY0FBSSxLQUFLLGNBQWMsTUFBTTtBQUMzQixpQkFBSyxrQkFBa0IsS0FBSyxhQUFhO0FBQUE7QUFFM0Msa0JBQVEsUUFBUSxZQUFZO0FBQzVCLGVBQUssUUFBUSxtQkFBbUI7QUFDaEMsZUFBSyxLQUFLLFFBQVEsTUFBTSxTQUFTO0FBQ2pDLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixlQUFLLFVBQVUsTUFBTSxTQUFTO0FBQzlCLGlCQUFPO0FBQUE7QUFHVCx1QkFBYyxVQUFVLFVBQVUsU0FBUyxNQUFNLFNBQVMsT0FBTztBQUMvRCxjQUFJLE9BQU8sR0FBRyxLQUFLLEdBQUc7QUFDdEIsbUJBQVUsU0FBUTtBQUNsQixlQUFLLFNBQVMsTUFBTSxTQUFTO0FBQzdCLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixjQUFJLEtBQUssT0FBTyxNQUFNLFNBQVM7QUFDL0IsZUFBSyxlQUFlLEtBQUssT0FBTztBQUNoQyxjQUFJLEtBQUssU0FBUyxLQUFLLE9BQU87QUFDNUIsaUJBQUssY0FBYyxLQUFLLFFBQVEsUUFBUSxLQUFLLFFBQVE7QUFBQSxxQkFDNUMsS0FBSyxPQUFPO0FBQ3JCLGlCQUFLLGNBQWMsS0FBSyxRQUFRO0FBQUE7QUFFbEMsY0FBSSxLQUFLLFNBQVMsU0FBUyxHQUFHO0FBQzVCLGlCQUFLO0FBQ0wsaUJBQUssS0FBSyxRQUFRLE1BQU0sU0FBUztBQUNqQyxvQkFBUSxRQUFRLFlBQVk7QUFDNUIsa0JBQU0sS0FBSztBQUNYLGlCQUFLLElBQUksR0FBRyxNQUFNLElBQUksUUFBUSxJQUFJLEtBQUssS0FBSztBQUMxQyxzQkFBUSxJQUFJO0FBQ1osbUJBQUssS0FBSyxlQUFlLE9BQU8sU0FBUyxRQUFRO0FBQUE7QUFFbkQsb0JBQVEsUUFBUSxZQUFZO0FBQzVCLGlCQUFLO0FBQUE7QUFFUCxrQkFBUSxRQUFRLFlBQVk7QUFDNUIsZUFBSyxRQUFRLG1CQUFtQjtBQUNoQyxlQUFLLEtBQUssUUFBUSxNQUFNLFNBQVM7QUFDakMsa0JBQVEsUUFBUSxZQUFZO0FBQzVCLGVBQUssVUFBVSxNQUFNLFNBQVM7QUFDOUIsaUJBQU87QUFBQTtBQUdULHVCQUFjLFVBQVUsVUFBVSxTQUFTLE1BQU0sU0FBUyxPQUFPO0FBQy9ELGNBQUksS0FBSyxPQUFPLGdCQUFnQixnQkFBZ0IsR0FBRyxHQUFHLEtBQUssTUFBTSxNQUFNLGtCQUFrQixHQUFHLEtBQUssTUFBTTtBQUN2RyxtQkFBVSxTQUFRO0FBQ2xCLDZCQUFtQjtBQUNuQixjQUFJO0FBQ0osZUFBSyxTQUFTLE1BQU0sU0FBUztBQUM3QixrQkFBUSxRQUFRLFlBQVk7QUFDNUIsZUFBSyxLQUFLLE9BQU8sTUFBTSxTQUFTLFNBQVMsTUFBTSxLQUFLO0FBQ3BELGdCQUFNLEtBQUs7QUFDWCxlQUFLLFFBQVEsS0FBSztBQUNoQixnQkFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLO0FBQU87QUFDOUIsa0JBQU0sSUFBSTtBQUNWLGlCQUFLLEtBQUssVUFBVSxLQUFLLFNBQVM7QUFBQTtBQUVwQywyQkFBaUIsS0FBSyxTQUFTO0FBQy9CLDJCQUFpQixtQkFBbUIsSUFBSSxPQUFPLEtBQUssU0FBUztBQUM3RCxjQUFJLG1CQUFtQixLQUFLLEtBQUssU0FBUyxNQUFNLFNBQVMsR0FBRztBQUMxRCxtQkFBUSxHQUFFLFNBQVMsU0FBUyxRQUFRLEVBQUUsU0FBUyxTQUFTLFFBQVEsRUFBRSxVQUFVO0FBQUEsY0FDMUU7QUFDRixnQkFBSSxRQUFRLFlBQVk7QUFDdEIsbUJBQUs7QUFDTCxzQkFBUSxRQUFRLFlBQVk7QUFDNUIsbUJBQUssT0FBTyxLQUFLLE9BQU8sTUFBTSxLQUFLLFFBQVEsTUFBTSxTQUFTO0FBQUEsbUJBQ3JEO0FBQ0wsc0JBQVEsUUFBUSxZQUFZO0FBQzVCLG1CQUFLLFFBQVEsbUJBQW1CLE9BQU8sS0FBSyxRQUFRLE1BQU0sU0FBUztBQUFBO0FBQUEscUJBRTVELFFBQVEsVUFBVSxtQkFBbUIsS0FBTSxnQkFBZSxTQUFTLFNBQVMsUUFBUSxlQUFlLFNBQVMsU0FBUyxRQUFTLGVBQWUsU0FBUyxNQUFPO0FBQ3RLLGlCQUFLO0FBQ0wsb0JBQVEsUUFBUSxZQUFZO0FBQzVCLG9CQUFRO0FBQ1IsK0JBQW1CO0FBQ25CLGlCQUFLLEtBQUssZUFBZSxnQkFBZ0IsU0FBUyxRQUFRO0FBQzFELG9CQUFRO0FBQ1IsK0JBQW1CO0FBQ25CLG9CQUFRLFFBQVEsWUFBWTtBQUM1QixpQkFBSyxPQUFPLEtBQUssT0FBTyxNQUFNLEtBQUssUUFBUSxNQUFNLFNBQVM7QUFBQSxpQkFDckQ7QUFDTCxnQkFBSSxRQUFRLHFCQUFxQjtBQUMvQixxQkFBTyxLQUFLO0FBQ1osbUJBQUssSUFBSSxHQUFHLE1BQU0sS0FBSyxRQUFRLElBQUksS0FBSyxLQUFLO0FBQzNDLHdCQUFRLEtBQUs7QUFDYixvQkFBSyxPQUFNLFNBQVMsU0FBUyxRQUFRLE1BQU0sU0FBUyxTQUFTLFFBQVMsTUFBTSxTQUFTLE1BQU87QUFDMUYsMEJBQVE7QUFDUixxQ0FBbUI7QUFDbkI7QUFBQTtBQUFBO0FBQUE7QUFJTixpQkFBSyxNQUFNLEtBQUssUUFBUSxNQUFNLFNBQVM7QUFDdkMsb0JBQVEsUUFBUSxZQUFZO0FBQzVCLG1CQUFPLEtBQUs7QUFDWixpQkFBSyxJQUFJLEdBQUcsT0FBTyxLQUFLLFFBQVEsSUFBSSxNQUFNLEtBQUs7QUFDN0Msc0JBQVEsS0FBSztBQUNiLG1CQUFLLEtBQUssZUFBZSxPQUFPLFNBQVMsUUFBUTtBQUFBO0FBRW5ELG9CQUFRLFFBQVEsWUFBWTtBQUM1QixpQkFBSyxLQUFLLE9BQU8sTUFBTSxTQUFTLFNBQVMsT0FBTyxLQUFLLE9BQU87QUFDNUQsZ0JBQUksa0JBQWtCO0FBQ3BCLHNCQUFRO0FBQUE7QUFFVixpQkFBSyxLQUFLLFFBQVEsTUFBTSxTQUFTO0FBQ2pDLG9CQUFRLFFBQVEsWUFBWTtBQUFBO0FBRTlCLGVBQUssVUFBVSxNQUFNLFNBQVM7QUFDOUIsaUJBQU87QUFBQTtBQUdULHVCQUFjLFVBQVUsaUJBQWlCLFNBQVMsTUFBTSxTQUFTLE9BQU87QUFDdEUsa0JBQVEsS0FBSztBQUFBLGlCQUNOLFNBQVM7QUFDWixxQkFBTyxLQUFLLE1BQU0sTUFBTSxTQUFTO0FBQUEsaUJBQzlCLFNBQVM7QUFDWixxQkFBTyxLQUFLLFFBQVEsTUFBTSxTQUFTO0FBQUEsaUJBQ2hDLFNBQVM7QUFDWixxQkFBTyxLQUFLLFFBQVEsTUFBTSxTQUFTO0FBQUEsaUJBQ2hDLFNBQVM7QUFDWixxQkFBTyxLQUFLLElBQUksTUFBTSxTQUFTO0FBQUEsaUJBQzVCLFNBQVM7QUFDWixxQkFBTyxLQUFLLEtBQUssTUFBTSxTQUFTO0FBQUEsaUJBQzdCLFNBQVM7QUFDWixxQkFBTyxLQUFLLHNCQUFzQixNQUFNLFNBQVM7QUFBQSxpQkFDOUMsU0FBUztBQUNaLHFCQUFPO0FBQUEsaUJBQ0osU0FBUztBQUNaLHFCQUFPLEtBQUssWUFBWSxNQUFNLFNBQVM7QUFBQSxpQkFDcEMsU0FBUztBQUNaLHFCQUFPLEtBQUssUUFBUSxNQUFNLFNBQVM7QUFBQSxpQkFDaEMsU0FBUztBQUNaLHFCQUFPLEtBQUssV0FBVyxNQUFNLFNBQVM7QUFBQSxpQkFDbkMsU0FBUztBQUNaLHFCQUFPLEtBQUssV0FBVyxNQUFNLFNBQVM7QUFBQSxpQkFDbkMsU0FBUztBQUNaLHFCQUFPLEtBQUssVUFBVSxNQUFNLFNBQVM7QUFBQSxpQkFDbEMsU0FBUztBQUNaLHFCQUFPLEtBQUssWUFBWSxNQUFNLFNBQVM7QUFBQTtBQUV2QyxvQkFBTSxJQUFJLE1BQU0sNEJBQTRCLEtBQUssWUFBWTtBQUFBO0FBQUE7QUFJbkUsdUJBQWMsVUFBVSx3QkFBd0IsU0FBUyxNQUFNLFNBQVMsT0FBTztBQUM3RSxjQUFJO0FBQ0osZUFBSyxTQUFTLE1BQU0sU0FBUztBQUM3QixrQkFBUSxRQUFRLFlBQVk7QUFDNUIsY0FBSSxLQUFLLE9BQU8sTUFBTSxTQUFTLFNBQVM7QUFDeEMsa0JBQVEsUUFBUSxZQUFZO0FBQzVCLGVBQUssS0FBSztBQUNWLGNBQUksS0FBSyxPQUFPO0FBQ2QsaUJBQUssTUFBTSxLQUFLO0FBQUE7QUFFbEIsa0JBQVEsUUFBUSxZQUFZO0FBQzVCLGVBQUssUUFBUSxtQkFBbUI7QUFDaEMsZUFBSyxLQUFLLFFBQVEsTUFBTSxTQUFTO0FBQ2pDLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixlQUFLLFVBQVUsTUFBTSxTQUFTO0FBQzlCLGlCQUFPO0FBQUE7QUFHVCx1QkFBYyxVQUFVLE1BQU0sU0FBUyxNQUFNLFNBQVMsT0FBTztBQUMzRCxjQUFJO0FBQ0osZUFBSyxTQUFTLE1BQU0sU0FBUztBQUM3QixrQkFBUSxRQUFRLFlBQVk7QUFDNUIsY0FBSSxLQUFLLE9BQU8sTUFBTSxTQUFTO0FBQy9CLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixlQUFLLEtBQUs7QUFDVixrQkFBUSxRQUFRLFlBQVk7QUFDNUIsZUFBSyxLQUFLLFFBQVEsTUFBTSxTQUFTO0FBQ2pDLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixlQUFLLFVBQVUsTUFBTSxTQUFTO0FBQzlCLGlCQUFPO0FBQUE7QUFHVCx1QkFBYyxVQUFVLE9BQU8sU0FBUyxNQUFNLFNBQVMsT0FBTztBQUM1RCxjQUFJO0FBQ0osZUFBSyxTQUFTLE1BQU0sU0FBUztBQUM3QixrQkFBUSxRQUFRLFlBQVk7QUFDNUIsY0FBSSxLQUFLLE9BQU8sTUFBTSxTQUFTO0FBQy9CLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixlQUFLLEtBQUs7QUFDVixrQkFBUSxRQUFRLFlBQVk7QUFDNUIsZUFBSyxLQUFLLFFBQVEsTUFBTSxTQUFTO0FBQ2pDLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixlQUFLLFVBQVUsTUFBTSxTQUFTO0FBQzlCLGlCQUFPO0FBQUE7QUFHVCx1QkFBYyxVQUFVLGFBQWEsU0FBUyxNQUFNLFNBQVMsT0FBTztBQUNsRSxjQUFJO0FBQ0osZUFBSyxTQUFTLE1BQU0sU0FBUztBQUM3QixrQkFBUSxRQUFRLFlBQVk7QUFDNUIsY0FBSSxLQUFLLE9BQU8sTUFBTSxTQUFTLFNBQVM7QUFDeEMsa0JBQVEsUUFBUSxZQUFZO0FBQzVCLGVBQUssTUFBTSxLQUFLLGNBQWMsTUFBTSxLQUFLLGdCQUFnQixNQUFNLEtBQUs7QUFDcEUsY0FBSSxLQUFLLHFCQUFxQixZQUFZO0FBQ3hDLGlCQUFLLE1BQU0sS0FBSztBQUFBO0FBRWxCLGNBQUksS0FBSyxjQUFjO0FBQ3JCLGlCQUFLLE9BQU8sS0FBSyxlQUFlO0FBQUE7QUFFbEMsa0JBQVEsUUFBUSxZQUFZO0FBQzVCLGVBQUssUUFBUSxtQkFBbUIsTUFBTSxLQUFLLFFBQVEsTUFBTSxTQUFTO0FBQ2xFLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixlQUFLLFVBQVUsTUFBTSxTQUFTO0FBQzlCLGlCQUFPO0FBQUE7QUFHVCx1QkFBYyxVQUFVLGFBQWEsU0FBUyxNQUFNLFNBQVMsT0FBTztBQUNsRSxjQUFJO0FBQ0osZUFBSyxTQUFTLE1BQU0sU0FBUztBQUM3QixrQkFBUSxRQUFRLFlBQVk7QUFDNUIsY0FBSSxLQUFLLE9BQU8sTUFBTSxTQUFTLFNBQVM7QUFDeEMsa0JBQVEsUUFBUSxZQUFZO0FBQzVCLGVBQUssTUFBTSxLQUFLLE9BQU8sTUFBTSxLQUFLO0FBQ2xDLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixlQUFLLFFBQVEsbUJBQW1CLE1BQU0sS0FBSyxRQUFRLE1BQU0sU0FBUztBQUNsRSxrQkFBUSxRQUFRLFlBQVk7QUFDNUIsZUFBSyxVQUFVLE1BQU0sU0FBUztBQUM5QixpQkFBTztBQUFBO0FBR1QsdUJBQWMsVUFBVSxZQUFZLFNBQVMsTUFBTSxTQUFTLE9BQU87QUFDakUsY0FBSTtBQUNKLGVBQUssU0FBUyxNQUFNLFNBQVM7QUFDN0Isa0JBQVEsUUFBUSxZQUFZO0FBQzVCLGNBQUksS0FBSyxPQUFPLE1BQU0sU0FBUyxTQUFTO0FBQ3hDLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixjQUFJLEtBQUssSUFBSTtBQUNYLGlCQUFLO0FBQUE7QUFFUCxlQUFLLE1BQU0sS0FBSztBQUNoQixjQUFJLEtBQUssT0FBTztBQUNkLGlCQUFLLE9BQU8sS0FBSyxRQUFRO0FBQUEsaUJBQ3BCO0FBQ0wsZ0JBQUksS0FBSyxTQUFTLEtBQUssT0FBTztBQUM1QixtQkFBSyxjQUFjLEtBQUssUUFBUSxRQUFRLEtBQUssUUFBUTtBQUFBLHVCQUM1QyxLQUFLLE9BQU87QUFDckIsbUJBQUssY0FBYyxLQUFLLFFBQVE7QUFBQTtBQUVsQyxnQkFBSSxLQUFLLE9BQU87QUFDZCxtQkFBSyxZQUFZLEtBQUs7QUFBQTtBQUFBO0FBRzFCLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixlQUFLLFFBQVEsbUJBQW1CLE1BQU0sS0FBSyxRQUFRLE1BQU0sU0FBUztBQUNsRSxrQkFBUSxRQUFRLFlBQVk7QUFDNUIsZUFBSyxVQUFVLE1BQU0sU0FBUztBQUM5QixpQkFBTztBQUFBO0FBR1QsdUJBQWMsVUFBVSxjQUFjLFNBQVMsTUFBTSxTQUFTLE9BQU87QUFDbkUsY0FBSTtBQUNKLGVBQUssU0FBUyxNQUFNLFNBQVM7QUFDN0Isa0JBQVEsUUFBUSxZQUFZO0FBQzVCLGNBQUksS0FBSyxPQUFPLE1BQU0sU0FBUyxTQUFTO0FBQ3hDLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixlQUFLLE1BQU0sS0FBSztBQUNoQixjQUFJLEtBQUssU0FBUyxLQUFLLE9BQU87QUFDNUIsaUJBQUssY0FBYyxLQUFLLFFBQVEsUUFBUSxLQUFLLFFBQVE7QUFBQSxxQkFDNUMsS0FBSyxPQUFPO0FBQ3JCLGlCQUFLLGNBQWMsS0FBSyxRQUFRO0FBQUEscUJBQ3ZCLEtBQUssT0FBTztBQUNyQixpQkFBSyxjQUFjLEtBQUssUUFBUTtBQUFBO0FBRWxDLGtCQUFRLFFBQVEsWUFBWTtBQUM1QixlQUFLLFFBQVEsbUJBQW1CLE1BQU0sS0FBSyxRQUFRLE1BQU0sU0FBUztBQUNsRSxrQkFBUSxRQUFRLFlBQVk7QUFDNUIsZUFBSyxVQUFVLE1BQU0sU0FBUztBQUM5QixpQkFBTztBQUFBO0FBR1QsdUJBQWMsVUFBVSxXQUFXLFNBQVMsTUFBTSxTQUFTLE9BQU87QUFBQTtBQUVsRSx1QkFBYyxVQUFVLFlBQVksU0FBUyxNQUFNLFNBQVMsT0FBTztBQUFBO0FBRW5FLHVCQUFjLFVBQVUsZ0JBQWdCLFNBQVMsS0FBSyxTQUFTLE9BQU87QUFBQTtBQUV0RSx1QkFBYyxVQUFVLGlCQUFpQixTQUFTLEtBQUssU0FBUyxPQUFPO0FBQUE7QUFFdkUsZUFBTztBQUFBO0FBQUEsT0FJUixLQUFLO0FBQUE7QUFBQTs7O0FDM2FSO0FBQUE7QUFDQSxJQUFDLFlBQVc7QUFDVixVQUFJLGlCQUFpQixlQUNuQixTQUFTLFNBQVMsT0FBTyxRQUFRO0FBQUUsaUJBQVMsT0FBTyxRQUFRO0FBQUUsY0FBSSxRQUFRLEtBQUssUUFBUTtBQUFNLGtCQUFNLE9BQU8sT0FBTztBQUFBO0FBQVEsd0JBQWdCO0FBQUUsZUFBSyxjQUFjO0FBQUE7QUFBUyxhQUFLLFlBQVksT0FBTztBQUFXLGNBQU0sWUFBWSxJQUFJO0FBQVEsY0FBTSxZQUFZLE9BQU87QUFBVyxlQUFPO0FBQUEsU0FDbFIsVUFBVSxHQUFHO0FBRWYsc0JBQWdCO0FBRWhCLGNBQU8sVUFBVSxrQkFBbUIsU0FBUyxZQUFZO0FBQ3ZELGVBQU8sa0JBQWlCO0FBRXhCLGtDQUF5QixTQUFTO0FBQ2hDLDJCQUFnQixVQUFVLFlBQVksS0FBSyxNQUFNO0FBQUE7QUFHbkQseUJBQWdCLFVBQVUsV0FBVyxTQUFTLEtBQUssU0FBUztBQUMxRCxjQUFJLE9BQU8sR0FBRyxLQUFLLEdBQUc7QUFDdEIsb0JBQVUsS0FBSyxjQUFjO0FBQzdCLGNBQUk7QUFDSixnQkFBTSxJQUFJO0FBQ1YsZUFBSyxJQUFJLEdBQUcsTUFBTSxJQUFJLFFBQVEsSUFBSSxLQUFLLEtBQUs7QUFDMUMsb0JBQVEsSUFBSTtBQUNaLGlCQUFLLEtBQUssZUFBZSxPQUFPLFNBQVM7QUFBQTtBQUUzQyxjQUFJLFFBQVEsVUFBVSxFQUFFLE1BQU0sQ0FBQyxRQUFRLFFBQVEsWUFBWSxRQUFRLFNBQVM7QUFDMUUsZ0JBQUksRUFBRSxNQUFNLEdBQUcsQ0FBQyxRQUFRLFFBQVE7QUFBQTtBQUVsQyxpQkFBTztBQUFBO0FBR1QsZUFBTztBQUFBLFFBRU47QUFBQSxPQUVGLEtBQUs7QUFBQTtBQUFBOzs7QUNsQ1I7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUksVUFBVSxxQkFBcUIsc0JBQXNCLGFBQWEsU0FBUyxpQkFBaUIsZ0JBQWdCLGVBQzlHLFNBQVMsU0FBUyxPQUFPLFFBQVE7QUFBRSxpQkFBUyxPQUFPLFFBQVE7QUFBRSxjQUFJLFFBQVEsS0FBSyxRQUFRO0FBQU0sa0JBQU0sT0FBTyxPQUFPO0FBQUE7QUFBUSx3QkFBZ0I7QUFBRSxlQUFLLGNBQWM7QUFBQTtBQUFTLGFBQUssWUFBWSxPQUFPO0FBQVcsY0FBTSxZQUFZLElBQUk7QUFBUSxjQUFNLFlBQVksT0FBTztBQUFXLGVBQU87QUFBQSxTQUNsUixVQUFVLEdBQUc7QUFFZixzQkFBZ0Isa0JBQXFCO0FBRXJDLDZCQUF1QjtBQUV2Qiw0QkFBc0I7QUFFdEIsZ0JBQVU7QUFFVixpQkFBVztBQUVYLHVCQUFpQjtBQUVqQix3QkFBa0I7QUFFbEIsY0FBTyxVQUFVLGNBQWUsU0FBUyxZQUFZO0FBQ25ELGVBQU8sY0FBYTtBQUVwQiw4QkFBcUIsU0FBUztBQUM1Qix1QkFBWSxVQUFVLFlBQVksS0FBSyxNQUFNO0FBQzdDLGVBQUssT0FBTztBQUNaLGVBQUssT0FBTyxTQUFTO0FBQ3JCLGVBQUssY0FBYztBQUNuQixlQUFLLFlBQVksSUFBSTtBQUNyQixxQkFBWSxXQUFVO0FBQ3RCLGNBQUksQ0FBQyxRQUFRLFFBQVE7QUFDbkIsb0JBQVEsU0FBUyxJQUFJO0FBQUE7QUFFdkIsZUFBSyxVQUFVO0FBQ2YsZUFBSyxZQUFZLElBQUksZUFBZTtBQUFBO0FBR3RDLGVBQU8sZUFBZSxhQUFZLFdBQVcsa0JBQWtCO0FBQUEsVUFDN0QsT0FBTyxJQUFJO0FBQUE7QUFHYixlQUFPLGVBQWUsYUFBWSxXQUFXLFdBQVc7QUFBQSxVQUN0RCxLQUFLLFdBQVc7QUFDZCxnQkFBSSxPQUFPLEdBQUcsS0FBSztBQUNuQixrQkFBTSxLQUFLO0FBQ1gsaUJBQUssSUFBSSxHQUFHLE1BQU0sSUFBSSxRQUFRLElBQUksS0FBSyxLQUFLO0FBQzFDLHNCQUFRLElBQUk7QUFDWixrQkFBSSxNQUFNLFNBQVMsU0FBUyxTQUFTO0FBQ25DLHVCQUFPO0FBQUE7QUFBQTtBQUdYLG1CQUFPO0FBQUE7QUFBQTtBQUlYLGVBQU8sZUFBZSxhQUFZLFdBQVcsbUJBQW1CO0FBQUEsVUFDOUQsS0FBSyxXQUFXO0FBQ2QsbUJBQU8sS0FBSyxjQUFjO0FBQUE7QUFBQTtBQUk5QixlQUFPLGVBQWUsYUFBWSxXQUFXLGlCQUFpQjtBQUFBLFVBQzVELEtBQUssV0FBVztBQUNkLG1CQUFPO0FBQUE7QUFBQTtBQUlYLGVBQU8sZUFBZSxhQUFZLFdBQVcsdUJBQXVCO0FBQUEsVUFDbEUsS0FBSyxXQUFXO0FBQ2QsbUJBQU87QUFBQTtBQUFBO0FBSVgsZUFBTyxlQUFlLGFBQVksV0FBVyxlQUFlO0FBQUEsVUFDMUQsS0FBSyxXQUFXO0FBQ2QsZ0JBQUksS0FBSyxTQUFTLFdBQVcsS0FBSyxLQUFLLFNBQVMsR0FBRyxTQUFTLFNBQVMsYUFBYTtBQUNoRixxQkFBTyxLQUFLLFNBQVMsR0FBRztBQUFBLG1CQUNuQjtBQUNMLHFCQUFPO0FBQUE7QUFBQTtBQUFBO0FBS2IsZUFBTyxlQUFlLGFBQVksV0FBVyxpQkFBaUI7QUFBQSxVQUM1RCxLQUFLLFdBQVc7QUFDZCxnQkFBSSxLQUFLLFNBQVMsV0FBVyxLQUFLLEtBQUssU0FBUyxHQUFHLFNBQVMsU0FBUyxhQUFhO0FBQ2hGLHFCQUFPLEtBQUssU0FBUyxHQUFHLGVBQWU7QUFBQSxtQkFDbEM7QUFDTCxxQkFBTztBQUFBO0FBQUE7QUFBQTtBQUtiLGVBQU8sZUFBZSxhQUFZLFdBQVcsY0FBYztBQUFBLFVBQ3pELEtBQUssV0FBVztBQUNkLGdCQUFJLEtBQUssU0FBUyxXQUFXLEtBQUssS0FBSyxTQUFTLEdBQUcsU0FBUyxTQUFTLGFBQWE7QUFDaEYscUJBQU8sS0FBSyxTQUFTLEdBQUc7QUFBQSxtQkFDbkI7QUFDTCxxQkFBTztBQUFBO0FBQUE7QUFBQTtBQUtiLGVBQU8sZUFBZSxhQUFZLFdBQVcsT0FBTztBQUFBLFVBQ2xELEtBQUssV0FBVztBQUNkLG1CQUFPLEtBQUs7QUFBQTtBQUFBO0FBSWhCLGVBQU8sZUFBZSxhQUFZLFdBQVcsVUFBVTtBQUFBLFVBQ3JELEtBQUssV0FBVztBQUNkLG1CQUFPO0FBQUE7QUFBQTtBQUlYLGVBQU8sZUFBZSxhQUFZLFdBQVcsY0FBYztBQUFBLFVBQ3pELEtBQUssV0FBVztBQUNkLG1CQUFPO0FBQUE7QUFBQTtBQUlYLGVBQU8sZUFBZSxhQUFZLFdBQVcsZ0JBQWdCO0FBQUEsVUFDM0QsS0FBSyxXQUFXO0FBQ2QsbUJBQU87QUFBQTtBQUFBO0FBSVgsZUFBTyxlQUFlLGFBQVksV0FBVyxlQUFlO0FBQUEsVUFDMUQsS0FBSyxXQUFXO0FBQ2QsbUJBQU87QUFBQTtBQUFBO0FBSVgscUJBQVksVUFBVSxNQUFNLFNBQVMsUUFBUTtBQUMzQyxjQUFJO0FBQ0osMEJBQWdCO0FBQ2hCLGNBQUksQ0FBQyxRQUFRO0FBQ1gscUJBQVMsS0FBSyxRQUFRO0FBQUEscUJBQ2IsY0FBYyxTQUFTO0FBQ2hDLDRCQUFnQjtBQUNoQixxQkFBUyxLQUFLLFFBQVE7QUFBQTtBQUV4QixpQkFBTyxPQUFPLFNBQVMsTUFBTSxPQUFPLGNBQWM7QUFBQTtBQUdwRCxxQkFBWSxVQUFVLFdBQVcsU0FBUyxTQUFTO0FBQ2pELGlCQUFPLEtBQUssUUFBUSxPQUFPLFNBQVMsTUFBTSxLQUFLLFFBQVEsT0FBTyxjQUFjO0FBQUE7QUFHOUUscUJBQVksVUFBVSxnQkFBZ0IsU0FBUyxTQUFTO0FBQ3RELGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELHFCQUFZLFVBQVUseUJBQXlCLFdBQVc7QUFDeEQsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0QscUJBQVksVUFBVSxpQkFBaUIsU0FBUyxNQUFNO0FBQ3BELGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELHFCQUFZLFVBQVUsZ0JBQWdCLFNBQVMsTUFBTTtBQUNuRCxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCxxQkFBWSxVQUFVLHFCQUFxQixTQUFTLE1BQU07QUFDeEQsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0QscUJBQVksVUFBVSw4QkFBOEIsU0FBUyxRQUFRLE1BQU07QUFDekUsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0QscUJBQVksVUFBVSxrQkFBa0IsU0FBUyxNQUFNO0FBQ3JELGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELHFCQUFZLFVBQVUsd0JBQXdCLFNBQVMsTUFBTTtBQUMzRCxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCxxQkFBWSxVQUFVLHVCQUF1QixTQUFTLFNBQVM7QUFDN0QsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0QscUJBQVksVUFBVSxhQUFhLFNBQVMsY0FBYyxNQUFNO0FBQzlELGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELHFCQUFZLFVBQVUsa0JBQWtCLFNBQVMsY0FBYyxlQUFlO0FBQzVFLGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELHFCQUFZLFVBQVUsb0JBQW9CLFNBQVMsY0FBYyxlQUFlO0FBQzlFLGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELHFCQUFZLFVBQVUseUJBQXlCLFNBQVMsY0FBYyxXQUFXO0FBQy9FLGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELHFCQUFZLFVBQVUsaUJBQWlCLFNBQVMsV0FBVztBQUN6RCxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCxxQkFBWSxVQUFVLFlBQVksU0FBUyxRQUFRO0FBQ2pELGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELHFCQUFZLFVBQVUsb0JBQW9CLFdBQVc7QUFDbkQsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0QscUJBQVksVUFBVSxhQUFhLFNBQVMsTUFBTSxjQUFjLGVBQWU7QUFDN0UsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0QscUJBQVksVUFBVSx5QkFBeUIsU0FBUyxZQUFZO0FBQ2xFLGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELHFCQUFZLFVBQVUsY0FBYyxTQUFTLGdCQUFnQjtBQUMzRCxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCxxQkFBWSxVQUFVLGNBQWMsV0FBVztBQUM3QyxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUs7QUFBQTtBQUcvRCxxQkFBWSxVQUFVLHFCQUFxQixTQUFTLE1BQU0sWUFBWSxRQUFRO0FBQzVFLGdCQUFNLElBQUksTUFBTSx3Q0FBd0MsS0FBSztBQUFBO0FBRy9ELHFCQUFZLFVBQVUsbUJBQW1CLFNBQVMsTUFBTSxZQUFZLFFBQVE7QUFDMUUsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUE7QUFHL0QsZUFBTztBQUFBLFFBRU47QUFBQSxPQUVGLEtBQUs7QUFBQTtBQUFBOzs7QUNqUFI7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUksVUFBVSxhQUFhLGNBQWMsVUFBVSxZQUFZLGVBQWUsZUFBZSxjQUFjLGdCQUFnQixnQkFBZ0IsWUFBWSxhQUFhLGVBQWUsWUFBWSwwQkFBMEIsUUFBUSxpQkFBaUIsZ0JBQWdCLFNBQVMsVUFBVSxZQUFZLFVBQVUsZUFBZSxLQUN4VCxVQUFVLEdBQUc7QUFFZixZQUFNLG1CQUFzQixXQUFXLElBQUksVUFBVSxhQUFhLElBQUksWUFBWSxnQkFBZ0IsSUFBSSxlQUFlLFdBQVcsSUFBSTtBQUVwSSxpQkFBVztBQUVYLG9CQUFjO0FBRWQsbUJBQWE7QUFFYixpQkFBVztBQUVYLG1CQUFhO0FBRWIsZUFBUztBQUVULGdCQUFVO0FBRVYsaUNBQTJCO0FBRTNCLHVCQUFpQjtBQUVqQixtQkFBYTtBQUViLHNCQUFnQjtBQUVoQixxQkFBZTtBQUVmLHNCQUFnQjtBQUVoQix1QkFBaUI7QUFFakIscUJBQWU7QUFFZix1QkFBaUI7QUFFakIsd0JBQWtCO0FBRWxCLG9CQUFjO0FBRWQsY0FBTyxVQUFVLGdCQUFpQixXQUFXO0FBQzNDLGdDQUF1QixTQUFTLFFBQVEsT0FBTztBQUM3QyxjQUFJO0FBQ0osZUFBSyxPQUFPO0FBQ1osZUFBSyxPQUFPLFNBQVM7QUFDckIscUJBQVksV0FBVTtBQUN0QiwwQkFBZ0I7QUFDaEIsY0FBSSxDQUFDLFFBQVEsUUFBUTtBQUNuQixvQkFBUSxTQUFTLElBQUk7QUFBQSxxQkFDWixjQUFjLFFBQVEsU0FBUztBQUN4Qyw0QkFBZ0IsUUFBUTtBQUN4QixvQkFBUSxTQUFTLElBQUk7QUFBQTtBQUV2QixlQUFLLFVBQVU7QUFDZixlQUFLLFNBQVMsUUFBUTtBQUN0QixlQUFLLGdCQUFnQixLQUFLLE9BQU8sY0FBYztBQUMvQyxlQUFLLFlBQVksSUFBSSxlQUFlO0FBQ3BDLGVBQUssaUJBQWlCLFVBQVUsV0FBVztBQUFBO0FBQzNDLGVBQUssZ0JBQWdCLFNBQVMsV0FBVztBQUFBO0FBQ3pDLGVBQUssY0FBYztBQUNuQixlQUFLLGVBQWU7QUFDcEIsZUFBSyxXQUFXO0FBQ2hCLGVBQUssa0JBQWtCO0FBQ3ZCLGVBQUssb0JBQW9CO0FBQ3pCLGVBQUssT0FBTztBQUFBO0FBR2QsdUJBQWMsVUFBVSxrQkFBa0IsU0FBUyxNQUFNO0FBQ3ZELGNBQUksS0FBSyxTQUFTLFlBQVksT0FBTyxHQUFHLEtBQUssTUFBTTtBQUNuRCxrQkFBUSxLQUFLO0FBQUEsaUJBQ04sU0FBUztBQUNaLG1CQUFLLE1BQU0sS0FBSztBQUNoQjtBQUFBLGlCQUNHLFNBQVM7QUFDWixtQkFBSyxRQUFRLEtBQUs7QUFDbEI7QUFBQSxpQkFDRyxTQUFTO0FBQ1osMkJBQWE7QUFDYixxQkFBTyxLQUFLO0FBQ1osbUJBQUssV0FBVyxNQUFNO0FBQ3BCLG9CQUFJLENBQUMsUUFBUSxLQUFLLE1BQU07QUFBVTtBQUNsQyxzQkFBTSxLQUFLO0FBQ1gsMkJBQVcsV0FBVyxJQUFJO0FBQUE7QUFFNUIsbUJBQUssS0FBSyxLQUFLLE1BQU07QUFDckI7QUFBQSxpQkFDRyxTQUFTO0FBQ1osbUJBQUs7QUFDTDtBQUFBLGlCQUNHLFNBQVM7QUFDWixtQkFBSyxJQUFJLEtBQUs7QUFDZDtBQUFBLGlCQUNHLFNBQVM7QUFDWixtQkFBSyxLQUFLLEtBQUs7QUFDZjtBQUFBLGlCQUNHLFNBQVM7QUFDWixtQkFBSyxZQUFZLEtBQUssUUFBUSxLQUFLO0FBQ25DO0FBQUE7QUFFQSxvQkFBTSxJQUFJLE1BQU0seURBQXlELEtBQUssWUFBWTtBQUFBO0FBRTlGLGlCQUFPLEtBQUs7QUFDWixlQUFLLElBQUksR0FBRyxNQUFNLEtBQUssUUFBUSxJQUFJLEtBQUssS0FBSztBQUMzQyxvQkFBUSxLQUFLO0FBQ2IsaUJBQUssZ0JBQWdCO0FBQ3JCLGdCQUFJLE1BQU0sU0FBUyxTQUFTLFNBQVM7QUFDbkMsbUJBQUs7QUFBQTtBQUFBO0FBR1QsaUJBQU87QUFBQTtBQUdULHVCQUFjLFVBQVUsUUFBUSxXQUFXO0FBQ3pDLGlCQUFPO0FBQUE7QUFHVCx1QkFBYyxVQUFVLE9BQU8sU0FBUyxNQUFNLFlBQVksTUFBTTtBQUM5RCxjQUFJO0FBQ0osY0FBSSxRQUFRLE1BQU07QUFDaEIsa0JBQU0sSUFBSSxNQUFNO0FBQUE7QUFFbEIsY0FBSSxLQUFLLFFBQVEsS0FBSyxpQkFBaUIsSUFBSTtBQUN6QyxrQkFBTSxJQUFJLE1BQU0sMkNBQTJDLEtBQUssVUFBVTtBQUFBO0FBRTVFLGVBQUs7QUFDTCxpQkFBTyxTQUFTO0FBQ2hCLGNBQUksY0FBYyxNQUFNO0FBQ3RCLHlCQUFhO0FBQUE7QUFFZix1QkFBYSxTQUFTO0FBQ3RCLGNBQUksQ0FBQyxTQUFTLGFBQWE7QUFDekIsbUJBQU8sQ0FBQyxZQUFZLE9BQU8sT0FBTyxLQUFLLElBQUksYUFBYSxLQUFLO0FBQUE7QUFFL0QsZUFBSyxjQUFjLElBQUksV0FBVyxNQUFNLE1BQU07QUFDOUMsZUFBSyxZQUFZLFdBQVc7QUFDNUIsZUFBSztBQUNMLGVBQUssU0FBUyxLQUFLLGdCQUFnQixLQUFLO0FBQ3hDLGNBQUksUUFBUSxNQUFNO0FBQ2hCLGlCQUFLLEtBQUs7QUFBQTtBQUVaLGlCQUFPO0FBQUE7QUFHVCx1QkFBYyxVQUFVLFVBQVUsU0FBUyxNQUFNLFlBQVksTUFBTTtBQUNqRSxjQUFJLE9BQU8sR0FBRyxLQUFLLG1CQUFtQixNQUFNO0FBQzVDLGNBQUksS0FBSyxlQUFlLEtBQUssWUFBWSxTQUFTLFNBQVMsU0FBUztBQUNsRSxpQkFBSyxXQUFXLE1BQU0sTUFBTTtBQUFBLGlCQUN2QjtBQUNMLGdCQUFJLE1BQU0sUUFBUSxTQUFTLFNBQVMsU0FBUyxXQUFXLE9BQU87QUFDN0Qsa0NBQW9CLEtBQUssUUFBUTtBQUNqQyxtQkFBSyxRQUFRLGVBQWU7QUFDNUIscUJBQU8sSUFBSSxZQUFZLEtBQUssU0FBUyxRQUFRO0FBQzdDLG1CQUFLLFFBQVE7QUFDYixtQkFBSyxRQUFRLGVBQWU7QUFDNUIscUJBQU8sS0FBSztBQUNaLG1CQUFLLElBQUksR0FBRyxNQUFNLEtBQUssUUFBUSxJQUFJLEtBQUssS0FBSztBQUMzQyx3QkFBUSxLQUFLO0FBQ2IscUJBQUssZ0JBQWdCO0FBQ3JCLG9CQUFJLE1BQU0sU0FBUyxTQUFTLFNBQVM7QUFDbkMsdUJBQUs7QUFBQTtBQUFBO0FBQUEsbUJBR0o7QUFDTCxtQkFBSyxLQUFLLE1BQU0sWUFBWTtBQUFBO0FBQUE7QUFHaEMsaUJBQU87QUFBQTtBQUdULHVCQUFjLFVBQVUsWUFBWSxTQUFTLE1BQU0sT0FBTztBQUN4RCxjQUFJLFNBQVM7QUFDYixjQUFJLENBQUMsS0FBSyxlQUFlLEtBQUssWUFBWSxVQUFVO0FBQ2xELGtCQUFNLElBQUksTUFBTSw4RUFBOEUsS0FBSyxVQUFVO0FBQUE7QUFFL0csY0FBSSxRQUFRLE1BQU07QUFDaEIsbUJBQU8sU0FBUztBQUFBO0FBRWxCLGNBQUksU0FBUyxPQUFPO0FBQ2xCLGlCQUFLLFdBQVcsTUFBTTtBQUNwQixrQkFBSSxDQUFDLFFBQVEsS0FBSyxNQUFNO0FBQVU7QUFDbEMseUJBQVcsS0FBSztBQUNoQixtQkFBSyxVQUFVLFNBQVM7QUFBQTtBQUFBLGlCQUVyQjtBQUNMLGdCQUFJLFdBQVcsUUFBUTtBQUNyQixzQkFBUSxNQUFNO0FBQUE7QUFFaEIsZ0JBQUksS0FBSyxRQUFRLHNCQUF1QixTQUFTLE1BQU87QUFDdEQsbUJBQUssWUFBWSxRQUFRLFFBQVEsSUFBSSxhQUFhLE1BQU0sTUFBTTtBQUFBLHVCQUNyRCxTQUFTLE1BQU07QUFDeEIsbUJBQUssWUFBWSxRQUFRLFFBQVEsSUFBSSxhQUFhLE1BQU0sTUFBTTtBQUFBO0FBQUE7QUFHbEUsaUJBQU87QUFBQTtBQUdULHVCQUFjLFVBQVUsT0FBTyxTQUFTLE9BQU87QUFDN0MsY0FBSTtBQUNKLGVBQUs7QUFDTCxpQkFBTyxJQUFJLFFBQVEsTUFBTTtBQUN6QixlQUFLLE9BQU8sS0FBSyxPQUFPLEtBQUssTUFBTSxLQUFLLGVBQWUsS0FBSyxlQUFlLElBQUksS0FBSyxlQUFlO0FBQ25HLGlCQUFPO0FBQUE7QUFHVCx1QkFBYyxVQUFVLFFBQVEsU0FBUyxPQUFPO0FBQzlDLGNBQUk7QUFDSixlQUFLO0FBQ0wsaUJBQU8sSUFBSSxTQUFTLE1BQU07QUFDMUIsZUFBSyxPQUFPLEtBQUssT0FBTyxNQUFNLE1BQU0sS0FBSyxlQUFlLEtBQUssZUFBZSxJQUFJLEtBQUssZUFBZTtBQUNwRyxpQkFBTztBQUFBO0FBR1QsdUJBQWMsVUFBVSxVQUFVLFNBQVMsT0FBTztBQUNoRCxjQUFJO0FBQ0osZUFBSztBQUNMLGlCQUFPLElBQUksV0FBVyxNQUFNO0FBQzVCLGVBQUssT0FBTyxLQUFLLE9BQU8sUUFBUSxNQUFNLEtBQUssZUFBZSxLQUFLLGVBQWUsSUFBSSxLQUFLLGVBQWU7QUFDdEcsaUJBQU87QUFBQTtBQUdULHVCQUFjLFVBQVUsTUFBTSxTQUFTLE9BQU87QUFDNUMsY0FBSTtBQUNKLGVBQUs7QUFDTCxpQkFBTyxJQUFJLE9BQU8sTUFBTTtBQUN4QixlQUFLLE9BQU8sS0FBSyxPQUFPLElBQUksTUFBTSxLQUFLLGVBQWUsS0FBSyxlQUFlLElBQUksS0FBSyxlQUFlO0FBQ2xHLGlCQUFPO0FBQUE7QUFHVCx1QkFBYyxVQUFVLGNBQWMsU0FBUyxRQUFRLE9BQU87QUFDNUQsY0FBSSxHQUFHLFdBQVcsVUFBVSxLQUFLO0FBQ2pDLGVBQUs7QUFDTCxjQUFJLFVBQVUsTUFBTTtBQUNsQixxQkFBUyxTQUFTO0FBQUE7QUFFcEIsY0FBSSxTQUFTLE1BQU07QUFDakIsb0JBQVEsU0FBUztBQUFBO0FBRW5CLGNBQUksTUFBTSxRQUFRLFNBQVM7QUFDekIsaUJBQUssSUFBSSxHQUFHLE1BQU0sT0FBTyxRQUFRLElBQUksS0FBSyxLQUFLO0FBQzdDLDBCQUFZLE9BQU87QUFDbkIsbUJBQUssWUFBWTtBQUFBO0FBQUEscUJBRVYsU0FBUyxTQUFTO0FBQzNCLGlCQUFLLGFBQWEsUUFBUTtBQUN4QixrQkFBSSxDQUFDLFFBQVEsS0FBSyxRQUFRO0FBQVk7QUFDdEMseUJBQVcsT0FBTztBQUNsQixtQkFBSyxZQUFZLFdBQVc7QUFBQTtBQUFBLGlCQUV6QjtBQUNMLGdCQUFJLFdBQVcsUUFBUTtBQUNyQixzQkFBUSxNQUFNO0FBQUE7QUFFaEIsbUJBQU8sSUFBSSx5QkFBeUIsTUFBTSxRQUFRO0FBQ2xELGlCQUFLLE9BQU8sS0FBSyxPQUFPLHNCQUFzQixNQUFNLEtBQUssZUFBZSxLQUFLLGVBQWUsSUFBSSxLQUFLLGVBQWU7QUFBQTtBQUV0SCxpQkFBTztBQUFBO0FBR1QsdUJBQWMsVUFBVSxjQUFjLFNBQVMsU0FBUyxVQUFVLFlBQVk7QUFDNUUsY0FBSTtBQUNKLGVBQUs7QUFDTCxjQUFJLEtBQUssaUJBQWlCO0FBQ3hCLGtCQUFNLElBQUksTUFBTTtBQUFBO0FBRWxCLGlCQUFPLElBQUksZUFBZSxNQUFNLFNBQVMsVUFBVTtBQUNuRCxlQUFLLE9BQU8sS0FBSyxPQUFPLFlBQVksTUFBTSxLQUFLLGVBQWUsS0FBSyxlQUFlLElBQUksS0FBSyxlQUFlO0FBQzFHLGlCQUFPO0FBQUE7QUFHVCx1QkFBYyxVQUFVLFVBQVUsU0FBUyxNQUFNLE9BQU8sT0FBTztBQUM3RCxlQUFLO0FBQ0wsY0FBSSxRQUFRLE1BQU07QUFDaEIsa0JBQU0sSUFBSSxNQUFNO0FBQUE7QUFFbEIsY0FBSSxLQUFLLE1BQU07QUFDYixrQkFBTSxJQUFJLE1BQU07QUFBQTtBQUVsQixlQUFLLGNBQWMsSUFBSSxXQUFXLE1BQU0sT0FBTztBQUMvQyxlQUFLLFlBQVksZUFBZTtBQUNoQyxlQUFLLFlBQVksV0FBVztBQUM1QixlQUFLO0FBQ0wsZUFBSyxTQUFTLEtBQUssZ0JBQWdCLEtBQUs7QUFDeEMsaUJBQU87QUFBQTtBQUdULHVCQUFjLFVBQVUsYUFBYSxTQUFTLE1BQU0sT0FBTztBQUN6RCxjQUFJO0FBQ0osZUFBSztBQUNMLGlCQUFPLElBQUksY0FBYyxNQUFNLE1BQU07QUFDckMsZUFBSyxPQUFPLEtBQUssT0FBTyxXQUFXLE1BQU0sS0FBSyxlQUFlLEtBQUssZUFBZSxJQUFJLEtBQUssZUFBZTtBQUN6RyxpQkFBTztBQUFBO0FBR1QsdUJBQWMsVUFBVSxVQUFVLFNBQVMsYUFBYSxlQUFlLGVBQWUsa0JBQWtCLGNBQWM7QUFDcEgsY0FBSTtBQUNKLGVBQUs7QUFDTCxpQkFBTyxJQUFJLGNBQWMsTUFBTSxhQUFhLGVBQWUsZUFBZSxrQkFBa0I7QUFDNUYsZUFBSyxPQUFPLEtBQUssT0FBTyxXQUFXLE1BQU0sS0FBSyxlQUFlLEtBQUssZUFBZSxJQUFJLEtBQUssZUFBZTtBQUN6RyxpQkFBTztBQUFBO0FBR1QsdUJBQWMsVUFBVSxTQUFTLFNBQVMsTUFBTSxPQUFPO0FBQ3JELGNBQUk7QUFDSixlQUFLO0FBQ0wsaUJBQU8sSUFBSSxhQUFhLE1BQU0sT0FBTyxNQUFNO0FBQzNDLGVBQUssT0FBTyxLQUFLLE9BQU8sVUFBVSxNQUFNLEtBQUssZUFBZSxLQUFLLGVBQWUsSUFBSSxLQUFLLGVBQWU7QUFDeEcsaUJBQU87QUFBQTtBQUdULHVCQUFjLFVBQVUsVUFBVSxTQUFTLE1BQU0sT0FBTztBQUN0RCxjQUFJO0FBQ0osZUFBSztBQUNMLGlCQUFPLElBQUksYUFBYSxNQUFNLE1BQU0sTUFBTTtBQUMxQyxlQUFLLE9BQU8sS0FBSyxPQUFPLFVBQVUsTUFBTSxLQUFLLGVBQWUsS0FBSyxlQUFlLElBQUksS0FBSyxlQUFlO0FBQ3hHLGlCQUFPO0FBQUE7QUFHVCx1QkFBYyxVQUFVLFdBQVcsU0FBUyxNQUFNLE9BQU87QUFDdkQsY0FBSTtBQUNKLGVBQUs7QUFDTCxpQkFBTyxJQUFJLGVBQWUsTUFBTSxNQUFNO0FBQ3RDLGVBQUssT0FBTyxLQUFLLE9BQU8sWUFBWSxNQUFNLEtBQUssZUFBZSxLQUFLLGVBQWUsSUFBSSxLQUFLLGVBQWU7QUFDMUcsaUJBQU87QUFBQTtBQUdULHVCQUFjLFVBQVUsS0FBSyxXQUFXO0FBQ3RDLGNBQUksS0FBSyxlQUFlLEdBQUc7QUFDekIsa0JBQU0sSUFBSSxNQUFNO0FBQUE7QUFFbEIsY0FBSSxLQUFLLGFBQWE7QUFDcEIsZ0JBQUksS0FBSyxZQUFZLFVBQVU7QUFDN0IsbUJBQUssVUFBVSxLQUFLO0FBQUEsbUJBQ2Y7QUFDTCxtQkFBSyxTQUFTLEtBQUs7QUFBQTtBQUVyQixpQkFBSyxjQUFjO0FBQUEsaUJBQ2Q7QUFDTCxpQkFBSyxVQUFVLEtBQUssU0FBUyxLQUFLO0FBQUE7QUFFcEMsaUJBQU8sS0FBSyxTQUFTLEtBQUs7QUFDMUIsZUFBSztBQUNMLGlCQUFPO0FBQUE7QUFHVCx1QkFBYyxVQUFVLE1BQU0sV0FBVztBQUN2QyxpQkFBTyxLQUFLLGdCQUFnQixHQUFHO0FBQzdCLGlCQUFLO0FBQUE7QUFFUCxpQkFBTyxLQUFLO0FBQUE7QUFHZCx1QkFBYyxVQUFVLGNBQWMsV0FBVztBQUMvQyxjQUFJLEtBQUssYUFBYTtBQUNwQixpQkFBSyxZQUFZLFdBQVc7QUFDNUIsbUJBQU8sS0FBSyxTQUFTLEtBQUs7QUFBQTtBQUFBO0FBSTlCLHVCQUFjLFVBQVUsV0FBVyxTQUFTLE1BQU07QUFDaEQsY0FBSSxLQUFLLE9BQU8sTUFBTTtBQUN0QixjQUFJLENBQUMsS0FBSyxRQUFRO0FBQ2hCLGdCQUFJLENBQUMsS0FBSyxRQUFRLEtBQUssaUJBQWlCLEtBQUssS0FBSyxTQUFTLFNBQVMsU0FBUztBQUMzRSxtQkFBSyxPQUFPO0FBQUE7QUFFZCxvQkFBUTtBQUNSLGdCQUFJLEtBQUssU0FBUyxTQUFTLFNBQVM7QUFDbEMsbUJBQUssY0FBYyxRQUFRLFlBQVk7QUFDdkMsc0JBQVEsS0FBSyxPQUFPLE9BQU8sTUFBTSxLQUFLLGVBQWUsS0FBSyxnQkFBZ0IsTUFBTSxLQUFLO0FBQ3JGLHFCQUFPLEtBQUs7QUFDWixtQkFBSyxRQUFRLE1BQU07QUFDakIsb0JBQUksQ0FBQyxRQUFRLEtBQUssTUFBTTtBQUFPO0FBQy9CLHNCQUFNLEtBQUs7QUFDWCx5QkFBUyxLQUFLLE9BQU8sVUFBVSxLQUFLLEtBQUssZUFBZSxLQUFLO0FBQUE7QUFFL0QsdUJBQVUsTUFBSyxXQUFXLE1BQU0sUUFBUSxLQUFLLE9BQU8sUUFBUSxNQUFNLEtBQUssZUFBZSxLQUFLO0FBQzNGLG1CQUFLLGNBQWMsUUFBUSxZQUFZO0FBQUEsbUJBQ2xDO0FBQ0wsbUJBQUssY0FBYyxRQUFRLFlBQVk7QUFDdkMsc0JBQVEsS0FBSyxPQUFPLE9BQU8sTUFBTSxLQUFLLGVBQWUsS0FBSyxnQkFBZ0IsZUFBZSxLQUFLO0FBQzlGLGtCQUFJLEtBQUssU0FBUyxLQUFLLE9BQU87QUFDNUIseUJBQVMsY0FBYyxLQUFLLFFBQVEsUUFBUSxLQUFLLFFBQVE7QUFBQSx5QkFDaEQsS0FBSyxPQUFPO0FBQ3JCLHlCQUFTLGNBQWMsS0FBSyxRQUFRO0FBQUE7QUFFdEMsa0JBQUksS0FBSyxVQUFVO0FBQ2pCLHlCQUFTO0FBQ1QscUJBQUssY0FBYyxRQUFRLFlBQVk7QUFBQSxxQkFDbEM7QUFDTCxxQkFBSyxjQUFjLFFBQVEsWUFBWTtBQUN2Qyx5QkFBUztBQUFBO0FBRVgsdUJBQVMsS0FBSyxPQUFPLFFBQVEsTUFBTSxLQUFLLGVBQWUsS0FBSztBQUFBO0FBRTlELGlCQUFLLE9BQU8sT0FBTyxLQUFLO0FBQ3hCLG1CQUFPLEtBQUssU0FBUztBQUFBO0FBQUE7QUFJekIsdUJBQWMsVUFBVSxZQUFZLFNBQVMsTUFBTTtBQUNqRCxjQUFJO0FBQ0osY0FBSSxDQUFDLEtBQUssVUFBVTtBQUNsQixvQkFBUTtBQUNSLGlCQUFLLGNBQWMsUUFBUSxZQUFZO0FBQ3ZDLGdCQUFJLEtBQUssU0FBUyxTQUFTLFNBQVM7QUFDbEMsc0JBQVEsS0FBSyxPQUFPLE9BQU8sTUFBTSxLQUFLLGVBQWUsS0FBSyxnQkFBZ0IsT0FBTyxLQUFLLE9BQU8sTUFBTSxLQUFLLE9BQU8sUUFBUSxNQUFNLEtBQUssZUFBZSxLQUFLO0FBQUEsbUJBQ2pKO0FBQ0wsc0JBQVEsS0FBSyxPQUFPLE9BQU8sTUFBTSxLQUFLLGVBQWUsS0FBSyxnQkFBZ0IsT0FBTyxLQUFLLE9BQU8sUUFBUSxNQUFNLEtBQUssZUFBZSxLQUFLO0FBQUE7QUFFdEksaUJBQUssY0FBYyxRQUFRLFlBQVk7QUFDdkMsaUJBQUssT0FBTyxPQUFPLEtBQUs7QUFDeEIsbUJBQU8sS0FBSyxXQUFXO0FBQUE7QUFBQTtBQUkzQix1QkFBYyxVQUFVLFNBQVMsU0FBUyxPQUFPLE9BQU87QUFDdEQsZUFBSyxrQkFBa0I7QUFDdkIsaUJBQU8sS0FBSyxlQUFlLE9BQU8sUUFBUTtBQUFBO0FBRzVDLHVCQUFjLFVBQVUsUUFBUSxXQUFXO0FBQ3pDLGVBQUssb0JBQW9CO0FBQ3pCLGlCQUFPLEtBQUs7QUFBQTtBQUdkLHVCQUFjLFVBQVUsWUFBWSxTQUFTLE1BQU07QUFDakQsY0FBSSxRQUFRLE1BQU07QUFDaEIsbUJBQU87QUFBQSxpQkFDRjtBQUNMLG1CQUFPLFlBQVksT0FBTztBQUFBO0FBQUE7QUFJOUIsdUJBQWMsVUFBVSxNQUFNLFdBQVc7QUFDdkMsaUJBQU8sS0FBSyxRQUFRLE1BQU0sTUFBTTtBQUFBO0FBR2xDLHVCQUFjLFVBQVUsTUFBTSxTQUFTLE1BQU0sWUFBWSxNQUFNO0FBQzdELGlCQUFPLEtBQUssS0FBSyxNQUFNLFlBQVk7QUFBQTtBQUdyQyx1QkFBYyxVQUFVLE1BQU0sU0FBUyxPQUFPO0FBQzVDLGlCQUFPLEtBQUssS0FBSztBQUFBO0FBR25CLHVCQUFjLFVBQVUsTUFBTSxTQUFTLE9BQU87QUFDNUMsaUJBQU8sS0FBSyxNQUFNO0FBQUE7QUFHcEIsdUJBQWMsVUFBVSxNQUFNLFNBQVMsT0FBTztBQUM1QyxpQkFBTyxLQUFLLFFBQVE7QUFBQTtBQUd0Qix1QkFBYyxVQUFVLE1BQU0sU0FBUyxRQUFRLE9BQU87QUFDcEQsaUJBQU8sS0FBSyxZQUFZLFFBQVE7QUFBQTtBQUdsQyx1QkFBYyxVQUFVLE1BQU0sU0FBUyxTQUFTLFVBQVUsWUFBWTtBQUNwRSxpQkFBTyxLQUFLLFlBQVksU0FBUyxVQUFVO0FBQUE7QUFHN0MsdUJBQWMsVUFBVSxNQUFNLFNBQVMsTUFBTSxPQUFPLE9BQU87QUFDekQsaUJBQU8sS0FBSyxRQUFRLE1BQU0sT0FBTztBQUFBO0FBR25DLHVCQUFjLFVBQVUsSUFBSSxTQUFTLE1BQU0sWUFBWSxNQUFNO0FBQzNELGlCQUFPLEtBQUssUUFBUSxNQUFNLFlBQVk7QUFBQTtBQUd4Qyx1QkFBYyxVQUFVLElBQUksU0FBUyxNQUFNLFlBQVksTUFBTTtBQUMzRCxpQkFBTyxLQUFLLEtBQUssTUFBTSxZQUFZO0FBQUE7QUFHckMsdUJBQWMsVUFBVSxJQUFJLFNBQVMsT0FBTztBQUMxQyxpQkFBTyxLQUFLLEtBQUs7QUFBQTtBQUduQix1QkFBYyxVQUFVLElBQUksU0FBUyxPQUFPO0FBQzFDLGlCQUFPLEtBQUssTUFBTTtBQUFBO0FBR3BCLHVCQUFjLFVBQVUsSUFBSSxTQUFTLE9BQU87QUFDMUMsaUJBQU8sS0FBSyxRQUFRO0FBQUE7QUFHdEIsdUJBQWMsVUFBVSxJQUFJLFNBQVMsT0FBTztBQUMxQyxpQkFBTyxLQUFLLElBQUk7QUFBQTtBQUdsQix1QkFBYyxVQUFVLElBQUksU0FBUyxRQUFRLE9BQU87QUFDbEQsaUJBQU8sS0FBSyxZQUFZLFFBQVE7QUFBQTtBQUdsQyx1QkFBYyxVQUFVLE1BQU0sV0FBVztBQUN2QyxjQUFJLEtBQUssZUFBZSxLQUFLLFlBQVksU0FBUyxTQUFTLFNBQVM7QUFDbEUsbUJBQU8sS0FBSyxRQUFRLE1BQU0sTUFBTTtBQUFBLGlCQUMzQjtBQUNMLG1CQUFPLEtBQUssVUFBVSxNQUFNLE1BQU07QUFBQTtBQUFBO0FBSXRDLHVCQUFjLFVBQVUsSUFBSSxXQUFXO0FBQ3JDLGNBQUksS0FBSyxlQUFlLEtBQUssWUFBWSxTQUFTLFNBQVMsU0FBUztBQUNsRSxtQkFBTyxLQUFLLFFBQVEsTUFBTSxNQUFNO0FBQUEsaUJBQzNCO0FBQ0wsbUJBQU8sS0FBSyxVQUFVLE1BQU0sTUFBTTtBQUFBO0FBQUE7QUFJdEMsdUJBQWMsVUFBVSxNQUFNLFNBQVMsTUFBTSxPQUFPO0FBQ2xELGlCQUFPLEtBQUssT0FBTyxNQUFNO0FBQUE7QUFHM0IsdUJBQWMsVUFBVSxPQUFPLFNBQVMsTUFBTSxPQUFPO0FBQ25ELGlCQUFPLEtBQUssUUFBUSxNQUFNO0FBQUE7QUFHNUIsdUJBQWMsVUFBVSxNQUFNLFNBQVMsTUFBTSxPQUFPO0FBQ2xELGlCQUFPLEtBQUssU0FBUyxNQUFNO0FBQUE7QUFHN0IsZUFBTztBQUFBO0FBQUEsT0FJUixLQUFLO0FBQUE7QUFBQTs7O0FDL2dCUjtBQUFBO0FBQ0EsSUFBQyxZQUFXO0FBQ1YsVUFBSSxVQUFVLGFBQWEsaUJBQWlCLGVBQzFDLFNBQVMsU0FBUyxPQUFPLFFBQVE7QUFBRSxpQkFBUyxPQUFPLFFBQVE7QUFBRSxjQUFJLFFBQVEsS0FBSyxRQUFRO0FBQU0sa0JBQU0sT0FBTyxPQUFPO0FBQUE7QUFBUSx3QkFBZ0I7QUFBRSxlQUFLLGNBQWM7QUFBQTtBQUFTLGFBQUssWUFBWSxPQUFPO0FBQVcsY0FBTSxZQUFZLElBQUk7QUFBUSxjQUFNLFlBQVksT0FBTztBQUFXLGVBQU87QUFBQSxTQUNsUixVQUFVLEdBQUc7QUFFZixpQkFBVztBQUVYLHNCQUFnQjtBQUVoQixvQkFBYztBQUVkLGNBQU8sVUFBVSxrQkFBbUIsU0FBUyxZQUFZO0FBQ3ZELGVBQU8sa0JBQWlCO0FBRXhCLGtDQUF5QixRQUFRLFNBQVM7QUFDeEMsZUFBSyxTQUFTO0FBQ2QsMkJBQWdCLFVBQVUsWUFBWSxLQUFLLE1BQU07QUFBQTtBQUduRCx5QkFBZ0IsVUFBVSxVQUFVLFNBQVMsTUFBTSxTQUFTLE9BQU87QUFDakUsY0FBSSxLQUFLLGtCQUFrQixRQUFRLFVBQVUsWUFBWSxVQUFVO0FBQ2pFLG1CQUFPO0FBQUEsaUJBQ0Y7QUFDTCxtQkFBTyxpQkFBZ0IsVUFBVSxRQUFRLEtBQUssTUFBTSxNQUFNLFNBQVM7QUFBQTtBQUFBO0FBSXZFLHlCQUFnQixVQUFVLFdBQVcsU0FBUyxLQUFLLFNBQVM7QUFDMUQsY0FBSSxPQUFPLEdBQUcsR0FBRyxHQUFHLEtBQUssTUFBTSxLQUFLLE1BQU07QUFDMUMsZ0JBQU0sSUFBSTtBQUNWLGVBQUssSUFBSSxJQUFJLEdBQUcsTUFBTSxJQUFJLFFBQVEsSUFBSSxLQUFLLElBQUksRUFBRSxHQUFHO0FBQ2xELG9CQUFRLElBQUk7QUFDWixrQkFBTSxpQkFBaUIsTUFBTSxJQUFJLFNBQVMsU0FBUztBQUFBO0FBRXJELG9CQUFVLEtBQUssY0FBYztBQUM3QixpQkFBTyxJQUFJO0FBQ1gsb0JBQVU7QUFDVixlQUFLLElBQUksR0FBRyxPQUFPLEtBQUssUUFBUSxJQUFJLE1BQU0sS0FBSztBQUM3QyxvQkFBUSxLQUFLO0FBQ2Isb0JBQVEsS0FBSyxLQUFLLGVBQWUsT0FBTyxTQUFTO0FBQUE7QUFFbkQsaUJBQU87QUFBQTtBQUdULHlCQUFnQixVQUFVLFlBQVksU0FBUyxLQUFLLFNBQVMsT0FBTztBQUNsRSxpQkFBTyxLQUFLLE9BQU8sTUFBTSxpQkFBZ0IsVUFBVSxVQUFVLEtBQUssTUFBTSxLQUFLLFNBQVM7QUFBQTtBQUd4Rix5QkFBZ0IsVUFBVSxRQUFRLFNBQVMsTUFBTSxTQUFTLE9BQU87QUFDL0QsaUJBQU8sS0FBSyxPQUFPLE1BQU0saUJBQWdCLFVBQVUsTUFBTSxLQUFLLE1BQU0sTUFBTSxTQUFTO0FBQUE7QUFHckYseUJBQWdCLFVBQVUsVUFBVSxTQUFTLE1BQU0sU0FBUyxPQUFPO0FBQ2pFLGlCQUFPLEtBQUssT0FBTyxNQUFNLGlCQUFnQixVQUFVLFFBQVEsS0FBSyxNQUFNLE1BQU0sU0FBUztBQUFBO0FBR3ZGLHlCQUFnQixVQUFVLGNBQWMsU0FBUyxNQUFNLFNBQVMsT0FBTztBQUNyRSxpQkFBTyxLQUFLLE9BQU8sTUFBTSxpQkFBZ0IsVUFBVSxZQUFZLEtBQUssTUFBTSxNQUFNLFNBQVM7QUFBQTtBQUczRix5QkFBZ0IsVUFBVSxVQUFVLFNBQVMsTUFBTSxTQUFTLE9BQU87QUFDakUsY0FBSSxPQUFPLEdBQUcsS0FBSztBQUNuQixtQkFBVSxTQUFRO0FBQ2xCLGVBQUssU0FBUyxNQUFNLFNBQVM7QUFDN0Isa0JBQVEsUUFBUSxZQUFZO0FBQzVCLGVBQUssT0FBTyxNQUFNLEtBQUssT0FBTyxNQUFNLFNBQVM7QUFDN0MsZUFBSyxPQUFPLE1BQU0sZUFBZSxLQUFLLE9BQU87QUFDN0MsY0FBSSxLQUFLLFNBQVMsS0FBSyxPQUFPO0FBQzVCLGlCQUFLLE9BQU8sTUFBTSxjQUFjLEtBQUssUUFBUSxRQUFRLEtBQUssUUFBUTtBQUFBLHFCQUN6RCxLQUFLLE9BQU87QUFDckIsaUJBQUssT0FBTyxNQUFNLGNBQWMsS0FBSyxRQUFRO0FBQUE7QUFFL0MsY0FBSSxLQUFLLFNBQVMsU0FBUyxHQUFHO0FBQzVCLGlCQUFLLE9BQU8sTUFBTTtBQUNsQixpQkFBSyxPQUFPLE1BQU0sS0FBSyxRQUFRLE1BQU0sU0FBUztBQUM5QyxvQkFBUSxRQUFRLFlBQVk7QUFDNUIsa0JBQU0sS0FBSztBQUNYLGlCQUFLLElBQUksR0FBRyxNQUFNLElBQUksUUFBUSxJQUFJLEtBQUssS0FBSztBQUMxQyxzQkFBUSxJQUFJO0FBQ1osbUJBQUssZUFBZSxPQUFPLFNBQVMsUUFBUTtBQUFBO0FBRTlDLG9CQUFRLFFBQVEsWUFBWTtBQUM1QixpQkFBSyxPQUFPLE1BQU07QUFBQTtBQUVwQixrQkFBUSxRQUFRLFlBQVk7QUFDNUIsZUFBSyxPQUFPLE1BQU0sUUFBUSxtQkFBbUI7QUFDN0MsZUFBSyxPQUFPLE1BQU0sS0FBSyxRQUFRLE1BQU0sU0FBUztBQUM5QyxrQkFBUSxRQUFRLFlBQVk7QUFDNUIsaUJBQU8sS0FBSyxVQUFVLE1BQU0sU0FBUztBQUFBO0FBR3ZDLHlCQUFnQixVQUFVLFVBQVUsU0FBUyxNQUFNLFNBQVMsT0FBTztBQUNqRSxjQUFJLEtBQUssT0FBTyxnQkFBZ0IsZ0JBQWdCLEdBQUcsS0FBSyxNQUFNLGtCQUFrQixLQUFLO0FBQ3JGLG1CQUFVLFNBQVE7QUFDbEIsZUFBSyxTQUFTLE1BQU0sU0FBUztBQUM3QixrQkFBUSxRQUFRLFlBQVk7QUFDNUIsZUFBSyxPQUFPLE1BQU0sS0FBSyxPQUFPLE1BQU0sU0FBUyxTQUFTLE1BQU0sS0FBSztBQUNqRSxnQkFBTSxLQUFLO0FBQ1gsZUFBSyxRQUFRLEtBQUs7QUFDaEIsZ0JBQUksQ0FBQyxRQUFRLEtBQUssS0FBSztBQUFPO0FBQzlCLGtCQUFNLElBQUk7QUFDVixpQkFBSyxVQUFVLEtBQUssU0FBUztBQUFBO0FBRS9CLDJCQUFpQixLQUFLLFNBQVM7QUFDL0IsMkJBQWlCLG1CQUFtQixJQUFJLE9BQU8sS0FBSyxTQUFTO0FBQzdELGNBQUksbUJBQW1CLEtBQUssS0FBSyxTQUFTLE1BQU0sU0FBUyxHQUFHO0FBQzFELG1CQUFRLEdBQUUsU0FBUyxTQUFTLFFBQVEsRUFBRSxTQUFTLFNBQVMsUUFBUSxFQUFFLFVBQVU7QUFBQSxjQUMxRTtBQUNGLGdCQUFJLFFBQVEsWUFBWTtBQUN0QixtQkFBSyxPQUFPLE1BQU07QUFDbEIsc0JBQVEsUUFBUSxZQUFZO0FBQzVCLG1CQUFLLE9BQU8sTUFBTSxPQUFPLEtBQUssT0FBTztBQUFBLG1CQUNoQztBQUNMLHNCQUFRLFFBQVEsWUFBWTtBQUM1QixtQkFBSyxPQUFPLE1BQU0sUUFBUSxtQkFBbUI7QUFBQTtBQUFBLHFCQUV0QyxRQUFRLFVBQVUsbUJBQW1CLEtBQU0sZ0JBQWUsU0FBUyxTQUFTLFFBQVEsZUFBZSxTQUFTLFNBQVMsUUFBUyxlQUFlLFNBQVMsTUFBTztBQUN0SyxpQkFBSyxPQUFPLE1BQU07QUFDbEIsb0JBQVEsUUFBUSxZQUFZO0FBQzVCLG9CQUFRO0FBQ1IsK0JBQW1CO0FBQ25CLGlCQUFLLGVBQWUsZ0JBQWdCLFNBQVMsUUFBUTtBQUNyRCxvQkFBUTtBQUNSLCtCQUFtQjtBQUNuQixvQkFBUSxRQUFRLFlBQVk7QUFDNUIsaUJBQUssT0FBTyxNQUFNLE9BQU8sS0FBSyxPQUFPO0FBQUEsaUJBQ2hDO0FBQ0wsaUJBQUssT0FBTyxNQUFNLE1BQU0sS0FBSyxRQUFRLE1BQU0sU0FBUztBQUNwRCxvQkFBUSxRQUFRLFlBQVk7QUFDNUIsbUJBQU8sS0FBSztBQUNaLGlCQUFLLElBQUksR0FBRyxNQUFNLEtBQUssUUFBUSxJQUFJLEtBQUssS0FBSztBQUMzQyxzQkFBUSxLQUFLO0FBQ2IsbUJBQUssZUFBZSxPQUFPLFNBQVMsUUFBUTtBQUFBO0FBRTlDLG9CQUFRLFFBQVEsWUFBWTtBQUM1QixpQkFBSyxPQUFPLE1BQU0sS0FBSyxPQUFPLE1BQU0sU0FBUyxTQUFTLE9BQU8sS0FBSyxPQUFPO0FBQUE7QUFFM0UsZUFBSyxPQUFPLE1BQU0sS0FBSyxRQUFRLE1BQU0sU0FBUztBQUM5QyxrQkFBUSxRQUFRLFlBQVk7QUFDNUIsaUJBQU8sS0FBSyxVQUFVLE1BQU0sU0FBUztBQUFBO0FBR3ZDLHlCQUFnQixVQUFVLHdCQUF3QixTQUFTLE1BQU0sU0FBUyxPQUFPO0FBQy9FLGlCQUFPLEtBQUssT0FBTyxNQUFNLGlCQUFnQixVQUFVLHNCQUFzQixLQUFLLE1BQU0sTUFBTSxTQUFTO0FBQUE7QUFHckcseUJBQWdCLFVBQVUsTUFBTSxTQUFTLE1BQU0sU0FBUyxPQUFPO0FBQzdELGlCQUFPLEtBQUssT0FBTyxNQUFNLGlCQUFnQixVQUFVLElBQUksS0FBSyxNQUFNLE1BQU0sU0FBUztBQUFBO0FBR25GLHlCQUFnQixVQUFVLE9BQU8sU0FBUyxNQUFNLFNBQVMsT0FBTztBQUM5RCxpQkFBTyxLQUFLLE9BQU8sTUFBTSxpQkFBZ0IsVUFBVSxLQUFLLEtBQUssTUFBTSxNQUFNLFNBQVM7QUFBQTtBQUdwRix5QkFBZ0IsVUFBVSxhQUFhLFNBQVMsTUFBTSxTQUFTLE9BQU87QUFDcEUsaUJBQU8sS0FBSyxPQUFPLE1BQU0saUJBQWdCLFVBQVUsV0FBVyxLQUFLLE1BQU0sTUFBTSxTQUFTO0FBQUE7QUFHMUYseUJBQWdCLFVBQVUsYUFBYSxTQUFTLE1BQU0sU0FBUyxPQUFPO0FBQ3BFLGlCQUFPLEtBQUssT0FBTyxNQUFNLGlCQUFnQixVQUFVLFdBQVcsS0FBSyxNQUFNLE1BQU0sU0FBUztBQUFBO0FBRzFGLHlCQUFnQixVQUFVLFlBQVksU0FBUyxNQUFNLFNBQVMsT0FBTztBQUNuRSxpQkFBTyxLQUFLLE9BQU8sTUFBTSxpQkFBZ0IsVUFBVSxVQUFVLEtBQUssTUFBTSxNQUFNLFNBQVM7QUFBQTtBQUd6Rix5QkFBZ0IsVUFBVSxjQUFjLFNBQVMsTUFBTSxTQUFTLE9BQU87QUFDckUsaUJBQU8sS0FBSyxPQUFPLE1BQU0saUJBQWdCLFVBQVUsWUFBWSxLQUFLLE1BQU0sTUFBTSxTQUFTO0FBQUE7QUFHM0YsZUFBTztBQUFBLFFBRU47QUFBQSxPQUVGLEtBQUs7QUFBQTtBQUFBOzs7QUMvS1I7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWLFVBQUksVUFBVSxhQUFhLHNCQUFzQixhQUFhLGVBQWUsaUJBQWlCLGlCQUFpQixRQUFRLFlBQVk7QUFFbkksWUFBTSxtQkFBc0IsU0FBUyxJQUFJLFFBQVEsYUFBYSxJQUFJO0FBRWxFLDZCQUF1QjtBQUV2QixvQkFBYztBQUVkLHNCQUFnQjtBQUVoQix3QkFBa0I7QUFFbEIsd0JBQWtCO0FBRWxCLGlCQUFXO0FBRVgsb0JBQWM7QUFFZCxjQUFPLFFBQVEsU0FBUyxTQUFTLE1BQU0sUUFBUSxTQUFTLFNBQVM7QUFDL0QsWUFBSSxLQUFLO0FBQ1QsWUFBSSxRQUFRLE1BQU07QUFDaEIsZ0JBQU0sSUFBSSxNQUFNO0FBQUE7QUFFbEIsa0JBQVUsT0FBTyxJQUFJLFFBQVEsU0FBUztBQUN0QyxjQUFNLElBQUksWUFBWTtBQUN0QixlQUFPLElBQUksUUFBUTtBQUNuQixZQUFJLENBQUMsUUFBUSxVQUFVO0FBQ3JCLGNBQUksWUFBWTtBQUNoQixjQUFLLFFBQVEsU0FBUyxRQUFVLFFBQVEsU0FBUyxNQUFPO0FBQ3RELGdCQUFJLElBQUk7QUFBQTtBQUFBO0FBR1osZUFBTztBQUFBO0FBR1QsY0FBTyxRQUFRLFFBQVEsU0FBUyxTQUFTLFFBQVEsT0FBTztBQUN0RCxZQUFJO0FBQ0osWUFBSSxXQUFXLFVBQVU7QUFDdkIsaUJBQU8sQ0FBQyxTQUFTLFNBQVMsU0FBUyxLQUFLLElBQUksUUFBUSxLQUFLO0FBQ3pELG9CQUFVO0FBQUE7QUFFWixZQUFJLFFBQVE7QUFDVixpQkFBTyxJQUFJLGNBQWMsU0FBUyxRQUFRO0FBQUEsZUFDckM7QUFDTCxpQkFBTyxJQUFJLFlBQVk7QUFBQTtBQUFBO0FBSTNCLGNBQU8sUUFBUSxlQUFlLFNBQVMsU0FBUztBQUM5QyxlQUFPLElBQUksZ0JBQWdCO0FBQUE7QUFHN0IsY0FBTyxRQUFRLGVBQWUsU0FBUyxRQUFRLFNBQVM7QUFDdEQsZUFBTyxJQUFJLGdCQUFnQixRQUFRO0FBQUE7QUFHckMsY0FBTyxRQUFRLGlCQUFpQixJQUFJO0FBRXBDLGNBQU8sUUFBUSxXQUFXO0FBRTFCLGNBQU8sUUFBUSxjQUFjO0FBQUEsT0FFNUIsS0FBSztBQUFBO0FBQUE7OztBQ2hFUjtBQUFBO0FBQ0EsSUFBQyxZQUFXO0FBQ1Y7QUFDQSxVQUFJLFNBQVMsVUFBVSxhQUFhLGVBQWUsV0FDakQsVUFBVSxHQUFHO0FBRWYsZ0JBQVU7QUFFVixpQkFBVyxtQkFBc0I7QUFFakMsc0JBQWdCLFNBQVMsT0FBTztBQUM5QixlQUFPLE9BQU8sVUFBVSxZQUFhLE9BQU0sUUFBUSxRQUFRLEtBQUssTUFBTSxRQUFRLFFBQVEsS0FBSyxNQUFNLFFBQVEsUUFBUTtBQUFBO0FBR25ILGtCQUFZLFNBQVMsT0FBTztBQUMxQixlQUFPLGNBQWUsWUFBWSxTQUFVO0FBQUE7QUFHOUMsb0JBQWMsU0FBUyxPQUFPO0FBQzVCLGVBQU8sTUFBTSxRQUFRLE9BQU87QUFBQTtBQUc5QixjQUFRLFVBQVcsV0FBVztBQUM1Qix5QkFBaUIsTUFBTTtBQUNyQixjQUFJLEtBQUssS0FBSztBQUNkLGVBQUssVUFBVTtBQUNmLGdCQUFNLFNBQVM7QUFDZixlQUFLLE9BQU8sS0FBSztBQUNmLGdCQUFJLENBQUMsUUFBUSxLQUFLLEtBQUs7QUFBTTtBQUM3QixvQkFBUSxJQUFJO0FBQ1osaUJBQUssUUFBUSxPQUFPO0FBQUE7QUFFdEIsZUFBSyxPQUFPLE1BQU07QUFDaEIsZ0JBQUksQ0FBQyxRQUFRLEtBQUssTUFBTTtBQUFNO0FBQzlCLG9CQUFRLEtBQUs7QUFDYixpQkFBSyxRQUFRLE9BQU87QUFBQTtBQUFBO0FBSXhCLGdCQUFRLFVBQVUsY0FBYyxTQUFTLFNBQVM7QUFDaEQsY0FBSSxTQUFTLFNBQVMsUUFBUSxhQUFhO0FBQzNDLG9CQUFVLEtBQUssUUFBUTtBQUN2QixvQkFBVSxLQUFLLFFBQVE7QUFDdkIsY0FBSyxPQUFPLEtBQUssU0FBUyxXQUFXLEtBQU8sS0FBSyxRQUFRLGFBQWEsU0FBUyxPQUFPLFVBQVc7QUFDL0YsdUJBQVcsT0FBTyxLQUFLLFNBQVM7QUFDaEMsc0JBQVUsUUFBUTtBQUFBLGlCQUNiO0FBQ0wsdUJBQVcsS0FBSyxRQUFRO0FBQUE7QUFFMUIsbUJBQVUsU0FBUyxPQUFPO0FBQ3hCLG1CQUFPLFNBQVMsU0FBUyxLQUFLO0FBQzVCLGtCQUFJLE1BQU0sT0FBTyxPQUFPLE9BQU8sS0FBSztBQUNwQyxrQkFBSSxPQUFPLFFBQVEsVUFBVTtBQUMzQixvQkFBSSxNQUFNLFFBQVEsU0FBUyxjQUFjLE1BQU07QUFDN0MsMEJBQVEsSUFBSSxVQUFVO0FBQUEsdUJBQ2pCO0FBQ0wsMEJBQVEsSUFBSTtBQUFBO0FBQUEseUJBRUwsTUFBTSxRQUFRLE1BQU07QUFDN0IscUJBQUssU0FBUyxLQUFLO0FBQ2pCLHNCQUFJLENBQUMsUUFBUSxLQUFLLEtBQUs7QUFBUTtBQUMvQiwwQkFBUSxJQUFJO0FBQ1osdUJBQUssT0FBTyxPQUFPO0FBQ2pCLDRCQUFRLE1BQU07QUFDZCw4QkFBVSxPQUFPLFFBQVEsSUFBSSxNQUFNLE9BQU87QUFBQTtBQUFBO0FBQUEscUJBR3pDO0FBQ0wscUJBQUssT0FBTyxLQUFLO0FBQ2Ysc0JBQUksQ0FBQyxRQUFRLEtBQUssS0FBSztBQUFNO0FBQzdCLDBCQUFRLElBQUk7QUFDWixzQkFBSSxRQUFRLFNBQVM7QUFDbkIsd0JBQUksT0FBTyxVQUFVLFVBQVU7QUFDN0IsMkJBQUssUUFBUSxPQUFPO0FBQ2xCLGdDQUFRLE1BQU07QUFDZCxrQ0FBVSxRQUFRLElBQUksTUFBTTtBQUFBO0FBQUE7QUFBQSw2QkFHdkIsUUFBUSxTQUFTO0FBQzFCLHdCQUFJLE1BQU0sUUFBUSxTQUFTLGNBQWMsUUFBUTtBQUMvQyxnQ0FBVSxRQUFRLElBQUksVUFBVTtBQUFBLDJCQUMzQjtBQUNMLGdDQUFVLFFBQVEsSUFBSTtBQUFBO0FBQUEsNkJBRWYsTUFBTSxRQUFRLFFBQVE7QUFDL0IseUJBQUssU0FBUyxPQUFPO0FBQ25CLDBCQUFJLENBQUMsUUFBUSxLQUFLLE9BQU87QUFBUTtBQUNqQyw4QkFBUSxNQUFNO0FBQ2QsMEJBQUksT0FBTyxVQUFVLFVBQVU7QUFDN0IsNEJBQUksTUFBTSxRQUFRLFNBQVMsY0FBYyxRQUFRO0FBQy9DLG9DQUFVLFFBQVEsSUFBSSxLQUFLLElBQUksVUFBVSxRQUFRO0FBQUEsK0JBQzVDO0FBQ0wsb0NBQVUsUUFBUSxJQUFJLEtBQUssT0FBTztBQUFBO0FBQUEsNkJBRS9CO0FBQ0wsa0NBQVUsT0FBTyxRQUFRLElBQUksTUFBTSxPQUFPO0FBQUE7QUFBQTtBQUFBLDZCQUdyQyxPQUFPLFVBQVUsVUFBVTtBQUNwQyw4QkFBVSxPQUFPLFFBQVEsSUFBSSxNQUFNLE9BQU87QUFBQSx5QkFDckM7QUFDTCx3QkFBSSxPQUFPLFVBQVUsWUFBWSxNQUFNLFFBQVEsU0FBUyxjQUFjLFFBQVE7QUFDNUUsZ0NBQVUsUUFBUSxJQUFJLEtBQUssSUFBSSxVQUFVLFFBQVE7QUFBQSwyQkFDNUM7QUFDTCwwQkFBSSxTQUFTLE1BQU07QUFDakIsZ0NBQVE7QUFBQTtBQUVWLGdDQUFVLFFBQVEsSUFBSSxLQUFLLE1BQU0sWUFBWTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBS3JELHFCQUFPO0FBQUE7QUFBQSxZQUVSO0FBQ0gsd0JBQWMsUUFBUSxPQUFPLFVBQVUsS0FBSyxRQUFRLFFBQVEsS0FBSyxRQUFRLFNBQVM7QUFBQSxZQUNoRixVQUFVLEtBQUssUUFBUTtBQUFBLFlBQ3ZCLHFCQUFxQixLQUFLLFFBQVE7QUFBQTtBQUVwQyxpQkFBTyxPQUFPLGFBQWEsU0FBUyxJQUFJLEtBQUssUUFBUTtBQUFBO0FBR3ZELGVBQU87QUFBQTtBQUFBLE9BSVIsS0FBSztBQUFBO0FBQUE7OztBQzlIUjtBQUFBO0FBQUMsSUFBQyxVQUFVLEtBQUs7QUFDZixVQUFJLFNBQVMsU0FBVSxRQUFRLEtBQUs7QUFBRSxlQUFPLElBQUksVUFBVSxRQUFRO0FBQUE7QUFDbkUsVUFBSSxZQUFZO0FBQ2hCLFVBQUksWUFBWTtBQUNoQixVQUFJLGVBQWU7QUFXbkIsVUFBSSxvQkFBb0IsS0FBSztBQUU3QixVQUFJLFVBQVU7QUFBQSxRQUNaO0FBQUEsUUFBVztBQUFBLFFBQVk7QUFBQSxRQUFZO0FBQUEsUUFBVztBQUFBLFFBQzlDO0FBQUEsUUFBZ0I7QUFBQSxRQUFnQjtBQUFBLFFBQVU7QUFBQSxRQUMxQztBQUFBLFFBQWU7QUFBQSxRQUFTO0FBQUE7QUFHMUIsVUFBSSxTQUFTO0FBQUEsUUFDWDtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUE7QUFHRix5QkFBb0IsUUFBUSxLQUFLO0FBQy9CLFlBQUksQ0FBRSxpQkFBZ0IsWUFBWTtBQUNoQyxpQkFBTyxJQUFJLFVBQVUsUUFBUTtBQUFBO0FBRy9CLFlBQUksU0FBUztBQUNiLHFCQUFhO0FBQ2IsZUFBTyxJQUFJLE9BQU8sSUFBSTtBQUN0QixlQUFPLHNCQUFzQixJQUFJO0FBQ2pDLGVBQU8sTUFBTSxPQUFPO0FBQ3BCLGVBQU8sSUFBSSxZQUFZLE9BQU8sSUFBSSxhQUFhLE9BQU8sSUFBSTtBQUMxRCxlQUFPLFlBQVksT0FBTyxJQUFJLFlBQVksZ0JBQWdCO0FBQzFELGVBQU8sT0FBTztBQUNkLGVBQU8sU0FBUyxPQUFPLGFBQWEsT0FBTyxVQUFVO0FBQ3JELGVBQU8sTUFBTSxPQUFPLFFBQVE7QUFDNUIsZUFBTyxTQUFTLENBQUMsQ0FBQztBQUNsQixlQUFPLFdBQVcsQ0FBQyxDQUFFLFdBQVUsT0FBTyxJQUFJO0FBQzFDLGVBQU8sUUFBUSxFQUFFO0FBQ2pCLGVBQU8saUJBQWlCLE9BQU8sSUFBSTtBQUNuQyxlQUFPLFdBQVcsT0FBTyxpQkFBaUIsT0FBTyxPQUFPLElBQUksZ0JBQWdCLE9BQU8sT0FBTyxJQUFJO0FBQzlGLGVBQU8sYUFBYTtBQUtwQixZQUFJLE9BQU8sSUFBSSxPQUFPO0FBQ3BCLGlCQUFPLEtBQUssT0FBTyxPQUFPO0FBQUE7QUFLNUIsWUFBSSxPQUFPLElBQUksNEJBQTRCLFFBQVc7QUFDcEQsaUJBQU8sSUFBSSwwQkFBMEIsQ0FBQztBQUFBO0FBSXhDLGVBQU8sZ0JBQWdCLE9BQU8sSUFBSSxhQUFhO0FBQy9DLFlBQUksT0FBTyxlQUFlO0FBQ3hCLGlCQUFPLFdBQVcsT0FBTyxPQUFPLE9BQU8sU0FBUztBQUFBO0FBRWxELGFBQUssUUFBUTtBQUFBO0FBR2YsVUFBSSxDQUFDLE9BQU8sUUFBUTtBQUNsQixlQUFPLFNBQVMsU0FBVSxHQUFHO0FBQzNCLHVCQUFjO0FBQUE7QUFDZCxZQUFFLFlBQVk7QUFDZCxjQUFJLE9BQU8sSUFBSTtBQUNmLGlCQUFPO0FBQUE7QUFBQTtBQUlYLFVBQUksQ0FBQyxPQUFPLE1BQU07QUFDaEIsZUFBTyxPQUFPLFNBQVUsR0FBRztBQUN6QixjQUFJLElBQUk7QUFDUixtQkFBUyxLQUFLO0FBQUcsZ0JBQUksRUFBRSxlQUFlO0FBQUksZ0JBQUUsS0FBSztBQUNqRCxpQkFBTztBQUFBO0FBQUE7QUFJWCxpQ0FBNEIsUUFBUTtBQUNsQyxZQUFJLGFBQWEsS0FBSyxJQUFJLElBQUksbUJBQW1CO0FBQ2pELFlBQUksWUFBWTtBQUNoQixpQkFBUyxJQUFJLEdBQUcsSUFBSSxRQUFRLFFBQVEsSUFBSSxHQUFHLEtBQUs7QUFDOUMsY0FBSSxNQUFNLE9BQU8sUUFBUSxJQUFJO0FBQzdCLGNBQUksTUFBTSxZQUFZO0FBS3BCLG9CQUFRLFFBQVE7QUFBQSxtQkFDVDtBQUNILDBCQUFVO0FBQ1Y7QUFBQSxtQkFFRztBQUNILHlCQUFTLFFBQVEsV0FBVyxPQUFPO0FBQ25DLHVCQUFPLFFBQVE7QUFDZjtBQUFBLG1CQUVHO0FBQ0gseUJBQVMsUUFBUSxZQUFZLE9BQU87QUFDcEMsdUJBQU8sU0FBUztBQUNoQjtBQUFBO0FBR0Esc0JBQU0sUUFBUSxpQ0FBaUMsUUFBUTtBQUFBO0FBQUE7QUFHN0Qsc0JBQVksS0FBSyxJQUFJLFdBQVc7QUFBQTtBQUdsQyxZQUFJLElBQUksSUFBSSxvQkFBb0I7QUFDaEMsZUFBTyxzQkFBc0IsSUFBSSxPQUFPO0FBQUE7QUFHMUMsNEJBQXVCLFFBQVE7QUFDN0IsaUJBQVMsSUFBSSxHQUFHLElBQUksUUFBUSxRQUFRLElBQUksR0FBRyxLQUFLO0FBQzlDLGlCQUFPLFFBQVEsTUFBTTtBQUFBO0FBQUE7QUFJekIsNEJBQXVCLFFBQVE7QUFDN0Isa0JBQVU7QUFDVixZQUFJLE9BQU8sVUFBVSxJQUFJO0FBQ3ZCLG1CQUFTLFFBQVEsV0FBVyxPQUFPO0FBQ25DLGlCQUFPLFFBQVE7QUFBQTtBQUVqQixZQUFJLE9BQU8sV0FBVyxJQUFJO0FBQ3hCLG1CQUFTLFFBQVEsWUFBWSxPQUFPO0FBQ3BDLGlCQUFPLFNBQVM7QUFBQTtBQUFBO0FBSXBCLGdCQUFVLFlBQVk7QUFBQSxRQUNwQixLQUFLLFdBQVk7QUFBRSxjQUFJO0FBQUE7QUFBQSxRQUN2QjtBQUFBLFFBQ0EsUUFBUSxXQUFZO0FBQUUsZUFBSyxRQUFRO0FBQU0saUJBQU87QUFBQTtBQUFBLFFBQ2hELE9BQU8sV0FBWTtBQUFFLGlCQUFPLEtBQUssTUFBTTtBQUFBO0FBQUEsUUFDdkMsT0FBTyxXQUFZO0FBQUUsdUJBQWE7QUFBQTtBQUFBO0FBR3BDLFVBQUk7QUFDSixVQUFJO0FBQ0YsaUJBQVMsUUFBUSxVQUFVO0FBQUEsZUFDcEIsSUFBUDtBQUNBLGlCQUFTLFdBQVk7QUFBQTtBQUFBO0FBRXZCLFVBQUksQ0FBQztBQUFRLGlCQUFTLFdBQVk7QUFBQTtBQUVsQyxVQUFJLGNBQWMsSUFBSSxPQUFPLE9BQU8sU0FBVSxJQUFJO0FBQ2hELGVBQU8sT0FBTyxXQUFXLE9BQU87QUFBQTtBQUdsQyw0QkFBdUIsUUFBUSxLQUFLO0FBQ2xDLGVBQU8sSUFBSSxVQUFVLFFBQVE7QUFBQTtBQUcvQix5QkFBb0IsUUFBUSxLQUFLO0FBQy9CLFlBQUksQ0FBRSxpQkFBZ0IsWUFBWTtBQUNoQyxpQkFBTyxJQUFJLFVBQVUsUUFBUTtBQUFBO0FBRy9CLGVBQU8sTUFBTTtBQUViLGFBQUssVUFBVSxJQUFJLFVBQVUsUUFBUTtBQUNyQyxhQUFLLFdBQVc7QUFDaEIsYUFBSyxXQUFXO0FBRWhCLFlBQUksS0FBSztBQUVULGFBQUssUUFBUSxRQUFRLFdBQVk7QUFDL0IsYUFBRyxLQUFLO0FBQUE7QUFHVixhQUFLLFFBQVEsVUFBVSxTQUFVLElBQUk7QUFDbkMsYUFBRyxLQUFLLFNBQVM7QUFJakIsYUFBRyxRQUFRLFFBQVE7QUFBQTtBQUdyQixhQUFLLFdBQVc7QUFFaEIsb0JBQVksUUFBUSxTQUFVLElBQUk7QUFDaEMsaUJBQU8sZUFBZSxJQUFJLE9BQU8sSUFBSTtBQUFBLFlBQ25DLEtBQUssV0FBWTtBQUNmLHFCQUFPLEdBQUcsUUFBUSxPQUFPO0FBQUE7QUFBQSxZQUUzQixLQUFLLFNBQVUsR0FBRztBQUNoQixrQkFBSSxDQUFDLEdBQUc7QUFDTixtQkFBRyxtQkFBbUI7QUFDdEIsbUJBQUcsUUFBUSxPQUFPLE1BQU07QUFDeEIsdUJBQU87QUFBQTtBQUVULGlCQUFHLEdBQUcsSUFBSTtBQUFBO0FBQUEsWUFFWixZQUFZO0FBQUEsWUFDWixjQUFjO0FBQUE7QUFBQTtBQUFBO0FBS3BCLGdCQUFVLFlBQVksT0FBTyxPQUFPLE9BQU8sV0FBVztBQUFBLFFBQ3BELGFBQWE7QUFBQSxVQUNYLE9BQU87QUFBQTtBQUFBO0FBSVgsZ0JBQVUsVUFBVSxRQUFRLFNBQVUsTUFBTTtBQUMxQyxZQUFJLE9BQU8sV0FBVyxjQUNwQixPQUFPLE9BQU8sYUFBYSxjQUMzQixPQUFPLFNBQVMsT0FBTztBQUN2QixjQUFJLENBQUMsS0FBSyxVQUFVO0FBQ2xCLGdCQUFJLEtBQUssUUFBUSxrQkFBa0I7QUFDbkMsaUJBQUssV0FBVyxJQUFJLEdBQUc7QUFBQTtBQUV6QixpQkFBTyxLQUFLLFNBQVMsTUFBTTtBQUFBO0FBRzdCLGFBQUssUUFBUSxNQUFNLEtBQUs7QUFDeEIsYUFBSyxLQUFLLFFBQVE7QUFDbEIsZUFBTztBQUFBO0FBR1QsZ0JBQVUsVUFBVSxNQUFNLFNBQVUsT0FBTztBQUN6QyxZQUFJLFNBQVMsTUFBTSxRQUFRO0FBQ3pCLGVBQUssTUFBTTtBQUFBO0FBRWIsYUFBSyxRQUFRO0FBQ2IsZUFBTztBQUFBO0FBR1QsZ0JBQVUsVUFBVSxLQUFLLFNBQVUsSUFBSSxTQUFTO0FBQzlDLFlBQUksS0FBSztBQUNULFlBQUksQ0FBQyxHQUFHLFFBQVEsT0FBTyxPQUFPLFlBQVksUUFBUSxRQUFRLElBQUk7QUFDNUQsYUFBRyxRQUFRLE9BQU8sTUFBTSxXQUFZO0FBQ2xDLGdCQUFJLE9BQU8sVUFBVSxXQUFXLElBQUksQ0FBQyxVQUFVLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDdkUsaUJBQUssT0FBTyxHQUFHLEdBQUc7QUFDbEIsZUFBRyxLQUFLLE1BQU0sSUFBSTtBQUFBO0FBQUE7QUFJdEIsZUFBTyxPQUFPLFVBQVUsR0FBRyxLQUFLLElBQUksSUFBSTtBQUFBO0FBSzFDLFVBQUksUUFBUTtBQUNaLFVBQUksVUFBVTtBQUNkLFVBQUksZ0JBQWdCO0FBQ3BCLFVBQUksa0JBQWtCO0FBQ3RCLFVBQUksU0FBUyxFQUFFLEtBQUssZUFBZSxPQUFPO0FBUTFDLFVBQUksWUFBWTtBQUVoQixVQUFJLFdBQVc7QUFFZixVQUFJLGNBQWM7QUFDbEIsVUFBSSxhQUFhO0FBRWpCLDRCQUF1QixHQUFHO0FBQ3hCLGVBQU8sTUFBTSxPQUFPLE1BQU0sUUFBUSxNQUFNLFFBQVEsTUFBTTtBQUFBO0FBR3hELHVCQUFrQixHQUFHO0FBQ25CLGVBQU8sTUFBTSxPQUFPLE1BQU07QUFBQTtBQUc1QiwyQkFBc0IsR0FBRztBQUN2QixlQUFPLE1BQU0sT0FBTyxhQUFhO0FBQUE7QUFHbkMsdUJBQWtCLE9BQU8sR0FBRztBQUMxQixlQUFPLE1BQU0sS0FBSztBQUFBO0FBR3BCLHdCQUFtQixPQUFPLEdBQUc7QUFDM0IsZUFBTyxDQUFDLFFBQVEsT0FBTztBQUFBO0FBR3pCLFVBQUksSUFBSTtBQUNSLFVBQUksUUFBUTtBQUFBLFFBQ1YsT0FBTztBQUFBLFFBQ1Asa0JBQWtCO0FBQUEsUUFDbEIsTUFBTTtBQUFBLFFBQ04sYUFBYTtBQUFBLFFBQ2IsV0FBVztBQUFBLFFBQ1gsV0FBVztBQUFBLFFBQ1gsa0JBQWtCO0FBQUEsUUFDbEIsU0FBUztBQUFBLFFBQ1QsZ0JBQWdCO0FBQUEsUUFDaEIsYUFBYTtBQUFBLFFBQ2Isb0JBQW9CO0FBQUEsUUFDcEIsa0JBQWtCO0FBQUEsUUFDbEIsU0FBUztBQUFBLFFBQ1QsZ0JBQWdCO0FBQUEsUUFDaEIsZUFBZTtBQUFBLFFBQ2YsT0FBTztBQUFBLFFBQ1AsY0FBYztBQUFBLFFBQ2QsZ0JBQWdCO0FBQUEsUUFDaEIsV0FBVztBQUFBLFFBQ1gsZ0JBQWdCO0FBQUEsUUFDaEIsa0JBQWtCO0FBQUEsUUFDbEIsVUFBVTtBQUFBLFFBQ1YsZ0JBQWdCO0FBQUEsUUFDaEIsUUFBUTtBQUFBLFFBQ1IsYUFBYTtBQUFBLFFBQ2IsdUJBQXVCO0FBQUEsUUFDdkIsY0FBYztBQUFBLFFBQ2QscUJBQXFCO0FBQUEsUUFDckIscUJBQXFCO0FBQUEsUUFDckIsdUJBQXVCO0FBQUEsUUFDdkIsdUJBQXVCO0FBQUEsUUFDdkIsdUJBQXVCO0FBQUEsUUFDdkIsV0FBVztBQUFBLFFBQ1gscUJBQXFCO0FBQUEsUUFDckIsUUFBUTtBQUFBLFFBQ1IsZUFBZTtBQUFBO0FBR2pCLFVBQUksZUFBZTtBQUFBLFFBQ2pCLE9BQU87QUFBQSxRQUNQLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQTtBQUdWLFVBQUksV0FBVztBQUFBLFFBQ2IsT0FBTztBQUFBLFFBQ1AsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsT0FBTztBQUFBLFFBQ1AsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsT0FBTztBQUFBLFFBQ1AsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsT0FBTztBQUFBLFFBQ1AsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsT0FBTztBQUFBLFFBQ1AsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsT0FBTztBQUFBLFFBQ1AsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsUUFBUTtBQUFBLFFBQ1IsT0FBTztBQUFBLFFBQ1AsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsV0FBVztBQUFBLFFBQ1gsUUFBUTtBQUFBLFFBQ1IsT0FBTztBQUFBLFFBQ1AsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sV0FBVztBQUFBLFFBQ1gsTUFBTTtBQUFBLFFBQ04sT0FBTztBQUFBLFFBQ1AsU0FBUztBQUFBLFFBQ1QsT0FBTztBQUFBLFFBQ1AsV0FBVztBQUFBLFFBQ1gsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsV0FBVztBQUFBLFFBQ1gsUUFBUTtBQUFBLFFBQ1IsT0FBTztBQUFBLFFBQ1AsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sV0FBVztBQUFBLFFBQ1gsTUFBTTtBQUFBLFFBQ04sT0FBTztBQUFBLFFBQ1AsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsT0FBTztBQUFBLFFBQ1AsV0FBVztBQUFBLFFBQ1gsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsU0FBUztBQUFBLFFBQ1QsWUFBWTtBQUFBLFFBQ1osU0FBUztBQUFBLFFBQ1QsT0FBTztBQUFBLFFBQ1AsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsV0FBVztBQUFBLFFBQ1gsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsTUFBTTtBQUFBLFFBQ04sUUFBUTtBQUFBLFFBQ1IsT0FBTztBQUFBLFFBQ1AsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsTUFBTTtBQUFBLFFBQ04sT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsVUFBVTtBQUFBLFFBQ1YsT0FBTztBQUFBLFFBQ1AsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsTUFBTTtBQUFBLFFBQ04sU0FBUztBQUFBLFFBQ1QsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsT0FBTztBQUFBLFFBQ1AsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBO0FBR1gsYUFBTyxLQUFLLElBQUksVUFBVSxRQUFRLFNBQVUsS0FBSztBQUMvQyxZQUFJLElBQUksSUFBSSxTQUFTO0FBQ3JCLFlBQUksS0FBSSxPQUFPLE1BQU0sV0FBVyxPQUFPLGFBQWEsS0FBSztBQUN6RCxZQUFJLFNBQVMsT0FBTztBQUFBO0FBR3RCLGVBQVMsS0FBSyxJQUFJLE9BQU87QUFDdkIsWUFBSSxNQUFNLElBQUksTUFBTSxNQUFNO0FBQUE7QUFJNUIsVUFBSSxJQUFJO0FBRVIsb0JBQWUsUUFBUSxPQUFPLE1BQU07QUFDbEMsZUFBTyxVQUFVLE9BQU8sT0FBTztBQUFBO0FBR2pDLHdCQUFtQixRQUFRLFVBQVUsTUFBTTtBQUN6QyxZQUFJLE9BQU87QUFBVSxvQkFBVTtBQUMvQixhQUFLLFFBQVEsVUFBVTtBQUFBO0FBR3pCLHlCQUFvQixRQUFRO0FBQzFCLGVBQU8sV0FBVyxTQUFTLE9BQU8sS0FBSyxPQUFPO0FBQzlDLFlBQUksT0FBTztBQUFVLGVBQUssUUFBUSxVQUFVLE9BQU87QUFDbkQsZUFBTyxXQUFXO0FBQUE7QUFHcEIsd0JBQW1CLEtBQUssTUFBTTtBQUM1QixZQUFJLElBQUk7QUFBTSxpQkFBTyxLQUFLO0FBQzFCLFlBQUksSUFBSTtBQUFXLGlCQUFPLEtBQUssUUFBUSxRQUFRO0FBQy9DLGVBQU87QUFBQTtBQUdULHFCQUFnQixRQUFRLElBQUk7QUFDMUIsa0JBQVU7QUFDVixZQUFJLE9BQU8sZUFBZTtBQUN4QixnQkFBTSxhQUFhLE9BQU8sT0FDeEIsZUFBZSxPQUFPLFNBQ3RCLGFBQWEsT0FBTztBQUFBO0FBRXhCLGFBQUssSUFBSSxNQUFNO0FBQ2YsZUFBTyxRQUFRO0FBQ2YsYUFBSyxRQUFRLFdBQVc7QUFDeEIsZUFBTztBQUFBO0FBR1QsbUJBQWMsUUFBUTtBQUNwQixZQUFJLE9BQU8sV0FBVyxDQUFDLE9BQU87QUFBWSxxQkFBVyxRQUFRO0FBQzdELFlBQUssT0FBTyxVQUFVLEVBQUUsU0FDckIsT0FBTyxVQUFVLEVBQUUsb0JBQ25CLE9BQU8sVUFBVSxFQUFFLE1BQU87QUFDM0IsZ0JBQU0sUUFBUTtBQUFBO0FBRWhCLGtCQUFVO0FBQ1YsZUFBTyxJQUFJO0FBQ1gsZUFBTyxTQUFTO0FBQ2hCLGFBQUssUUFBUTtBQUNiLGtCQUFVLEtBQUssUUFBUSxPQUFPLFFBQVEsT0FBTztBQUM3QyxlQUFPO0FBQUE7QUFHVCwwQkFBcUIsUUFBUSxTQUFTO0FBQ3BDLFlBQUksT0FBTyxXQUFXLFlBQVksQ0FBRSxtQkFBa0IsWUFBWTtBQUNoRSxnQkFBTSxJQUFJLE1BQU07QUFBQTtBQUVsQixZQUFJLE9BQU8sUUFBUTtBQUNqQixnQkFBTSxRQUFRO0FBQUE7QUFBQTtBQUlsQixzQkFBaUIsUUFBUTtBQUN2QixZQUFJLENBQUMsT0FBTztBQUFRLGlCQUFPLFVBQVUsT0FBTyxRQUFRLE9BQU87QUFDM0QsWUFBSSxTQUFTLE9BQU8sS0FBSyxPQUFPLEtBQUssU0FBUyxNQUFNO0FBQ3BELFlBQUksTUFBTSxPQUFPLE1BQU0sRUFBRSxNQUFNLE9BQU8sU0FBUyxZQUFZO0FBRzNELFlBQUksT0FBTyxJQUFJLE9BQU87QUFDcEIsY0FBSSxLQUFLLE9BQU87QUFBQTtBQUVsQixlQUFPLFdBQVcsU0FBUztBQUMzQixpQkFBUyxRQUFRLGtCQUFrQjtBQUFBO0FBR3JDLHFCQUFnQixNQUFNLFdBQVc7QUFDL0IsWUFBSSxJQUFJLEtBQUssUUFBUTtBQUNyQixZQUFJLFdBQVcsSUFBSSxJQUFJLENBQUUsSUFBSSxRQUFTLEtBQUssTUFBTTtBQUNqRCxZQUFJLFNBQVMsU0FBUztBQUN0QixZQUFJLFFBQVEsU0FBUztBQUdyQixZQUFJLGFBQWEsU0FBUyxTQUFTO0FBQ2pDLG1CQUFTO0FBQ1Qsa0JBQVE7QUFBQTtBQUdWLGVBQU8sRUFBRSxRQUFnQjtBQUFBO0FBRzNCLHNCQUFpQixRQUFRO0FBQ3ZCLFlBQUksQ0FBQyxPQUFPLFFBQVE7QUFDbEIsaUJBQU8sYUFBYSxPQUFPLFdBQVcsT0FBTztBQUFBO0FBRy9DLFlBQUksT0FBTyxXQUFXLFFBQVEsT0FBTyxnQkFBZ0IsTUFDbkQsT0FBTyxJQUFJLFdBQVcsZUFBZSxPQUFPLGFBQWE7QUFDekQsaUJBQU8sYUFBYSxPQUFPLGNBQWM7QUFDekM7QUFBQTtBQUdGLFlBQUksT0FBTyxJQUFJLE9BQU87QUFDcEIsY0FBSSxLQUFLLE1BQU0sT0FBTyxZQUFZO0FBQ2xDLGNBQUksU0FBUyxHQUFHO0FBQ2hCLGNBQUksUUFBUSxHQUFHO0FBRWYsY0FBSSxXQUFXLFNBQVM7QUFFdEIsZ0JBQUksVUFBVSxTQUFTLE9BQU8sZ0JBQWdCLGVBQWU7QUFDM0QseUJBQVcsUUFDVCxrQ0FBa0MsZ0JBQWdCLGVBQ3JDLE9BQU87QUFBQSx1QkFDYixVQUFVLFdBQVcsT0FBTyxnQkFBZ0IsaUJBQWlCO0FBQ3RFLHlCQUFXLFFBQ1Qsb0NBQW9DLGtCQUFrQixlQUN6QyxPQUFPO0FBQUEsbUJBQ2pCO0FBQ0wsa0JBQUksTUFBTSxPQUFPO0FBQ2pCLGtCQUFJLFNBQVMsT0FBTyxLQUFLLE9BQU8sS0FBSyxTQUFTLE1BQU07QUFDcEQsa0JBQUksSUFBSSxPQUFPLE9BQU8sSUFBSTtBQUN4QixvQkFBSSxLQUFLLE9BQU8sT0FBTyxPQUFPO0FBQUE7QUFFaEMsa0JBQUksR0FBRyxTQUFTLE9BQU87QUFBQTtBQUFBO0FBTzNCLGlCQUFPLFdBQVcsS0FBSyxDQUFDLE9BQU8sWUFBWSxPQUFPO0FBQUEsZUFDN0M7QUFFTCxpQkFBTyxJQUFJLFdBQVcsT0FBTyxjQUFjLE9BQU87QUFDbEQsbUJBQVMsUUFBUSxlQUFlO0FBQUEsWUFDOUIsTUFBTSxPQUFPO0FBQUEsWUFDYixPQUFPLE9BQU87QUFBQTtBQUFBO0FBSWxCLGVBQU8sYUFBYSxPQUFPLGNBQWM7QUFBQTtBQUczQyx1QkFBa0IsUUFBUSxhQUFhO0FBQ3JDLFlBQUksT0FBTyxJQUFJLE9BQU87QUFFcEIsY0FBSSxNQUFNLE9BQU87QUFHakIsY0FBSSxLQUFLLE1BQU0sT0FBTztBQUN0QixjQUFJLFNBQVMsR0FBRztBQUNoQixjQUFJLFFBQVEsR0FBRztBQUNmLGNBQUksTUFBTSxJQUFJLEdBQUcsR0FBRyxXQUFXO0FBRS9CLGNBQUksSUFBSSxVQUFVLENBQUMsSUFBSSxLQUFLO0FBQzFCLHVCQUFXLFFBQVEsK0JBQ2pCLEtBQUssVUFBVSxPQUFPO0FBQ3hCLGdCQUFJLE1BQU0sR0FBRztBQUFBO0FBR2YsY0FBSSxTQUFTLE9BQU8sS0FBSyxPQUFPLEtBQUssU0FBUyxNQUFNO0FBQ3BELGNBQUksSUFBSSxNQUFNLE9BQU8sT0FBTyxJQUFJLElBQUk7QUFDbEMsbUJBQU8sS0FBSyxJQUFJLElBQUksUUFBUSxTQUFVLEdBQUc7QUFDdkMsdUJBQVMsUUFBUSxtQkFBbUI7QUFBQSxnQkFDbEMsUUFBUTtBQUFBLGdCQUNSLEtBQUssSUFBSSxHQUFHO0FBQUE7QUFBQTtBQUFBO0FBUWxCLG1CQUFTLElBQUksR0FBRyxJQUFJLE9BQU8sV0FBVyxRQUFRLElBQUksR0FBRyxLQUFLO0FBQ3hELGdCQUFJLEtBQUssT0FBTyxXQUFXO0FBQzNCLGdCQUFJLE9BQU8sR0FBRztBQUNkLGdCQUFJLFFBQVEsR0FBRztBQUNmLGdCQUFJLFdBQVcsTUFBTSxNQUFNO0FBQzNCLGdCQUFJLFNBQVMsU0FBUztBQUN0QixnQkFBSSxRQUFRLFNBQVM7QUFDckIsZ0JBQUksTUFBTSxXQUFXLEtBQUssS0FBTSxJQUFJLEdBQUcsV0FBVztBQUNsRCxnQkFBSSxJQUFJO0FBQUEsY0FDTjtBQUFBLGNBQ0E7QUFBQSxjQUNBO0FBQUEsY0FDQTtBQUFBLGNBQ0E7QUFBQTtBQUtGLGdCQUFJLFVBQVUsV0FBVyxXQUFXLENBQUMsS0FBSztBQUN4Qyx5QkFBVyxRQUFRLCtCQUNqQixLQUFLLFVBQVU7QUFDakIsZ0JBQUUsTUFBTTtBQUFBO0FBRVYsbUJBQU8sSUFBSSxXQUFXLFFBQVE7QUFDOUIscUJBQVMsUUFBUSxlQUFlO0FBQUE7QUFFbEMsaUJBQU8sV0FBVyxTQUFTO0FBQUE7QUFHN0IsZUFBTyxJQUFJLGdCQUFnQixDQUFDLENBQUM7QUFHN0IsZUFBTyxVQUFVO0FBQ2pCLGVBQU8sS0FBSyxLQUFLLE9BQU87QUFDeEIsaUJBQVMsUUFBUSxhQUFhLE9BQU87QUFDckMsWUFBSSxDQUFDLGFBQWE7QUFFaEIsY0FBSSxDQUFDLE9BQU8sWUFBWSxPQUFPLFFBQVEsa0JBQWtCLFVBQVU7QUFDakUsbUJBQU8sUUFBUSxFQUFFO0FBQUEsaUJBQ1o7QUFDTCxtQkFBTyxRQUFRLEVBQUU7QUFBQTtBQUVuQixpQkFBTyxNQUFNO0FBQ2IsaUJBQU8sVUFBVTtBQUFBO0FBRW5CLGVBQU8sYUFBYSxPQUFPLGNBQWM7QUFDekMsZUFBTyxXQUFXLFNBQVM7QUFBQTtBQUc3Qix3QkFBbUIsUUFBUTtBQUN6QixZQUFJLENBQUMsT0FBTyxTQUFTO0FBQ25CLHFCQUFXLFFBQVE7QUFDbkIsaUJBQU8sWUFBWTtBQUNuQixpQkFBTyxRQUFRLEVBQUU7QUFDakI7QUFBQTtBQUdGLFlBQUksT0FBTyxRQUFRO0FBQ2pCLGNBQUksT0FBTyxZQUFZLFVBQVU7QUFDL0IsbUJBQU8sVUFBVSxPQUFPLE9BQU8sVUFBVTtBQUN6QyxtQkFBTyxVQUFVO0FBQ2pCLG1CQUFPLFFBQVEsRUFBRTtBQUNqQjtBQUFBO0FBRUYsbUJBQVMsUUFBUSxZQUFZLE9BQU87QUFDcEMsaUJBQU8sU0FBUztBQUFBO0FBS2xCLFlBQUksSUFBSSxPQUFPLEtBQUs7QUFDcEIsWUFBSSxVQUFVLE9BQU87QUFDckIsWUFBSSxDQUFDLE9BQU8sUUFBUTtBQUNsQixvQkFBVSxRQUFRLE9BQU87QUFBQTtBQUUzQixZQUFJLFVBQVU7QUFDZCxlQUFPLEtBQUs7QUFDVixjQUFJLFFBQVEsT0FBTyxLQUFLO0FBQ3hCLGNBQUksTUFBTSxTQUFTLFNBQVM7QUFFMUIsdUJBQVcsUUFBUTtBQUFBLGlCQUNkO0FBQ0w7QUFBQTtBQUFBO0FBS0osWUFBSSxJQUFJLEdBQUc7QUFDVCxxQkFBVyxRQUFRLDRCQUE0QixPQUFPO0FBQ3RELGlCQUFPLFlBQVksT0FBTyxPQUFPLFVBQVU7QUFDM0MsaUJBQU8sUUFBUSxFQUFFO0FBQ2pCO0FBQUE7QUFFRixlQUFPLFVBQVU7QUFDakIsWUFBSSxLQUFJLE9BQU8sS0FBSztBQUNwQixlQUFPLE9BQU0sR0FBRztBQUNkLGNBQUksTUFBTSxPQUFPLE1BQU0sT0FBTyxLQUFLO0FBQ25DLGlCQUFPLFVBQVUsT0FBTyxJQUFJO0FBQzVCLG1CQUFTLFFBQVEsY0FBYyxPQUFPO0FBRXRDLGNBQUksSUFBSTtBQUNSLG1CQUFTLEtBQUssSUFBSSxJQUFJO0FBQ3BCLGNBQUUsS0FBSyxJQUFJLEdBQUc7QUFBQTtBQUdoQixjQUFJLFNBQVMsT0FBTyxLQUFLLE9BQU8sS0FBSyxTQUFTLE1BQU07QUFDcEQsY0FBSSxPQUFPLElBQUksU0FBUyxJQUFJLE9BQU8sT0FBTyxJQUFJO0FBRTVDLG1CQUFPLEtBQUssSUFBSSxJQUFJLFFBQVEsU0FBVSxHQUFHO0FBQ3ZDLGtCQUFJLElBQUksSUFBSSxHQUFHO0FBQ2YsdUJBQVMsUUFBUSxvQkFBb0IsRUFBRSxRQUFRLEdBQUcsS0FBSztBQUFBO0FBQUE7QUFBQTtBQUk3RCxZQUFJLE1BQU07QUFBRyxpQkFBTyxhQUFhO0FBQ2pDLGVBQU8sVUFBVSxPQUFPLGNBQWMsT0FBTyxhQUFhO0FBQzFELGVBQU8sV0FBVyxTQUFTO0FBQzNCLGVBQU8sUUFBUSxFQUFFO0FBQUE7QUFHbkIsMkJBQXNCLFFBQVE7QUFDNUIsWUFBSSxTQUFTLE9BQU87QUFDcEIsWUFBSSxXQUFXLE9BQU87QUFDdEIsWUFBSTtBQUNKLFlBQUksU0FBUztBQUViLFlBQUksT0FBTyxTQUFTLFNBQVM7QUFDM0IsaUJBQU8sT0FBTyxTQUFTO0FBQUE7QUFFekIsWUFBSSxPQUFPLFNBQVMsV0FBVztBQUM3QixpQkFBTyxPQUFPLFNBQVM7QUFBQTtBQUV6QixpQkFBUztBQUNULFlBQUksT0FBTyxPQUFPLE9BQU8sS0FBSztBQUM1QixjQUFJLE9BQU8sT0FBTyxPQUFPLEtBQUs7QUFDNUIscUJBQVMsT0FBTyxNQUFNO0FBQ3RCLGtCQUFNLFNBQVMsUUFBUTtBQUN2QixxQkFBUyxJQUFJLFNBQVM7QUFBQSxpQkFDakI7QUFDTCxxQkFBUyxPQUFPLE1BQU07QUFDdEIsa0JBQU0sU0FBUyxRQUFRO0FBQ3ZCLHFCQUFTLElBQUksU0FBUztBQUFBO0FBQUE7QUFHMUIsaUJBQVMsT0FBTyxRQUFRLE9BQU87QUFDL0IsWUFBSSxNQUFNLFFBQVEsT0FBTyxrQkFBa0IsUUFBUTtBQUNqRCxxQkFBVyxRQUFRO0FBQ25CLGlCQUFPLE1BQU0sT0FBTyxTQUFTO0FBQUE7QUFHL0IsZUFBTyxPQUFPLGNBQWM7QUFBQTtBQUc5QiwrQkFBMEIsUUFBUSxHQUFHO0FBQ25DLFlBQUksTUFBTSxLQUFLO0FBQ2IsaUJBQU8sUUFBUSxFQUFFO0FBQ2pCLGlCQUFPLG1CQUFtQixPQUFPO0FBQUEsbUJBQ3hCLENBQUMsYUFBYSxJQUFJO0FBRzNCLHFCQUFXLFFBQVE7QUFDbkIsaUJBQU8sV0FBVztBQUNsQixpQkFBTyxRQUFRLEVBQUU7QUFBQTtBQUFBO0FBSXJCLHNCQUFpQixPQUFPLEdBQUc7QUFDekIsWUFBSSxTQUFTO0FBQ2IsWUFBSSxJQUFJLE1BQU0sUUFBUTtBQUNwQixtQkFBUyxNQUFNLE9BQU87QUFBQTtBQUV4QixlQUFPO0FBQUE7QUFHVCxxQkFBZ0IsT0FBTztBQUNyQixZQUFJLFNBQVM7QUFDYixZQUFJLEtBQUssT0FBTztBQUNkLGdCQUFNLEtBQUs7QUFBQTtBQUViLFlBQUksT0FBTyxRQUFRO0FBQ2pCLGlCQUFPLE1BQU0sUUFDWDtBQUFBO0FBRUosWUFBSSxVQUFVLE1BQU07QUFDbEIsaUJBQU8sSUFBSTtBQUFBO0FBRWIsWUFBSSxPQUFPLFVBQVUsVUFBVTtBQUM3QixrQkFBUSxNQUFNO0FBQUE7QUFFaEIsWUFBSSxJQUFJO0FBQ1IsWUFBSSxJQUFJO0FBQ1IsZUFBTyxNQUFNO0FBQ1gsY0FBSSxPQUFPLE9BQU87QUFDbEIsaUJBQU8sSUFBSTtBQUVYLGNBQUksQ0FBQyxHQUFHO0FBQ047QUFBQTtBQUdGLGNBQUksT0FBTyxlQUFlO0FBQ3hCLG1CQUFPO0FBQ1AsZ0JBQUksTUFBTSxNQUFNO0FBQ2QscUJBQU87QUFDUCxxQkFBTyxTQUFTO0FBQUEsbUJBQ1g7QUFDTCxxQkFBTztBQUFBO0FBQUE7QUFJWCxrQkFBUSxPQUFPO0FBQUEsaUJBQ1IsRUFBRTtBQUNMLHFCQUFPLFFBQVEsRUFBRTtBQUNqQixrQkFBSSxNQUFNLFVBQVU7QUFDbEI7QUFBQTtBQUVGLDhCQUFnQixRQUFRO0FBQ3hCO0FBQUEsaUJBRUcsRUFBRTtBQUNMLDhCQUFnQixRQUFRO0FBQ3hCO0FBQUEsaUJBRUcsRUFBRTtBQUNMLGtCQUFJLE9BQU8sV0FBVyxDQUFDLE9BQU8sWUFBWTtBQUN4QyxvQkFBSSxTQUFTLElBQUk7QUFDakIsdUJBQU8sS0FBSyxNQUFNLE9BQU8sTUFBTSxLQUFLO0FBQ2xDLHNCQUFJLE9BQU8sT0FBTztBQUNsQixzQkFBSSxLQUFLLE9BQU8sZUFBZTtBQUM3QiwyQkFBTztBQUNQLHdCQUFJLE1BQU0sTUFBTTtBQUNkLDZCQUFPO0FBQ1AsNkJBQU8sU0FBUztBQUFBLDJCQUNYO0FBQ0wsNkJBQU87QUFBQTtBQUFBO0FBQUE7QUFJYix1QkFBTyxZQUFZLE1BQU0sVUFBVSxRQUFRLElBQUk7QUFBQTtBQUVqRCxrQkFBSSxNQUFNLE9BQU8sQ0FBRSxRQUFPLFdBQVcsT0FBTyxjQUFjLENBQUMsT0FBTyxTQUFTO0FBQ3pFLHVCQUFPLFFBQVEsRUFBRTtBQUNqQix1QkFBTyxtQkFBbUIsT0FBTztBQUFBLHFCQUM1QjtBQUNMLG9CQUFJLENBQUMsYUFBYSxNQUFPLEVBQUMsT0FBTyxXQUFXLE9BQU8sYUFBYTtBQUM5RCw2QkFBVyxRQUFRO0FBQUE7QUFFckIsb0JBQUksTUFBTSxLQUFLO0FBQ2IseUJBQU8sUUFBUSxFQUFFO0FBQUEsdUJBQ1o7QUFDTCx5QkFBTyxZQUFZO0FBQUE7QUFBQTtBQUd2QjtBQUFBLGlCQUVHLEVBQUU7QUFFTCxrQkFBSSxNQUFNLEtBQUs7QUFDYix1QkFBTyxRQUFRLEVBQUU7QUFBQSxxQkFDWjtBQUNMLHVCQUFPLFVBQVU7QUFBQTtBQUVuQjtBQUFBLGlCQUVHLEVBQUU7QUFDTCxrQkFBSSxNQUFNLEtBQUs7QUFDYix1QkFBTyxRQUFRLEVBQUU7QUFBQSxxQkFDWjtBQUNMLHVCQUFPLFVBQVUsTUFBTTtBQUN2Qix1QkFBTyxRQUFRLEVBQUU7QUFBQTtBQUVuQjtBQUFBLGlCQUVHLEVBQUU7QUFFTCxrQkFBSSxNQUFNLEtBQUs7QUFDYix1QkFBTyxRQUFRLEVBQUU7QUFDakIsdUJBQU8sV0FBVztBQUFBLHlCQUNULGFBQWEsSUFBSTtBQUFBLHlCQUVqQixRQUFRLFdBQVcsSUFBSTtBQUNoQyx1QkFBTyxRQUFRLEVBQUU7QUFDakIsdUJBQU8sVUFBVTtBQUFBLHlCQUNSLE1BQU0sS0FBSztBQUNwQix1QkFBTyxRQUFRLEVBQUU7QUFDakIsdUJBQU8sVUFBVTtBQUFBLHlCQUNSLE1BQU0sS0FBSztBQUNwQix1QkFBTyxRQUFRLEVBQUU7QUFDakIsdUJBQU8sZUFBZSxPQUFPLGVBQWU7QUFBQSxxQkFDdkM7QUFDTCwyQkFBVyxRQUFRO0FBRW5CLG9CQUFJLE9BQU8sbUJBQW1CLElBQUksT0FBTyxVQUFVO0FBQ2pELHNCQUFJLE1BQU0sT0FBTyxXQUFXLE9BQU87QUFDbkMsc0JBQUksSUFBSSxNQUFNLEtBQUssS0FBSyxPQUFPO0FBQUE7QUFFakMsdUJBQU8sWUFBWSxNQUFNO0FBQ3pCLHVCQUFPLFFBQVEsRUFBRTtBQUFBO0FBRW5CO0FBQUEsaUJBRUcsRUFBRTtBQUNMLGtCQUFJLE9BQU8sV0FBVyxNQUFNLE1BQU07QUFDaEMsdUJBQU8sUUFBUSxFQUFFO0FBQ2pCLHVCQUFPLFVBQVU7QUFDakIsdUJBQU8sV0FBVztBQUNsQjtBQUFBO0FBR0Ysa0JBQUksT0FBTyxXQUFXLE9BQU8sWUFBWSxRQUFRLE9BQU8sVUFBVTtBQUNoRSx1QkFBTyxRQUFRLEVBQUU7QUFDakIsdUJBQU8sV0FBVyxPQUFPLE9BQU8sV0FBVztBQUMzQyx1QkFBTyxXQUFXO0FBQUEseUJBQ1IsUUFBTyxXQUFXLEdBQUcsa0JBQWtCLE9BQU87QUFDeEQseUJBQVMsUUFBUTtBQUNqQix1QkFBTyxRQUFRLEVBQUU7QUFDakIsdUJBQU8sV0FBVztBQUNsQix1QkFBTyxRQUFRO0FBQUEseUJBQ0wsUUFBTyxXQUFXLEdBQUcsa0JBQWtCLFNBQVM7QUFDMUQsdUJBQU8sUUFBUSxFQUFFO0FBQ2pCLG9CQUFJLE9BQU8sV0FBVyxPQUFPLFNBQVM7QUFDcEMsNkJBQVcsUUFDVDtBQUFBO0FBRUosdUJBQU8sVUFBVTtBQUNqQix1QkFBTyxXQUFXO0FBQUEseUJBQ1QsTUFBTSxLQUFLO0FBQ3BCLHlCQUFTLFFBQVEscUJBQXFCLE9BQU87QUFDN0MsdUJBQU8sV0FBVztBQUNsQix1QkFBTyxRQUFRLEVBQUU7QUFBQSx5QkFDUixRQUFRLElBQUk7QUFDckIsdUJBQU8sUUFBUSxFQUFFO0FBQ2pCLHVCQUFPLFlBQVk7QUFBQSxxQkFDZDtBQUNMLHVCQUFPLFlBQVk7QUFBQTtBQUVyQjtBQUFBLGlCQUVHLEVBQUU7QUFDTCxrQkFBSSxNQUFNLE9BQU8sR0FBRztBQUNsQix1QkFBTyxRQUFRLEVBQUU7QUFDakIsdUJBQU8sSUFBSTtBQUFBO0FBRWIscUJBQU8sWUFBWTtBQUNuQjtBQUFBLGlCQUVHLEVBQUU7QUFDTCxrQkFBSSxNQUFNLEtBQUs7QUFDYix1QkFBTyxRQUFRLEVBQUU7QUFDakIseUJBQVMsUUFBUSxhQUFhLE9BQU87QUFDckMsdUJBQU8sVUFBVTtBQUFBLHFCQUNaO0FBQ0wsdUJBQU8sV0FBVztBQUNsQixvQkFBSSxNQUFNLEtBQUs7QUFDYix5QkFBTyxRQUFRLEVBQUU7QUFBQSwyQkFDUixRQUFRLElBQUk7QUFDckIseUJBQU8sUUFBUSxFQUFFO0FBQ2pCLHlCQUFPLElBQUk7QUFBQTtBQUFBO0FBR2Y7QUFBQSxpQkFFRyxFQUFFO0FBQ0wscUJBQU8sV0FBVztBQUNsQixrQkFBSSxNQUFNLE9BQU8sR0FBRztBQUNsQix1QkFBTyxJQUFJO0FBQ1gsdUJBQU8sUUFBUSxFQUFFO0FBQUE7QUFFbkI7QUFBQSxpQkFFRyxFQUFFO0FBQ0wsa0JBQUksTUFBTSxLQUFLO0FBQ2IsdUJBQU8sV0FBVztBQUNsQix1QkFBTyxRQUFRLEVBQUU7QUFBQSx5QkFDUixNQUFNLEtBQUs7QUFDcEIsdUJBQU8sUUFBUSxFQUFFO0FBQ2pCLHVCQUFPLG1CQUFtQixPQUFPO0FBQUEseUJBQ3hCLFFBQVEsSUFBSTtBQUNyQix1QkFBTyxXQUFXO0FBQ2xCLHVCQUFPLFFBQVEsRUFBRTtBQUNqQix1QkFBTyxJQUFJO0FBQUEscUJBQ047QUFDTCx1QkFBTyxXQUFXO0FBQUE7QUFFcEI7QUFBQSxpQkFFRyxFQUFFO0FBQ0wscUJBQU8sV0FBVztBQUNsQixrQkFBSSxNQUFNLE9BQU8sR0FBRztBQUNsQix1QkFBTyxRQUFRLEVBQUU7QUFDakIsdUJBQU8sSUFBSTtBQUFBO0FBRWI7QUFBQSxpQkFFRyxFQUFFO0FBQ0wsa0JBQUksTUFBTSxLQUFLO0FBQ2IsdUJBQU8sUUFBUSxFQUFFO0FBQUEscUJBQ1o7QUFDTCx1QkFBTyxXQUFXO0FBQUE7QUFFcEI7QUFBQSxpQkFFRyxFQUFFO0FBQ0wsa0JBQUksTUFBTSxLQUFLO0FBQ2IsdUJBQU8sUUFBUSxFQUFFO0FBQ2pCLHVCQUFPLFVBQVUsU0FBUyxPQUFPLEtBQUssT0FBTztBQUM3QyxvQkFBSSxPQUFPLFNBQVM7QUFDbEIsMkJBQVMsUUFBUSxhQUFhLE9BQU87QUFBQTtBQUV2Qyx1QkFBTyxVQUFVO0FBQUEscUJBQ1o7QUFDTCx1QkFBTyxXQUFXLE1BQU07QUFDeEIsdUJBQU8sUUFBUSxFQUFFO0FBQUE7QUFFbkI7QUFBQSxpQkFFRyxFQUFFO0FBQ0wsa0JBQUksTUFBTSxLQUFLO0FBQ2IsMkJBQVcsUUFBUTtBQUduQix1QkFBTyxXQUFXLE9BQU87QUFDekIsdUJBQU8sUUFBUSxFQUFFO0FBQUEseUJBQ1IsT0FBTyxXQUFXLE9BQU8sWUFBWSxNQUFNO0FBQ3BELHVCQUFPLFFBQVEsRUFBRTtBQUFBLHFCQUNaO0FBQ0wsdUJBQU8sUUFBUSxFQUFFO0FBQUE7QUFFbkI7QUFBQSxpQkFFRyxFQUFFO0FBQ0wsa0JBQUksTUFBTSxLQUFLO0FBQ2IsdUJBQU8sUUFBUSxFQUFFO0FBQUEscUJBQ1o7QUFDTCx1QkFBTyxTQUFTO0FBQUE7QUFFbEI7QUFBQSxpQkFFRyxFQUFFO0FBQ0wsa0JBQUksTUFBTSxLQUFLO0FBQ2IsdUJBQU8sUUFBUSxFQUFFO0FBQUEscUJBQ1o7QUFDTCx1QkFBTyxTQUFTLE1BQU07QUFDdEIsdUJBQU8sUUFBUSxFQUFFO0FBQUE7QUFFbkI7QUFBQSxpQkFFRyxFQUFFO0FBQ0wsa0JBQUksTUFBTSxLQUFLO0FBQ2Isb0JBQUksT0FBTyxPQUFPO0FBQ2hCLDJCQUFTLFFBQVEsV0FBVyxPQUFPO0FBQUE7QUFFckMseUJBQVMsUUFBUTtBQUNqQix1QkFBTyxRQUFRO0FBQ2YsdUJBQU8sUUFBUSxFQUFFO0FBQUEseUJBQ1IsTUFBTSxLQUFLO0FBQ3BCLHVCQUFPLFNBQVM7QUFBQSxxQkFDWDtBQUNMLHVCQUFPLFNBQVMsT0FBTztBQUN2Qix1QkFBTyxRQUFRLEVBQUU7QUFBQTtBQUVuQjtBQUFBLGlCQUVHLEVBQUU7QUFDTCxrQkFBSSxNQUFNLEtBQUs7QUFDYix1QkFBTyxRQUFRLEVBQUU7QUFBQSx5QkFDUixhQUFhLElBQUk7QUFDMUIsdUJBQU8sUUFBUSxFQUFFO0FBQUEscUJBQ1o7QUFDTCx1QkFBTyxnQkFBZ0I7QUFBQTtBQUV6QjtBQUFBLGlCQUVHLEVBQUU7QUFDTCxrQkFBSSxDQUFDLE9BQU8sZ0JBQWdCLGFBQWEsSUFBSTtBQUMzQztBQUFBLHlCQUNTLE1BQU0sS0FBSztBQUNwQix1QkFBTyxRQUFRLEVBQUU7QUFBQSxxQkFDWjtBQUNMLHVCQUFPLGdCQUFnQjtBQUFBO0FBRXpCO0FBQUEsaUJBRUcsRUFBRTtBQUNMLGtCQUFJLE1BQU0sS0FBSztBQUNiLHlCQUFTLFFBQVEsMkJBQTJCO0FBQUEsa0JBQzFDLE1BQU0sT0FBTztBQUFBLGtCQUNiLE1BQU0sT0FBTztBQUFBO0FBRWYsdUJBQU8sZUFBZSxPQUFPLGVBQWU7QUFDNUMsdUJBQU8sUUFBUSxFQUFFO0FBQUEscUJBQ1o7QUFDTCx1QkFBTyxnQkFBZ0IsTUFBTTtBQUM3Qix1QkFBTyxRQUFRLEVBQUU7QUFBQTtBQUVuQjtBQUFBLGlCQUVHLEVBQUU7QUFDTCxrQkFBSSxRQUFRLFVBQVUsSUFBSTtBQUN4Qix1QkFBTyxXQUFXO0FBQUEscUJBQ2I7QUFDTCx1QkFBTztBQUNQLG9CQUFJLE1BQU0sS0FBSztBQUNiLDBCQUFRO0FBQUEsMkJBQ0MsTUFBTSxLQUFLO0FBQ3BCLHlCQUFPLFFBQVEsRUFBRTtBQUFBLHVCQUNaO0FBQ0wsc0JBQUksQ0FBQyxhQUFhLElBQUk7QUFDcEIsK0JBQVcsUUFBUTtBQUFBO0FBRXJCLHlCQUFPLFFBQVEsRUFBRTtBQUFBO0FBQUE7QUFHckI7QUFBQSxpQkFFRyxFQUFFO0FBQ0wsa0JBQUksTUFBTSxLQUFLO0FBQ2Isd0JBQVEsUUFBUTtBQUNoQix5QkFBUztBQUFBLHFCQUNKO0FBQ0wsMkJBQVcsUUFBUTtBQUNuQix1QkFBTyxRQUFRLEVBQUU7QUFBQTtBQUVuQjtBQUFBLGlCQUVHLEVBQUU7QUFFTCxrQkFBSSxhQUFhLElBQUk7QUFDbkI7QUFBQSx5QkFDUyxNQUFNLEtBQUs7QUFDcEIsd0JBQVE7QUFBQSx5QkFDQyxNQUFNLEtBQUs7QUFDcEIsdUJBQU8sUUFBUSxFQUFFO0FBQUEseUJBQ1IsUUFBUSxXQUFXLElBQUk7QUFDaEMsdUJBQU8sYUFBYTtBQUNwQix1QkFBTyxjQUFjO0FBQ3JCLHVCQUFPLFFBQVEsRUFBRTtBQUFBLHFCQUNaO0FBQ0wsMkJBQVcsUUFBUTtBQUFBO0FBRXJCO0FBQUEsaUJBRUcsRUFBRTtBQUNMLGtCQUFJLE1BQU0sS0FBSztBQUNiLHVCQUFPLFFBQVEsRUFBRTtBQUFBLHlCQUNSLE1BQU0sS0FBSztBQUNwQiwyQkFBVyxRQUFRO0FBQ25CLHVCQUFPLGNBQWMsT0FBTztBQUM1Qix1QkFBTztBQUNQLHdCQUFRO0FBQUEseUJBQ0MsYUFBYSxJQUFJO0FBQzFCLHVCQUFPLFFBQVEsRUFBRTtBQUFBLHlCQUNSLFFBQVEsVUFBVSxJQUFJO0FBQy9CLHVCQUFPLGNBQWM7QUFBQSxxQkFDaEI7QUFDTCwyQkFBVyxRQUFRO0FBQUE7QUFFckI7QUFBQSxpQkFFRyxFQUFFO0FBQ0wsa0JBQUksTUFBTSxLQUFLO0FBQ2IsdUJBQU8sUUFBUSxFQUFFO0FBQUEseUJBQ1IsYUFBYSxJQUFJO0FBQzFCO0FBQUEscUJBQ0s7QUFDTCwyQkFBVyxRQUFRO0FBQ25CLHVCQUFPLElBQUksV0FBVyxPQUFPLGNBQWM7QUFDM0MsdUJBQU8sY0FBYztBQUNyQix5QkFBUyxRQUFRLGVBQWU7QUFBQSxrQkFDOUIsTUFBTSxPQUFPO0FBQUEsa0JBQ2IsT0FBTztBQUFBO0FBRVQsdUJBQU8sYUFBYTtBQUNwQixvQkFBSSxNQUFNLEtBQUs7QUFDYiwwQkFBUTtBQUFBLDJCQUNDLFFBQVEsV0FBVyxJQUFJO0FBQ2hDLHlCQUFPLGFBQWE7QUFDcEIseUJBQU8sUUFBUSxFQUFFO0FBQUEsdUJBQ1o7QUFDTCw2QkFBVyxRQUFRO0FBQ25CLHlCQUFPLFFBQVEsRUFBRTtBQUFBO0FBQUE7QUFHckI7QUFBQSxpQkFFRyxFQUFFO0FBQ0wsa0JBQUksYUFBYSxJQUFJO0FBQ25CO0FBQUEseUJBQ1MsUUFBUSxJQUFJO0FBQ3JCLHVCQUFPLElBQUk7QUFDWCx1QkFBTyxRQUFRLEVBQUU7QUFBQSxxQkFDWjtBQUNMLG9CQUFJLENBQUMsT0FBTyxJQUFJLHlCQUF5QjtBQUN2Qyx3QkFBTSxRQUFRO0FBQUE7QUFFaEIsdUJBQU8sUUFBUSxFQUFFO0FBQ2pCLHVCQUFPLGNBQWM7QUFBQTtBQUV2QjtBQUFBLGlCQUVHLEVBQUU7QUFDTCxrQkFBSSxNQUFNLE9BQU8sR0FBRztBQUNsQixvQkFBSSxNQUFNLEtBQUs7QUFDYix5QkFBTyxRQUFRLEVBQUU7QUFBQSx1QkFDWjtBQUNMLHlCQUFPLGVBQWU7QUFBQTtBQUV4QjtBQUFBO0FBRUYscUJBQU87QUFDUCxxQkFBTyxJQUFJO0FBQ1gscUJBQU8sUUFBUSxFQUFFO0FBQ2pCO0FBQUEsaUJBRUcsRUFBRTtBQUNMLGtCQUFJLGFBQWEsSUFBSTtBQUNuQix1QkFBTyxRQUFRLEVBQUU7QUFBQSx5QkFDUixNQUFNLEtBQUs7QUFDcEIsd0JBQVE7QUFBQSx5QkFDQyxNQUFNLEtBQUs7QUFDcEIsdUJBQU8sUUFBUSxFQUFFO0FBQUEseUJBQ1IsUUFBUSxXQUFXLElBQUk7QUFDaEMsMkJBQVcsUUFBUTtBQUNuQix1QkFBTyxhQUFhO0FBQ3BCLHVCQUFPLGNBQWM7QUFDckIsdUJBQU8sUUFBUSxFQUFFO0FBQUEscUJBQ1o7QUFDTCwyQkFBVyxRQUFRO0FBQUE7QUFFckI7QUFBQSxpQkFFRyxFQUFFO0FBQ0wsa0JBQUksQ0FBQyxZQUFZLElBQUk7QUFDbkIsb0JBQUksTUFBTSxLQUFLO0FBQ2IseUJBQU8sUUFBUSxFQUFFO0FBQUEsdUJBQ1o7QUFDTCx5QkFBTyxlQUFlO0FBQUE7QUFFeEI7QUFBQTtBQUVGLHFCQUFPO0FBQ1Asa0JBQUksTUFBTSxLQUFLO0FBQ2Isd0JBQVE7QUFBQSxxQkFDSDtBQUNMLHVCQUFPLFFBQVEsRUFBRTtBQUFBO0FBRW5CO0FBQUEsaUJBRUcsRUFBRTtBQUNMLGtCQUFJLENBQUMsT0FBTyxTQUFTO0FBQ25CLG9CQUFJLGFBQWEsSUFBSTtBQUNuQjtBQUFBLDJCQUNTLFNBQVMsV0FBVyxJQUFJO0FBQ2pDLHNCQUFJLE9BQU8sUUFBUTtBQUNqQiwyQkFBTyxVQUFVLE9BQU87QUFDeEIsMkJBQU8sUUFBUSxFQUFFO0FBQUEseUJBQ1o7QUFDTCwrQkFBVyxRQUFRO0FBQUE7QUFBQSx1QkFFaEI7QUFDTCx5QkFBTyxVQUFVO0FBQUE7QUFBQSx5QkFFVixNQUFNLEtBQUs7QUFDcEIseUJBQVM7QUFBQSx5QkFDQSxRQUFRLFVBQVUsSUFBSTtBQUMvQix1QkFBTyxXQUFXO0FBQUEseUJBQ1QsT0FBTyxRQUFRO0FBQ3hCLHVCQUFPLFVBQVUsT0FBTyxPQUFPO0FBQy9CLHVCQUFPLFVBQVU7QUFDakIsdUJBQU8sUUFBUSxFQUFFO0FBQUEscUJBQ1o7QUFDTCxvQkFBSSxDQUFDLGFBQWEsSUFBSTtBQUNwQiw2QkFBVyxRQUFRO0FBQUE7QUFFckIsdUJBQU8sUUFBUSxFQUFFO0FBQUE7QUFFbkI7QUFBQSxpQkFFRyxFQUFFO0FBQ0wsa0JBQUksYUFBYSxJQUFJO0FBQ25CO0FBQUE7QUFFRixrQkFBSSxNQUFNLEtBQUs7QUFDYix5QkFBUztBQUFBLHFCQUNKO0FBQ0wsMkJBQVcsUUFBUTtBQUFBO0FBRXJCO0FBQUEsaUJBRUcsRUFBRTtBQUFBLGlCQUNGLEVBQUU7QUFBQSxpQkFDRixFQUFFO0FBQ0wsa0JBQUk7QUFDSixrQkFBSTtBQUNKLHNCQUFRLE9BQU87QUFBQSxxQkFDUixFQUFFO0FBQ0wsZ0NBQWMsRUFBRTtBQUNoQiwyQkFBUztBQUNUO0FBQUEscUJBRUcsRUFBRTtBQUNMLGdDQUFjLEVBQUU7QUFDaEIsMkJBQVM7QUFDVDtBQUFBLHFCQUVHLEVBQUU7QUFDTCxnQ0FBYyxFQUFFO0FBQ2hCLDJCQUFTO0FBQ1Q7QUFBQTtBQUdKLGtCQUFJLE1BQU0sS0FBSztBQUNiLG9CQUFJLGVBQWUsWUFBWTtBQUMvQixvQkFBSSxPQUFPLElBQUksb0JBQW9CLENBQUMsT0FBTyxPQUFPLElBQUksY0FBYyxTQUFTLGVBQWU7QUFDMUYseUJBQU8sU0FBUztBQUNoQix5QkFBTyxRQUFRO0FBQ2YseUJBQU8sTUFBTTtBQUFBLHVCQUNSO0FBQ0wseUJBQU8sV0FBVztBQUNsQix5QkFBTyxTQUFTO0FBQ2hCLHlCQUFPLFFBQVE7QUFBQTtBQUFBLHlCQUVSLFFBQVEsT0FBTyxPQUFPLFNBQVMsYUFBYSxhQUFhLElBQUk7QUFDdEUsdUJBQU8sVUFBVTtBQUFBLHFCQUNaO0FBQ0wsMkJBQVcsUUFBUTtBQUNuQix1QkFBTyxXQUFXLE1BQU0sT0FBTyxTQUFTO0FBQ3hDLHVCQUFPLFNBQVM7QUFDaEIsdUJBQU8sUUFBUTtBQUFBO0FBR2pCO0FBQUEscUJBRWtDO0FBQ2xDLG9CQUFNLElBQUksTUFBTSxRQUFRLG9CQUFvQixPQUFPO0FBQUE7QUFBQTtBQUFBO0FBS3pELFlBQUksT0FBTyxZQUFZLE9BQU8scUJBQXFCO0FBQ2pELDRCQUFrQjtBQUFBO0FBRXBCLGVBQU87QUFBQTtBQUdULEFBRUEsVUFBSSxDQUFDLE9BQU8sZUFBZTtBQUN6QixRQUFDLFlBQVk7QUFDWCxjQUFJLHFCQUFxQixPQUFPO0FBQ2hDLGNBQUksUUFBUSxLQUFLO0FBQ2pCLGNBQUksZ0JBQWdCLFdBQVk7QUFDOUIsZ0JBQUksV0FBVztBQUNmLGdCQUFJLFlBQVk7QUFDaEIsZ0JBQUk7QUFDSixnQkFBSTtBQUNKLGdCQUFJLFFBQVE7QUFDWixnQkFBSSxTQUFTLFVBQVU7QUFDdkIsZ0JBQUksQ0FBQyxRQUFRO0FBQ1gscUJBQU87QUFBQTtBQUVULGdCQUFJLFNBQVM7QUFDYixtQkFBTyxFQUFFLFFBQVEsUUFBUTtBQUN2QixrQkFBSSxZQUFZLE9BQU8sVUFBVTtBQUNqQyxrQkFDRSxDQUFDLFNBQVMsY0FDVixZQUFZLEtBQ1osWUFBWSxXQUNaLE1BQU0sZUFBZSxXQUNyQjtBQUNBLHNCQUFNLFdBQVcseUJBQXlCO0FBQUE7QUFFNUMsa0JBQUksYUFBYSxPQUFRO0FBQ3ZCLDBCQUFVLEtBQUs7QUFBQSxxQkFDVjtBQUVMLDZCQUFhO0FBQ2IsZ0NBQWlCLGNBQWEsTUFBTTtBQUNwQywrQkFBZ0IsWUFBWSxPQUFTO0FBQ3JDLDBCQUFVLEtBQUssZUFBZTtBQUFBO0FBRWhDLGtCQUFJLFFBQVEsTUFBTSxVQUFVLFVBQVUsU0FBUyxVQUFVO0FBQ3ZELDBCQUFVLG1CQUFtQixNQUFNLE1BQU07QUFDekMsMEJBQVUsU0FBUztBQUFBO0FBQUE7QUFHdkIsbUJBQU87QUFBQTtBQUdULGNBQUksT0FBTyxnQkFBZ0I7QUFDekIsbUJBQU8sZUFBZSxRQUFRLGlCQUFpQjtBQUFBLGNBQzdDLE9BQU87QUFBQSxjQUNQLGNBQWM7QUFBQSxjQUNkLFVBQVU7QUFBQTtBQUFBLGlCQUVQO0FBQ0wsbUJBQU8sZ0JBQWdCO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FJNUIsT0FBTyxZQUFZLGNBQWMsUUFBSyxNQUFNLEtBQUs7QUFBQTtBQUFBOzs7QUM1akRwRDtBQUFBO0FBQ0EsSUFBQyxZQUFXO0FBQ1Y7QUFDQSxjQUFRLFdBQVcsU0FBUyxLQUFLO0FBQy9CLFlBQUksSUFBSSxPQUFPLFVBQVU7QUFDdkIsaUJBQU8sSUFBSSxVQUFVO0FBQUEsZUFDaEI7QUFDTCxpQkFBTztBQUFBO0FBQUE7QUFBQSxPQUlWLEtBQUs7QUFBQTtBQUFBOzs7QUNYUjtBQUFBO0FBQ0EsSUFBQyxZQUFXO0FBQ1Y7QUFDQSxVQUFJO0FBRUosb0JBQWMsSUFBSSxPQUFPO0FBRXpCLGNBQVEsWUFBWSxTQUFTLEtBQUs7QUFDaEMsZUFBTyxJQUFJO0FBQUE7QUFHYixjQUFRLHFCQUFxQixTQUFTLEtBQUs7QUFDekMsZUFBTyxJQUFJLE9BQU8sR0FBRyxnQkFBZ0IsSUFBSSxNQUFNO0FBQUE7QUFHakQsY0FBUSxjQUFjLFNBQVMsS0FBSztBQUNsQyxlQUFPLElBQUksUUFBUSxhQUFhO0FBQUE7QUFHbEMsY0FBUSxlQUFlLFNBQVMsS0FBSztBQUNuQyxZQUFJLENBQUMsTUFBTSxNQUFNO0FBQ2YsZ0JBQU0sTUFBTSxNQUFNLElBQUksU0FBUyxLQUFLLE1BQU0sV0FBVztBQUFBO0FBRXZELGVBQU87QUFBQTtBQUdULGNBQVEsZ0JBQWdCLFNBQVMsS0FBSztBQUNwQyxZQUFJLG9CQUFvQixLQUFLLE1BQU07QUFDakMsZ0JBQU0sSUFBSSxrQkFBa0I7QUFBQTtBQUU5QixlQUFPO0FBQUE7QUFBQSxPQUdSLEtBQUs7QUFBQTtBQUFBOzs7QUNqQ1I7QUFBQTtBQUNBLElBQUMsWUFBVztBQUNWO0FBQ0EsVUFBSSxLQUFLLFVBQVUsUUFBUSxTQUFTLGFBQWEsWUFBWSxLQUFLLGNBQ2hFLE9BQU8sU0FBUyxJQUFJLElBQUc7QUFBRSxlQUFPLFdBQVU7QUFBRSxpQkFBTyxHQUFHLE1BQU0sSUFBSTtBQUFBO0FBQUEsU0FDaEUsU0FBUyxTQUFTLE9BQU8sUUFBUTtBQUFFLGlCQUFTLE9BQU8sUUFBUTtBQUFFLGNBQUksUUFBUSxLQUFLLFFBQVE7QUFBTSxrQkFBTSxPQUFPLE9BQU87QUFBQTtBQUFRLHdCQUFnQjtBQUFFLGVBQUssY0FBYztBQUFBO0FBQVMsYUFBSyxZQUFZLE9BQU87QUFBVyxjQUFNLFlBQVksSUFBSTtBQUFRLGNBQU0sWUFBWSxPQUFPO0FBQVcsZUFBTztBQUFBLFNBQ2xSLFVBQVUsR0FBRztBQUVmLFlBQU07QUFFTixlQUFTLFFBQVE7QUFFakIsWUFBTTtBQUVOLG1CQUFhO0FBRWIscUJBQWUsUUFBUSxVQUFVO0FBRWpDLGlCQUFXLG1CQUFzQjtBQUVqQyxnQkFBVSxTQUFTLE9BQU87QUFDeEIsZUFBTyxPQUFPLFVBQVUsWUFBYSxTQUFTLFFBQVMsT0FBTyxLQUFLLE9BQU8sV0FBVztBQUFBO0FBR3ZGLG9CQUFjLFNBQVMsYUFBWSxNQUFNLEtBQUs7QUFDNUMsWUFBSSxHQUFHLEtBQUs7QUFDWixhQUFLLElBQUksR0FBRyxNQUFNLFlBQVcsUUFBUSxJQUFJLEtBQUssS0FBSztBQUNqRCxvQkFBVSxZQUFXO0FBQ3JCLGlCQUFPLFFBQVEsTUFBTTtBQUFBO0FBRXZCLGVBQU87QUFBQTtBQUdULGNBQVEsU0FBVSxTQUFTLFlBQVk7QUFDckMsZUFBTyxRQUFRO0FBRWYsd0JBQWdCLE1BQU07QUFDcEIsZUFBSyxxQkFBcUIsS0FBSyxLQUFLLG9CQUFvQjtBQUN4RCxlQUFLLGNBQWMsS0FBSyxLQUFLLGFBQWE7QUFDMUMsZUFBSyxRQUFRLEtBQUssS0FBSyxPQUFPO0FBQzlCLGVBQUssZUFBZSxLQUFLLEtBQUssY0FBYztBQUM1QyxlQUFLLGVBQWUsS0FBSyxLQUFLLGNBQWM7QUFDNUMsY0FBSSxLQUFLLEtBQUs7QUFDZCxjQUFJLENBQUUsaUJBQWdCLFFBQVEsU0FBUztBQUNyQyxtQkFBTyxJQUFJLFFBQVEsT0FBTztBQUFBO0FBRTVCLGVBQUssVUFBVTtBQUNmLGdCQUFNLFNBQVM7QUFDZixlQUFLLE9BQU8sS0FBSztBQUNmLGdCQUFJLENBQUMsUUFBUSxLQUFLLEtBQUs7QUFBTTtBQUM3QixvQkFBUSxJQUFJO0FBQ1osaUJBQUssUUFBUSxPQUFPO0FBQUE7QUFFdEIsZUFBSyxPQUFPLE1BQU07QUFDaEIsZ0JBQUksQ0FBQyxRQUFRLEtBQUssTUFBTTtBQUFNO0FBQzlCLG9CQUFRLEtBQUs7QUFDYixpQkFBSyxRQUFRLE9BQU87QUFBQTtBQUV0QixjQUFJLEtBQUssUUFBUSxPQUFPO0FBQ3RCLGlCQUFLLFFBQVEsV0FBVyxLQUFLLFFBQVEsVUFBVTtBQUFBO0FBRWpELGNBQUksS0FBSyxRQUFRLGVBQWU7QUFDOUIsZ0JBQUksQ0FBQyxLQUFLLFFBQVEsbUJBQW1CO0FBQ25DLG1CQUFLLFFBQVEsb0JBQW9CO0FBQUE7QUFFbkMsaUJBQUssUUFBUSxrQkFBa0IsUUFBUSxXQUFXO0FBQUE7QUFFcEQsZUFBSztBQUFBO0FBR1AsZUFBTyxVQUFVLGVBQWUsV0FBVztBQUN6QyxjQUFJLE9BQU87QUFDWCxjQUFJO0FBQ0YsZ0JBQUksS0FBSyxVQUFVLFVBQVUsS0FBSyxRQUFRLFdBQVc7QUFDbkQsc0JBQVEsS0FBSztBQUNiLG1CQUFLLFlBQVk7QUFDakIsbUJBQUssWUFBWSxLQUFLLFVBQVUsTUFBTTtBQUN0QyxxQkFBTyxLQUFLLFVBQVU7QUFBQSxtQkFDakI7QUFDTCxzQkFBUSxLQUFLLFVBQVUsT0FBTyxHQUFHLEtBQUssUUFBUTtBQUM5QyxtQkFBSyxZQUFZLEtBQUssVUFBVSxPQUFPLEtBQUssUUFBUSxXQUFXLEtBQUssVUFBVTtBQUM5RSxtQkFBSyxZQUFZLEtBQUssVUFBVSxNQUFNO0FBQ3RDLHFCQUFPLGFBQWEsS0FBSztBQUFBO0FBQUEsbUJBRXBCLFFBQVA7QUFDQSxrQkFBTTtBQUNOLGdCQUFJLENBQUMsS0FBSyxVQUFVLFdBQVc7QUFDN0IsbUJBQUssVUFBVSxZQUFZO0FBQzNCLHFCQUFPLEtBQUssS0FBSztBQUFBO0FBQUE7QUFBQTtBQUt2QixlQUFPLFVBQVUsZUFBZSxTQUFTLEtBQUssS0FBSyxVQUFVO0FBQzNELGNBQUksQ0FBRSxRQUFPLE1BQU07QUFDakIsZ0JBQUksQ0FBQyxLQUFLLFFBQVEsZUFBZTtBQUMvQixxQkFBTyxJQUFJLE9BQU87QUFBQSxtQkFDYjtBQUNMLHFCQUFPLElBQUksT0FBTyxDQUFDO0FBQUE7QUFBQSxpQkFFaEI7QUFDTCxnQkFBSSxDQUFFLEtBQUksZ0JBQWdCLFFBQVE7QUFDaEMsa0JBQUksT0FBTyxDQUFDLElBQUk7QUFBQTtBQUVsQixtQkFBTyxJQUFJLEtBQUssS0FBSztBQUFBO0FBQUE7QUFJekIsZUFBTyxVQUFVLFFBQVEsV0FBVztBQUNsQyxjQUFJLFNBQVMsU0FBUyxRQUFRO0FBQzlCLGVBQUs7QUFDTCxlQUFLLFlBQVksSUFBSSxPQUFPLEtBQUssUUFBUSxRQUFRO0FBQUEsWUFDL0MsTUFBTTtBQUFBLFlBQ04sV0FBVztBQUFBLFlBQ1gsT0FBTyxLQUFLLFFBQVE7QUFBQTtBQUV0QixlQUFLLFVBQVUsWUFBWTtBQUMzQixlQUFLLFVBQVUsVUFBVyxTQUFTLE9BQU87QUFDeEMsbUJBQU8sU0FBUyxPQUFPO0FBQ3JCLG9CQUFNLFVBQVU7QUFDaEIsa0JBQUksQ0FBQyxNQUFNLFVBQVUsV0FBVztBQUM5QixzQkFBTSxVQUFVLFlBQVk7QUFDNUIsdUJBQU8sTUFBTSxLQUFLLFNBQVM7QUFBQTtBQUFBO0FBQUEsWUFHOUI7QUFDSCxlQUFLLFVBQVUsUUFBUyxTQUFTLE9BQU87QUFDdEMsbUJBQU8sV0FBVztBQUNoQixrQkFBSSxDQUFDLE1BQU0sVUFBVSxPQUFPO0FBQzFCLHNCQUFNLFVBQVUsUUFBUTtBQUN4Qix1QkFBTyxNQUFNLEtBQUssT0FBTyxNQUFNO0FBQUE7QUFBQTtBQUFBLFlBR2xDO0FBQ0gsZUFBSyxVQUFVLFFBQVE7QUFDdkIsZUFBSyxtQkFBbUIsS0FBSyxRQUFRO0FBQ3JDLGVBQUssZUFBZTtBQUNwQixrQkFBUTtBQUNSLG9CQUFVLEtBQUssUUFBUTtBQUN2QixvQkFBVSxLQUFLLFFBQVE7QUFDdkIsZUFBSyxVQUFVLFlBQWEsU0FBUyxPQUFPO0FBQzFDLG1CQUFPLFNBQVMsTUFBTTtBQUNwQixrQkFBSSxLQUFLLFVBQVUsS0FBSyxjQUFjO0FBQ3RDLG9CQUFNLE9BQU8sT0FBTztBQUNwQixrQkFBSSxXQUFXO0FBQ2Ysa0JBQUksQ0FBQyxNQUFNLFFBQVEsYUFBYTtBQUM5QixzQkFBTSxLQUFLO0FBQ1gscUJBQUssT0FBTyxLQUFLO0FBQ2Ysc0JBQUksQ0FBQyxRQUFRLEtBQUssS0FBSztBQUFNO0FBQzdCLHNCQUFJLENBQUUsWUFBVyxRQUFRLENBQUMsTUFBTSxRQUFRLFlBQVk7QUFDbEQsd0JBQUksV0FBVyxPQUFPLE9BQU87QUFBQTtBQUUvQiw2QkFBVyxNQUFNLFFBQVEsc0JBQXNCLFlBQVksTUFBTSxRQUFRLHFCQUFxQixLQUFLLFdBQVcsTUFBTSxPQUFPLEtBQUssV0FBVztBQUMzSSxpQ0FBZSxNQUFNLFFBQVEscUJBQXFCLFlBQVksTUFBTSxRQUFRLG9CQUFvQixPQUFPO0FBQ3ZHLHNCQUFJLE1BQU0sUUFBUSxZQUFZO0FBQzVCLDBCQUFNLGFBQWEsS0FBSyxjQUFjO0FBQUEseUJBQ2pDO0FBQ0wsd0JBQUksU0FBUyxnQkFBZ0I7QUFBQTtBQUFBO0FBQUE7QUFJbkMsa0JBQUksV0FBVyxNQUFNLFFBQVEsb0JBQW9CLFlBQVksTUFBTSxRQUFRLG1CQUFtQixLQUFLLFFBQVEsS0FBSztBQUNoSCxrQkFBSSxNQUFNLFFBQVEsT0FBTztBQUN2QixvQkFBSSxNQUFNLFFBQVEsWUFBWTtBQUFBLGtCQUM1QixLQUFLLEtBQUs7QUFBQSxrQkFDVixPQUFPLEtBQUs7QUFBQTtBQUFBO0FBR2hCLHFCQUFPLE1BQU0sS0FBSztBQUFBO0FBQUEsWUFFbkI7QUFDSCxlQUFLLFVBQVUsYUFBYyxTQUFTLE9BQU87QUFDM0MsbUJBQU8sV0FBVztBQUNoQixrQkFBSSxPQUFPLFVBQVUsS0FBSyxNQUFNLFVBQVUsS0FBSyxVQUFVLEtBQUssR0FBRztBQUNqRSxvQkFBTSxNQUFNO0FBQ1oseUJBQVcsSUFBSTtBQUNmLGtCQUFJLENBQUMsTUFBTSxRQUFRLG9CQUFvQixDQUFDLE1BQU0sUUFBUSx1QkFBdUI7QUFDM0UsdUJBQU8sSUFBSTtBQUFBO0FBRWIsa0JBQUksSUFBSSxVQUFVLE1BQU07QUFDdEIsd0JBQVEsSUFBSTtBQUNaLHVCQUFPLElBQUk7QUFBQTtBQUViLGtCQUFJLE1BQU0sTUFBTSxTQUFTO0FBQ3pCLGtCQUFJLElBQUksU0FBUyxNQUFNLFlBQVksQ0FBQyxPQUFPO0FBQ3pDLDJCQUFXLElBQUk7QUFDZix1QkFBTyxJQUFJO0FBQUEscUJBQ047QUFDTCxvQkFBSSxNQUFNLFFBQVEsTUFBTTtBQUN0QixzQkFBSSxXQUFXLElBQUksU0FBUztBQUFBO0FBRTlCLG9CQUFJLE1BQU0sUUFBUSxXQUFXO0FBQzNCLHNCQUFJLFdBQVcsSUFBSSxTQUFTLFFBQVEsV0FBVyxLQUFLO0FBQUE7QUFFdEQsb0JBQUksV0FBVyxNQUFNLFFBQVEsa0JBQWtCLFlBQVksTUFBTSxRQUFRLGlCQUFpQixJQUFJLFVBQVUsWUFBWSxJQUFJO0FBQ3hILG9CQUFJLE9BQU8sS0FBSyxLQUFLLFdBQVcsS0FBSyxXQUFXLE9BQU8sQ0FBQyxNQUFNLGtCQUFrQjtBQUM5RSx3QkFBTSxJQUFJO0FBQUE7QUFBQTtBQUdkLGtCQUFJLFFBQVEsTUFBTTtBQUNoQixvQkFBSSxPQUFPLE1BQU0sUUFBUSxhQUFhLFlBQVk7QUFDaEQsd0JBQU0sTUFBTSxRQUFRO0FBQUEsdUJBQ2Y7QUFDTCx3QkFBTSxNQUFNLFFBQVEsYUFBYSxLQUFLLE1BQU0sUUFBUSxXQUFXO0FBQUE7QUFBQTtBQUduRSxrQkFBSSxNQUFNLFFBQVEsYUFBYSxNQUFNO0FBQ25DLHdCQUFRLE1BQVEsV0FBVztBQUN6QixzQkFBSSxHQUFHLEtBQUs7QUFDWiw0QkFBVTtBQUNWLHVCQUFLLElBQUksR0FBRyxNQUFNLE1BQU0sUUFBUSxJQUFJLEtBQUssS0FBSztBQUM1QywyQkFBTyxNQUFNO0FBQ2IsNEJBQVEsS0FBSyxLQUFLO0FBQUE7QUFFcEIseUJBQU87QUFBQSxvQkFDSCxPQUFPLFVBQVUsS0FBSztBQUM1QixnQkFBQyxZQUFXO0FBQ1Ysc0JBQUk7QUFDSixzQkFBSTtBQUNGLDJCQUFPLE1BQU0sTUFBTSxRQUFRLFVBQVUsT0FBTyxLQUFLLEVBQUUsV0FBVztBQUFBLDJCQUN2RCxRQUFQO0FBQ0EsMEJBQU07QUFDTiwyQkFBTyxNQUFNLEtBQUssU0FBUztBQUFBO0FBQUE7QUFBQTtBQUlqQyxrQkFBSSxNQUFNLFFBQVEsb0JBQW9CLENBQUMsTUFBTSxRQUFRLGNBQWMsT0FBTyxRQUFRLFVBQVU7QUFDMUYsb0JBQUksQ0FBQyxNQUFNLFFBQVEsdUJBQXVCO0FBQ3hDLHlCQUFPLE9BQU8sT0FBTztBQUNyQixzQkFBSSxNQUFNLFFBQVEsV0FBVyxLQUFLO0FBQ2hDLHlCQUFLLE1BQU0sUUFBUSxXQUFXLElBQUksTUFBTSxRQUFRO0FBQ2hELDJCQUFPLElBQUksTUFBTSxRQUFRO0FBQUE7QUFFM0Isc0JBQUksQ0FBQyxNQUFNLFFBQVEsbUJBQW1CLE1BQU0sUUFBUSxXQUFXLEtBQUs7QUFDbEUseUJBQUssTUFBTSxRQUFRLFdBQVcsSUFBSSxNQUFNLFFBQVE7QUFDaEQsMkJBQU8sSUFBSSxNQUFNLFFBQVE7QUFBQTtBQUUzQixzQkFBSSxPQUFPLG9CQUFvQixLQUFLLFNBQVMsR0FBRztBQUM5Qyx5QkFBSyxNQUFNLFFBQVEsWUFBWTtBQUFBO0FBRWpDLHdCQUFNO0FBQUEsMkJBQ0csR0FBRztBQUNaLG9CQUFFLE1BQU0sUUFBUSxZQUFZLEVBQUUsTUFBTSxRQUFRLGFBQWE7QUFDekQsNkJBQVcsT0FBTyxPQUFPO0FBQ3pCLHVCQUFLLE9BQU8sS0FBSztBQUNmLHdCQUFJLENBQUMsUUFBUSxLQUFLLEtBQUs7QUFBTTtBQUM3Qiw2QkFBUyxPQUFPLElBQUk7QUFBQTtBQUV0QixvQkFBRSxNQUFNLFFBQVEsVUFBVSxLQUFLO0FBQy9CLHlCQUFPLElBQUk7QUFDWCxzQkFBSSxPQUFPLEtBQUssS0FBSyxXQUFXLEtBQUssV0FBVyxPQUFPLENBQUMsTUFBTSxrQkFBa0I7QUFDOUUsMEJBQU0sSUFBSTtBQUFBO0FBQUE7QUFBQTtBQUloQixrQkFBSSxNQUFNLFNBQVMsR0FBRztBQUNwQix1QkFBTyxNQUFNLGFBQWEsR0FBRyxVQUFVO0FBQUEscUJBQ2xDO0FBQ0wsb0JBQUksTUFBTSxRQUFRLGNBQWM7QUFDOUIsd0JBQU07QUFDTix3QkFBTSxPQUFPLE9BQU87QUFDcEIsc0JBQUksWUFBWTtBQUFBO0FBRWxCLHNCQUFNLGVBQWU7QUFDckIsc0JBQU0sVUFBVSxRQUFRO0FBQ3hCLHVCQUFPLE1BQU0sS0FBSyxPQUFPLE1BQU07QUFBQTtBQUFBO0FBQUEsWUFHbEM7QUFDSCxtQkFBVSxTQUFTLE9BQU87QUFDeEIsbUJBQU8sU0FBUyxNQUFNO0FBQ3BCLGtCQUFJLFdBQVc7QUFDZixrQkFBSSxNQUFNLE1BQU0sU0FBUztBQUN6QixrQkFBSSxHQUFHO0FBQ0wsa0JBQUUsWUFBWTtBQUNkLG9CQUFJLE1BQU0sUUFBUSxvQkFBb0IsTUFBTSxRQUFRLHlCQUF5QixNQUFNLFFBQVEsbUJBQW9CLE9BQU0sUUFBUSxxQkFBcUIsS0FBSyxRQUFRLFFBQVEsSUFBSSxXQUFXLEtBQUs7QUFDekwsb0JBQUUsTUFBTSxRQUFRLFlBQVksRUFBRSxNQUFNLFFBQVEsYUFBYTtBQUN6RCw4QkFBWTtBQUFBLG9CQUNWLFNBQVM7QUFBQTtBQUVYLDRCQUFVLFdBQVc7QUFDckIsc0JBQUksTUFBTSxRQUFRLFdBQVc7QUFDM0IsOEJBQVUsV0FBVyxVQUFVLFNBQVMsUUFBUSxXQUFXLEtBQUs7QUFBQTtBQUVsRSxvQkFBRSxNQUFNLFFBQVEsVUFBVSxLQUFLO0FBQUE7QUFFakMsdUJBQU87QUFBQTtBQUFBO0FBQUEsWUFHVjtBQUNILGVBQUssVUFBVSxTQUFTO0FBQ3hCLGlCQUFPLEtBQUssVUFBVSxVQUFXLFNBQVMsT0FBTztBQUMvQyxtQkFBTyxTQUFTLE1BQU07QUFDcEIsa0JBQUk7QUFDSixrQkFBSSxPQUFPO0FBQ1gsa0JBQUksR0FBRztBQUNMLHVCQUFPLEVBQUUsUUFBUTtBQUFBO0FBQUE7QUFBQSxZQUdwQjtBQUFBO0FBR0wsZUFBTyxVQUFVLGNBQWMsU0FBUyxLQUFLLElBQUk7QUFDL0MsY0FBSTtBQUNKLGNBQUssTUFBTSxRQUFTLE9BQU8sT0FBTyxZQUFZO0FBQzVDLGlCQUFLLEdBQUcsT0FBTyxTQUFTLFFBQVE7QUFDOUIsbUJBQUs7QUFDTCxxQkFBTyxHQUFHLE1BQU07QUFBQTtBQUVsQixpQkFBSyxHQUFHLFNBQVMsU0FBUyxNQUFLO0FBQzdCLG1CQUFLO0FBQ0wscUJBQU8sR0FBRztBQUFBO0FBQUE7QUFHZCxjQUFJO0FBQ0Ysa0JBQU0sSUFBSTtBQUNWLGdCQUFJLElBQUksV0FBVyxJQUFJO0FBQ3JCLG1CQUFLLEtBQUssT0FBTztBQUNqQixxQkFBTztBQUFBO0FBRVQsa0JBQU0sSUFBSSxTQUFTO0FBQ25CLGdCQUFJLEtBQUssUUFBUSxPQUFPO0FBQ3RCLG1CQUFLLFlBQVk7QUFDakIsMkJBQWEsS0FBSztBQUNsQixxQkFBTyxLQUFLO0FBQUE7QUFFZCxtQkFBTyxLQUFLLFVBQVUsTUFBTSxLQUFLO0FBQUEsbUJBQzFCLFFBQVA7QUFDQSxrQkFBTTtBQUNOLGdCQUFJLENBQUUsTUFBSyxVQUFVLGFBQWEsS0FBSyxVQUFVLFFBQVE7QUFDdkQsbUJBQUssS0FBSyxTQUFTO0FBQ25CLHFCQUFPLEtBQUssVUFBVSxZQUFZO0FBQUEsdUJBQ3pCLEtBQUssVUFBVSxPQUFPO0FBQy9CLG9CQUFNO0FBQUE7QUFBQTtBQUFBO0FBS1osZUFBTyxVQUFVLHFCQUFxQixTQUFTLEtBQUs7QUFDbEQsaUJBQU8sSUFBSSxRQUFTLFNBQVMsT0FBTztBQUNsQyxtQkFBTyxTQUFTLFNBQVMsUUFBUTtBQUMvQixxQkFBTyxNQUFNLFlBQVksS0FBSyxTQUFTLEtBQUssT0FBTztBQUNqRCxvQkFBSSxLQUFLO0FBQ1AseUJBQU8sT0FBTztBQUFBLHVCQUNUO0FBQ0wseUJBQU8sUUFBUTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBSXBCO0FBQUE7QUFHTCxlQUFPO0FBQUEsUUFFTjtBQUVILGNBQVEsY0FBYyxTQUFTLEtBQUssR0FBRyxHQUFHO0FBQ3hDLFlBQUksSUFBSSxTQUFTO0FBQ2pCLFlBQUksS0FBSyxNQUFNO0FBQ2IsY0FBSSxPQUFPLE1BQU0sWUFBWTtBQUMzQixpQkFBSztBQUFBO0FBRVAsY0FBSSxPQUFPLE1BQU0sVUFBVTtBQUN6QixzQkFBVTtBQUFBO0FBQUEsZUFFUDtBQUNMLGNBQUksT0FBTyxNQUFNLFlBQVk7QUFDM0IsaUJBQUs7QUFBQTtBQUVQLG9CQUFVO0FBQUE7QUFFWixpQkFBUyxJQUFJLFFBQVEsT0FBTztBQUM1QixlQUFPLE9BQU8sWUFBWSxLQUFLO0FBQUE7QUFHakMsY0FBUSxxQkFBcUIsU0FBUyxLQUFLLEdBQUc7QUFDNUMsWUFBSSxTQUFTO0FBQ2IsWUFBSSxPQUFPLE1BQU0sVUFBVTtBQUN6QixvQkFBVTtBQUFBO0FBRVosaUJBQVMsSUFBSSxRQUFRLE9BQU87QUFDNUIsZUFBTyxPQUFPLG1CQUFtQjtBQUFBO0FBQUEsT0FHbEMsS0FBSztBQUFBO0FBQUE7OztBQ2hZUjtBQUFBO0FBQ0EsSUFBQyxZQUFXO0FBQ1Y7QUFDQSxVQUFJLFNBQVMsVUFBVSxRQUFRLFlBQzdCLFNBQVMsU0FBUyxPQUFPLFFBQVE7QUFBRSxpQkFBUyxPQUFPLFFBQVE7QUFBRSxjQUFJLFFBQVEsS0FBSyxRQUFRO0FBQU0sa0JBQU0sT0FBTyxPQUFPO0FBQUE7QUFBUSx3QkFBZ0I7QUFBRSxlQUFLLGNBQWM7QUFBQTtBQUFTLGFBQUssWUFBWSxPQUFPO0FBQVcsY0FBTSxZQUFZLElBQUk7QUFBUSxjQUFNLFlBQVksT0FBTztBQUFXLGVBQU87QUFBQSxTQUNsUixVQUFVLEdBQUc7QUFFZixpQkFBVztBQUVYLGdCQUFVO0FBRVYsZUFBUztBQUVULG1CQUFhO0FBRWIsY0FBUSxXQUFXLFNBQVM7QUFFNUIsY0FBUSxhQUFhO0FBRXJCLGNBQVEsa0JBQW1CLFNBQVMsWUFBWTtBQUM5QyxlQUFPLGlCQUFpQjtBQUV4QixpQ0FBeUIsU0FBUztBQUNoQyxlQUFLLFVBQVU7QUFBQTtBQUdqQixlQUFPO0FBQUEsUUFFTjtBQUVILGNBQVEsVUFBVSxRQUFRO0FBRTFCLGNBQVEsU0FBUyxPQUFPO0FBRXhCLGNBQVEsY0FBYyxPQUFPO0FBRTdCLGNBQVEscUJBQXFCLE9BQU87QUFBQSxPQUVuQyxLQUFLO0FBQUE7QUFBQTs7O0FDdENSO0FBQUE7QUFBQTtBQUFBLHVCQUE2RDs7O0FDQTdELHNCQUErQjtBQUMvQixTQUFvQjtBQUNwQixXQUFzQjtBQWlDZiwyQkFBb0I7QUFBQSxFQTBCdkIsWUFBWSxRQUFnQixXQUFtQixRQUFRO0FBdEIvQyx5QkFBeUI7QUFDekIsdUJBQXVCO0FBc0IzQixTQUFLLFNBQVM7QUFDZCxTQUFLLFdBQVc7QUFDaEIsWUFBUSxJQUFJLHVDQUF1QyxLQUFLO0FBQ3hELFNBQUssT0FBTztBQUFBLE1BQ1IsY0FBYztBQUFBLE1BQ2QsUUFBUTtBQUFBLE1BQ1IsbUJBQW1CO0FBQUEsTUFDbkIsYUFBYTtBQUFBO0FBQUE7QUFBQSxRQUlSLGFBQTRCO0FBQ3JDLFFBQUksS0FBSztBQUFlO0FBRXhCLFFBQUk7QUFDQSxZQUFNLEtBQUs7QUFDWCxXQUFLLGdCQUFnQjtBQUFBLGFBQ2hCLE9BQVA7QUFDRSxjQUFRLE1BQU0sd0NBQXdDO0FBRXRELFdBQUssZ0JBQWdCO0FBQ3JCLFlBQU07QUFBQTtBQUFBO0FBQUEsUUFJQSxXQUEwQjtBQUNwQyxRQUFJO0FBQ0EsWUFBTSxXQUFXLEFBQUssVUFBSyxLQUFLLE9BQU8sSUFBSSxNQUFNLFFBQVEsVUFBVSxhQUFhLFdBQVcsc0JBQXNCLEtBQUssVUFBVTtBQUNoSSxjQUFRLElBQUkscURBQXFEO0FBRWpFLFVBQUksQUFBRyxjQUFXLFdBQVc7QUFDekIsY0FBTSxVQUFVLEFBQUcsZ0JBQWEsVUFBVTtBQUMxQyxnQkFBUSxJQUFJLHVEQUF1RCxRQUFRLE1BQU0sR0FBRztBQUNwRixhQUFLLE9BQU8sS0FBSyxNQUFNO0FBQ3ZCLGdCQUFRLElBQUksa0NBQWtDLEtBQUssS0FBSyxhQUFhLHdCQUF3QixLQUFLLEtBQUssT0FBTztBQUFBLGFBQzNHO0FBQ0gsZ0JBQVEsSUFBSTtBQUFBO0FBQUEsYUFFWCxPQUFQO0FBRUUsY0FBUSxJQUFJLDJFQUEyRTtBQUFBO0FBQUE7QUFBQSxRQUlqRixXQUEwQjtBQUNwQyxRQUFJO0FBRUEsWUFBTSxLQUFLO0FBRVgsWUFBTSxXQUFXLEFBQUssVUFBSyxLQUFLLE9BQU8sSUFBSSxNQUFNLFFBQVEsVUFBVSxhQUFhLFdBQVcsc0JBQXNCLEtBQUssVUFBVTtBQUNoSSxZQUFNLFVBQVUsS0FBSyxVQUFVLEtBQUssTUFBTSxNQUFNO0FBQ2hELGNBQVEsSUFBSSxxQ0FBcUM7QUFDakQsY0FBUSxJQUFJLGtEQUFrRCxRQUFRLE1BQU0sR0FBRztBQUcvRSxNQUFHLGlCQUFjLFVBQVUsU0FBUztBQUNwQyxjQUFRLElBQUkseURBQXlELEtBQUssS0FBSyxhQUFhLHdCQUF3QixLQUFLLEtBQUssT0FBTztBQUFBLGFBQ2hJLE9BQVA7QUFDRSxjQUFRLE1BQU0scURBQXFEO0FBQ25FLFVBQUksQ0FBQyxLQUFLLGFBQWE7QUFDbkIsWUFBSSx1QkFBTztBQUFBO0FBRWYsVUFBSSxDQUFDLEtBQUssYUFBYTtBQUNuQixjQUFNO0FBQUE7QUFBQTtBQUFBO0FBQUEsUUFLSix3QkFBdUM7QUFDakQsUUFBSTtBQUNBLFlBQU0sVUFBVSxBQUFLLFVBQUssS0FBSyxPQUFPLElBQUksTUFBTSxRQUFRLFVBQVUsYUFBYSxXQUFXLHNCQUFzQixLQUFLO0FBQ3JILFVBQUksQ0FBQyxBQUFHLGNBQVcsVUFBVTtBQUN6QixRQUFHLGFBQVUsU0FBUyxFQUFFLFdBQVc7QUFDbkMsZ0JBQVEsSUFBSSxrQ0FBa0M7QUFBQTtBQUFBLGFBRTdDLE9BQVA7QUFDRSxjQUFRLElBQUksNkRBQTZEO0FBQUE7QUFBQTtBQUFBLEVBSTFFLGtCQUFpQztBQUNwQyxXQUFPLENBQUMsR0FBRyxLQUFLLEtBQUssY0FBYyxLQUFLLENBQUMsR0FBRyxNQUFNLEVBQUUsYUFBYSxjQUFjLEVBQUU7QUFBQTtBQUFBLEVBRzlFLFdBQXFCO0FBQ3hCLFVBQU0sUUFBUSxJQUFJO0FBQ2xCLGVBQVcsU0FBUyxLQUFLLEtBQUssUUFBUTtBQUNsQyxZQUFNLElBQUksTUFBTTtBQUFBO0FBSXBCLFVBQU0sWUFBWSxNQUFNLEtBQUs7QUFDN0IsV0FBTyxVQUFVLEtBQUssQ0FBQyxHQUFHLE1BQU07QUFDNUIsWUFBTSxTQUFTLGVBQWMseUJBQXlCLFFBQVE7QUFDOUQsWUFBTSxTQUFTLGVBQWMseUJBQXlCLFFBQVE7QUFHOUQsVUFBSSxXQUFXLE1BQU0sV0FBVyxJQUFJO0FBQ2hDLGVBQU8sU0FBUztBQUFBO0FBSXBCLFVBQUksV0FBVztBQUFJLGVBQU87QUFDMUIsVUFBSSxXQUFXO0FBQUksZUFBTztBQUcxQixhQUFPLEVBQUUsY0FBYztBQUFBO0FBQUE7QUFBQSxFQUl4QixtQkFBbUIsTUFBYyxpQkFBbUM7QUFDdkUsVUFBTSxjQUFjLEtBQUssS0FBSyxhQUFhLEtBQUssT0FBSyxFQUFFLGlCQUFpQjtBQUN4RSxRQUFJLENBQUM7QUFBYSxhQUFPO0FBRXpCLFVBQU0sV0FBVyxJQUFJO0FBQ3JCLGVBQVcsU0FBUyxLQUFLLEtBQUssUUFBUTtBQUNsQyxVQUFJLE1BQU0sbUJBQW1CLFlBQVksTUFBTSxNQUFNLFNBQVMsTUFBTTtBQUNoRSxpQkFBUyxJQUFJLE1BQU07QUFBQTtBQUFBO0FBRzNCLFdBQU8sTUFBTSxLQUFLLFVBQVUsS0FBSyxDQUFDLEdBQUcsTUFBTSxJQUFJO0FBQUE7QUFBQSxFQUc1QyxvQkFBb0IsTUFBYyxTQUFpQixpQkFBbUM7QUFDekYsVUFBTSxjQUFjLEtBQUssS0FBSyxhQUFhLEtBQUssT0FBSyxFQUFFLGlCQUFpQjtBQUN4RSxRQUFJLENBQUM7QUFBYSxhQUFPO0FBRXpCLFVBQU0sU0FBUyxJQUFJO0FBQ25CLGVBQVcsU0FBUyxLQUFLLEtBQUssUUFBUTtBQUNsQyxVQUFJLE1BQU0sbUJBQW1CLFlBQVksTUFDckMsTUFBTSxTQUFTLFFBQ2YsTUFBTSxZQUFZLFNBQVM7QUFDM0IsZUFBTyxJQUFJLE1BQU07QUFBQTtBQUFBO0FBR3pCLFdBQU8sTUFBTSxLQUFLLFFBQVEsS0FBSyxDQUFDLEdBQUcsTUFBTSxJQUFJO0FBQUE7QUFBQSxFQUcxQyxTQUFTLE1BQWMsU0FBaUIsT0FBZSxpQkFBdUM7QUFDakcsVUFBTSxjQUFjLEtBQUssS0FBSyxhQUFhLEtBQUssT0FBSyxFQUFFLGlCQUFpQjtBQUN4RSxRQUFJLENBQUM7QUFBYSxhQUFPO0FBRXpCLFdBQU8sS0FBSyxLQUFLLE9BQU8sS0FBSyxPQUN6QixFQUFFLG1CQUFtQixZQUFZLE1BQ2pDLEVBQUUsU0FBUyxRQUNYLEVBQUUsWUFBWSxXQUNkLEVBQUUsVUFBVSxVQUNYO0FBQUE7QUFBQSxRQUdJLGVBQWUsTUFBYyxjQUFzQixXQUFtQixXQUFXLFdBQW1CLFlBQVksa0JBQW9DLElBQXFCO0FBRWxMLFVBQU0sV0FBVyxLQUFLLEtBQUssYUFBYSxLQUFLLE9BQUssRUFBRSxpQkFBaUI7QUFDckUsUUFBSSxVQUFVO0FBQ1YsWUFBTSxJQUFJLE1BQU0sa0NBQWtDO0FBQUE7QUFHdEQsVUFBTSxLQUFLLEtBQUssS0FBSztBQUNyQixTQUFLLEtBQUssYUFBYSxLQUFLO0FBQUEsTUFDeEI7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBO0FBR0osWUFBUSxJQUFJLHNCQUFzQixTQUFTLHlCQUF5QjtBQUNwRSxVQUFNLEtBQUs7QUFDWCxXQUFPO0FBQUE7QUFBQSxRQUdFLGtCQUFrQixJQUFZLE1BQWMsY0FBc0IsVUFBa0IsVUFBa0IsaUJBQWtEO0FBQ2pLLFVBQU0sY0FBYyxLQUFLLEtBQUssYUFBYSxLQUFLLE9BQUssRUFBRSxPQUFPO0FBQzlELFFBQUksQ0FBQyxhQUFhO0FBQ2QsWUFBTSxJQUFJLE1BQU07QUFBQTtBQUlwQixRQUFJLFlBQVksaUJBQWlCLGdCQUM3QixLQUFLLEtBQUssYUFBYSxLQUFLLE9BQUssRUFBRSxpQkFBaUIsZUFBZTtBQUNuRSxZQUFNLElBQUksTUFBTTtBQUFBO0FBSXBCLGdCQUFZLE9BQU87QUFDbkIsZ0JBQVksZUFBZTtBQUMzQixnQkFBWSxXQUFXO0FBQ3ZCLGdCQUFZLFdBQVc7QUFDdkIsZ0JBQVksa0JBQWtCO0FBRTlCLFVBQU0sS0FBSztBQUFBO0FBQUEsUUFHRixTQUFTLGVBQXVCLE1BQWMsU0FBaUIsT0FBZSxNQUFjLGtCQUEyQixNQUFxQjtBQUNySixTQUFLLEtBQUssT0FBTyxLQUFLO0FBQUEsTUFDbEIsSUFBSSxLQUFLLEtBQUs7QUFBQSxNQUNkLGdCQUFnQjtBQUFBLE1BQ2hCO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUE7QUFFSixRQUFJLGlCQUFpQjtBQUNqQixZQUFNLEtBQUs7QUFBQTtBQUFBO0FBQUEsUUFJTixlQUFlLFFBQW1IO0FBQzNJLFFBQUksT0FBTyxXQUFXLEdBQUc7QUFDckIsY0FBUSxJQUFJO0FBQ1o7QUFBQTtBQUdKLFVBQU0sVUFBVSxLQUFLLEtBQUs7QUFDMUIsZUFBVyxTQUFTLFFBQVE7QUFDeEIsV0FBSyxLQUFLLE9BQU8sS0FBSztBQUFBLFFBQ2xCLElBQUksS0FBSyxLQUFLO0FBQUEsUUFDZCxnQkFBZ0IsTUFBTTtBQUFBLFFBQ3RCLE1BQU0sTUFBTTtBQUFBLFFBQ1osU0FBUyxNQUFNO0FBQUEsUUFDZixPQUFPLE1BQU07QUFBQSxRQUNiLE1BQU0sTUFBTTtBQUFBO0FBQUE7QUFJcEIsWUFBUSxJQUFJLHFCQUFxQixPQUFPLHNCQUFzQixXQUFXLEtBQUssS0FBSyxjQUFjO0FBQ2pHLFlBQVEsSUFBSSx1Q0FBdUMsS0FBSyxLQUFLLE9BQU87QUFDcEUsVUFBTSxLQUFLO0FBQ1gsWUFBUSxJQUFJLG9EQUFvRCxLQUFLLEtBQUssT0FBTztBQUFBO0FBQUEsUUFHeEUsa0JBQWtCLGNBQXdDO0FBQ25FLFVBQU0sbUJBQW1CLEtBQUssS0FBSyxhQUFhLFVBQVUsT0FBSyxFQUFFLGlCQUFpQjtBQUNsRixRQUFJLHFCQUFxQixJQUFJO0FBQ3pCLGFBQU87QUFBQTtBQUdYLFVBQU0sY0FBYyxLQUFLLEtBQUssYUFBYTtBQUczQyxTQUFLLEtBQUssU0FBUyxLQUFLLEtBQUssT0FBTyxPQUFPLE9BQUssRUFBRSxtQkFBbUIsWUFBWTtBQUdqRixTQUFLLEtBQUssYUFBYSxPQUFPLGtCQUFrQjtBQUVoRCxVQUFNLEtBQUs7QUFDWCxXQUFPO0FBQUE7QUFBQSxRQUdFLGlCQUFpQixZQUFnQztBQUcxRCxRQUFJLFdBQVcsZ0JBQWdCLFdBQVcsUUFBUTtBQUM5QyxpQkFBVyxlQUFlLFdBQVcsY0FBYztBQUMvQyxjQUFNLEtBQUssZUFBZSxZQUFZLE1BQU0sWUFBWTtBQUFBO0FBRzVELFlBQU0sY0FBMEc7QUFFaEgsaUJBQVcsU0FBUyxXQUFXLFFBQVE7QUFDbkMsY0FBTSxjQUFjLEtBQUssS0FBSyxhQUFhLEtBQUssT0FBSyxFQUFFLE9BQU8sTUFBTTtBQUNwRSxZQUFJLGFBQWE7QUFDYixzQkFBWSxLQUFLO0FBQUEsWUFDYixlQUFlLFlBQVk7QUFBQSxZQUMzQixNQUFNLE1BQU07QUFBQSxZQUNaLFNBQVMsTUFBTTtBQUFBLFlBQ2YsT0FBTyxNQUFNO0FBQUEsWUFDYixNQUFNLE1BQU07QUFBQTtBQUFBO0FBQUE7QUFLeEIsVUFBSSxZQUFZLFNBQVMsR0FBRztBQUN4QixjQUFNLEtBQUssZUFBZTtBQUFBO0FBQUE7QUFBQTtBQUFBLFFBS3pCLGNBQWMsU0FBNkI7QUFHcEQsWUFBUSxJQUFJO0FBQUE7QUFBQSxFQUdULG1CQUE2RDtBQUNoRSxXQUFPO0FBQUEsTUFDSCxjQUFjLEtBQUssS0FBSyxhQUFhO0FBQUEsTUFDckMsUUFBUSxLQUFLLEtBQUssT0FBTztBQUFBO0FBQUE7QUFBQSxFQUkxQix3QkFBd0IsY0FBK0I7QUFDMUQsV0FBTyxLQUFLLEtBQUssYUFBYSxLQUFLLE9BQUssRUFBRSxpQkFBaUI7QUFBQTtBQUFBLEVBR3hELG9CQUFvQixjQUFvRjtBQUMzRyxVQUFNLGNBQWMsS0FBSyxLQUFLLGFBQWEsS0FBSyxPQUFLLEVBQUUsaUJBQWlCO0FBQ3hFLFFBQUksQ0FBQztBQUFhLGFBQU87QUFFekIsVUFBTSxvQkFBb0IsS0FBSyxLQUFLLE9BQU8sT0FBTyxPQUFLLEVBQUUsbUJBQW1CLFlBQVk7QUFDeEYsVUFBTSxRQUFRLENBQUMsR0FBRyxJQUFJLElBQUksa0JBQWtCLElBQUksT0FBSyxFQUFFLFFBQVE7QUFFL0QsV0FBTztBQUFBLE1BQ0gsTUFBTSxZQUFZO0FBQUEsTUFDbEIsWUFBWSxrQkFBa0I7QUFBQSxNQUM5QjtBQUFBO0FBQUE7QUFBQSxFQUlELHFCQUFxQixNQUFjLGlCQUFpQztBQUN2RSxVQUFNLGNBQWMsS0FBSyxLQUFLLGFBQWEsS0FBSyxPQUFLLEVBQUUsaUJBQWlCO0FBQ3hFLFFBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxpQkFBaUI7QUFDOUMsYUFBTztBQUFBO0FBR1gsUUFBSSxnQkFBZ0I7QUFDcEIsZUFBVyxRQUFRLFlBQVksaUJBQWlCO0FBQzVDLFVBQUk7QUFDQSxjQUFNLFFBQVEsSUFBSSxPQUFPLEtBQUssT0FBTztBQUNyQyxZQUFJLEtBQUssUUFBUTtBQUNiLDBCQUFnQixjQUFjLFFBQVEsT0FBTyxJQUFJLFNBQVM7QUFFdEQsZ0JBQUksU0FBUyxLQUFLO0FBQ2xCLHFCQUFTLElBQUksR0FBRyxJQUFJLEtBQUssU0FBUyxHQUFHLEtBQUs7QUFDdEMsb0JBQU0sUUFBUSxLQUFLO0FBQ25CLG9CQUFNLFVBQVUsS0FBSyxXQUFXO0FBQ2hDLHVCQUFTLE9BQU8sUUFBUSxJQUFJLE9BQU8sTUFBTSxLQUFLLE1BQU07QUFBQTtBQUd4RCxxQkFBUyxPQUFPLFFBQVEsUUFBUSxLQUFLLFdBQVcsS0FBSztBQUNyRCxtQkFBTztBQUFBO0FBQUEsZUFFUjtBQUNILDBCQUFnQixjQUFjLFFBQVEsT0FBTyxLQUFLO0FBQUE7QUFBQSxlQUVqRCxPQUFQO0FBQ0UsZ0JBQVEsS0FBSyx3Q0FBd0Msb0JBQW9CLEtBQUssU0FBUztBQUFBO0FBQUE7QUFHL0YsV0FBTztBQUFBO0FBQUEsRUFHSCxXQUFXLEtBQXFCO0FBQ3BDLFdBQU8sSUFBSSxRQUFRLGNBQWMsQ0FBQyxNQUFNO0FBQ3BDLGNBQVE7QUFBQSxhQUNDO0FBQUssaUJBQU87QUFBQSxhQUNaO0FBQUssaUJBQU87QUFBQSxhQUNaO0FBQUssaUJBQU87QUFBQSxhQUNaO0FBQUssaUJBQU87QUFBQSxhQUNaO0FBQUssaUJBQU87QUFBQTtBQUNSLGlCQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLckIsa0JBQTBCO0FBQzdCLFdBQU8sQUFBSyxVQUFLLEtBQUssT0FBTyxJQUFJLE1BQU0sUUFBUSxVQUFVLGFBQWEsV0FBVyxzQkFBc0IsS0FBSyxVQUFVO0FBQUE7QUFBQSxFQUduSCxpQkFBMEI7QUFDN0IsV0FBTyxBQUFHLGNBQVcsS0FBSztBQUFBO0FBQUEsUUFHakIsUUFBdUI7QUFDaEMsU0FBSyxjQUFjO0FBQ25CLFFBQUk7QUFDQSxZQUFNLEtBQUs7QUFBQSxhQUNOLE9BQVA7QUFDRSxjQUFRLE1BQU0sZ0NBQWdDO0FBQUE7QUFBQTtBQUFBO0FBNVluRDtBQVFxQixBQVJyQixjQVFxQiwyQkFBMkI7QUFBQSxFQUMvQztBQUFBLEVBQVc7QUFBQSxFQUFVO0FBQUEsRUFBYTtBQUFBLEVBQVc7QUFBQSxFQUM3QztBQUFBLEVBQVU7QUFBQSxFQUFVO0FBQUEsRUFBUTtBQUFBLEVBQVk7QUFBQSxFQUN4QztBQUFBLEVBQVc7QUFBQSxFQUFXO0FBQUEsRUFBZ0I7QUFBQSxFQUN0QztBQUFBLEVBQVE7QUFBQSxFQUFZO0FBQUEsRUFBVTtBQUFBLEVBQU87QUFBQSxFQUNyQztBQUFBLEVBQVk7QUFBQSxFQUFnQjtBQUFBLEVBQW1CO0FBQUEsRUFDL0M7QUFBQSxFQUFZO0FBQUEsRUFBZ0I7QUFBQSxFQUFXO0FBQUEsRUFDdkM7QUFBQSxFQUFTO0FBQUEsRUFBUTtBQUFBLEVBQVE7QUFBQSxFQUFXO0FBQUEsRUFDcEM7QUFBQSxFQUFTO0FBQUEsRUFBUztBQUFBLEVBQVk7QUFBQSxFQUFhO0FBQUEsRUFDM0M7QUFBQSxFQUFhO0FBQUEsRUFBVztBQUFBLEVBQVc7QUFBQSxFQUFRO0FBQUEsRUFDM0M7QUFBQSxFQUFRO0FBQUEsRUFBUTtBQUFBLEVBQVU7QUFBQSxFQUFpQjtBQUFBLEVBQzNDO0FBQUEsRUFBYTtBQUFBLEVBQWE7QUFBQSxFQUFlO0FBQUEsRUFDekM7QUFBQSxFQUFtQjtBQUFBLEVBQW1CO0FBQUEsRUFBYTtBQUFBLEVBQ25EO0FBQUEsRUFBUztBQUFBLEVBQVk7QUFBQSxFQUFXO0FBQUEsRUFBUztBQUFBLEVBQ3pDO0FBQUEsRUFBVztBQUFBLEVBQVU7QUFBQSxFQUFVO0FBQUEsRUFBVTtBQUFBLEVBQ3pDO0FBQUE7OztBQzFEUix1QkFBNEM7QUFJckMsdUNBQWlDLHVCQUFNO0FBQUEsRUFnQjFDLFlBQ0ksS0FDUSxRQUNBLFVBQ1Y7QUFDRSxVQUFNO0FBSEU7QUFDQTtBQWxCSix3QkFBOEI7QUFDOUIsZ0NBQStCO0FBQy9CLDhCQUFvQztBQUNwQyw4QkFBNkI7QUFDN0IsNEJBQWtDO0FBQ2xDLCtCQUFxQztBQUNyQyw4QkFBb0Q7QUFDcEQsMkJBQTRCO0FBOE41Qix5QkFBNkIsSUFBSTtBQStCakMsNEJBQWdDLElBQUk7QUFtRHBDLDBCQUE4QixJQUFJO0FBbFN0QyxTQUFLLEtBQUssT0FBTztBQUFBO0FBQUEsRUFHckIsU0FBUztBQUNMLFVBQU0sRUFBRSxjQUFjO0FBQ3RCLGNBQVU7QUFHVixTQUFLLHFCQUFxQixLQUFLLE9BQU8sU0FBUztBQUMvQyxTQUFLLGtCQUFrQixDQUFDLEdBQUcsS0FBSyxPQUFPLFNBQVM7QUFFaEQsY0FBVSxTQUFTLE1BQU0sRUFBRSxNQUFNO0FBR2pDLFVBQU0sbUJBQW1CLElBQUkseUJBQVEsV0FDaEMsUUFBUSxhQUNSLFFBQVEsc0VBQ1IsUUFBUSxVQUFRO0FBQ2IsV0FBSyxlQUFlLHNCQUNmLFNBQVMsQ0FBQyxVQUFVO0FBQ2pCLGFBQUsscUJBQXFCO0FBQUE7QUFFbEMsV0FBSyxpQkFBaUI7QUFBQTtBQUU5QixTQUFLLG1CQUFtQixVQUFVLFNBQVMsT0FBTyxFQUFFLEtBQUs7QUFDekQsU0FBSyxpQkFBaUIsTUFBTSxRQUFRO0FBQ3BDLFNBQUssaUJBQWlCLE1BQU0sVUFBVTtBQUd0QyxRQUFJLHlCQUFRLFdBQ1AsUUFBUSxlQUNSLFFBQVEsOEJBQ1IsWUFBWSxjQUFZO0FBQ3JCLFdBQUssc0JBQXNCO0FBQzNCLFlBQU0sZUFBZSxLQUFLLEdBQUc7QUFDN0IsWUFBTSxxQkFBNkM7QUFDbkQsbUJBQWEsUUFBUSxXQUFTO0FBQzFCLDJCQUFtQixNQUFNLGdCQUFnQixHQUFHLE1BQU0sU0FBUyxNQUFNO0FBQUE7QUFFckUsZUFDSyxXQUFXLG9CQUNYLFNBQVMsS0FBSyxPQUFPLFNBQVMsb0JBQzlCLFNBQVMsV0FBUztBQUNmLGFBQUssc0JBQXNCO0FBQzNCLGFBQUssZUFBZTtBQUNwQixhQUFLLGtCQUFrQjtBQUN2QixhQUFLLGdCQUFnQjtBQUFBO0FBQUE7QUFLckMsVUFBTSxvQkFBb0IsVUFBVSxVQUFVLEVBQUUsS0FBSztBQUNyRCxTQUFLLGVBQWU7QUFHcEIsVUFBTSx1QkFBdUIsVUFBVSxVQUFVLEVBQUUsS0FBSztBQUN4RCxTQUFLLGtCQUFrQjtBQUd2QixVQUFNLHFCQUFxQixVQUFVLFVBQVUsRUFBRSxLQUFLO0FBQ3RELFNBQUssZ0JBQWdCO0FBR3JCLFFBQUkseUJBQVEsV0FDUCxRQUFRLGVBQ1IsUUFBUSxzQ0FDUixZQUFZLGNBQVksU0FDcEIsVUFBVSxRQUFRLG1CQUNsQixVQUFVLFFBQVEscUJBQ2xCLFVBQVUsYUFBYSxjQUN2QixTQUFTLEtBQUssb0JBQ2QsU0FBUyxXQUFTO0FBQ2YsV0FBSyxxQkFBcUI7QUFDMUIsV0FBSyxPQUFPLFNBQVMsa0JBQWtCLEtBQUs7QUFDNUMsV0FBSyxPQUFPO0FBQ1osV0FBSztBQUFBO0FBSWpCLFVBQU0sbUJBQW1CLFVBQVU7QUFDbkMsU0FBSyxxQkFBcUI7QUFLMUIsVUFBTSxlQUFlLElBQUkseUJBQVEsV0FDNUIsVUFBVSxZQUFVLE9BQ2hCLGNBQWMsVUFDZCxTQUNBLFFBQVEsTUFBTTtBQUNYLFdBQUs7QUFBQTtBQUlqQixRQUFJLEtBQUssa0JBQWtCLEtBQUssZUFBZSxTQUFTO0FBQ3BELFdBQUssZUFBZSxRQUFRLGlCQUFpQixXQUFXLENBQUMsTUFBcUI7QUFDMUUsWUFBSSxFQUFFLFFBQVEsU0FBUztBQUNuQixZQUFFO0FBQ0YsZUFBSztBQUFBO0FBQUE7QUFBQTtBQU1qQixTQUFLO0FBQUE7QUFBQSxFQUdELHdCQUF3QjtBQUM1QixRQUFJLFNBQVMsZUFBZTtBQUEwQjtBQUN0RCxVQUFNLFFBQVEsU0FBUyxjQUFjO0FBQ3JDLFVBQU0sS0FBSztBQUNYLFVBQU0sY0FBYztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUE2RnBCLGFBQVMsS0FBSyxZQUFZO0FBQUE7QUFBQSxFQUt0QixlQUFlLFdBQXdCO0FBQzNDLGNBQVU7QUFDVixVQUFNLFFBQVEsS0FBSyxHQUFHO0FBQ3RCLFFBQUksQ0FBQyxTQUFTLE1BQU0sV0FBVztBQUFHO0FBQ2xDLFVBQU0sT0FBTyxVQUFVLFVBQVUsRUFBRSxLQUFLO0FBQ3hDLFVBQU0sUUFBUSxVQUFRO0FBQ2xCLFlBQU0sTUFBTSxLQUFLLFNBQVMsVUFBVTtBQUFBLFFBQ2hDLE1BQU07QUFBQSxRQUNOLEtBQUs7QUFBQTtBQUVULFVBQUksUUFBUSxTQUFTO0FBQ3JCLFVBQUksS0FBSyxpQkFBaUIsTUFBTTtBQUM1QixZQUFJLFNBQVM7QUFBQTtBQUVqQixVQUFJLFVBQVUsQ0FBQyxNQUFNO0FBQ2pCLGFBQUssZUFBZTtBQUNwQixhQUFLLHVCQUF1QjtBQUM1QixhQUFLLHFCQUFxQjtBQUMxQixhQUFLLHFCQUFxQjtBQUMxQixhQUFLLG1CQUFtQjtBQUN4QixhQUFLLGVBQWU7QUFDcEIsYUFBSyxrQkFBa0IsU0FBUyxjQUFjO0FBQzlDLGFBQUssZ0JBQWdCLFNBQVMsY0FBYztBQUM1QyxhQUFLO0FBQ0wsYUFBSztBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT1Qsa0JBQWtCLFdBQXdCO0FBQzlDLGNBQVU7QUFDVixRQUFJLENBQUMsS0FBSztBQUFjO0FBQ3hCLFVBQU0sV0FBVyxLQUFLLEdBQUcsbUJBQW1CLEtBQUssY0FBYyxLQUFLLHVCQUF1QixLQUFLLE9BQU8sU0FBUztBQUNoSCxRQUFJLENBQUMsWUFBWSxTQUFTLFdBQVc7QUFBRztBQUN4QyxVQUFNLE9BQU8sVUFBVSxVQUFVLEVBQUUsS0FBSztBQUV4QyxVQUFNLGVBQWUsVUFBVSxTQUFTLFVBQVUsRUFBRSxNQUFNLHVCQUF1QixLQUFLO0FBQ3RGLGlCQUFhLFVBQVUsTUFBTTtBQUN6QixXQUFLLG1CQUFtQixJQUFJLElBQUk7QUFDaEMsV0FBSyxrQkFBa0I7QUFDdkIsV0FBSyxnQkFBZ0IsU0FBUyxjQUFjO0FBQzVDLFdBQUs7QUFBQTtBQUVULGFBQVMsUUFBUSxhQUFXO0FBQ3hCLFlBQU0sTUFBTSxLQUFLLFNBQVMsVUFBVTtBQUFBLFFBQ2hDLE1BQU0sUUFBUTtBQUFBLFFBQ2QsS0FBSztBQUFBO0FBRVQsVUFBSSxLQUFLLGlCQUFpQixJQUFJLFlBQVksS0FBSyx5QkFBeUIsV0FBWSxLQUFLLHNCQUFzQixXQUFXLEtBQUssd0JBQXdCLFdBQVcsS0FBSyxvQkFBcUI7QUFDeEwsWUFBSSxTQUFTO0FBQUE7QUFFakIsVUFBSSxVQUFVLENBQUMsTUFBTTtBQUNqQixZQUFJLEVBQUUsV0FBVyxFQUFFLFNBQVM7QUFDeEIsY0FBSSxLQUFLLGlCQUFpQixJQUFJLFVBQVU7QUFDcEMsaUJBQUssaUJBQWlCLE9BQU87QUFBQSxpQkFDMUI7QUFDSCxpQkFBSyxpQkFBaUIsSUFBSTtBQUFBO0FBQUEsbUJBRXZCLEVBQUUsWUFBWSxLQUFLLHNCQUFzQjtBQUNoRCxnQkFBTSxRQUFRLEtBQUssSUFBSSxLQUFLLHNCQUFzQjtBQUNsRCxnQkFBTSxNQUFNLEtBQUssSUFBSSxLQUFLLHNCQUFzQjtBQUNoRCxtQkFBUyxJQUFJLE9BQU8sS0FBSyxLQUFLLEtBQUs7QUFDL0IsaUJBQUssaUJBQWlCLElBQUk7QUFBQTtBQUFBLGVBRTNCO0FBQ0gsZUFBSyxtQkFBbUIsSUFBSSxJQUFJLENBQUM7QUFBQTtBQUVyQyxhQUFLLHVCQUF1QjtBQUM1QixhQUFLLHFCQUFxQjtBQUMxQixhQUFLLHFCQUFxQjtBQUMxQixhQUFLLG1CQUFtQjtBQUN4QixhQUFLLGtCQUFrQjtBQUN2QixhQUFLLGdCQUFnQixTQUFTLGNBQWM7QUFDNUMsYUFBSztBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT1QsZ0JBQWdCLFdBQXdCO0FBQzVDLGNBQVU7QUFDVixRQUFJLENBQUMsS0FBSyxnQkFBZ0IsQ0FBQyxLQUFLO0FBQXNCO0FBQ3RELFVBQU0sU0FBUyxLQUFLLEdBQUcsb0JBQ25CLEtBQUssY0FDTCxLQUFLLHNCQUNMLEtBQUssdUJBQXVCLEtBQUssT0FBTyxTQUFTO0FBRXJELFFBQUksQ0FBQyxVQUFVLE9BQU8sV0FBVztBQUFHO0FBQ3BDLFVBQU0sT0FBTyxVQUFVLFVBQVUsRUFBRSxLQUFLO0FBRXhDLFVBQU0sZUFBZSxVQUFVLFNBQVMsVUFBVSxFQUFFLE1BQU0scUJBQXFCLEtBQUs7QUFDcEYsaUJBQWEsVUFBVSxNQUFNO0FBQ3pCLFdBQUssaUJBQWlCLElBQUksSUFBSTtBQUM5QixXQUFLLGdCQUFnQjtBQUNyQixXQUFLO0FBQUE7QUFFVCxXQUFPLFFBQVEsV0FBUztBQUNwQixZQUFNLE1BQU0sS0FBSyxTQUFTLFVBQVU7QUFBQSxRQUNoQyxNQUFNLE1BQU07QUFBQSxRQUNaLEtBQUs7QUFBQTtBQUVULFVBQUksS0FBSyxlQUFlLElBQUksVUFBVSxLQUFLLHVCQUF1QixTQUFVLEtBQUssb0JBQW9CLFNBQVMsS0FBSyxzQkFBc0IsU0FBUyxLQUFLLGtCQUFtQjtBQUN0SyxZQUFJLFNBQVM7QUFBQTtBQUVqQixVQUFJLFVBQVUsQ0FBQyxNQUFNO0FBQ2pCLFlBQUksRUFBRSxXQUFXLEVBQUUsU0FBUztBQUN4QixjQUFJLEtBQUssZUFBZSxJQUFJLFFBQVE7QUFDaEMsaUJBQUssZUFBZSxPQUFPO0FBQUEsaUJBQ3hCO0FBQ0gsaUJBQUssZUFBZSxJQUFJO0FBQUE7QUFBQSxtQkFFckIsRUFBRSxZQUFZLEtBQUssb0JBQW9CO0FBQzlDLGdCQUFNLFFBQVEsS0FBSyxJQUFJLEtBQUssb0JBQW9CO0FBQ2hELGdCQUFNLE1BQU0sS0FBSyxJQUFJLEtBQUssb0JBQW9CO0FBQzlDLG1CQUFTLElBQUksT0FBTyxLQUFLLEtBQUssS0FBSztBQUMvQixpQkFBSyxlQUFlLElBQUk7QUFBQTtBQUFBLGVBRXpCO0FBQ0gsZUFBSyxpQkFBaUIsSUFBSSxJQUFJLENBQUM7QUFBQTtBQUVuQyxhQUFLLHFCQUFxQjtBQUMxQixhQUFLLG1CQUFtQjtBQUN4QixhQUFLLGdCQUFnQjtBQUNyQixhQUFLO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLVCxvQ0FBb0M7QUFDeEMsUUFBSSxLQUFLLGdCQUFnQjtBQUNyQixVQUFJLE1BQU07QUFDVixVQUFJLEtBQUssY0FBYztBQUNuQixlQUFPLEtBQUs7QUFDWixZQUFJLEtBQUssaUJBQWlCLE9BQU8sR0FBRztBQUNoQyxnQkFBTSxXQUFXLE1BQU0sS0FBSyxLQUFLLGtCQUFrQixLQUFLLENBQUMsR0FBRyxNQUFNLElBQUk7QUFDdEUsaUJBQU8sTUFBTSxTQUFTLEtBQUs7QUFBQSxtQkFDcEIsS0FBSyxzQkFBc0I7QUFDbEMsaUJBQU8sTUFBTSxLQUFLO0FBQUE7QUFFdEIsWUFBSSxLQUFLLGVBQWUsT0FBTyxHQUFHO0FBQzlCLGdCQUFNLFNBQVMsTUFBTSxLQUFLLEtBQUssZ0JBQWdCLEtBQUssQ0FBQyxHQUFHLE1BQU0sSUFBSTtBQUNsRSxpQkFBTyxNQUFNLE9BQU8sS0FBSztBQUFBLG1CQUNsQixLQUFLLG9CQUFvQjtBQUNoQyxpQkFBTyxNQUFNLEtBQUs7QUFBQTtBQUFBO0FBRzFCLFdBQUssZUFBZSxTQUFTO0FBQUE7QUFBQTtBQUFBLEVBSTdCLHNCQUFzQixXQUF5QjtBQUNuRCxRQUFJLENBQUMsS0FBSztBQUFjO0FBRXhCLFVBQU0sV0FBVyxLQUFLLEdBQUcsbUJBQW1CLEtBQUssY0FBYyxLQUFLLHVCQUF1QixLQUFLLE9BQU8sU0FBUztBQUNoSCxRQUFJLENBQUMsWUFBWSxTQUFTLFdBQVc7QUFBRztBQUV4QyxVQUFNLFNBQVMsYUFBYSxTQUFTLGNBQWM7QUFDbkQsUUFBSSxDQUFDO0FBQVE7QUFDYixXQUFPO0FBQ1AsV0FBTyxTQUFTO0FBR2hCLFFBQUkseUJBQVEsUUFDUCxRQUFRLGlCQUNSLFlBQVksY0FBWTtBQUNyQixZQUFNLGlCQUF5QztBQUMvQyxlQUFTLFFBQVEsYUFBVztBQUN4Qix1QkFBZSxRQUFRLGNBQWMsUUFBUTtBQUFBO0FBRWpELGVBQ0ssV0FBVyxnQkFDWCxTQUFTLEtBQUsscUJBQXFCLFlBQ25DLFNBQVMsV0FBUztBQUNmLGFBQUssdUJBQXVCLFNBQVM7QUFDckMsWUFBSSxDQUFDLEtBQUssc0JBQXNCLEtBQUsscUJBQXFCLEtBQUssc0JBQXNCO0FBQ2pGLGVBQUsscUJBQXFCLEtBQUs7QUFBQTtBQUVuQyxhQUFLLHlCQUF5QjtBQUM5QixhQUFLO0FBQUE7QUFBQTtBQUtyQixTQUFLLHlCQUF5QjtBQUc5QixRQUFJLEtBQUssZ0JBQWdCO0FBQ3JCLFVBQUksTUFBTSxLQUFLLGVBQWUsS0FBSyxlQUFlLE1BQU0sS0FBSyx1QkFBdUI7QUFDcEYsVUFBSSxLQUFLLHNCQUFzQixLQUFLLHVCQUF1QixHQUFHO0FBQzFELGVBQU8sTUFBTSxLQUFLO0FBQ2xCLFlBQUksS0FBSyxvQkFBb0IsS0FBSyxxQkFBcUIsS0FBSyxvQkFBb0I7QUFDNUUsaUJBQU8sTUFBTSxLQUFLO0FBQUE7QUFBQTtBQUcxQixXQUFLLGVBQWUsU0FBUztBQUFBO0FBQUE7QUFBQSxFQUk3Qix5QkFBeUIsV0FBd0I7QUFDckQsUUFBSSxDQUFDLEtBQUs7QUFBYztBQUV4QixVQUFNLFdBQVcsS0FBSyxHQUFHLG1CQUFtQixLQUFLLGNBQWMsS0FBSyx1QkFBdUIsS0FBSyxPQUFPLFNBQVM7QUFDaEgsUUFBSSxDQUFDLFlBQVksU0FBUyxXQUFXO0FBQUc7QUFFeEMsUUFBSSx5QkFBUSxXQUNQLFFBQVEsZUFDUixZQUFZLGNBQVk7QUFDckIsWUFBTSxpQkFBeUM7QUFDL0MsZUFDSyxPQUFPLE9BQUssS0FBSyxLQUFLLHNCQUN0QixRQUFRLGFBQVc7QUFDaEIsdUJBQWUsUUFBUSxjQUFjLFFBQVE7QUFBQTtBQUVyRCxlQUNLLFdBQVcsZ0JBQ1gsU0FBVSxNQUFLLHNCQUFzQixLQUFLLHNCQUFzQixZQUNoRSxTQUFTLFdBQVM7QUFDZixhQUFLLHFCQUFxQixTQUFTO0FBQ25DLGFBQUs7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtqQixvQkFBb0IsV0FBeUI7QUFDakQsUUFBSSxDQUFDLEtBQUssZ0JBQWdCLENBQUMsS0FBSztBQUFzQjtBQUV0RCxVQUFNLFNBQVMsYUFBYSxTQUFTLGNBQWM7QUFDbkQsUUFBSSxDQUFDO0FBQVE7QUFDYixXQUFPO0FBQ1AsV0FBTyxTQUFTO0FBR2hCLFVBQU0sY0FBYyxLQUFLLEdBQUcsb0JBQ3hCLEtBQUssY0FDTCxLQUFLLHNCQUNMLEtBQUssdUJBQXVCLEtBQUssT0FBTyxTQUFTO0FBR3JELFFBQUksZUFBZSxZQUFZLFNBQVMsR0FBRztBQUN2QyxVQUFJLHlCQUFRLFFBQ1AsUUFBUSxlQUNSLFlBQVksY0FBWTtBQUNyQixjQUFNLGVBQXVDO0FBQUEsVUFDekMsS0FBSztBQUFBO0FBRVQsb0JBQVksUUFBUSxXQUFTO0FBQ3pCLHVCQUFhLE1BQU0sY0FBYyxNQUFNO0FBQUE7QUFFM0MsaUJBQ0ssV0FBVyxjQUNYLFNBQVMsS0FBSyxtQkFBbUIsWUFDakMsU0FBUyxXQUFTO0FBQ2YsZ0JBQU0sV0FBVyxTQUFTO0FBQzFCLGVBQUsscUJBQXFCO0FBQzFCLGNBQUksYUFBYSxHQUFHO0FBQ2hCLGlCQUFLLG1CQUFtQjtBQUN4QixpQkFBSyxxQkFBcUI7QUFBQTtBQUU5QixlQUFLLHVCQUF1QjtBQUFBO0FBQUE7QUFBQTtBQU1oRCxRQUFJLEtBQUssdUJBQXVCLEdBQUc7QUFDL0IsV0FBSyx1QkFBdUI7QUFBQTtBQUloQyxRQUFJLEtBQUssZ0JBQWdCO0FBQ3JCLFVBQUksTUFBTSxLQUFLLGVBQWUsS0FBSyxlQUFlLE1BQU0sS0FBSyx1QkFBdUI7QUFDcEYsVUFBSSxLQUFLLHNCQUFzQixLQUFLLHVCQUF1QixHQUFHO0FBQzFELGVBQU8sTUFBTSxLQUFLO0FBQ2xCLFlBQUksS0FBSyxvQkFBb0IsS0FBSyxxQkFBcUIsS0FBSyxvQkFBb0I7QUFDNUUsaUJBQU8sTUFBTSxLQUFLO0FBQUE7QUFBQTtBQUcxQixXQUFLLGVBQWUsU0FBUztBQUFBO0FBQUE7QUFBQSxFQUk3Qix1QkFBdUIsV0FBd0I7QUFDbkQsUUFBSSxLQUFLLHVCQUF1QjtBQUFHO0FBRW5DLFVBQU0sWUFBWSxLQUFLLEdBQUcsb0JBQ3RCLEtBQUssY0FDTCxLQUFLLHNCQUFzQixLQUFLLHNCQUNoQyxLQUFLLHVCQUF1QixLQUFLLE9BQU8sU0FBUztBQUdyRCxRQUFJLENBQUMsYUFBYSxVQUFVLFdBQVc7QUFBRztBQUUxQyxRQUFJLHlCQUFRLFdBQ1AsUUFBUSxhQUNSLFlBQVksY0FBWTtBQUNyQixZQUFNLGVBQXVDO0FBQzdDLFlBQU0sV0FBVyxLQUFLLHVCQUF1QixLQUFLLHVCQUF1QixLQUFLLHFCQUFxQjtBQUNuRyxnQkFDSyxPQUFPLE9BQUssS0FBSyxVQUNqQixRQUFRLFdBQVM7QUFDZCxxQkFBYSxNQUFNLGNBQWMsTUFBTTtBQUFBO0FBRS9DLGVBQ0ssV0FBVyxjQUNYLFNBQVUsTUFBSyxvQkFBb0IsS0FBSyxvQkFBb0IsWUFDNUQsU0FBUyxXQUFTO0FBQ2YsYUFBSyxtQkFBbUIsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLEVBSzdDLHFCQUFxQixXQUF5QjtBQUNsRCxRQUFJLEtBQUssdUJBQXVCO0FBQWE7QUFFN0MsVUFBTSxTQUFTLGFBQWEsU0FBUyxjQUFjO0FBQ25ELFFBQUksQ0FBQztBQUFRO0FBQ2IsV0FBTztBQUNQLFdBQU8sU0FBUztBQUVoQixXQUFPLFNBQVMsTUFBTSxFQUFFLE1BQU07QUFHOUIsUUFBSSx5QkFBUSxRQUNQLFFBQVEsc0JBQ1IsUUFBUSx3Q0FDUixVQUFVLFlBQVUsT0FDaEIsU0FBUyxLQUFLLGdCQUFnQixTQUFTLFVBQ3ZDLFNBQVMsV0FBUztBQUNmLFdBQUssYUFBYSxTQUFTO0FBQzNCLFdBQUssT0FBTyxTQUFTLGVBQWUsQ0FBQyxHQUFHLEtBQUs7QUFDN0MsV0FBSyxPQUFPO0FBQUE7QUFJeEIsUUFBSSx5QkFBUSxRQUNQLFFBQVEsd0JBQ1IsUUFBUSwwQ0FDUixVQUFVLFlBQVUsT0FDaEIsU0FBUyxLQUFLLGdCQUFnQixTQUFTLFlBQ3ZDLFNBQVMsV0FBUztBQUNmLFdBQUssYUFBYSxXQUFXO0FBQzdCLFdBQUssT0FBTyxTQUFTLGVBQWUsQ0FBQyxHQUFHLEtBQUs7QUFDN0MsV0FBSyxPQUFPO0FBQUE7QUFJeEIsUUFBSSx5QkFBUSxRQUNQLFFBQVEsbUJBQ1IsUUFBUSxvQ0FDUixVQUFVLFlBQVUsT0FDaEIsU0FBUyxLQUFLLGdCQUFnQixTQUFTLGFBQ3ZDLFNBQVMsV0FBUztBQUNmLFdBQUssYUFBYSxZQUFZO0FBQzlCLFdBQUssT0FBTyxTQUFTLGVBQWUsQ0FBQyxHQUFHLEtBQUs7QUFDN0MsV0FBSyxPQUFPO0FBQUE7QUFJeEIsUUFBSSx5QkFBUSxRQUNQLFFBQVEscUJBQ1IsUUFBUSxrREFDUixVQUFVLFlBQVUsT0FDaEIsU0FBUyxLQUFLLGdCQUFnQixTQUFTLFNBQ3ZDLFNBQVMsV0FBUztBQUNmLFdBQUssYUFBYSxRQUFRO0FBQzFCLFdBQUssT0FBTyxTQUFTLGVBQWUsQ0FBQyxHQUFHLEtBQUs7QUFDN0MsV0FBSyxPQUFPO0FBQUE7QUFBQTtBQUFBLEVBSXBCLGFBQWEsUUFBZ0IsU0FBa0I7QUFDbkQsUUFBSSxXQUFXLENBQUMsS0FBSyxnQkFBZ0IsU0FBUyxTQUFTO0FBQ25ELFdBQUssZ0JBQWdCLEtBQUs7QUFBQSxlQUNuQixDQUFDLFNBQVM7QUFDakIsV0FBSyxrQkFBa0IsS0FBSyxnQkFBZ0IsT0FBTyxPQUFLLE1BQU07QUFBQTtBQUFBO0FBQUEsRUFNOUQsa0JBQWtCO0FBMW1COUI7QUE0bUJRLFVBQU0sV0FBVyxpQkFBSyxtQkFBTCxtQkFBcUIsZUFBckIsbUJBQWlDO0FBQ2xELFFBQUksQ0FBQyxVQUFVO0FBQ1gsVUFBSSx3QkFBTztBQUNYO0FBQUE7QUFHSixVQUFNLGNBQWMsS0FBSyx1QkFBdUIsS0FBSyxPQUFPLFNBQVM7QUFDckUsUUFBSSxDQUFDLGFBQWE7QUFDZCxVQUFJLHdCQUFPO0FBQ1g7QUFBQTtBQUdKLFNBQUssU0FBUyxVQUFVLGFBQWEsS0FBSyxvQkFBb0IsS0FBSztBQUNuRSxTQUFLO0FBQUE7QUFBQSxFQUlELHFCQUFxQixPQUFlO0FBQ3hDLFFBQUksQ0FBQyxTQUFTLE1BQU0sV0FBVyxJQUFJO0FBQy9CLFdBQUssaUJBQWlCLE1BQU0sVUFBVTtBQUV0QyxXQUFLLGlCQUFpQjtBQUN0QixXQUFLLGVBQWU7QUFDcEI7QUFBQTtBQUdKLFVBQU0sUUFBUSxNQUFNLE1BQU07QUFDMUIsUUFBSSxDQUFDLE9BQU87QUFDUixXQUFLLGlCQUFpQixNQUFNLFVBQVU7QUFDdEMsV0FBSyxpQkFBaUIsY0FBYztBQUNwQztBQUFBO0FBRUosU0FBSyxpQkFBaUIsTUFBTSxVQUFVO0FBQ3RDLFVBQU0sQ0FBQyxFQUFFLE1BQU0sV0FBVztBQUMxQixVQUFNLFdBQVcsS0FBSztBQUN0QixVQUFNLGFBQWEsU0FBUztBQUU1QixVQUFNLFFBQVEsS0FBSyxHQUFHO0FBQ3RCLFVBQU0sWUFBWSxNQUFNLEtBQUssT0FBSyxFQUFFLGtCQUFrQixTQUFTO0FBQy9ELFFBQUksQ0FBQyxXQUFXO0FBQ1osV0FBSyxpQkFBaUIsTUFBTSxVQUFVO0FBQ3RDLFdBQUssaUJBQWlCLGNBQWM7QUFDcEM7QUFBQTtBQUdKLFNBQUssZUFBZTtBQUNwQixTQUFLLHVCQUF1QjtBQUFBO0FBQUE7OztBQzFwQnBDLHVCQUEwRTtBQUMxRSxvQkFBbUM7QUEyQjVCLElBQU0sbUJBQXNDO0FBQUEsRUFDL0Msb0JBQW9CO0FBQUEsRUFDcEIsWUFBWTtBQUFBLEVBQ1oscUJBQXFCO0FBQUEsRUFDckIsY0FBYztBQUFBLEVBQ2QsaUJBQWlCO0FBQUEsRUFDakIsV0FBVztBQUFBLElBQ1AsU0FBUztBQUFBLElBQ1QsU0FBUztBQUFBLElBQ1QsU0FBUztBQUFBLElBQ1QsVUFBVTtBQUFBLElBQ1YsUUFBUTtBQUFBO0FBQUEsRUFFWix3QkFBd0I7QUFBQSxFQUN4Qix3QkFBd0IsQ0FBQyxRQUFRLFdBQVcsU0FBUyxlQUFlLFFBQVEsYUFBYSxZQUFZO0FBQUEsRUFDckcsMEJBQTBCO0FBQUEsRUFDMUIsdUJBQXVCO0FBQUEsRUFDdkIsb0JBQW9CO0FBQUEsRUFDcEIsMkJBQTJCO0FBQUEsRUFDM0IsbUJBQW1CO0FBQUEsRUFDbkIsaUJBQWlCO0FBQUEsRUFDakIsY0FBYztBQUFBO0FBSWxCLElBQU0seUJBQXlCO0FBQUEsRUFDM0IsT0FBTyxFQUFFLE1BQU0sb0NBQW9DLFVBQVUsTUFBTSxVQUFVO0FBQUEsRUFDN0UsT0FBTyxFQUFFLE1BQU0sc0JBQXNCLFVBQVUsTUFBTSxVQUFVO0FBQUEsRUFDL0QsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLFVBQVUsTUFBTSxVQUFVO0FBQUEsRUFDaEUsT0FBTyxFQUFFLE1BQU0sc0NBQXVDLFVBQVUsTUFBTSxVQUFVO0FBQUEsRUFDaEYsT0FBTyxFQUFFLE1BQU0sc0NBQXNDLFVBQVUsTUFBTSxVQUFVO0FBQUEsRUFDL0UsUUFBUSxFQUFFLE1BQU0sK0JBQStCLFVBQVUsTUFBTSxVQUFVO0FBQUEsRUFDekUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLFVBQVUsTUFBTSxVQUFVO0FBQUEsRUFDOUQsV0FBVyxFQUFFLE1BQU0scUNBQXFDLFVBQVUsTUFBTSxVQUFVO0FBQUEsRUFDbEYsWUFBWSxFQUFFLE1BQU0sZ0NBQWdDLFVBQVUsT0FBTyxVQUFVO0FBQUEsRUFDL0UsT0FBTyxFQUFFLE1BQU0seUJBQXlCLFVBQVUsTUFBTSxVQUFVO0FBQUEsRUFDbEUsUUFBUSxFQUFFLE1BQU0sa0NBQWtDLFVBQVUsTUFBTSxVQUFVO0FBQUEsRUFDNUUsUUFBUSxFQUFFLE1BQU0sOEJBQThCLFVBQVUsTUFBTSxVQUFVO0FBQUEsRUFDeEUsVUFBVSxFQUFFLE1BQU0sbUNBQW1DLFVBQVUsTUFBTSxVQUFVO0FBQUEsRUFDL0UsWUFBWSxFQUFFLE1BQU0sZ0RBQWlELFVBQVUsTUFBTSxVQUFVO0FBQUEsRUFDL0YsT0FBTyxFQUFFLE1BQU0sMEJBQTBCLFVBQVUsTUFBTSxVQUFVO0FBQUEsRUFDbkUsU0FBUyxFQUFFLE1BQU0sdUNBQXVDLFVBQVUsTUFBTSxVQUFVO0FBQUEsRUFDbEYsYUFBYSxFQUFFLE1BQU0s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
